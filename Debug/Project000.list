
Project000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009df0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08009f88  08009f88  00019f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fc0  08009fc0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08009fc0  08009fc0  00019fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fc8  08009fc8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fc8  08009fc8  00019fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fcc  08009fcc  00019fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  20000090  0800a05c  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  0800a05c  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fc0  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201f  00000000  00000000  0003107c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  000330a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  000340c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f71  00000000  00000000  00035050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cc8  00000000  00000000  0004bfc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091dc8  00000000  00000000  0005dc89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efa51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a6c  00000000  00000000  000efaa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009f70 	.word	0x08009f70

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08009f70 	.word	0x08009f70

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b96e 	b.w	80010a0 <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f806 	bl	8000ddc <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	4604      	mov	r4, r0
 8000de4:	468c      	mov	ip, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 8083 	bne.w	8000ef2 <__udivmoddi4+0x116>
 8000dec:	428a      	cmp	r2, r1
 8000dee:	4617      	mov	r7, r2
 8000df0:	d947      	bls.n	8000e82 <__udivmoddi4+0xa6>
 8000df2:	fab2 f282 	clz	r2, r2
 8000df6:	b142      	cbz	r2, 8000e0a <__udivmoddi4+0x2e>
 8000df8:	f1c2 0020 	rsb	r0, r2, #32
 8000dfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4097      	lsls	r7, r2
 8000e04:	ea40 0c01 	orr.w	ip, r0, r1
 8000e08:	4094      	lsls	r4, r2
 8000e0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e0e:	0c23      	lsrs	r3, r4, #16
 8000e10:	fbbc f6f8 	udiv	r6, ip, r8
 8000e14:	fa1f fe87 	uxth.w	lr, r7
 8000e18:	fb08 c116 	mls	r1, r8, r6, ip
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f10e 	mul.w	r1, r6, lr
 8000e24:	4299      	cmp	r1, r3
 8000e26:	d909      	bls.n	8000e3c <__udivmoddi4+0x60>
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 8119 	bcs.w	8001064 <__udivmoddi4+0x288>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 8116 	bls.w	8001064 <__udivmoddi4+0x288>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	443b      	add	r3, r7
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x8c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	f080 8105 	bcs.w	8001068 <__udivmoddi4+0x28c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8102 	bls.w	8001068 <__udivmoddi4+0x28c>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6c:	eba4 040e 	sub.w	r4, r4, lr
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa0>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	b902      	cbnz	r2, 8000e86 <__udivmoddi4+0xaa>
 8000e84:	deff      	udf	#255	; 0xff
 8000e86:	fab2 f282 	clz	r2, r2
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d150      	bne.n	8000f30 <__udivmoddi4+0x154>
 8000e8e:	1bcb      	subs	r3, r1, r7
 8000e90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	2601      	movs	r6, #1
 8000e9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e9e:	0c21      	lsrs	r1, r4, #16
 8000ea0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb08 f30c 	mul.w	r3, r8, ip
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d907      	bls.n	8000ec0 <__udivmoddi4+0xe4>
 8000eb0:	1879      	adds	r1, r7, r1
 8000eb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0xe2>
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	f200 80e9 	bhi.w	8001090 <__udivmoddi4+0x2b4>
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	1ac9      	subs	r1, r1, r3
 8000ec2:	b2a3      	uxth	r3, r4
 8000ec4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ecc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed0:	fb08 f800 	mul.w	r8, r8, r0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x10c>
 8000ed8:	193c      	adds	r4, r7, r4
 8000eda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x10a>
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	f200 80d9 	bhi.w	8001098 <__udivmoddi4+0x2bc>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	eba4 0408 	sub.w	r4, r4, r8
 8000eec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef0:	e7bf      	b.n	8000e72 <__udivmoddi4+0x96>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d909      	bls.n	8000f0a <__udivmoddi4+0x12e>
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	f000 80b1 	beq.w	800105e <__udivmoddi4+0x282>
 8000efc:	2600      	movs	r6, #0
 8000efe:	e9c5 0100 	strd	r0, r1, [r5]
 8000f02:	4630      	mov	r0, r6
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	fab3 f683 	clz	r6, r3
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d14a      	bne.n	8000fa8 <__udivmoddi4+0x1cc>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d302      	bcc.n	8000f1c <__udivmoddi4+0x140>
 8000f16:	4282      	cmp	r2, r0
 8000f18:	f200 80b8 	bhi.w	800108c <__udivmoddi4+0x2b0>
 8000f1c:	1a84      	subs	r4, r0, r2
 8000f1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000f22:	2001      	movs	r0, #1
 8000f24:	468c      	mov	ip, r1
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d0a8      	beq.n	8000e7c <__udivmoddi4+0xa0>
 8000f2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f2e:	e7a5      	b.n	8000e7c <__udivmoddi4+0xa0>
 8000f30:	f1c2 0320 	rsb	r3, r2, #32
 8000f34:	fa20 f603 	lsr.w	r6, r0, r3
 8000f38:	4097      	lsls	r7, r2
 8000f3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000f3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f42:	40d9      	lsrs	r1, r3
 8000f44:	4330      	orrs	r0, r6
 8000f46:	0c03      	lsrs	r3, r0, #16
 8000f48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f4c:	fa1f f887 	uxth.w	r8, r7
 8000f50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f58:	fb06 f108 	mul.w	r1, r6, r8
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f62:	d909      	bls.n	8000f78 <__udivmoddi4+0x19c>
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f6a:	f080 808d 	bcs.w	8001088 <__udivmoddi4+0x2ac>
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	f240 808a 	bls.w	8001088 <__udivmoddi4+0x2ac>
 8000f74:	3e02      	subs	r6, #2
 8000f76:	443b      	add	r3, r7
 8000f78:	1a5b      	subs	r3, r3, r1
 8000f7a:	b281      	uxth	r1, r0
 8000f7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f88:	fb00 f308 	mul.w	r3, r0, r8
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d907      	bls.n	8000fa0 <__udivmoddi4+0x1c4>
 8000f90:	1879      	adds	r1, r7, r1
 8000f92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f96:	d273      	bcs.n	8001080 <__udivmoddi4+0x2a4>
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d971      	bls.n	8001080 <__udivmoddi4+0x2a4>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4439      	add	r1, r7
 8000fa0:	1acb      	subs	r3, r1, r3
 8000fa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fa6:	e778      	b.n	8000e9a <__udivmoddi4+0xbe>
 8000fa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000fac:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fb4:	431c      	orrs	r4, r3
 8000fb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fba:	fa01 f306 	lsl.w	r3, r1, r6
 8000fbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fc6:	431f      	orrs	r7, r3
 8000fc8:	0c3b      	lsrs	r3, r7, #16
 8000fca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fce:	fa1f f884 	uxth.w	r8, r4
 8000fd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fda:	fb09 fa08 	mul.w	sl, r9, r8
 8000fde:	458a      	cmp	sl, r1
 8000fe0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fe4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0x220>
 8000fea:	1861      	adds	r1, r4, r1
 8000fec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff0:	d248      	bcs.n	8001084 <__udivmoddi4+0x2a8>
 8000ff2:	458a      	cmp	sl, r1
 8000ff4:	d946      	bls.n	8001084 <__udivmoddi4+0x2a8>
 8000ff6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ffa:	4421      	add	r1, r4
 8000ffc:	eba1 010a 	sub.w	r1, r1, sl
 8001000:	b2bf      	uxth	r7, r7
 8001002:	fbb1 f0fe 	udiv	r0, r1, lr
 8001006:	fb0e 1110 	mls	r1, lr, r0, r1
 800100a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800100e:	fb00 f808 	mul.w	r8, r0, r8
 8001012:	45b8      	cmp	r8, r7
 8001014:	d907      	bls.n	8001026 <__udivmoddi4+0x24a>
 8001016:	19e7      	adds	r7, r4, r7
 8001018:	f100 31ff 	add.w	r1, r0, #4294967295
 800101c:	d22e      	bcs.n	800107c <__udivmoddi4+0x2a0>
 800101e:	45b8      	cmp	r8, r7
 8001020:	d92c      	bls.n	800107c <__udivmoddi4+0x2a0>
 8001022:	3802      	subs	r0, #2
 8001024:	4427      	add	r7, r4
 8001026:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800102a:	eba7 0708 	sub.w	r7, r7, r8
 800102e:	fba0 8902 	umull	r8, r9, r0, r2
 8001032:	454f      	cmp	r7, r9
 8001034:	46c6      	mov	lr, r8
 8001036:	4649      	mov	r1, r9
 8001038:	d31a      	bcc.n	8001070 <__udivmoddi4+0x294>
 800103a:	d017      	beq.n	800106c <__udivmoddi4+0x290>
 800103c:	b15d      	cbz	r5, 8001056 <__udivmoddi4+0x27a>
 800103e:	ebb3 020e 	subs.w	r2, r3, lr
 8001042:	eb67 0701 	sbc.w	r7, r7, r1
 8001046:	fa07 fc0c 	lsl.w	ip, r7, ip
 800104a:	40f2      	lsrs	r2, r6
 800104c:	ea4c 0202 	orr.w	r2, ip, r2
 8001050:	40f7      	lsrs	r7, r6
 8001052:	e9c5 2700 	strd	r2, r7, [r5]
 8001056:	2600      	movs	r6, #0
 8001058:	4631      	mov	r1, r6
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105e:	462e      	mov	r6, r5
 8001060:	4628      	mov	r0, r5
 8001062:	e70b      	b.n	8000e7c <__udivmoddi4+0xa0>
 8001064:	4606      	mov	r6, r0
 8001066:	e6e9      	b.n	8000e3c <__udivmoddi4+0x60>
 8001068:	4618      	mov	r0, r3
 800106a:	e6fd      	b.n	8000e68 <__udivmoddi4+0x8c>
 800106c:	4543      	cmp	r3, r8
 800106e:	d2e5      	bcs.n	800103c <__udivmoddi4+0x260>
 8001070:	ebb8 0e02 	subs.w	lr, r8, r2
 8001074:	eb69 0104 	sbc.w	r1, r9, r4
 8001078:	3801      	subs	r0, #1
 800107a:	e7df      	b.n	800103c <__udivmoddi4+0x260>
 800107c:	4608      	mov	r0, r1
 800107e:	e7d2      	b.n	8001026 <__udivmoddi4+0x24a>
 8001080:	4660      	mov	r0, ip
 8001082:	e78d      	b.n	8000fa0 <__udivmoddi4+0x1c4>
 8001084:	4681      	mov	r9, r0
 8001086:	e7b9      	b.n	8000ffc <__udivmoddi4+0x220>
 8001088:	4666      	mov	r6, ip
 800108a:	e775      	b.n	8000f78 <__udivmoddi4+0x19c>
 800108c:	4630      	mov	r0, r6
 800108e:	e74a      	b.n	8000f26 <__udivmoddi4+0x14a>
 8001090:	f1ac 0c02 	sub.w	ip, ip, #2
 8001094:	4439      	add	r1, r7
 8001096:	e713      	b.n	8000ec0 <__udivmoddi4+0xe4>
 8001098:	3802      	subs	r0, #2
 800109a:	443c      	add	r4, r7
 800109c:	e724      	b.n	8000ee8 <__udivmoddi4+0x10c>
 800109e:	bf00      	nop

080010a0 <__aeabi_idiv0>:
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	0000      	movs	r0, r0
	...

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b0:	f003 f9fa 	bl	80044a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b4:	f000 fa80 	bl	80015b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b8:	f000 fc82 	bl	80019c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80010bc:	f000 fc58 	bl	8001970 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010c0:	f000 fc2a 	bl	8001918 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010c4:	f000 fb0e 	bl	80016e4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010c8:	f000 fb64 	bl	8001794 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010cc:	f000 fbae 	bl	800182c <MX_TIM3_Init>
  MX_I2C1_Init();
 80010d0:	f000 fada 	bl	8001688 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80010d4:	48b0      	ldr	r0, [pc, #704]	; (8001398 <main+0x2f0>)
 80010d6:	f006 fdb5 	bl	8007c44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010da:	213c      	movs	r1, #60	; 0x3c
 80010dc:	48af      	ldr	r0, [pc, #700]	; (800139c <main+0x2f4>)
 80010de:	f006 ffc3 	bl	8008068 <HAL_TIM_Encoder_Start>

	// start PWM
  HAL_TIM_Base_Start(&htim3);
 80010e2:	48af      	ldr	r0, [pc, #700]	; (80013a0 <main+0x2f8>)
 80010e4:	f006 fd54 	bl	8007b90 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010e8:	2100      	movs	r1, #0
 80010ea:	48ad      	ldr	r0, [pc, #692]	; (80013a0 <main+0x2f8>)
 80010ec:	f006 fe66 	bl	8007dbc <HAL_TIM_PWM_Start>

  ///Init Data
  ConverterUnitSystemStructureInit(&CUSSStruc);
 80010f0:	48ac      	ldr	r0, [pc, #688]	; (80013a4 <main+0x2fc>)
 80010f2:	f000 fe7d 	bl	8001df0 <ConverterUnitSystemStructureInit>
  TrajectoryGenerationStructureInit(&TrjStruc, &CUSSStruc);
 80010f6:	49ab      	ldr	r1, [pc, #684]	; (80013a4 <main+0x2fc>)
 80010f8:	48ab      	ldr	r0, [pc, #684]	; (80013a8 <main+0x300>)
 80010fa:	f000 fe91 	bl	8001e20 <TrajectoryGenerationStructureInit>

  VelocityControllerInit(&VelocityPIDController, &TrjStruc);
 80010fe:	49aa      	ldr	r1, [pc, #680]	; (80013a8 <main+0x300>)
 8001100:	48aa      	ldr	r0, [pc, #680]	; (80013ac <main+0x304>)
 8001102:	f000 ff31 	bl	8001f68 <VelocityControllerInit>
  DisplacementControllerInit(&PositionPIDController, &TrjStruc);
 8001106:	49a8      	ldr	r1, [pc, #672]	; (80013a8 <main+0x300>)
 8001108:	48a9      	ldr	r0, [pc, #676]	; (80013b0 <main+0x308>)
 800110a:	f000 ff65 	bl	8001fd8 <DisplacementControllerInit>

  htim1.Instance->CNT = CUSSStruc.PPRxQEI;
 800110e:	4ba3      	ldr	r3, [pc, #652]	; (800139c <main+0x2f4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4aa4      	ldr	r2, [pc, #656]	; (80013a4 <main+0x2fc>)
 8001114:	6852      	ldr	r2, [r2, #4]
 8001116:	625a      	str	r2, [r3, #36]	; 0x24

  ///UART init
  UART2.huart = &huart2;
 8001118:	4ba6      	ldr	r3, [pc, #664]	; (80013b4 <main+0x30c>)
 800111a:	4aa7      	ldr	r2, [pc, #668]	; (80013b8 <main+0x310>)
 800111c:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 800111e:	4ba5      	ldr	r3, [pc, #660]	; (80013b4 <main+0x30c>)
 8001120:	22ff      	movs	r2, #255	; 0xff
 8001122:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8001124:	4ba3      	ldr	r3, [pc, #652]	; (80013b4 <main+0x30c>)
 8001126:	22ff      	movs	r2, #255	; 0xff
 8001128:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 800112a:	48a2      	ldr	r0, [pc, #648]	; (80013b4 <main+0x30c>)
 800112c:	f001 ff50 	bl	8002fd0 <UARTInit>
  UARTResetStart(&UART2);
 8001130:	48a0      	ldr	r0, [pc, #640]	; (80013b4 <main+0x30c>)
 8001132:	f001 ff75 	bl	8003020 <UARTResetStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int16_t inputChar = UARTReadChar(&UART2);
 8001136:	489f      	ldr	r0, [pc, #636]	; (80013b4 <main+0x30c>)
 8001138:	f001 ff96 	bl	8003068 <UARTReadChar>
 800113c:	4603      	mov	r3, r0
 800113e:	80fb      	strh	r3, [r7, #6]
	  if (inputChar != -1)
 8001140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <main+0xae>
	  {
		  Munmunbot_Protocol(inputChar, &UART2);
 800114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114e:	4999      	ldr	r1, [pc, #612]	; (80013b4 <main+0x30c>)
 8001150:	4618      	mov	r0, r3
 8001152:	f002 f871 	bl	8003238 <Munmunbot_Protocol>

	  }

	  switch (Munmunbot_State)
 8001156:	4b99      	ldr	r3, [pc, #612]	; (80013bc <main+0x314>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b06      	cmp	r3, #6
 800115c:	f200 81f3 	bhi.w	8001546 <main+0x49e>
 8001160:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <main+0xc0>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001185 	.word	0x08001185
 800116c:	080011b3 	.word	0x080011b3
 8001170:	080011cf 	.word	0x080011cf
 8001174:	080011e9 	.word	0x080011e9
 8001178:	08001203 	.word	0x08001203
 800117c:	0800135b 	.word	0x0800135b
 8001180:	0800152d 	.word	0x0800152d
	  {
	  	  case STATE_Disconnected:
	  		  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0)
 8001184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001188:	488d      	ldr	r0, [pc, #564]	; (80013c0 <main+0x318>)
 800118a:	f004 f8a5 	bl	80052d8 <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d103      	bne.n	800119c <main+0xf4>
	  		  {
	  			  LAMP_ON(0);
 8001194:	2000      	movs	r0, #0
 8001196:	f002 fcff 	bl	8003b98 <LAMP_ON>
 800119a:	e002      	b.n	80011a2 <main+0xfa>
	  		  }
	  		  else
	  		  {
	  			  LAMP_ON(4);
 800119c:	2004      	movs	r0, #4
 800119e:	f002 fcfb 	bl	8003b98 <LAMP_ON>
	  		  }
	  		  UpdateMunmunBotState();
 80011a2:	f002 fe79 	bl	8003e98 <UpdateMunmunBotState>
	  		  sethomeTrigger = 0;
 80011a6:	4b87      	ldr	r3, [pc, #540]	; (80013c4 <main+0x31c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
	  		  Emergency_switch_trigger();
 80011ac:	f002 fd64 	bl	8003c78 <Emergency_switch_trigger>
	  		  break;
 80011b0:	e1c9      	b.n	8001546 <main+0x49e>

	  	  case STATE_Idle:
	  		  LAMP_ON(1);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f002 fcf0 	bl	8003b98 <LAMP_ON>
	  		  UpdateMunmunBotState();
 80011b8:	f002 fe6e 	bl	8003e98 <UpdateMunmunBotState>
	  		  if ( sethomeTrigger == 1 )
 80011bc:	4b81      	ldr	r3, [pc, #516]	; (80013c4 <main+0x31c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d101      	bne.n	80011c8 <main+0x120>
	  		  {
	  			  Encoder_SetHome_Position();
 80011c4:	f000 fd7e 	bl	8001cc4 <Encoder_SetHome_Position>
	  		  }
	  		  Emergency_switch_trigger();
 80011c8:	f002 fd56 	bl	8003c78 <Emergency_switch_trigger>
		  	  break;
 80011cc:	e1bb      	b.n	8001546 <main+0x49e>

	  	  case STATE_PrepareDATA:
	  		  sethomeTrigger = 0;
 80011ce:	4b7d      	ldr	r3, [pc, #500]	; (80013c4 <main+0x31c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
	  		  UpdateMunmunBotState();
 80011d4:	f002 fe60 	bl	8003e98 <UpdateMunmunBotState>
	  		  LAMP_ON(2);
 80011d8:	2002      	movs	r0, #2
 80011da:	f002 fcdd 	bl	8003b98 <LAMP_ON>
	  		  TrajectoryGenerationPrepareDATA();
 80011de:	f000 ff67 	bl	80020b0 <TrajectoryGenerationPrepareDATA>
	  		  Emergency_switch_trigger();
 80011e2:	f002 fd49 	bl	8003c78 <Emergency_switch_trigger>
		  	  break;
 80011e6:	e1ae      	b.n	8001546 <main+0x49e>

	  	  case STATE_Calculation:
	  		  LAMP_ON(2);
 80011e8:	2002      	movs	r0, #2
 80011ea:	f002 fcd5 	bl	8003b98 <LAMP_ON>
	  		  UpdateMunmunBotState();
 80011ee:	f002 fe53 	bl	8003e98 <UpdateMunmunBotState>
	  		  TrajectoryGenerationCalculation();
 80011f2:	f001 f8b9 	bl	8002368 <TrajectoryGenerationCalculation>
	  		  Munmunbot_State = STATE_Link_Moving;
 80011f6:	4b71      	ldr	r3, [pc, #452]	; (80013bc <main+0x314>)
 80011f8:	2204      	movs	r2, #4
 80011fa:	701a      	strb	r2, [r3, #0]
	  		  Emergency_switch_trigger();
 80011fc:	f002 fd3c 	bl	8003c78 <Emergency_switch_trigger>
	  		  break;
 8001200:	e1a1      	b.n	8001546 <main+0x49e>

	   	  case STATE_Link_Moving:
	   		  LAMP_ON(2);
 8001202:	2002      	movs	r0, #2
 8001204:	f002 fcc8 	bl	8003b98 <LAMP_ON>
	   		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8001208:	f000 fdd8 	bl	8001dbc <micros>
 800120c:	4b66      	ldr	r3, [pc, #408]	; (80013a8 <main+0x300>)
 800120e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001212:	1a84      	subs	r4, r0, r2
 8001214:	eb61 0503 	sbc.w	r5, r1, r3
 8001218:	4b63      	ldr	r3, [pc, #396]	; (80013a8 <main+0x300>)
 800121a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800121e:	429d      	cmp	r5, r3
 8001220:	bf08      	it	eq
 8001222:	4294      	cmpeq	r4, r2
 8001224:	f0c0 8096 	bcc.w	8001354 <main+0x2ac>
	   		  {
	   			  Controlling_the_LINK();
 8001228:	f002 fd80 	bl	8003d2c <Controlling_the_LINK>

	   			  ///////////////////////////////////////////////////////////////////
//	   			  PositionPIDController.OutputFeedback = TrjStruc.AngularDisplacementDesire;
	   			  ///////////////////////////////////////////////////////////////////
	   			  if (PIDTunerMode == 0)
 800122c:	4b66      	ldr	r3, [pc, #408]	; (80013c8 <main+0x320>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d157      	bne.n	80012e4 <main+0x23c>
	   			  {
					  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 8001234:	4b5e      	ldr	r3, [pc, #376]	; (80013b0 <main+0x308>)
 8001236:	ed93 7a08 	vldr	s14, [r3, #32]
 800123a:	4b5b      	ldr	r3, [pc, #364]	; (80013a8 <main+0x300>)
 800123c:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8001240:	4b62      	ldr	r3, [pc, #392]	; (80013cc <main+0x324>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001250:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001258:	d87c      	bhi.n	8001354 <main+0x2ac>
							  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 800125a:	4b55      	ldr	r3, [pc, #340]	; (80013b0 <main+0x308>)
 800125c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001260:	4b51      	ldr	r3, [pc, #324]	; (80013a8 <main+0x300>)
 8001262:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8001266:	4b59      	ldr	r3, [pc, #356]	; (80013cc <main+0x324>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001272:	ee76 7ae7 	vsub.f32	s15, s13, s15
					  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 8001276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127e:	db69      	blt.n	8001354 <main+0x2ac>
							  (Moving_Link_Task_Flag == 1))
 8001280:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <main+0x328>)
 8001282:	781b      	ldrb	r3, [r3, #0]
							  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8001284:	2b01      	cmp	r3, #1
 8001286:	d165      	bne.n	8001354 <main+0x2ac>
					  {
						  if(MovingLinkMode == LMM_Set_Pos_Directly)
 8001288:	4b52      	ldr	r3, [pc, #328]	; (80013d4 <main+0x32c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d111      	bne.n	80012b4 <main+0x20c>
						  {
							Munmunbot_State = STATE_Idle;
 8001290:	4b4a      	ldr	r3, [pc, #296]	; (80013bc <main+0x314>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Not_Set;
 8001296:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <main+0x32c>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
							TrjStruc.Start_Theta =  PositionPIDController.OutputFeedback;
 800129c:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <main+0x308>)
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	4a41      	ldr	r2, [pc, #260]	; (80013a8 <main+0x300>)
 80012a2:	66d3      	str	r3, [r2, #108]	; 0x6c
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80012a4:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <main+0x2f8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2200      	movs	r2, #0
 80012aa:	635a      	str	r2, [r3, #52]	; 0x34
							ACK2Return(&UART2);
 80012ac:	4841      	ldr	r0, [pc, #260]	; (80013b4 <main+0x30c>)
 80012ae:	f001 ffaf 	bl	8003210 <ACK2Return>
 80012b2:	e011      	b.n	80012d8 <main+0x230>
						  }

						  else if ((MovingLinkMode == LMM_Set_Goal_1_Station) || (MovingLinkMode == LMM_Set_Goal_n_Station))
 80012b4:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <main+0x32c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d003      	beq.n	80012c4 <main+0x21c>
 80012bc:	4b45      	ldr	r3, [pc, #276]	; (80013d4 <main+0x32c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d109      	bne.n	80012d8 <main+0x230>
						  {
							Munmunbot_State = STATE_End_Effector_Working;
 80012c4:	4b3d      	ldr	r3, [pc, #244]	; (80013bc <main+0x314>)
 80012c6:	2205      	movs	r2, #5
 80012c8:	701a      	strb	r2, [r3, #0]
							GripperState = 0;
 80012ca:	4b43      	ldr	r3, [pc, #268]	; (80013d8 <main+0x330>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80012d0:	4b33      	ldr	r3, [pc, #204]	; (80013a0 <main+0x2f8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2200      	movs	r2, #0
 80012d6:	635a      	str	r2, [r3, #52]	; 0x34
						  }
//						 TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
//						 TrjStruc.AngularVelocityDesire = 0;
//						 VelocityPIDController.OutputFeedback = 0;
//						 EstimatedAngularAcceration = 0;
						 Moving_Link_Task_Flag = 0;
 80012d8:	4b3d      	ldr	r3, [pc, #244]	; (80013d0 <main+0x328>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
						 PID_Reset();
 80012de:	f002 fc01 	bl	8003ae4 <PID_Reset>
 80012e2:	e037      	b.n	8001354 <main+0x2ac>
					  }
	   			  }
	   			  else if (PIDTunerMode == 1)
 80012e4:	4b38      	ldr	r3, [pc, #224]	; (80013c8 <main+0x320>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d133      	bne.n	8001354 <main+0x2ac>
	   			  {
					  if (Moving_Link_Task_Flag == 1)
 80012ec:	4b38      	ldr	r3, [pc, #224]	; (80013d0 <main+0x328>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d12f      	bne.n	8001354 <main+0x2ac>
					  {
						  PIDTunerMode = 0;
 80012f4:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <main+0x320>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
						  if(MovingLinkMode == LMM_Set_Pos_Directly)
 80012fa:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <main+0x32c>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d111      	bne.n	8001326 <main+0x27e>
						  {
							Munmunbot_State = STATE_Idle;
 8001302:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <main+0x314>)
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Not_Set;
 8001308:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <main+0x32c>)
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
							TrjStruc.Start_Theta =  PositionPIDController.OutputFeedback;
 800130e:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <main+0x308>)
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	4a25      	ldr	r2, [pc, #148]	; (80013a8 <main+0x300>)
 8001314:	66d3      	str	r3, [r2, #108]	; 0x6c
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <main+0x2f8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2200      	movs	r2, #0
 800131c:	635a      	str	r2, [r3, #52]	; 0x34
							ACK2Return(&UART2);
 800131e:	4825      	ldr	r0, [pc, #148]	; (80013b4 <main+0x30c>)
 8001320:	f001 ff76 	bl	8003210 <ACK2Return>
 8001324:	e011      	b.n	800134a <main+0x2a2>
						  }

						  else if ((MovingLinkMode == LMM_Set_Goal_1_Station) || (MovingLinkMode == LMM_Set_Goal_n_Station))
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <main+0x32c>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d003      	beq.n	8001336 <main+0x28e>
 800132e:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <main+0x32c>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b03      	cmp	r3, #3
 8001334:	d109      	bne.n	800134a <main+0x2a2>
						  {
							Munmunbot_State = STATE_End_Effector_Working;
 8001336:	4b21      	ldr	r3, [pc, #132]	; (80013bc <main+0x314>)
 8001338:	2205      	movs	r2, #5
 800133a:	701a      	strb	r2, [r3, #0]
							GripperState = 0;
 800133c:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <main+0x330>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <main+0x2f8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2200      	movs	r2, #0
 8001348:	635a      	str	r2, [r3, #52]	; 0x34
						  }
//						 TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
//						 TrjStruc.AngularVelocityDesire = 0;
//						 VelocityPIDController.OutputFeedback = 0;
//						 EstimatedAngularAcceration = 0;
						 Moving_Link_Task_Flag = 0;
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <main+0x328>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
						 PID_Reset();
 8001350:	f002 fbc8 	bl	8003ae4 <PID_Reset>
					  }
	   			  }
	   		  }
	  		  Emergency_switch_trigger();
 8001354:	f002 fc90 	bl	8003c78 <Emergency_switch_trigger>
	  		  break;
 8001358:	e0f5      	b.n	8001546 <main+0x49e>

	  	  case STATE_End_Effector_Working:
	  		  UpdateMunmunBotState();
 800135a:	f002 fd9d 	bl	8003e98 <UpdateMunmunBotState>
	  		  ///I2C implement
	  		  if(GripperEnable == 1)
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <main+0x334>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	f040 80d8 	bne.w	8001518 <main+0x470>
	  		  {
//	  			if ((hi2c1.State == HAL_I2C_STATE_READY) && (GripperState == 0))
	  			if (GripperState == 0)
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <main+0x330>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d13b      	bne.n	80013e8 <main+0x340>
	  			{
	  				{
	  					uint8_t temp[1] = {0x45};
 8001370:	2345      	movs	r3, #69	; 0x45
 8001372:	713b      	strb	r3, [r7, #4]
	  					HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
 8001374:	1d3a      	adds	r2, r7, #4
 8001376:	2301      	movs	r3, #1
 8001378:	2146      	movs	r1, #70	; 0x46
 800137a:	4819      	ldr	r0, [pc, #100]	; (80013e0 <main+0x338>)
 800137c:	f004 f93a 	bl	80055f4 <HAL_I2C_Master_Transmit_IT>
	  				}
	  				GripperState = 1;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <main+0x330>)
 8001382:	2201      	movs	r2, #1
 8001384:	701a      	strb	r2, [r3, #0]
	  				Timestamp_Gripper = micros();
 8001386:	f000 fd19 	bl	8001dbc <micros>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4915      	ldr	r1, [pc, #84]	; (80013e4 <main+0x33c>)
 8001390:	e9c1 2300 	strd	r2, r3, [r1]
 8001394:	e0c7      	b.n	8001526 <main+0x47e>
 8001396:	bf00      	nop
 8001398:	200005fc 	.word	0x200005fc
 800139c:	200005b4 	.word	0x200005b4
 80013a0:	2000050c 	.word	0x2000050c
 80013a4:	20000308 	.word	0x20000308
 80013a8:	20000278 	.word	0x20000278
 80013ac:	20000238 	.word	0x20000238
 80013b0:	200001f8 	.word	0x200001f8
 80013b4:	200000b8 	.word	0x200000b8
 80013b8:	20000644 	.word	0x20000644
 80013bc:	200000d9 	.word	0x200000d9
 80013c0:	40020400 	.word	0x40020400
 80013c4:	200001e9 	.word	0x200001e9
 80013c8:	20000314 	.word	0x20000314
 80013cc:	20000014 	.word	0x20000014
 80013d0:	200001e8 	.word	0x200001e8
 80013d4:	200001de 	.word	0x200001de
 80013d8:	200001eb 	.word	0x200001eb
 80013dc:	200001ea 	.word	0x200001ea
 80013e0:	200004b8 	.word	0x200004b8
 80013e4:	200001f0 	.word	0x200001f0
	  			}

	  			else if (GripperState != 0)
 80013e8:	4b65      	ldr	r3, [pc, #404]	; (8001580 <main+0x4d8>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 809a 	beq.w	8001526 <main+0x47e>
	  			{
	  				if ((hi2c1.State == HAL_I2C_STATE_READY) && (GripperState == 1))
 80013f2:	4b64      	ldr	r3, [pc, #400]	; (8001584 <main+0x4dc>)
 80013f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b20      	cmp	r3, #32
 80013fc:	d10f      	bne.n	800141e <main+0x376>
 80013fe:	4b60      	ldr	r3, [pc, #384]	; (8001580 <main+0x4d8>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d10b      	bne.n	800141e <main+0x376>
	  				{
	  					{
							uint8_t temp[1] = {0x23};
 8001406:	2323      	movs	r3, #35	; 0x23
 8001408:	703b      	strb	r3, [r7, #0]
							HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
 800140a:	463a      	mov	r2, r7
 800140c:	2301      	movs	r3, #1
 800140e:	2146      	movs	r1, #70	; 0x46
 8001410:	485c      	ldr	r0, [pc, #368]	; (8001584 <main+0x4dc>)
 8001412:	f004 f8ef 	bl	80055f4 <HAL_I2C_Master_Transmit_IT>
						}
	  					GripperState = 2;
 8001416:	4b5a      	ldr	r3, [pc, #360]	; (8001580 <main+0x4d8>)
 8001418:	2202      	movs	r2, #2
 800141a:	701a      	strb	r2, [r3, #0]
 800141c:	e012      	b.n	8001444 <main+0x39c>
	  				}

	  				else if ((hi2c1.State == HAL_I2C_STATE_READY) && ( GripperState == 2 ))
 800141e:	4b59      	ldr	r3, [pc, #356]	; (8001584 <main+0x4dc>)
 8001420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b20      	cmp	r3, #32
 8001428:	d10c      	bne.n	8001444 <main+0x39c>
 800142a:	4b55      	ldr	r3, [pc, #340]	; (8001580 <main+0x4d8>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d108      	bne.n	8001444 <main+0x39c>
	  				{
	  					{
//							uint8_t temp[1] = {0x23};
//							HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
							HAL_I2C_Master_Receive_IT(&hi2c1, ((0x23 << 1) | 0b1), GripperStatus, 1);
 8001432:	2301      	movs	r3, #1
 8001434:	4a54      	ldr	r2, [pc, #336]	; (8001588 <main+0x4e0>)
 8001436:	2147      	movs	r1, #71	; 0x47
 8001438:	4852      	ldr	r0, [pc, #328]	; (8001584 <main+0x4dc>)
 800143a:	f004 f981 	bl	8005740 <HAL_I2C_Master_Receive_IT>
						}
	  					GripperState = 1;
 800143e:	4b50      	ldr	r3, [pc, #320]	; (8001580 <main+0x4d8>)
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
	  				}
	  				if (GripperStatus[0] == 0x12 )
 8001444:	4b50      	ldr	r3, [pc, #320]	; (8001588 <main+0x4e0>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b12      	cmp	r3, #18
 800144a:	d110      	bne.n	800146e <main+0x3c6>
	  				{
	  					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 800144c:	2201      	movs	r2, #1
 800144e:	2102      	movs	r1, #2
 8001450:	484e      	ldr	r0, [pc, #312]	; (800158c <main+0x4e4>)
 8001452:	f003 ff59 	bl	8005308 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8001456:	2201      	movs	r2, #1
 8001458:	2104      	movs	r1, #4
 800145a:	484c      	ldr	r0, [pc, #304]	; (800158c <main+0x4e4>)
 800145c:	f003 ff54 	bl	8005308 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001466:	484a      	ldr	r0, [pc, #296]	; (8001590 <main+0x4e8>)
 8001468:	f003 ff4e 	bl	8005308 <HAL_GPIO_WritePin>
 800146c:	e03d      	b.n	80014ea <main+0x442>
	  				}
	  				else if (GripperStatus[0] == 0x34)
 800146e:	4b46      	ldr	r3, [pc, #280]	; (8001588 <main+0x4e0>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b34      	cmp	r3, #52	; 0x34
 8001474:	d110      	bne.n	8001498 <main+0x3f0>
	  				{
	  					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8001476:	2201      	movs	r2, #1
 8001478:	2102      	movs	r1, #2
 800147a:	4844      	ldr	r0, [pc, #272]	; (800158c <main+0x4e4>)
 800147c:	f003 ff44 	bl	8005308 <HAL_GPIO_WritePin>
	  					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2104      	movs	r1, #4
 8001484:	4841      	ldr	r0, [pc, #260]	; (800158c <main+0x4e4>)
 8001486:	f003 ff3f 	bl	8005308 <HAL_GPIO_WritePin>
	  					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001490:	483f      	ldr	r0, [pc, #252]	; (8001590 <main+0x4e8>)
 8001492:	f003 ff39 	bl	8005308 <HAL_GPIO_WritePin>
 8001496:	e028      	b.n	80014ea <main+0x442>
	  				}
	  				else if (GripperStatus[0] == 0x56)
 8001498:	4b3b      	ldr	r3, [pc, #236]	; (8001588 <main+0x4e0>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b56      	cmp	r3, #86	; 0x56
 800149e:	d110      	bne.n	80014c2 <main+0x41a>
	  				{
	  					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2102      	movs	r1, #2
 80014a4:	4839      	ldr	r0, [pc, #228]	; (800158c <main+0x4e4>)
 80014a6:	f003 ff2f 	bl	8005308 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2104      	movs	r1, #4
 80014ae:	4837      	ldr	r0, [pc, #220]	; (800158c <main+0x4e4>)
 80014b0:	f003 ff2a 	bl	8005308 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ba:	4835      	ldr	r0, [pc, #212]	; (8001590 <main+0x4e8>)
 80014bc:	f003 ff24 	bl	8005308 <HAL_GPIO_WritePin>
 80014c0:	e013      	b.n	80014ea <main+0x442>
	  				}
	  				else if (GripperStatus[0] == 0x78)
 80014c2:	4b31      	ldr	r3, [pc, #196]	; (8001588 <main+0x4e0>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b78      	cmp	r3, #120	; 0x78
 80014c8:	d10f      	bne.n	80014ea <main+0x442>
	  				{
	  					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80014ca:	2201      	movs	r2, #1
 80014cc:	2102      	movs	r1, #2
 80014ce:	482f      	ldr	r0, [pc, #188]	; (800158c <main+0x4e4>)
 80014d0:	f003 ff1a 	bl	8005308 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2104      	movs	r1, #4
 80014d8:	482c      	ldr	r0, [pc, #176]	; (800158c <main+0x4e4>)
 80014da:	f003 ff15 	bl	8005308 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80014de:	2201      	movs	r2, #1
 80014e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e4:	482a      	ldr	r0, [pc, #168]	; (8001590 <main+0x4e8>)
 80014e6:	f003 ff0f 	bl	8005308 <HAL_GPIO_WritePin>
	  				}

	  				if (micros() - Timestamp_Gripper >= 5100000)
 80014ea:	f000 fc67 	bl	8001dbc <micros>
 80014ee:	4b29      	ldr	r3, [pc, #164]	; (8001594 <main+0x4ec>)
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	ebb0 0802 	subs.w	r8, r0, r2
 80014f8:	eb61 0903 	sbc.w	r9, r1, r3
 80014fc:	a31e      	add	r3, pc, #120	; (adr r3, 8001578 <main+0x4d0>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	454b      	cmp	r3, r9
 8001504:	bf08      	it	eq
 8001506:	4542      	cmpeq	r2, r8
 8001508:	d20d      	bcs.n	8001526 <main+0x47e>
					{
						GripperState = 0;
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <main+0x4d8>)
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
						Munmunbot_State = STATE_PrepareDATA;
 8001510:	4b21      	ldr	r3, [pc, #132]	; (8001598 <main+0x4f0>)
 8001512:	2202      	movs	r2, #2
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	e006      	b.n	8001526 <main+0x47e>
					}
	  			}


	  		  }
	  		  else if(GripperEnable == 0)
 8001518:	4b20      	ldr	r3, [pc, #128]	; (800159c <main+0x4f4>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <main+0x47e>
			  {
		  		 Munmunbot_State = STATE_PrepareDATA;
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <main+0x4f0>)
 8001522:	2202      	movs	r2, #2
 8001524:	701a      	strb	r2, [r3, #0]
			  }
	  		  Emergency_switch_trigger();
 8001526:	f002 fba7 	bl	8003c78 <Emergency_switch_trigger>
	  		  break;
 800152a:	e00c      	b.n	8001546 <main+0x49e>

	  	  case STATE_SetHome:
	  		  sethomeTrigger = 0;
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <main+0x4f8>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
	  		  LAMP_ON(2);
 8001532:	2002      	movs	r0, #2
 8001534:	f002 fb30 	bl	8003b98 <LAMP_ON>
	  		  UpdateMunmunBotState();
 8001538:	f002 fcae 	bl	8003e98 <UpdateMunmunBotState>
	  		  SETHOME_StateMachine_Function();
 800153c:	f002 fc5e 	bl	8003dfc <SETHOME_StateMachine_Function>
	  		  Emergency_switch_trigger();
 8001540:	f002 fb9a 	bl	8003c78 <Emergency_switch_trigger>
	  		  break;
 8001544:	bf00      	nop

	  }

	  if ( pidSetZeroFlag != 0 )
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <main+0x4fc>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d010      	beq.n	8001570 <main+0x4c8>
	  {
		  pidSetZeroFlag = 0;
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <main+0x4fc>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <main+0x500>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2200      	movs	r2, #0
 800155a:	635a      	str	r2, [r3, #52]	; 0x34
		  TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <main+0x504>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <main+0x508>)
 8001562:	66d3      	str	r3, [r2, #108]	; 0x6c
		  TrjStruc.AngularVelocityDesire = 0;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <main+0x508>)
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	625a      	str	r2, [r3, #36]	; 0x24
		  PID_Reset();
 800156c:	f002 faba 	bl	8003ae4 <PID_Reset>
	  }



	  UARTTxDumpBuffer(&UART2);
 8001570:	4810      	ldr	r0, [pc, #64]	; (80015b4 <main+0x50c>)
 8001572:	f001 fda3 	bl	80030bc <UARTTxDumpBuffer>
  {
 8001576:	e5de      	b.n	8001136 <main+0x8e>
 8001578:	004dd1df 	.word	0x004dd1df
 800157c:	00000000 	.word	0x00000000
 8001580:	200001eb 	.word	0x200001eb
 8001584:	200004b8 	.word	0x200004b8
 8001588:	200001ec 	.word	0x200001ec
 800158c:	40020400 	.word	0x40020400
 8001590:	40020000 	.word	0x40020000
 8001594:	200001f0 	.word	0x200001f0
 8001598:	200000d9 	.word	0x200000d9
 800159c:	200001ea 	.word	0x200001ea
 80015a0:	200001e9 	.word	0x200001e9
 80015a4:	200000ac 	.word	0x200000ac
 80015a8:	2000050c 	.word	0x2000050c
 80015ac:	200001f8 	.word	0x200001f8
 80015b0:	20000278 	.word	0x20000278
 80015b4:	200000b8 	.word	0x200000b8

080015b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b094      	sub	sp, #80	; 0x50
 80015bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	2230      	movs	r2, #48	; 0x30
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f008 fb5a 	bl	8009c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	4b27      	ldr	r3, [pc, #156]	; (8001680 <SystemClock_Config+0xc8>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	4a26      	ldr	r2, [pc, #152]	; (8001680 <SystemClock_Config+0xc8>)
 80015e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ea:	6413      	str	r3, [r2, #64]	; 0x40
 80015ec:	4b24      	ldr	r3, [pc, #144]	; (8001680 <SystemClock_Config+0xc8>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	4b21      	ldr	r3, [pc, #132]	; (8001684 <SystemClock_Config+0xcc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a20      	ldr	r2, [pc, #128]	; (8001684 <SystemClock_Config+0xcc>)
 8001602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <SystemClock_Config+0xcc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001614:	2302      	movs	r3, #2
 8001616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001618:	2301      	movs	r3, #1
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800161c:	2310      	movs	r3, #16
 800161e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001620:	2302      	movs	r3, #2
 8001622:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001624:	2300      	movs	r3, #0
 8001626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001628:	2308      	movs	r3, #8
 800162a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800162c:	2364      	movs	r3, #100	; 0x64
 800162e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001630:	2302      	movs	r3, #2
 8001632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001634:	2304      	movs	r3, #4
 8001636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	4618      	mov	r0, r3
 800163e:	f005 fde3 	bl	8007208 <HAL_RCC_OscConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001648:	f002 fc44 	bl	8003ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164c:	230f      	movs	r3, #15
 800164e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001650:	2302      	movs	r3, #2
 8001652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	2103      	movs	r1, #3
 8001668:	4618      	mov	r0, r3
 800166a:	f006 f845 	bl	80076f8 <HAL_RCC_ClockConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001674:	f002 fc2e 	bl	8003ed4 <Error_Handler>
  }
}
 8001678:	bf00      	nop
 800167a:	3750      	adds	r7, #80	; 0x50
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40023800 	.word	0x40023800
 8001684:	40007000 	.word	0x40007000

08001688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <MX_I2C1_Init+0x54>)
 800168e:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <MX_I2C1_Init+0x58>)
 8001690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <MX_I2C1_Init+0x54>)
 8001694:	f242 7210 	movw	r2, #10000	; 0x2710
 8001698:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <MX_I2C1_Init+0x54>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_I2C1_Init+0x54>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <MX_I2C1_Init+0x54>)
 80016a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_I2C1_Init+0x54>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_I2C1_Init+0x54>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_I2C1_Init+0x54>)
 80016bc:	2200      	movs	r2, #0
 80016be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_I2C1_Init+0x54>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_I2C1_Init+0x54>)
 80016c8:	f003 fe50 	bl	800536c <HAL_I2C_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80016d2:	f002 fbff 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200004b8 	.word	0x200004b8
 80016e0:	40005400 	.word	0x40005400

080016e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	; 0x30
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ea:	f107 030c 	add.w	r3, r7, #12
 80016ee:	2224      	movs	r2, #36	; 0x24
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f008 fac4 	bl	8009c80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001700:	4b22      	ldr	r3, [pc, #136]	; (800178c <MX_TIM1_Init+0xa8>)
 8001702:	4a23      	ldr	r2, [pc, #140]	; (8001790 <MX_TIM1_Init+0xac>)
 8001704:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <MX_TIM1_Init+0xa8>)
 8001708:	2200      	movs	r2, #0
 800170a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170c:	4b1f      	ldr	r3, [pc, #124]	; (800178c <MX_TIM1_Init+0xa8>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24575;
 8001712:	4b1e      	ldr	r3, [pc, #120]	; (800178c <MX_TIM1_Init+0xa8>)
 8001714:	f645 72ff 	movw	r2, #24575	; 0x5fff
 8001718:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <MX_TIM1_Init+0xa8>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <MX_TIM1_Init+0xa8>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <MX_TIM1_Init+0xa8>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800172c:	2303      	movs	r3, #3
 800172e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001734:	2301      	movs	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800173c:	2302      	movs	r3, #2
 800173e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001744:	2301      	movs	r3, #1
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	4619      	mov	r1, r3
 8001756:	480d      	ldr	r0, [pc, #52]	; (800178c <MX_TIM1_Init+0xa8>)
 8001758:	f006 fbe0 	bl	8007f1c <HAL_TIM_Encoder_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001762:	f002 fbb7 	bl	8003ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	4619      	mov	r1, r3
 8001772:	4806      	ldr	r0, [pc, #24]	; (800178c <MX_TIM1_Init+0xa8>)
 8001774:	f007 fa84 	bl	8008c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800177e:	f002 fba9 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	3730      	adds	r7, #48	; 0x30
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200005b4 	.word	0x200005b4
 8001790:	40010000 	.word	0x40010000

08001794 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179a:	f107 0308 	add.w	r3, r7, #8
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a8:	463b      	mov	r3, r7
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <MX_TIM2_Init+0x94>)
 80017b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <MX_TIM2_Init+0x94>)
 80017ba:	2263      	movs	r2, #99	; 0x63
 80017bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017be:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <MX_TIM2_Init+0x94>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <MX_TIM2_Init+0x94>)
 80017c6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <MX_TIM2_Init+0x94>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <MX_TIM2_Init+0x94>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017d8:	4813      	ldr	r0, [pc, #76]	; (8001828 <MX_TIM2_Init+0x94>)
 80017da:	f006 f989 	bl	8007af0 <HAL_TIM_Base_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017e4:	f002 fb76 	bl	8003ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017ee:	f107 0308 	add.w	r3, r7, #8
 80017f2:	4619      	mov	r1, r3
 80017f4:	480c      	ldr	r0, [pc, #48]	; (8001828 <MX_TIM2_Init+0x94>)
 80017f6:	f006 fe8b 	bl	8008510 <HAL_TIM_ConfigClockSource>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001800:	f002 fb68 	bl	8003ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800180c:	463b      	mov	r3, r7
 800180e:	4619      	mov	r1, r3
 8001810:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_TIM2_Init+0x94>)
 8001812:	f007 fa35 	bl	8008c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800181c:	f002 fb5a 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200005fc 	.word	0x200005fc

0800182c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08e      	sub	sp, #56	; 0x38
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001840:	f107 0320 	add.w	r3, r7, #32
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
 8001858:	615a      	str	r2, [r3, #20]
 800185a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800185c:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <MX_TIM3_Init+0xe4>)
 800185e:	4a2d      	ldr	r2, [pc, #180]	; (8001914 <MX_TIM3_Init+0xe8>)
 8001860:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001862:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <MX_TIM3_Init+0xe4>)
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b29      	ldr	r3, [pc, #164]	; (8001910 <MX_TIM3_Init+0xe4>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800186e:	4b28      	ldr	r3, [pc, #160]	; (8001910 <MX_TIM3_Init+0xe4>)
 8001870:	f242 7210 	movw	r2, #10000	; 0x2710
 8001874:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001876:	4b26      	ldr	r3, [pc, #152]	; (8001910 <MX_TIM3_Init+0xe4>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187c:	4b24      	ldr	r3, [pc, #144]	; (8001910 <MX_TIM3_Init+0xe4>)
 800187e:	2200      	movs	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001882:	4823      	ldr	r0, [pc, #140]	; (8001910 <MX_TIM3_Init+0xe4>)
 8001884:	f006 f934 	bl	8007af0 <HAL_TIM_Base_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800188e:	f002 fb21 	bl	8003ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001898:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800189c:	4619      	mov	r1, r3
 800189e:	481c      	ldr	r0, [pc, #112]	; (8001910 <MX_TIM3_Init+0xe4>)
 80018a0:	f006 fe36 	bl	8008510 <HAL_TIM_ConfigClockSource>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80018aa:	f002 fb13 	bl	8003ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018ae:	4818      	ldr	r0, [pc, #96]	; (8001910 <MX_TIM3_Init+0xe4>)
 80018b0:	f006 fa2a 	bl	8007d08 <HAL_TIM_PWM_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80018ba:	f002 fb0b 	bl	8003ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018c6:	f107 0320 	add.w	r3, r7, #32
 80018ca:	4619      	mov	r1, r3
 80018cc:	4810      	ldr	r0, [pc, #64]	; (8001910 <MX_TIM3_Init+0xe4>)
 80018ce:	f007 f9d7 	bl	8008c80 <HAL_TIMEx_MasterConfigSynchronization>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80018d8:	f002 fafc 	bl	8003ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018dc:	2360      	movs	r3, #96	; 0x60
 80018de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	2200      	movs	r2, #0
 80018f0:	4619      	mov	r1, r3
 80018f2:	4807      	ldr	r0, [pc, #28]	; (8001910 <MX_TIM3_Init+0xe4>)
 80018f4:	f006 fd4e 	bl	8008394 <HAL_TIM_PWM_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80018fe:	f002 fae9 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001902:	4803      	ldr	r0, [pc, #12]	; (8001910 <MX_TIM3_Init+0xe4>)
 8001904:	f002 fbf0 	bl	80040e8 <HAL_TIM_MspPostInit>

}
 8001908:	bf00      	nop
 800190a:	3738      	adds	r7, #56	; 0x38
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	2000050c 	.word	0x2000050c
 8001914:	40000400 	.word	0x40000400

08001918 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <MX_USART2_UART_Init+0x50>)
 800191e:	4a13      	ldr	r2, [pc, #76]	; (800196c <MX_USART2_UART_Init+0x54>)
 8001920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <MX_USART2_UART_Init+0x50>)
 8001924:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <MX_USART2_UART_Init+0x50>)
 800192c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001930:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <MX_USART2_UART_Init+0x50>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <MX_USART2_UART_Init+0x50>)
 800193a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800193e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_USART2_UART_Init+0x50>)
 8001942:	220c      	movs	r2, #12
 8001944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <MX_USART2_UART_Init+0x50>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_USART2_UART_Init+0x50>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_USART2_UART_Init+0x50>)
 8001954:	f007 fa16 	bl	8008d84 <HAL_UART_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800195e:	f002 fab9 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000644 	.word	0x20000644
 800196c:	40004400 	.word	0x40004400

08001970 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <MX_DMA_Init+0x4c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a0f      	ldr	r2, [pc, #60]	; (80019bc <MX_DMA_Init+0x4c>)
 8001980:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <MX_DMA_Init+0x4c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	2010      	movs	r0, #16
 8001998:	f002 fed3 	bl	8004742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800199c:	2010      	movs	r0, #16
 800199e:	f002 feec 	bl	800477a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	2011      	movs	r0, #17
 80019a8:	f002 fecb 	bl	8004742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80019ac:	2011      	movs	r0, #17
 80019ae:	f002 fee4 	bl	800477a <HAL_NVIC_EnableIRQ>

}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800

080019c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	4b5f      	ldr	r3, [pc, #380]	; (8001b58 <MX_GPIO_Init+0x198>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a5e      	ldr	r2, [pc, #376]	; (8001b58 <MX_GPIO_Init+0x198>)
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b5c      	ldr	r3, [pc, #368]	; (8001b58 <MX_GPIO_Init+0x198>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b58      	ldr	r3, [pc, #352]	; (8001b58 <MX_GPIO_Init+0x198>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a57      	ldr	r2, [pc, #348]	; (8001b58 <MX_GPIO_Init+0x198>)
 80019fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b55      	ldr	r3, [pc, #340]	; (8001b58 <MX_GPIO_Init+0x198>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	4b51      	ldr	r3, [pc, #324]	; (8001b58 <MX_GPIO_Init+0x198>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a50      	ldr	r2, [pc, #320]	; (8001b58 <MX_GPIO_Init+0x198>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b4e      	ldr	r3, [pc, #312]	; (8001b58 <MX_GPIO_Init+0x198>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	4b4a      	ldr	r3, [pc, #296]	; (8001b58 <MX_GPIO_Init+0x198>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a49      	ldr	r2, [pc, #292]	; (8001b58 <MX_GPIO_Init+0x198>)
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <MX_GPIO_Init+0x198>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2120      	movs	r1, #32
 8001a4a:	4844      	ldr	r0, [pc, #272]	; (8001b5c <MX_GPIO_Init+0x19c>)
 8001a4c:	f003 fc5c 	bl	8005308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Lamp1_Pin|Lamp2_Pin, GPIO_PIN_SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	2106      	movs	r1, #6
 8001a54:	4842      	ldr	r0, [pc, #264]	; (8001b60 <MX_GPIO_Init+0x1a0>)
 8001a56:	f003 fc57 	bl	8005308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2180      	movs	r1, #128	; 0x80
 8001a5e:	4841      	ldr	r0, [pc, #260]	; (8001b64 <MX_GPIO_Init+0x1a4>)
 8001a60:	f003 fc52 	bl	8005308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Lamp3_GPIO_Port, Lamp3_Pin, GPIO_PIN_SET);
 8001a64:	2201      	movs	r2, #1
 8001a66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a6a:	483c      	ldr	r0, [pc, #240]	; (8001b5c <MX_GPIO_Init+0x19c>)
 8001a6c:	f003 fc4c 	bl	8005308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a76:	4b3c      	ldr	r3, [pc, #240]	; (8001b68 <MX_GPIO_Init+0x1a8>)
 8001a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	4837      	ldr	r0, [pc, #220]	; (8001b64 <MX_GPIO_Init+0x1a4>)
 8001a86:	f003 faa3 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Lamp3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Lamp3_Pin;
 8001a8a:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a90:	2301      	movs	r3, #1
 8001a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	482e      	ldr	r0, [pc, #184]	; (8001b5c <MX_GPIO_Init+0x19c>)
 8001aa4:	f003 fa94 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lamp1_Pin Lamp2_Pin */
  GPIO_InitStruct.Pin = Lamp1_Pin|Lamp2_Pin;
 8001aa8:	2306      	movs	r3, #6
 8001aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4619      	mov	r1, r3
 8001abe:	4828      	ldr	r0, [pc, #160]	; (8001b60 <MX_GPIO_Init+0x1a0>)
 8001ac0:	f003 fa86 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Switch_Signal_Pin */
  GPIO_InitStruct.Pin = Emergency_Switch_Signal_Pin;
 8001ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Switch_Signal_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4821      	ldr	r0, [pc, #132]	; (8001b60 <MX_GPIO_Init+0x1a0>)
 8001ada:	f003 fa79 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Index_Signal_Pin */
  GPIO_InitStruct.Pin = Index_Signal_Pin;
 8001ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ae4:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <MX_GPIO_Init+0x1ac>)
 8001ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Index_Signal_GPIO_Port, &GPIO_InitStruct);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	4619      	mov	r1, r3
 8001af2:	481b      	ldr	r0, [pc, #108]	; (8001b60 <MX_GPIO_Init+0x1a0>)
 8001af4:	f003 fa6c 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afc:	2301      	movs	r3, #1
 8001afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4815      	ldr	r0, [pc, #84]	; (8001b64 <MX_GPIO_Init+0x1a4>)
 8001b10:	f003 fa5e 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LimitSwitchSignal_Pin */
  GPIO_InitStruct.Pin = LimitSwitchSignal_Pin;
 8001b14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b1a:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <MX_GPIO_Init+0x1ac>)
 8001b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LimitSwitchSignal_GPIO_Port, &GPIO_InitStruct);
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4619      	mov	r1, r3
 8001b28:	480e      	ldr	r0, [pc, #56]	; (8001b64 <MX_GPIO_Init+0x1a4>)
 8001b2a:	f003 fa51 	bl	8004fd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	2017      	movs	r0, #23
 8001b34:	f002 fe05 	bl	8004742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b38:	2017      	movs	r0, #23
 8001b3a:	f002 fe1e 	bl	800477a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	2028      	movs	r0, #40	; 0x28
 8001b44:	f002 fdfd 	bl	8004742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b48:	2028      	movs	r0, #40	; 0x28
 8001b4a:	f002 fe16 	bl	800477a <HAL_NVIC_EnableIRQ>

}
 8001b4e:	bf00      	nop
 8001b50:	3728      	adds	r7, #40	; 0x28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40020000 	.word	0x40020000
 8001b60:	40020400 	.word	0x40020400
 8001b64:	40020800 	.word	0x40020800
 8001b68:	10210000 	.word	0x10210000
 8001b6c:	10110000 	.word	0x10110000

08001b70 <EncoderVelocityAndPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 12288
#define  MAX_ENCODER_PERIOD 24576

void EncoderVelocityAndPosition_Update()
{
 8001b70:	b5b0      	push	{r4, r5, r7, lr}
 8001b72:	ed2d 8b02 	vpush	{d8}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0

	static float EncoderLastVelocity = 0;
	static float Velocity_Output = 0;
	static float Acceration_Output = 0;
	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8001b7a:	4b45      	ldr	r3, [pc, #276]	; (8001c90 <EncoderVelocityAndPosition_Update+0x120>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
	uint64_t EncoderNowTimestamp = micros();
 8001b82:	f000 f91b 	bl	8001dbc <micros>
 8001b86:	e9c7 0106 	strd	r0, r1, [r7, #24]

	int32_t EncoderPositionDiff;
	float EncoderVelocityDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8001b8a:	4b42      	ldr	r3, [pc, #264]	; (8001c94 <EncoderVelocityAndPosition_Update+0x124>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b94:	1a84      	subs	r4, r0, r2
 8001b96:	eb61 0503 	sbc.w	r5, r1, r3
 8001b9a:	e9c7 4504 	strd	r4, r5, [r7, #16]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8001b9e:	4b3e      	ldr	r3, [pc, #248]	; (8001c98 <EncoderVelocityAndPosition_Update+0x128>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	60fb      	str	r3, [r7, #12]

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8001ba8:	4a3b      	ldr	r2, [pc, #236]	; (8001c98 <EncoderVelocityAndPosition_Update+0x128>)
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8001bae:	4939      	ldr	r1, [pc, #228]	; (8001c94 <EncoderVelocityAndPosition_Update+0x124>)
 8001bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb4:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity and Encoder Pos
	PositionPIDController.OutputFeedback = EncoderNowPosition;
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	ee07 3a90 	vmov	s15, r3
 8001bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc2:	4b36      	ldr	r3, [pc, #216]	; (8001c9c <EncoderVelocityAndPosition_Update+0x12c>)
 8001bc4:	edc3 7a08 	vstr	s15, [r3, #32]

	// LPF
	Velocity_Output = (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;  /// Pulse per second
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4a35      	ldr	r2, [pc, #212]	; (8001ca0 <EncoderVelocityAndPosition_Update+0x130>)
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	ee07 3a90 	vmov	s15, r3
 8001bd4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001bd8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bdc:	f7ff f8a0 	bl	8000d20 <__aeabi_ul2f>
 8001be0:	ee07 0a10 	vmov	s14, r0
 8001be4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001be8:	4b2e      	ldr	r3, [pc, #184]	; (8001ca4 <EncoderVelocityAndPosition_Update+0x134>)
 8001bea:	edc3 7a00 	vstr	s15, [r3]
	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*299))/300.0;
 8001bee:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <EncoderVelocityAndPosition_Update+0x138>)
 8001bf0:	edd3 7a08 	vldr	s15, [r3, #32]
 8001bf4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001cac <EncoderVelocityAndPosition_Update+0x13c>
 8001bf8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bfc:	4b29      	ldr	r3, [pc, #164]	; (8001ca4 <EncoderVelocityAndPosition_Update+0x134>)
 8001bfe:	edd3 7a00 	vldr	s15, [r3]
 8001c02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c06:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001cb0 <EncoderVelocityAndPosition_Update+0x140>
 8001c0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <EncoderVelocityAndPosition_Update+0x138>)
 8001c10:	edc3 7a08 	vstr	s15, [r3, #32]
//	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*49))/50.0;

	float EncoderNowVelocity = VelocityPIDController.OutputFeedback;
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <EncoderVelocityAndPosition_Update+0x138>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	60bb      	str	r3, [r7, #8]

	EncoderVelocityDiff = EncoderNowVelocity - EncoderLastVelocity;
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <EncoderVelocityAndPosition_Update+0x144>)
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c28:	edc7 7a01 	vstr	s15, [r7, #4]
	EncoderLastVelocity = VelocityPIDController.OutputFeedback;
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <EncoderVelocityAndPosition_Update+0x138>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	4a20      	ldr	r2, [pc, #128]	; (8001cb4 <EncoderVelocityAndPosition_Update+0x144>)
 8001c32:	6013      	str	r3, [r2, #0]

	Acceration_Output = ( EncoderVelocityDiff * 1000000)  / (float) EncoderTimeDiff;
 8001c34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c38:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001cb8 <EncoderVelocityAndPosition_Update+0x148>
 8001c3c:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001c40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c44:	f7ff f86c 	bl	8000d20 <__aeabi_ul2f>
 8001c48:	ee07 0a10 	vmov	s14, r0
 8001c4c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <EncoderVelocityAndPosition_Update+0x14c>)
 8001c52:	edc3 7a00 	vstr	s15, [r3]
	Acceration_Output = (Acceration_Output + (EstimatedAngularAcceration*299))/300.0;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <EncoderVelocityAndPosition_Update+0x150>)
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001cac <EncoderVelocityAndPosition_Update+0x13c>
 8001c60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c64:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <EncoderVelocityAndPosition_Update+0x14c>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c6e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001cb0 <EncoderVelocityAndPosition_Update+0x140>
 8001c72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <EncoderVelocityAndPosition_Update+0x14c>)
 8001c78:	edc3 7a00 	vstr	s15, [r3]
//	Acceration_Output = (Acceration_Output + (EstimatedAngularAcceration*49))/50.0;
	EstimatedAngularAcceration = ( Acceration_Output );
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <EncoderVelocityAndPosition_Update+0x14c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0f      	ldr	r2, [pc, #60]	; (8001cc0 <EncoderVelocityAndPosition_Update+0x150>)
 8001c82:	6013      	str	r3, [r2, #0]

}
 8001c84:	bf00      	nop
 8001c86:	3728      	adds	r7, #40	; 0x28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	ecbd 8b02 	vpop	{d8}
 8001c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c90:	200005b4 	.word	0x200005b4
 8001c94:	20000320 	.word	0x20000320
 8001c98:	20000328 	.word	0x20000328
 8001c9c:	200001f8 	.word	0x200001f8
 8001ca0:	000f4240 	.word	0x000f4240
 8001ca4:	2000032c 	.word	0x2000032c
 8001ca8:	20000238 	.word	0x20000238
 8001cac:	43958000 	.word	0x43958000
 8001cb0:	43960000 	.word	0x43960000
 8001cb4:	20000330 	.word	0x20000330
 8001cb8:	49742400 	.word	0x49742400
 8001cbc:	20000334 	.word	0x20000334
 8001cc0:	20000318 	.word	0x20000318

08001cc4 <Encoder_SetHome_Position>:

void Encoder_SetHome_Position()
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
	HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <Encoder_SetHome_Position+0x18>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <Encoder_SetHome_Position+0x1c>)
 8001cce:	6852      	ldr	r2, [r2, #4]
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	200005b4 	.word	0x200005b4
 8001ce0:	20000308 	.word	0x20000308

08001ce4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce4:	b4b0      	push	{r4, r5, r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a09      	ldr	r2, [pc, #36]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d109      	bne.n	8001d08 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f112 34ff 	adds.w	r4, r2, #4294967295
 8001cfe:	f143 0500 	adc.w	r5, r3, #0
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001d04:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bcb0      	pop	{r4, r5, r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	200005fc 	.word	0x200005fc
 8001d18:	200000b0 	.word	0x200000b0

08001d1c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13) // If The INT Source Is EXTI Line15 -> index  ///13 for test
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d2c:	d118      	bne.n	8001d60 <HAL_GPIO_EXTI_Callback+0x44>
	{
    	if (Munmunbot_State == STATE_SetHome)
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <HAL_GPIO_EXTI_Callback+0x88>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d114      	bne.n	8001d60 <HAL_GPIO_EXTI_Callback+0x44>
    	{
    		if (SethomeMode == SetHomeState_1)
 8001d36:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d110      	bne.n	8001d60 <HAL_GPIO_EXTI_Callback+0x44>
    		{
    			HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_GPIO_EXTI_Callback+0x90>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1b      	ldr	r2, [pc, #108]	; (8001db0 <HAL_GPIO_EXTI_Callback+0x94>)
 8001d44:	6852      	ldr	r2, [r2, #4]
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24
    			SethomeMode = SetHomeState_2;
 8001d48:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	701a      	strb	r2, [r3, #0]
    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2180      	movs	r1, #128	; 0x80
 8001d52:	4818      	ldr	r0, [pc, #96]	; (8001db4 <HAL_GPIO_EXTI_Callback+0x98>)
 8001d54:	f003 fad8 	bl	8005308 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	635a      	str	r2, [r3, #52]	; 0x34
    		}
    	}
	}

    if(GPIO_Pin == GPIO_PIN_8) // LimitSwitch
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d66:	d118      	bne.n	8001d9a <HAL_GPIO_EXTI_Callback+0x7e>
	{
    	if (Munmunbot_State == STATE_SetHome)
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_GPIO_EXTI_Callback+0x88>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b06      	cmp	r3, #6
 8001d6e:	d114      	bne.n	8001d9a <HAL_GPIO_EXTI_Callback+0x7e>
    	{
    		if (SethomeMode == SetHomeState_1)
 8001d70:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d110      	bne.n	8001d9a <HAL_GPIO_EXTI_Callback+0x7e>
    		{
    			HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_GPIO_EXTI_Callback+0x90>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0c      	ldr	r2, [pc, #48]	; (8001db0 <HAL_GPIO_EXTI_Callback+0x94>)
 8001d7e:	6852      	ldr	r2, [r2, #4]
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
    			SethomeMode = SetHomeState_2;
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001d84:	2202      	movs	r2, #2
 8001d86:	701a      	strb	r2, [r3, #0]
    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2180      	movs	r1, #128	; 0x80
 8001d8c:	4809      	ldr	r0, [pc, #36]	; (8001db4 <HAL_GPIO_EXTI_Callback+0x98>)
 8001d8e:	f003 fabb 	bl	8005308 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2200      	movs	r2, #0
 8001d98:	635a      	str	r2, [r3, #52]	; 0x34
    		}
    	}
	}

}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200000d9 	.word	0x200000d9
 8001da8:	200000da 	.word	0x200000da
 8001dac:	200005b4 	.word	0x200005b4
 8001db0:	20000308 	.word	0x20000308
 8001db4:	40020800 	.word	0x40020800
 8001db8:	2000050c 	.word	0x2000050c

08001dbc <micros>:

uint64_t micros()
{
 8001dbc:	b4b0      	push	{r4, r5, r7}
 8001dbe:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <micros+0x2c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f04f 0100 	mov.w	r1, #0
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <micros+0x30>)
 8001dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd2:	1884      	adds	r4, r0, r2
 8001dd4:	eb41 0503 	adc.w	r5, r1, r3
 8001dd8:	4622      	mov	r2, r4
 8001dda:	462b      	mov	r3, r5
}
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bcb0      	pop	{r4, r5, r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	200005fc 	.word	0x200005fc
 8001dec:	200000b0 	.word	0x200000b0

08001df0 <ConverterUnitSystemStructureInit>:

void ConverterUnitSystemStructureInit(ConverterUnitSystemStructure *CUSSvar)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	CUSSvar->PPR = 2048;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dfe:	601a      	str	r2, [r3, #0]
	CUSSvar->PPRxQEI = CUSSvar->PPR * 4;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	009a      	lsls	r2, r3, #2
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	605a      	str	r2, [r3, #4]
	CUSSvar->RPMp = 10;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a03      	ldr	r2, [pc, #12]	; (8001e1c <ConverterUnitSystemStructureInit+0x2c>)
 8001e0e:	609a      	str	r2, [r3, #8]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	41200000 	.word	0x41200000

08001e20 <TrajectoryGenerationStructureInit>:

void TrajectoryGenerationStructureInit(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
	TGSvar->AngularAccerationMax_Setting = (0.4*(CUSSvar->PPRxQEI))/(3.1416*2.0);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb14 	bl	800045c <__aeabi_ui2d>
 8001e34:	a347      	add	r3, pc, #284	; (adr r3, 8001f54 <TrajectoryGenerationStructureInit+0x134>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	f7fe fb89 	bl	8000550 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	a345      	add	r3, pc, #276	; (adr r3, 8001f5c <TrajectoryGenerationStructureInit+0x13c>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe fcaa 	bl	80007a4 <__aeabi_ddiv>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	f7fe fe4a 	bl	8000af0 <__aeabi_d2f>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	615a      	str	r2, [r3, #20]
//	TGSvar->AngularAccerationMax_Setting = (0.5*(CUSSvar->PPRxQEI))/(3.1416*2.0);
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*10)/(60.0);  //pps
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe faf4 	bl	800045c <__aeabi_ui2d>
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	4b33      	ldr	r3, [pc, #204]	; (8001f48 <TrajectoryGenerationStructureInit+0x128>)
 8001e7a:	f7fe fc93 	bl	80007a4 <__aeabi_ddiv>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fe33 	bl	8000af0 <__aeabi_d2f>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	611a      	str	r2, [r3, #16]
	TGSvar->Start_Theta = CUSSStruc.PPRxQEI;  /// PPRxQEI == 0 degree
 8001e90:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <TrajectoryGenerationStructureInit+0x12c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	ee07 3a90 	vmov	s15, r3
 8001e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	TGSvar->Mode = 0;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	TGSvar->Submode = 0;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	TGSvar->Loop_Freq = 1000;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eb8:	659a      	str	r2, [r3, #88]	; 0x58
	TGSvar->Loop_Period = 1000000/(TGSvar->Loop_Freq);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	4a24      	ldr	r2, [pc, #144]	; (8001f50 <TrajectoryGenerationStructureInit+0x130>)
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	edd3 6a04 	vldr	s13, [r3, #16]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	ed93 7a05 	vldr	s14, [r3, #20]
 8001edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	ed93 7a04 	vldr	s14, [r3, #16]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	edd3 7a00 	vldr	s15, [r3]
 8001ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	edc3 7a03 	vstr	s15, [r3, #12]
	TGSvar->AngularVelocityFinalMin = 0*1.8*(CUSSvar->PPRxQEI)/60.0;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe faab 	bl	800045c <__aeabi_ui2d>
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	f7fe fb1f 	bl	8000550 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <TrajectoryGenerationStructureInit+0x128>)
 8001f20:	f7fe fc40 	bl	80007a4 <__aeabi_ddiv>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f7fe fde0 	bl	8000af0 <__aeabi_d2f>
 8001f30:	4602      	mov	r2, r0
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	679a      	str	r2, [r3, #120]	; 0x78
	TGSvar->Alpha = 1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f3c:	67da      	str	r2, [r3, #124]	; 0x7c

}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	404e0000 	.word	0x404e0000
 8001f4c:	20000308 	.word	0x20000308
 8001f50:	000f4240 	.word	0x000f4240
 8001f54:	9999999a 	.word	0x9999999a
 8001f58:	3fd99999 	.word	0x3fd99999
 8001f5c:	2e48e8a7 	.word	0x2e48e8a7
 8001f60:	401921ff 	.word	0x401921ff
 8001f64:	00000000 	.word	0x00000000

08001f68 <VelocityControllerInit>:

void VelocityControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
//	VCvar->Kp = 3;
//	VCvar->Ki = 20;
//	VCvar->Kd = 0.005;

	//Tin
	VCvar->Kp = 5.3;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <VelocityControllerInit+0x60>)
 8001f76:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 15;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <VelocityControllerInit+0x64>)
 8001f7c:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0.06;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a13      	ldr	r2, [pc, #76]	; (8001fd0 <VelocityControllerInit+0x68>)
 8001f82:	609a      	str	r2, [r3, #8]
	VCvar->offSet = 1500;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a13      	ldr	r2, [pc, #76]	; (8001fd4 <VelocityControllerInit+0x6c>)
 8001f88:	611a      	str	r2, [r3, #16]
//	VCvar->offSet = 1800;
	VCvar->Integral_Value = 0;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f7fe faa2 	bl	80004e4 <__aeabi_ul2d>
 8001fa0:	a307      	add	r3, pc, #28	; (adr r3, 8001fc0 <VelocityControllerInit+0x58>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	f7fe fbfd 	bl	80007a4 <__aeabi_ddiv>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	412e8480 	.word	0x412e8480
 8001fc8:	40a9999a 	.word	0x40a9999a
 8001fcc:	41700000 	.word	0x41700000
 8001fd0:	3d75c28f 	.word	0x3d75c28f
 8001fd4:	44bb8000 	.word	0x44bb8000

08001fd8 <DisplacementControllerInit>:

void DisplacementControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
//	VCvar->Kp = 0.5;
//	VCvar->Ki = 4;
//	VCvar->Kd = 0;

	//Tin
	VCvar->Kp = 0.5;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001fe8:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 1.1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a12      	ldr	r2, [pc, #72]	; (8002038 <DisplacementControllerInit+0x60>)
 8001fee:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0.01;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a12      	ldr	r2, [pc, #72]	; (800203c <DisplacementControllerInit+0x64>)
 8001ff4:	609a      	str	r2, [r3, #8]


	VCvar->offSet = 0;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
	VCvar->Integral_Value = 0;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	625a      	str	r2, [r3, #36]	; 0x24
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe fa68 	bl	80004e4 <__aeabi_ul2d>
 8002014:	a306      	add	r3, pc, #24	; (adr r3, 8002030 <DisplacementControllerInit+0x58>)
 8002016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201a:	f7fe fbc3 	bl	80007a4 <__aeabi_ddiv>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	00000000 	.word	0x00000000
 8002034:	412e8480 	.word	0x412e8480
 8002038:	3f8ccccd 	.word	0x3f8ccccd
 800203c:	3c23d70a 	.word	0x3c23d70a

08002040 <TrajectoryGenerationVelocityMaxSetting>:

void TrajectoryGenerationVelocityMaxSetting(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*(CUSSvar->RPMp))/(60.0);   ///RPM to pps
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	edd3 7a02 	vldr	s15, [r3, #8]
 800205c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002060:	eddf 6a11 	vldr	s13, [pc, #68]	; 80020a8 <TrajectoryGenerationVelocityMaxSetting+0x68>
 8002064:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	edc3 7a04 	vstr	s15, [r3, #16]
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	edd3 6a04 	vldr	s13, [r3, #16]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	ed93 7a05 	vldr	s14, [r3, #20]
 800207a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	ed93 7a04 	vldr	s14, [r3, #16]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	42700000 	.word	0x42700000
 80020ac:	00000000 	.word	0x00000000

080020b0 <TrajectoryGenerationPrepareDATA>:

void TrajectoryGenerationPrepareDATA()
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
	// fix start position base on Encoder
	TrjStruc.Start_Theta = htim1.Instance->CNT;
 80020b4:	4b9e      	ldr	r3, [pc, #632]	; (8002330 <TrajectoryGenerationPrepareDATA+0x280>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	ee07 3a90 	vmov	s15, r3
 80020be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c2:	4b9c      	ldr	r3, [pc, #624]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 80020c4:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

	if (MovingLinkMode == LMM_Set_Pos_Directly)
 80020c8:	4b9b      	ldr	r3, [pc, #620]	; (8002338 <TrajectoryGenerationPrepareDATA+0x288>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d165      	bne.n	800219c <TrajectoryGenerationPrepareDATA+0xec>
	  {
		  TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(10000.0*2.0*3.14159));  //pulse
 80020d0:	4b9a      	ldr	r3, [pc, #616]	; (800233c <TrajectoryGenerationPrepareDATA+0x28c>)
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b9a      	ldr	r3, [pc, #616]	; (8002340 <TrajectoryGenerationPrepareDATA+0x290>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	fb03 f302 	mul.w	r3, r3, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe f9bc 	bl	800045c <__aeabi_ui2d>
 80020e4:	a390      	add	r3, pc, #576	; (adr r3, 8002328 <TrajectoryGenerationPrepareDATA+0x278>)
 80020e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ea:	f7fe fb5b 	bl	80007a4 <__aeabi_ddiv>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	f7fe fcfb 	bl	8000af0 <__aeabi_d2f>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4a8d      	ldr	r2, [pc, #564]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 80020fe:	6693      	str	r3, [r2, #104]	; 0x68
		  if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)   ///wrap input into 1 revolute.
 8002100:	4b8c      	ldr	r3, [pc, #560]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 8002102:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002106:	4b8e      	ldr	r3, [pc, #568]	; (8002340 <TrajectoryGenerationPrepareDATA+0x290>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211a:	db0d      	blt.n	8002138 <TrajectoryGenerationPrepareDATA+0x88>
		  {
			 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 800211c:	4b85      	ldr	r3, [pc, #532]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 800211e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002122:	4b87      	ldr	r3, [pc, #540]	; (8002340 <TrajectoryGenerationPrepareDATA+0x290>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	ee07 3a90 	vmov	s15, r3
 800212a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800212e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002132:	4b80      	ldr	r3, [pc, #512]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 8002134:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		  }
		  TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8002138:	4b7e      	ldr	r3, [pc, #504]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 800213a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800213e:	4b80      	ldr	r3, [pc, #512]	; (8002340 <TrajectoryGenerationPrepareDATA+0x290>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800214a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214e:	4b79      	ldr	r3, [pc, #484]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 8002150:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

		  if (TrjStruc.Desire_Theta != TrjStruc.Start_Theta)
 8002154:	4b77      	ldr	r3, [pc, #476]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 8002156:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800215a:	4b76      	ldr	r3, [pc, #472]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 800215c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002160:	eeb4 7a67 	vcmp.f32	s14, s15
 8002164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002168:	d00e      	beq.n	8002188 <TrajectoryGenerationPrepareDATA+0xd8>
		  {
			  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 800216a:	4b72      	ldr	r3, [pc, #456]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 800216c:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002170:	4b70      	ldr	r3, [pc, #448]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 8002172:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217a:	4b6e      	ldr	r3, [pc, #440]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 800217c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
			  Munmunbot_State = STATE_Calculation;
 8002180:	4b70      	ldr	r3, [pc, #448]	; (8002344 <TrajectoryGenerationPrepareDATA+0x294>)
 8002182:	2203      	movs	r2, #3
 8002184:	701a      	strb	r2, [r3, #0]
	  {
		MovingLinkMode = LMM_Not_Set;
		Munmunbot_State = STATE_Idle;
		ACK2Return(&UART2);
	  }
}
 8002186:	e0cd      	b.n	8002324 <TrajectoryGenerationPrepareDATA+0x274>
			Munmunbot_State = STATE_Idle;
 8002188:	4b6e      	ldr	r3, [pc, #440]	; (8002344 <TrajectoryGenerationPrepareDATA+0x294>)
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 800218e:	4b6a      	ldr	r3, [pc, #424]	; (8002338 <TrajectoryGenerationPrepareDATA+0x288>)
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
			ACK2Return(&UART2);
 8002194:	486c      	ldr	r0, [pc, #432]	; (8002348 <TrajectoryGenerationPrepareDATA+0x298>)
 8002196:	f001 f83b 	bl	8003210 <ACK2Return>
}
 800219a:	e0c3      	b.n	8002324 <TrajectoryGenerationPrepareDATA+0x274>
	else if (MovingLinkMode == LMM_Set_Goal_1_Station || MovingLinkMode == LMM_Set_Goal_n_Station )
 800219c:	4b66      	ldr	r3, [pc, #408]	; (8002338 <TrajectoryGenerationPrepareDATA+0x288>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d004      	beq.n	80021ae <TrajectoryGenerationPrepareDATA+0xfe>
 80021a4:	4b64      	ldr	r3, [pc, #400]	; (8002338 <TrajectoryGenerationPrepareDATA+0x288>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	f040 80b1 	bne.w	8002310 <TrajectoryGenerationPrepareDATA+0x260>
		  if (NumberOfStationToGo == 0)
 80021ae:	4b67      	ldr	r3, [pc, #412]	; (800234c <TrajectoryGenerationPrepareDATA+0x29c>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10f      	bne.n	80021d6 <TrajectoryGenerationPrepareDATA+0x126>
				Munmunbot_State = STATE_Idle;
 80021b6:	4b63      	ldr	r3, [pc, #396]	; (8002344 <TrajectoryGenerationPrepareDATA+0x294>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
				NumberOfStationPTR = 0;
 80021bc:	4b64      	ldr	r3, [pc, #400]	; (8002350 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo = 0;
 80021c2:	4b62      	ldr	r3, [pc, #392]	; (800234c <TrajectoryGenerationPrepareDATA+0x29c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
				MovingLinkMode = LMM_Not_Set;
 80021c8:	4b5b      	ldr	r3, [pc, #364]	; (8002338 <TrajectoryGenerationPrepareDATA+0x288>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
				ACK2Return(&UART2);
 80021ce:	485e      	ldr	r0, [pc, #376]	; (8002348 <TrajectoryGenerationPrepareDATA+0x298>)
 80021d0:	f001 f81e 	bl	8003210 <ACK2Return>
		  if (NumberOfStationToGo == 0)
 80021d4:	e0a6      	b.n	8002324 <TrajectoryGenerationPrepareDATA+0x274>
			Current_Station = Angularpos_InputArray[NumberOfStationPTR];
 80021d6:	4b5e      	ldr	r3, [pc, #376]	; (8002350 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	4b5d      	ldr	r3, [pc, #372]	; (8002354 <TrajectoryGenerationPrepareDATA+0x2a4>)
 80021de:	5c9a      	ldrb	r2, [r3, r2]
 80021e0:	4b5d      	ldr	r3, [pc, #372]	; (8002358 <TrajectoryGenerationPrepareDATA+0x2a8>)
 80021e2:	701a      	strb	r2, [r3, #0]
			if (Current_Station > 10)   //pass input
 80021e4:	4b5c      	ldr	r3, [pc, #368]	; (8002358 <TrajectoryGenerationPrepareDATA+0x2a8>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b0a      	cmp	r3, #10
 80021ea:	d90c      	bls.n	8002206 <TrajectoryGenerationPrepareDATA+0x156>
				NumberOfStationPTR += 1;
 80021ec:	4b58      	ldr	r3, [pc, #352]	; (8002350 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	4b56      	ldr	r3, [pc, #344]	; (8002350 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80021f6:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo -= 1;
 80021f8:	4b54      	ldr	r3, [pc, #336]	; (800234c <TrajectoryGenerationPrepareDATA+0x29c>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	4b52      	ldr	r3, [pc, #328]	; (800234c <TrajectoryGenerationPrepareDATA+0x29c>)
 8002202:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8002204:	e08e      	b.n	8002324 <TrajectoryGenerationPrepareDATA+0x274>
				TrjStruc.Desire_Theta = (StationPos[Current_Station-1]*CUSSStruc.PPRxQEI/(360.0))*5.0;   ///fix this if change algorithm
 8002206:	4b54      	ldr	r3, [pc, #336]	; (8002358 <TrajectoryGenerationPrepareDATA+0x2a8>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	3b01      	subs	r3, #1
 800220c:	4a53      	ldr	r2, [pc, #332]	; (800235c <TrajectoryGenerationPrepareDATA+0x2ac>)
 800220e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002212:	461a      	mov	r2, r3
 8002214:	4b4a      	ldr	r3, [pc, #296]	; (8002340 <TrajectoryGenerationPrepareDATA+0x290>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	fb03 f302 	mul.w	r3, r3, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe f91d 	bl	800045c <__aeabi_ui2d>
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	4b4e      	ldr	r3, [pc, #312]	; (8002360 <TrajectoryGenerationPrepareDATA+0x2b0>)
 8002228:	f7fe fabc 	bl	80007a4 <__aeabi_ddiv>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4610      	mov	r0, r2
 8002232:	4619      	mov	r1, r3
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	4b4a      	ldr	r3, [pc, #296]	; (8002364 <TrajectoryGenerationPrepareDATA+0x2b4>)
 800223a:	f7fe f989 	bl	8000550 <__aeabi_dmul>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	f7fe fc53 	bl	8000af0 <__aeabi_d2f>
 800224a:	4603      	mov	r3, r0
 800224c:	4a39      	ldr	r2, [pc, #228]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 800224e:	6693      	str	r3, [r2, #104]	; 0x68
				if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)  ///wrap input into 1 revolute. ///shouldn't happen
 8002250:	4b38      	ldr	r3, [pc, #224]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 8002252:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002256:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <TrajectoryGenerationPrepareDATA+0x290>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	ee07 3a90 	vmov	s15, r3
 800225e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002262:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226a:	db0d      	blt.n	8002288 <TrajectoryGenerationPrepareDATA+0x1d8>
					TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 800226c:	4b31      	ldr	r3, [pc, #196]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 800226e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002272:	4b33      	ldr	r3, [pc, #204]	; (8002340 <TrajectoryGenerationPrepareDATA+0x290>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800227e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002282:	4b2c      	ldr	r3, [pc, #176]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 8002284:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
				TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 800228a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800228e:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <TrajectoryGenerationPrepareDATA+0x290>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	ee07 3a90 	vmov	s15, r3
 8002296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800229a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229e:	4b25      	ldr	r3, [pc, #148]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 80022a0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
				if (TrjStruc.Desire_Theta == TrjStruc.Start_Theta)
 80022a4:	4b23      	ldr	r3, [pc, #140]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 80022a6:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80022aa:	4b22      	ldr	r3, [pc, #136]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 80022ac:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80022b0:	eeb4 7a67 	vcmp.f32	s14, s15
 80022b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b8:	d10f      	bne.n	80022da <TrajectoryGenerationPrepareDATA+0x22a>
					NumberOfStationPTR += 1;
 80022ba:	4b25      	ldr	r3, [pc, #148]	; (8002350 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	3301      	adds	r3, #1
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4b23      	ldr	r3, [pc, #140]	; (8002350 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80022c4:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 80022c6:	4b21      	ldr	r3, [pc, #132]	; (800234c <TrajectoryGenerationPrepareDATA+0x29c>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b1f      	ldr	r3, [pc, #124]	; (800234c <TrajectoryGenerationPrepareDATA+0x29c>)
 80022d0:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_End_Effector_Working;
 80022d2:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <TrajectoryGenerationPrepareDATA+0x294>)
 80022d4:	2205      	movs	r2, #5
 80022d6:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 80022d8:	e024      	b.n	8002324 <TrajectoryGenerationPrepareDATA+0x274>
					TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 80022dc:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 80022e2:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80022e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ea:	4b12      	ldr	r3, [pc, #72]	; (8002334 <TrajectoryGenerationPrepareDATA+0x284>)
 80022ec:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
					Munmunbot_State = STATE_Calculation;
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <TrajectoryGenerationPrepareDATA+0x294>)
 80022f2:	2203      	movs	r2, #3
 80022f4:	701a      	strb	r2, [r3, #0]
					NumberOfStationPTR += 1;
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	3301      	adds	r3, #1
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4b14      	ldr	r3, [pc, #80]	; (8002350 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002300:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <TrajectoryGenerationPrepareDATA+0x29c>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	3b01      	subs	r3, #1
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <TrajectoryGenerationPrepareDATA+0x29c>)
 800230c:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 800230e:	e009      	b.n	8002324 <TrajectoryGenerationPrepareDATA+0x274>
		MovingLinkMode = LMM_Not_Set;
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <TrajectoryGenerationPrepareDATA+0x288>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
		Munmunbot_State = STATE_Idle;
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <TrajectoryGenerationPrepareDATA+0x294>)
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
		ACK2Return(&UART2);
 800231c:	480a      	ldr	r0, [pc, #40]	; (8002348 <TrajectoryGenerationPrepareDATA+0x298>)
 800231e:	f000 ff77 	bl	8003210 <ACK2Return>
}
 8002322:	e7ff      	b.n	8002324 <TrajectoryGenerationPrepareDATA+0x274>
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	99999999 	.word	0x99999999
 800232c:	40eeadf9 	.word	0x40eeadf9
 8002330:	200005b4 	.word	0x200005b4
 8002334:	20000278 	.word	0x20000278
 8002338:	200001de 	.word	0x200001de
 800233c:	200001dc 	.word	0x200001dc
 8002340:	20000308 	.word	0x20000308
 8002344:	200000d9 	.word	0x200000d9
 8002348:	200000b8 	.word	0x200000b8
 800234c:	200001e0 	.word	0x200001e0
 8002350:	200001e1 	.word	0x200001e1
 8002354:	200000dc 	.word	0x200000dc
 8002358:	200001df 	.word	0x200001df
 800235c:	20000000 	.word	0x20000000
 8002360:	40768000 	.word	0x40768000
 8002364:	40140000 	.word	0x40140000

08002368 <TrajectoryGenerationCalculation>:

void TrajectoryGenerationCalculation()
{
 8002368:	b5b0      	push	{r4, r5, r7, lr}
 800236a:	af00      	add	r7, sp, #0
	if (TrjStruc.Delta_Theta < 0)
 800236c:	4b8d      	ldr	r3, [pc, #564]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 800236e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002372:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237a:	d51b      	bpl.n	80023b4 <TrajectoryGenerationCalculation+0x4c>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting * -1;
 800237c:	4b89      	ldr	r3, [pc, #548]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 800237e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002382:	eef1 7a67 	vneg.f32	s15, s15
 8002386:	4b87      	ldr	r3, [pc, #540]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 8002388:	edc3 7a07 	vstr	s15, [r3, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting *-1;
 800238c:	4b85      	ldr	r3, [pc, #532]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 800238e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002392:	eef1 7a67 	vneg.f32	s15, s15
 8002396:	4b83      	ldr	r3, [pc, #524]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 8002398:	edc3 7a06 	vstr	s15, [r3, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta * -1;
 800239c:	4b81      	ldr	r3, [pc, #516]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 800239e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80023a2:	eef1 7a67 	vneg.f32	s15, s15
 80023a6:	4b7f      	ldr	r3, [pc, #508]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80023a8:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
		 TrjStruc.Alpha = -1;
 80023ac:	4b7d      	ldr	r3, [pc, #500]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80023ae:	4a7e      	ldr	r2, [pc, #504]	; (80025a8 <TrajectoryGenerationCalculation+0x240>)
 80023b0:	67da      	str	r2, [r3, #124]	; 0x7c
 80023b2:	e017      	b.n	80023e4 <TrajectoryGenerationCalculation+0x7c>
	  }
	  else if (TrjStruc.Delta_Theta > 0)
 80023b4:	4b7b      	ldr	r3, [pc, #492]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80023b6:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80023ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c2:	dd0f      	ble.n	80023e4 <TrajectoryGenerationCalculation+0x7c>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting;
 80023c4:	4b77      	ldr	r3, [pc, #476]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	4a76      	ldr	r2, [pc, #472]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80023ca:	61d3      	str	r3, [r2, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting;
 80023cc:	4b75      	ldr	r3, [pc, #468]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	4a74      	ldr	r2, [pc, #464]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80023d2:	6193      	str	r3, [r2, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta;
 80023d4:	4b73      	ldr	r3, [pc, #460]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80023d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d8:	4a72      	ldr	r2, [pc, #456]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80023da:	6753      	str	r3, [r2, #116]	; 0x74
		 TrjStruc.Alpha = 1;
 80023dc:	4b71      	ldr	r3, [pc, #452]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80023de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80023e2:	67da      	str	r2, [r3, #124]	; 0x7c
	  }

	  if (TrjStruc.Abs_Delta_Theta < TrjStruc.Theta_min_for_LSPB)   ///Triangular mode0
 80023e4:	4b6f      	ldr	r3, [pc, #444]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80023e6:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80023ea:	4b6e      	ldr	r3, [pc, #440]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80023ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80023f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f8:	d55a      	bpl.n	80024b0 <TrajectoryGenerationCalculation+0x148>
	  {
		 TrjStruc.BlendTimeTriangular = sqrt(TrjStruc.Abs_Delta_Theta/TrjStruc.AngularAccerationMax_Setting);
 80023fa:	4b6a      	ldr	r3, [pc, #424]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80023fc:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002400:	4b68      	ldr	r3, [pc, #416]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 8002402:	edd3 7a05 	vldr	s15, [r3, #20]
 8002406:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800240a:	ee16 0a90 	vmov	r0, s13
 800240e:	f7fe f847 	bl	80004a0 <__aeabi_f2d>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	ec43 2b10 	vmov	d0, r2, r3
 800241a:	f007 fcc1 	bl	8009da0 <sqrt>
 800241e:	ec53 2b10 	vmov	r2, r3, d0
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f7fe fb63 	bl	8000af0 <__aeabi_d2f>
 800242a:	4603      	mov	r3, r0
 800242c:	4a5d      	ldr	r2, [pc, #372]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 800242e:	6053      	str	r3, [r2, #4]
		 TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 8002430:	4b5c      	ldr	r3, [pc, #368]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 8002432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002434:	4a5b      	ldr	r2, [pc, #364]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 8002436:	6293      	str	r3, [r2, #40]	; 0x28
		 TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeTriangular*TrjStruc.BlendTimeTriangular))/2.0) + TrjStruc.Theta_Stamp_0;
 8002438:	4b5a      	ldr	r3, [pc, #360]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 800243a:	ed93 7a07 	vldr	s14, [r3, #28]
 800243e:	4b59      	ldr	r3, [pc, #356]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 8002440:	edd3 6a01 	vldr	s13, [r3, #4]
 8002444:	4b57      	ldr	r3, [pc, #348]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 8002446:	edd3 7a01 	vldr	s15, [r3, #4]
 800244a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800244e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002452:	ee17 0a90 	vmov	r0, s15
 8002456:	f7fe f823 	bl	80004a0 <__aeabi_f2d>
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002462:	f7fe f99f 	bl	80007a4 <__aeabi_ddiv>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4614      	mov	r4, r2
 800246c:	461d      	mov	r5, r3
 800246e:	4b4d      	ldr	r3, [pc, #308]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe f814 	bl	80004a0 <__aeabi_f2d>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4620      	mov	r0, r4
 800247e:	4629      	mov	r1, r5
 8002480:	f7fd feb0 	bl	80001e4 <__adddf3>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4610      	mov	r0, r2
 800248a:	4619      	mov	r1, r3
 800248c:	f7fe fb30 	bl	8000af0 <__aeabi_d2f>
 8002490:	4603      	mov	r3, r0
 8002492:	4a44      	ldr	r2, [pc, #272]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 8002494:	62d3      	str	r3, [r2, #44]	; 0x2c
		 TrjStruc.Mode = 0;
 8002496:	4b43      	ldr	r3, [pc, #268]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 8002498:	2200      	movs	r2, #0
 800249a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		 TrjStruc.Submode = 0;
 800249e:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		 TrjStruc.Subsubmode = 0;
 80024a6:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80024ae:	e069      	b.n	8002584 <TrajectoryGenerationCalculation+0x21c>
	  }
	  else if (TrjStruc.Abs_Delta_Theta >= TrjStruc.Theta_min_for_LSPB)  ///LSPB mode1
 80024b0:	4b3c      	ldr	r3, [pc, #240]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80024b2:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80024b6:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80024b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80024bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c4:	db5e      	blt.n	8002584 <TrajectoryGenerationCalculation+0x21c>
	  {
		  TrjStruc.LinearTimeLSPB = (TrjStruc.Abs_Delta_Theta-TrjStruc.Theta_min_for_LSPB)/TrjStruc.AngularVelocityMax_Setting;
 80024c6:	4b37      	ldr	r3, [pc, #220]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80024c8:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80024cc:	4b35      	ldr	r3, [pc, #212]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80024ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80024d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024d6:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80024d8:	ed93 7a04 	vldr	s14, [r3, #16]
 80024dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e0:	4b30      	ldr	r3, [pc, #192]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80024e2:	edc3 7a02 	vstr	s15, [r3, #8]
		  TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 80024e6:	4b2f      	ldr	r3, [pc, #188]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80024e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ea:	4a2e      	ldr	r2, [pc, #184]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80024ec:	6293      	str	r3, [r2, #40]	; 0x28
		  TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeLSPB*TrjStruc.BlendTimeLSPB))/2.0) + TrjStruc.Theta_Stamp_0;
 80024ee:	4b2d      	ldr	r3, [pc, #180]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80024f0:	ed93 7a07 	vldr	s14, [r3, #28]
 80024f4:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80024f6:	edd3 6a00 	vldr	s13, [r3]
 80024fa:	4b2a      	ldr	r3, [pc, #168]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 80024fc:	edd3 7a00 	vldr	s15, [r3]
 8002500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002508:	ee17 0a90 	vmov	r0, s15
 800250c:	f7fd ffc8 	bl	80004a0 <__aeabi_f2d>
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002518:	f7fe f944 	bl	80007a4 <__aeabi_ddiv>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4614      	mov	r4, r2
 8002522:	461d      	mov	r5, r3
 8002524:	4b1f      	ldr	r3, [pc, #124]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	4618      	mov	r0, r3
 800252a:	f7fd ffb9 	bl	80004a0 <__aeabi_f2d>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4620      	mov	r0, r4
 8002534:	4629      	mov	r1, r5
 8002536:	f7fd fe55 	bl	80001e4 <__adddf3>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4610      	mov	r0, r2
 8002540:	4619      	mov	r1, r3
 8002542:	f7fe fad5 	bl	8000af0 <__aeabi_d2f>
 8002546:	4603      	mov	r3, r0
 8002548:	4a16      	ldr	r2, [pc, #88]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 800254a:	62d3      	str	r3, [r2, #44]	; 0x2c
		  TrjStruc.Theta_Stamp_2 = (TrjStruc.AngularVelocity*TrjStruc.LinearTimeLSPB) + TrjStruc.Theta_Stamp_1;
 800254c:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 800254e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 8002554:	edd3 7a02 	vldr	s15, [r3, #8]
 8002558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 800255e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 8002568:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		  TrjStruc.Mode = 1;
 800256c:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 800256e:	2201      	movs	r2, #1
 8002570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		  TrjStruc.Submode = 0;
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 8002576:	2200      	movs	r2, #0
 8002578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		  TrjStruc.Subsubmode = 0;
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 800257e:	2200      	movs	r2, #0
 8002580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  }
	 TrjStruc.Equation_Timestamp = micros();
 8002584:	f7ff fc1a 	bl	8001dbc <micros>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4905      	ldr	r1, [pc, #20]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 800258e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 TrjStruc.Loop_Timestamp = micros();
 8002592:	f7ff fc13 	bl	8001dbc <micros>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4902      	ldr	r1, [pc, #8]	; (80025a4 <TrajectoryGenerationCalculation+0x23c>)
 800259c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80025a0:	bf00      	nop
 80025a2:	bdb0      	pop	{r4, r5, r7, pc}
 80025a4:	20000278 	.word	0x20000278
 80025a8:	bf800000 	.word	0xbf800000
 80025ac:	00000000 	.word	0x00000000

080025b0 <TrajectoryGenerationProcess>:

void TrajectoryGenerationProcess()
{
 80025b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b4:	ed2d 8b02 	vpush	{d8}
 80025b8:	b091      	sub	sp, #68	; 0x44
 80025ba:	af00      	add	r7, sp, #0

	TrjStruc.Equation_Realtime_Sec = (micros()-TrjStruc.Equation_Timestamp)/1000000.0;
 80025bc:	f7ff fbfe 	bl	8001dbc <micros>
 80025c0:	4ba3      	ldr	r3, [pc, #652]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 80025c2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80025c6:	1a84      	subs	r4, r0, r2
 80025c8:	eb61 0503 	sbc.w	r5, r1, r3
 80025cc:	4620      	mov	r0, r4
 80025ce:	4629      	mov	r1, r5
 80025d0:	f7fd ff88 	bl	80004e4 <__aeabi_ul2d>
 80025d4:	a39c      	add	r3, pc, #624	; (adr r3, 8002848 <TrajectoryGenerationProcess+0x298>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f7fe f8e3 	bl	80007a4 <__aeabi_ddiv>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	4b9a      	ldr	r3, [pc, #616]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 80025e8:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38

	 switch (TrjStruc.Mode)
 80025ec:	4b98      	ldr	r3, [pc, #608]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 80025ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	f000 83b0 	beq.w	8002d58 <TrajectoryGenerationProcess+0x7a8>
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	f200 83bc 	bhi.w	8002d76 <TrajectoryGenerationProcess+0x7c6>
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <TrajectoryGenerationProcess+0x5a>
 8002602:	2b01      	cmp	r3, #1
 8002604:	f000 81b8 	beq.w	8002978 <TrajectoryGenerationProcess+0x3c8>
			  Moving_Link_Task_Flag = 1;
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
			  TrjStruc.AngularVelocityDesire = 0;
			  break;
		  }
}
 8002608:	e3b5      	b.n	8002d76 <TrajectoryGenerationProcess+0x7c6>
			  if (TrjStruc.Submode == 0)
 800260a:	4b91      	ldr	r3, [pc, #580]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 800260c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002610:	2b00      	cmp	r3, #0
 8002612:	d16f      	bne.n	80026f4 <TrajectoryGenerationProcess+0x144>
						  ((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002614:	4b8e      	ldr	r3, [pc, #568]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd ff41 	bl	80004a0 <__aeabi_f2d>
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	4b8c      	ldr	r3, [pc, #560]	; (8002854 <TrajectoryGenerationProcess+0x2a4>)
 8002624:	f7fd ff94 	bl	8000550 <__aeabi_dmul>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4614      	mov	r4, r2
 800262e:	461d      	mov	r5, r3
 8002630:	4b87      	ldr	r3, [pc, #540]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 8002632:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002636:	4b86      	ldr	r3, [pc, #536]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 8002638:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800263c:	f7fd ff88 	bl	8000550 <__aeabi_dmul>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4620      	mov	r0, r4
 8002646:	4629      	mov	r1, r5
 8002648:	f7fd ff82 	bl	8000550 <__aeabi_dmul>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4614      	mov	r4, r2
 8002652:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_0;
 8002654:	4b7e      	ldr	r3, [pc, #504]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	4618      	mov	r0, r3
 800265a:	f7fd ff21 	bl	80004a0 <__aeabi_f2d>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4620      	mov	r0, r4
 8002664:	4629      	mov	r1, r5
 8002666:	f7fd fdbd 	bl	80001e4 <__adddf3>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	f7fe fa3d 	bl	8000af0 <__aeabi_d2f>
 8002676:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002678:	4a75      	ldr	r2, [pc, #468]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 800267a:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularAcceration * TrjStruc.Equation_Realtime_Sec;
 800267c:	4b74      	ldr	r3, [pc, #464]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd ff0d 	bl	80004a0 <__aeabi_f2d>
 8002686:	4b72      	ldr	r3, [pc, #456]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 8002688:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800268c:	f7fd ff60 	bl	8000550 <__aeabi_dmul>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4610      	mov	r0, r2
 8002696:	4619      	mov	r1, r3
 8002698:	f7fe fa2a 	bl	8000af0 <__aeabi_d2f>
 800269c:	4603      	mov	r3, r0
 800269e:	4a6c      	ldr	r2, [pc, #432]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 80026a0:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 80026a2:	f7ff fb8b 	bl	8001dbc <micros>
 80026a6:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 80026a8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80026ac:	1a84      	subs	r4, r0, r2
 80026ae:	63bc      	str	r4, [r7, #56]	; 0x38
 80026b0:	eb61 0303 	sbc.w	r3, r1, r3
 80026b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026b6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80026ba:	f7fe fb31 	bl	8000d20 <__aeabi_ul2f>
 80026be:	ee06 0a90 	vmov	s13, r0
 80026c2:	4b63      	ldr	r3, [pc, #396]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 80026c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80026c8:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002858 <TrajectoryGenerationProcess+0x2a8>
 80026cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026d0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80026d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d8:	da00      	bge.n	80026dc <TrajectoryGenerationProcess+0x12c>
			  break;
 80026da:	e349      	b.n	8002d70 <TrajectoryGenerationProcess+0x7c0>
					  TrjStruc.Equation_Timestamp = micros();
 80026dc:	f7ff fb6e 	bl	8001dbc <micros>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	495a      	ldr	r1, [pc, #360]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 80026e6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 1;
 80026ea:	4b59      	ldr	r3, [pc, #356]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 80026f2:	e33d      	b.n	8002d70 <TrajectoryGenerationProcess+0x7c0>
			  else if (TrjStruc.Submode == 1)
 80026f4:	4b56      	ldr	r3, [pc, #344]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 80026f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	f040 8338 	bne.w	8002d70 <TrajectoryGenerationProcess+0x7c0>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002700:	4b53      	ldr	r3, [pc, #332]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd fecb 	bl	80004a0 <__aeabi_f2d>
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	4b53      	ldr	r3, [pc, #332]	; (800285c <TrajectoryGenerationProcess+0x2ac>)
 8002710:	f7fd ff1e 	bl	8000550 <__aeabi_dmul>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4614      	mov	r4, r2
 800271a:	461d      	mov	r5, r3
 800271c:	4b4c      	ldr	r3, [pc, #304]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 800271e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002722:	4b4b      	ldr	r3, [pc, #300]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 8002724:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002728:	f7fd ff12 	bl	8000550 <__aeabi_dmul>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4620      	mov	r0, r4
 8002732:	4629      	mov	r1, r5
 8002734:	f7fd ff0c 	bl	8000550 <__aeabi_dmul>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4614      	mov	r4, r2
 800273e:	461d      	mov	r5, r3
						  + (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular*(TrjStruc.Equation_Realtime_Sec))
 8002740:	4b43      	ldr	r3, [pc, #268]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 8002742:	ed93 7a07 	vldr	s14, [r3, #28]
 8002746:	4b42      	ldr	r3, [pc, #264]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 8002748:	edd3 7a01 	vldr	s15, [r3, #4]
 800274c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002750:	ee17 0a90 	vmov	r0, s15
 8002754:	f7fd fea4 	bl	80004a0 <__aeabi_f2d>
 8002758:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 800275a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800275e:	f7fd fef7 	bl	8000550 <__aeabi_dmul>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4620      	mov	r0, r4
 8002768:	4629      	mov	r1, r5
 800276a:	f7fd fd3b 	bl	80001e4 <__adddf3>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4614      	mov	r4, r2
 8002774:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_1;
 8002776:	4b36      	ldr	r3, [pc, #216]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	4618      	mov	r0, r3
 800277c:	f7fd fe90 	bl	80004a0 <__aeabi_f2d>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4620      	mov	r0, r4
 8002786:	4629      	mov	r1, r5
 8002788:	f7fd fd2c 	bl	80001e4 <__adddf3>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	f7fe f9ac 	bl	8000af0 <__aeabi_d2f>
 8002798:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 800279a:	4a2d      	ldr	r2, [pc, #180]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 800279c:	6213      	str	r3, [r2, #32]
				  if ( TrjStruc.Subsubmode == 0 )
 800279e:	4b2c      	ldr	r3, [pc, #176]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d15b      	bne.n	8002860 <TrajectoryGenerationProcess+0x2b0>
					  TrjStruc.AngularVelocityDesire = ( -1.0*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec ) +
 80027a8:	4b29      	ldr	r3, [pc, #164]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fd fe77 	bl	80004a0 <__aeabi_f2d>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	633a      	str	r2, [r7, #48]	; 0x30
 80027b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80027bc:	637b      	str	r3, [r7, #52]	; 0x34
 80027be:	4b24      	ldr	r3, [pc, #144]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 80027c0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80027c4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80027c8:	f7fd fec2 	bl	8000550 <__aeabi_dmul>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4614      	mov	r4, r2
 80027d2:	461d      	mov	r5, r3
													   (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular);
 80027d4:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 80027d6:	ed93 7a07 	vldr	s14, [r3, #28]
 80027da:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 80027dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80027e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e4:	ee17 0a90 	vmov	r0, s15
 80027e8:	f7fd fe5a 	bl	80004a0 <__aeabi_f2d>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
					  TrjStruc.AngularVelocityDesire = ( -1.0*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec ) +
 80027f0:	4620      	mov	r0, r4
 80027f2:	4629      	mov	r1, r5
 80027f4:	f7fd fcf6 	bl	80001e4 <__adddf3>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f7fe f976 	bl	8000af0 <__aeabi_d2f>
 8002804:	4603      	mov	r3, r0
 8002806:	4a12      	ldr	r2, [pc, #72]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 8002808:	6253      	str	r3, [r2, #36]	; 0x24
					  if ( TrjStruc.Alpha * TrjStruc.AngularVelocityDesire <= TrjStruc.AngularVelocityFinalMin )
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 800280c:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002810:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 8002812:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800281a:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 800281c:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002820:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002828:	d875      	bhi.n	8002916 <TrajectoryGenerationProcess+0x366>
						  TrjStruc.Subsubmode = 1;
 800282a:	4b09      	ldr	r3, [pc, #36]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 800282c:	2201      	movs	r2, #1
 800282e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						  TrjStruc.Velocity_Timestamp = micros();
 8002832:	f7ff fac3 	bl	8001dbc <micros>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4905      	ldr	r1, [pc, #20]	; (8002850 <TrajectoryGenerationProcess+0x2a0>)
 800283c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8002840:	e069      	b.n	8002916 <TrajectoryGenerationProcess+0x366>
 8002842:	bf00      	nop
 8002844:	f3af 8000 	nop.w
 8002848:	00000000 	.word	0x00000000
 800284c:	412e8480 	.word	0x412e8480
 8002850:	20000278 	.word	0x20000278
 8002854:	3fe00000 	.word	0x3fe00000
 8002858:	49742400 	.word	0x49742400
 800285c:	bfe00000 	.word	0xbfe00000
				  else if ( TrjStruc.Subsubmode == 1 )
 8002860:	4ba9      	ldr	r3, [pc, #676]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	2b01      	cmp	r3, #1
 8002868:	d14c      	bne.n	8002904 <TrajectoryGenerationProcess+0x354>
					  TrjStruc.AngularVelocityDesire = TrjStruc.Alpha * TrjStruc.AngularVelocityFinalMin;
 800286a:	4ba7      	ldr	r3, [pc, #668]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 800286c:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002870:	4ba5      	ldr	r3, [pc, #660]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002872:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287a:	4ba3      	ldr	r3, [pc, #652]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 800287c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					  if (micros()-TrjStruc.Velocity_Timestamp >= ((TrjStruc.BlendTimeTriangular*1000000)-(TrjStruc.Velocity_Timestamp - TrjStruc.Equation_Timestamp))/2.0)
 8002880:	f7ff fa9c 	bl	8001dbc <micros>
 8002884:	4ba0      	ldr	r3, [pc, #640]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002886:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800288a:	1a84      	subs	r4, r0, r2
 800288c:	62bc      	str	r4, [r7, #40]	; 0x28
 800288e:	eb61 0303 	sbc.w	r3, r1, r3
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002894:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002898:	f7fd fe24 	bl	80004e4 <__aeabi_ul2d>
 800289c:	4604      	mov	r4, r0
 800289e:	460d      	mov	r5, r1
 80028a0:	4b99      	ldr	r3, [pc, #612]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 80028a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80028a6:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8002b0c <TrajectoryGenerationProcess+0x55c>
 80028aa:	ee27 8a87 	vmul.f32	s16, s15, s14
 80028ae:	4b96      	ldr	r3, [pc, #600]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 80028b0:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80028b4:	4b94      	ldr	r3, [pc, #592]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 80028b6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80028ba:	1a86      	subs	r6, r0, r2
 80028bc:	623e      	str	r6, [r7, #32]
 80028be:	eb61 0303 	sbc.w	r3, r1, r3
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
 80028c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80028c8:	f7fe fa2a 	bl	8000d20 <__aeabi_ul2f>
 80028cc:	ee07 0a90 	vmov	s15, r0
 80028d0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80028d4:	ee17 0a90 	vmov	r0, s15
 80028d8:	f7fd fde2 	bl	80004a0 <__aeabi_f2d>
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028e4:	f7fd ff5e 	bl	80007a4 <__aeabi_ddiv>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4620      	mov	r0, r4
 80028ee:	4629      	mov	r1, r5
 80028f0:	f7fe f8b4 	bl	8000a5c <__aeabi_dcmpge>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00d      	beq.n	8002916 <TrajectoryGenerationProcess+0x366>
						  TrjStruc.Subsubmode = 2;
 80028fa:	4b83      	ldr	r3, [pc, #524]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 80028fc:	2202      	movs	r2, #2
 80028fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8002902:	e008      	b.n	8002916 <TrajectoryGenerationProcess+0x366>
				  else if ( TrjStruc.Subsubmode == 2 )
 8002904:	4b80      	ldr	r3, [pc, #512]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	2b02      	cmp	r3, #2
 800290c:	d103      	bne.n	8002916 <TrajectoryGenerationProcess+0x366>
					  TrjStruc.AngularVelocityDesire = 0;
 800290e:	4b7e      	ldr	r3, [pc, #504]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	625a      	str	r2, [r3, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 8002916:	f7ff fa51 	bl	8001dbc <micros>
 800291a:	4b7b      	ldr	r3, [pc, #492]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 800291c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002920:	1a84      	subs	r4, r0, r2
 8002922:	61bc      	str	r4, [r7, #24]
 8002924:	eb61 0303 	sbc.w	r3, r1, r3
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800292e:	f7fe f9f7 	bl	8000d20 <__aeabi_ul2f>
 8002932:	ee06 0a90 	vmov	s13, r0
 8002936:	4b74      	ldr	r3, [pc, #464]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002938:	edd3 7a01 	vldr	s15, [r3, #4]
 800293c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002b0c <TrajectoryGenerationProcess+0x55c>
 8002940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002944:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294c:	da00      	bge.n	8002950 <TrajectoryGenerationProcess+0x3a0>
			  break;
 800294e:	e20f      	b.n	8002d70 <TrajectoryGenerationProcess+0x7c0>
					  TrjStruc.Equation_Timestamp = micros();
 8002950:	f7ff fa34 	bl	8001dbc <micros>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	496b      	ldr	r1, [pc, #428]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 800295a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 0;
 800295e:	4b6a      	ldr	r3, [pc, #424]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002960:	2200      	movs	r2, #0
 8002962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					  TrjStruc.Subsubmode = 0;
 8002966:	4b68      	ldr	r3, [pc, #416]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002968:	2200      	movs	r2, #0
 800296a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					  TrjStruc.Mode = 2; ///Final Value Mode
 800296e:	4b66      	ldr	r3, [pc, #408]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002970:	2202      	movs	r2, #2
 8002972:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			  break;
 8002976:	e1fb      	b.n	8002d70 <TrajectoryGenerationProcess+0x7c0>
			  if (TrjStruc.Submode == 0)
 8002978:	4b63      	ldr	r3, [pc, #396]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 800297a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800297e:	2b00      	cmp	r3, #0
 8002980:	d16e      	bne.n	8002a60 <TrajectoryGenerationProcess+0x4b0>
							((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002982:	4b61      	ldr	r3, [pc, #388]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fd8a 	bl	80004a0 <__aeabi_f2d>
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	4b5f      	ldr	r3, [pc, #380]	; (8002b10 <TrajectoryGenerationProcess+0x560>)
 8002992:	f7fd fddd 	bl	8000550 <__aeabi_dmul>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4614      	mov	r4, r2
 800299c:	461d      	mov	r5, r3
 800299e:	4b5a      	ldr	r3, [pc, #360]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 80029a0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80029a4:	4b58      	ldr	r3, [pc, #352]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 80029a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80029aa:	f7fd fdd1 	bl	8000550 <__aeabi_dmul>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4620      	mov	r0, r4
 80029b4:	4629      	mov	r1, r5
 80029b6:	f7fd fdcb 	bl	8000550 <__aeabi_dmul>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4614      	mov	r4, r2
 80029c0:	461d      	mov	r5, r3
							+TrjStruc.Theta_Stamp_0;
 80029c2:	4b51      	ldr	r3, [pc, #324]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 80029c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fd fd6a 	bl	80004a0 <__aeabi_f2d>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4620      	mov	r0, r4
 80029d2:	4629      	mov	r1, r5
 80029d4:	f7fd fc06 	bl	80001e4 <__adddf3>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4610      	mov	r0, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	f7fe f886 	bl	8000af0 <__aeabi_d2f>
 80029e4:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80029e6:	4a48      	ldr	r2, [pc, #288]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 80029e8:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularAcceration * TrjStruc.Equation_Realtime_Sec;
 80029ea:	4b47      	ldr	r3, [pc, #284]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fd fd56 	bl	80004a0 <__aeabi_f2d>
 80029f4:	4b44      	ldr	r3, [pc, #272]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 80029f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80029fa:	f7fd fda9 	bl	8000550 <__aeabi_dmul>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	f7fe f873 	bl	8000af0 <__aeabi_d2f>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4a3e      	ldr	r2, [pc, #248]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002a0e:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 8002a10:	f7ff f9d4 	bl	8001dbc <micros>
 8002a14:	4b3c      	ldr	r3, [pc, #240]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002a16:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002a1a:	ebb0 0a02 	subs.w	sl, r0, r2
 8002a1e:	eb61 0b03 	sbc.w	fp, r1, r3
 8002a22:	4650      	mov	r0, sl
 8002a24:	4659      	mov	r1, fp
 8002a26:	f7fe f97b 	bl	8000d20 <__aeabi_ul2f>
 8002a2a:	ee06 0a90 	vmov	s13, r0
 8002a2e:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002a30:	edd3 7a00 	vldr	s15, [r3]
 8002a34:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002b0c <TrajectoryGenerationProcess+0x55c>
 8002a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a3c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a44:	da00      	bge.n	8002a48 <TrajectoryGenerationProcess+0x498>
			  break;
 8002a46:	e195      	b.n	8002d74 <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002a48:	f7ff f9b8 	bl	8001dbc <micros>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	492d      	ldr	r1, [pc, #180]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002a52:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 1;
 8002a56:	4b2c      	ldr	r3, [pc, #176]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 8002a5e:	e189      	b.n	8002d74 <TrajectoryGenerationProcess+0x7c4>
			  else if (TrjStruc.Submode == 1)
 8002a60:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d154      	bne.n	8002b14 <TrajectoryGenerationProcess+0x564>
						  (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8002a6a:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fd16 	bl	80004a0 <__aeabi_f2d>
 8002a74:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002a76:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002a7a:	f7fd fd69 	bl	8000550 <__aeabi_dmul>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4614      	mov	r4, r2
 8002a84:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_1;
 8002a86:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd fd08 	bl	80004a0 <__aeabi_f2d>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4620      	mov	r0, r4
 8002a96:	4629      	mov	r1, r5
 8002a98:	f7fd fba4 	bl	80001e4 <__adddf3>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f7fe f824 	bl	8000af0 <__aeabi_d2f>
 8002aa8:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002aaa:	4a17      	ldr	r2, [pc, #92]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002aac:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularVelocity;
 8002aae:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	4a15      	ldr	r2, [pc, #84]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002ab4:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.LinearTimeLSPB*1000000)
 8002ab6:	f7ff f981 	bl	8001dbc <micros>
 8002aba:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002abc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002ac0:	ebb0 0802 	subs.w	r8, r0, r2
 8002ac4:	eb61 0903 	sbc.w	r9, r1, r3
 8002ac8:	4640      	mov	r0, r8
 8002aca:	4649      	mov	r1, r9
 8002acc:	f7fe f928 	bl	8000d20 <__aeabi_ul2f>
 8002ad0:	ee06 0a90 	vmov	s13, r0
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002ad6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ada:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002b0c <TrajectoryGenerationProcess+0x55c>
 8002ade:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae2:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aea:	da00      	bge.n	8002aee <TrajectoryGenerationProcess+0x53e>
			  break;
 8002aec:	e142      	b.n	8002d74 <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002aee:	f7ff f965 	bl	8001dbc <micros>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4904      	ldr	r1, [pc, #16]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002af8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 2;
 8002afc:	4b02      	ldr	r3, [pc, #8]	; (8002b08 <TrajectoryGenerationProcess+0x558>)
 8002afe:	2202      	movs	r2, #2
 8002b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 8002b04:	e136      	b.n	8002d74 <TrajectoryGenerationProcess+0x7c4>
 8002b06:	bf00      	nop
 8002b08:	20000278 	.word	0x20000278
 8002b0c:	49742400 	.word	0x49742400
 8002b10:	3fe00000 	.word	0x3fe00000
			  else if (TrjStruc.Submode == 2)
 8002b14:	4b9b      	ldr	r3, [pc, #620]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	f040 812a 	bne.w	8002d74 <TrajectoryGenerationProcess+0x7c4>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002b20:	4b98      	ldr	r3, [pc, #608]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fd fcbb 	bl	80004a0 <__aeabi_f2d>
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	4b96      	ldr	r3, [pc, #600]	; (8002d88 <TrajectoryGenerationProcess+0x7d8>)
 8002b30:	f7fd fd0e 	bl	8000550 <__aeabi_dmul>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4614      	mov	r4, r2
 8002b3a:	461d      	mov	r5, r3
 8002b3c:	4b91      	ldr	r3, [pc, #580]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002b3e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002b42:	4b90      	ldr	r3, [pc, #576]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002b44:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002b48:	f7fd fd02 	bl	8000550 <__aeabi_dmul>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4620      	mov	r0, r4
 8002b52:	4629      	mov	r1, r5
 8002b54:	f7fd fcfc 	bl	8000550 <__aeabi_dmul>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4614      	mov	r4, r2
 8002b5e:	461d      	mov	r5, r3
						  + (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8002b60:	4b88      	ldr	r3, [pc, #544]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fc9b 	bl	80004a0 <__aeabi_f2d>
 8002b6a:	4b86      	ldr	r3, [pc, #536]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002b6c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002b70:	f7fd fcee 	bl	8000550 <__aeabi_dmul>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4620      	mov	r0, r4
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	f7fd fb32 	bl	80001e4 <__adddf3>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4614      	mov	r4, r2
 8002b86:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_2;
 8002b88:	4b7e      	ldr	r3, [pc, #504]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fd fc87 	bl	80004a0 <__aeabi_f2d>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4620      	mov	r0, r4
 8002b98:	4629      	mov	r1, r5
 8002b9a:	f7fd fb23 	bl	80001e4 <__adddf3>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f7fd ffa3 	bl	8000af0 <__aeabi_d2f>
 8002baa:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002bac:	4a75      	ldr	r2, [pc, #468]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002bae:	6213      	str	r3, [r2, #32]
				  if ( TrjStruc.Subsubmode == 0 )
 8002bb0:	4b74      	ldr	r3, [pc, #464]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d142      	bne.n	8002c40 <TrajectoryGenerationProcess+0x690>
					  TrjStruc.AngularVelocityDesire = ( -1*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec )
 8002bba:	4b72      	ldr	r3, [pc, #456]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002bbc:	edd3 7a07 	vldr	s15, [r3, #28]
 8002bc0:	eef1 7a67 	vneg.f32	s15, s15
 8002bc4:	ee17 3a90 	vmov	r3, s15
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fd fc69 	bl	80004a0 <__aeabi_f2d>
 8002bce:	4b6d      	ldr	r3, [pc, #436]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002bd0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002bd4:	f7fd fcbc 	bl	8000550 <__aeabi_dmul>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4614      	mov	r4, r2
 8002bde:	461d      	mov	r5, r3
							                           + ( TrjStruc.AngularVelocity );
 8002be0:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fd fc5b 	bl	80004a0 <__aeabi_f2d>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4620      	mov	r0, r4
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	f7fd faf7 	bl	80001e4 <__adddf3>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f7fd ff77 	bl	8000af0 <__aeabi_d2f>
 8002c02:	4603      	mov	r3, r0
					  TrjStruc.AngularVelocityDesire = ( -1*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec )
 8002c04:	4a5f      	ldr	r2, [pc, #380]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002c06:	6253      	str	r3, [r2, #36]	; 0x24
					  if (  TrjStruc.Alpha * TrjStruc.AngularVelocityDesire <=  TrjStruc.AngularVelocityFinalMin )
 8002c08:	4b5e      	ldr	r3, [pc, #376]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002c0a:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002c0e:	4b5d      	ldr	r3, [pc, #372]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002c10:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c18:	4b5a      	ldr	r3, [pc, #360]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002c1a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002c1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c26:	d866      	bhi.n	8002cf6 <TrajectoryGenerationProcess+0x746>
						  TrjStruc.Subsubmode = 1;
 8002c28:	4b56      	ldr	r3, [pc, #344]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						  TrjStruc.Velocity_Timestamp = micros();
 8002c30:	f7ff f8c4 	bl	8001dbc <micros>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4952      	ldr	r1, [pc, #328]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002c3a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8002c3e:	e05a      	b.n	8002cf6 <TrajectoryGenerationProcess+0x746>
				  else if ( TrjStruc.Subsubmode == 1 )
 8002c40:	4b50      	ldr	r3, [pc, #320]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d14c      	bne.n	8002ce4 <TrajectoryGenerationProcess+0x734>
					  TrjStruc.AngularVelocityDesire = TrjStruc.Alpha * TrjStruc.AngularVelocityFinalMin;
 8002c4a:	4b4e      	ldr	r3, [pc, #312]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002c4c:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002c50:	4b4c      	ldr	r3, [pc, #304]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002c52:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5a:	4b4a      	ldr	r3, [pc, #296]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002c5c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					  if (micros()-TrjStruc.Velocity_Timestamp >= ((TrjStruc.BlendTimeLSPB*1000000)-(TrjStruc.Velocity_Timestamp - TrjStruc.Equation_Timestamp))/2.0)
 8002c60:	f7ff f8ac 	bl	8001dbc <micros>
 8002c64:	4b47      	ldr	r3, [pc, #284]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002c66:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002c6a:	1a84      	subs	r4, r0, r2
 8002c6c:	613c      	str	r4, [r7, #16]
 8002c6e:	eb61 0303 	sbc.w	r3, r1, r3
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c78:	f7fd fc34 	bl	80004e4 <__aeabi_ul2d>
 8002c7c:	4604      	mov	r4, r0
 8002c7e:	460d      	mov	r5, r1
 8002c80:	4b40      	ldr	r3, [pc, #256]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002d8c <TrajectoryGenerationProcess+0x7dc>
 8002c8a:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002c8e:	4b3d      	ldr	r3, [pc, #244]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002c90:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002c94:	4b3b      	ldr	r3, [pc, #236]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002c96:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002c9a:	1a86      	subs	r6, r0, r2
 8002c9c:	60be      	str	r6, [r7, #8]
 8002c9e:	eb61 0303 	sbc.w	r3, r1, r3
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ca8:	f7fe f83a 	bl	8000d20 <__aeabi_ul2f>
 8002cac:	ee07 0a90 	vmov	s15, r0
 8002cb0:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002cb4:	ee17 0a90 	vmov	r0, s15
 8002cb8:	f7fd fbf2 	bl	80004a0 <__aeabi_f2d>
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cc4:	f7fd fd6e 	bl	80007a4 <__aeabi_ddiv>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4620      	mov	r0, r4
 8002cce:	4629      	mov	r1, r5
 8002cd0:	f7fd fec4 	bl	8000a5c <__aeabi_dcmpge>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00d      	beq.n	8002cf6 <TrajectoryGenerationProcess+0x746>
						  TrjStruc.Subsubmode = 2;
 8002cda:	4b2a      	ldr	r3, [pc, #168]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002cdc:	2202      	movs	r2, #2
 8002cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8002ce2:	e008      	b.n	8002cf6 <TrajectoryGenerationProcess+0x746>
				  else if ( TrjStruc.Subsubmode == 2 )
 8002ce4:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d103      	bne.n	8002cf6 <TrajectoryGenerationProcess+0x746>
					  TrjStruc.AngularVelocityDesire = 0;
 8002cee:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 8002cf6:	f7ff f861 	bl	8001dbc <micros>
 8002cfa:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002cfc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002d00:	1a84      	subs	r4, r0, r2
 8002d02:	603c      	str	r4, [r7, #0]
 8002d04:	eb61 0303 	sbc.w	r3, r1, r3
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d0e:	f7fe f807 	bl	8000d20 <__aeabi_ul2f>
 8002d12:	ee06 0a90 	vmov	s13, r0
 8002d16:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002d18:	edd3 7a00 	vldr	s15, [r3]
 8002d1c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002d8c <TrajectoryGenerationProcess+0x7dc>
 8002d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d24:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2c:	da00      	bge.n	8002d30 <TrajectoryGenerationProcess+0x780>
			  break;
 8002d2e:	e021      	b.n	8002d74 <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002d30:	f7ff f844 	bl	8001dbc <micros>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4912      	ldr	r1, [pc, #72]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002d3a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 0;
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					  TrjStruc.Subsubmode = 0;
 8002d46:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					  TrjStruc.Mode = 2; ///Final Value Mode
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002d50:	2202      	movs	r2, #2
 8002d52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			  break;
 8002d56:	e00d      	b.n	8002d74 <TrajectoryGenerationProcess+0x7c4>
			  Moving_Link_Task_Flag = 1;
 8002d58:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <TrajectoryGenerationProcess+0x7e0>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002d60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d62:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002d64:	6213      	str	r3, [r2, #32]
			  TrjStruc.AngularVelocityDesire = 0;
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <TrajectoryGenerationProcess+0x7d4>)
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24
			  break;
 8002d6e:	e002      	b.n	8002d76 <TrajectoryGenerationProcess+0x7c6>
			  break;
 8002d70:	bf00      	nop
 8002d72:	e000      	b.n	8002d76 <TrajectoryGenerationProcess+0x7c6>
			  break;
 8002d74:	bf00      	nop
}
 8002d76:	bf00      	nop
 8002d78:	3744      	adds	r7, #68	; 0x44
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	ecbd 8b02 	vpop	{d8}
 8002d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d84:	20000278 	.word	0x20000278
 8002d88:	bfe00000 	.word	0xbfe00000
 8002d8c:	49742400 	.word	0x49742400
 8002d90:	200001e8 	.word	0x200001e8

08002d94 <PIDController2in1>:

void PIDController2in1()
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	af00      	add	r7, sp, #0
	PositionPIDController.OutputDesire = TrjStruc.AngularDisplacementDesire;
 8002d98:	4b8a      	ldr	r3, [pc, #552]	; (8002fc4 <PIDController2in1+0x230>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	4a8a      	ldr	r2, [pc, #552]	; (8002fc8 <PIDController2in1+0x234>)
 8002d9e:	61d3      	str	r3, [r2, #28]
    PositionPIDController.NowError = PositionPIDController.OutputDesire - PositionPIDController.OutputFeedback;
 8002da0:	4b89      	ldr	r3, [pc, #548]	; (8002fc8 <PIDController2in1+0x234>)
 8002da2:	ed93 7a07 	vldr	s14, [r3, #28]
 8002da6:	4b88      	ldr	r3, [pc, #544]	; (8002fc8 <PIDController2in1+0x234>)
 8002da8:	edd3 7a08 	vldr	s15, [r3, #32]
 8002dac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002db0:	4b85      	ldr	r3, [pc, #532]	; (8002fc8 <PIDController2in1+0x234>)
 8002db2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    PositionPIDController.Integral_Value += PositionPIDController.NowError*PositionPIDController.SamplingTime;
 8002db6:	4b84      	ldr	r3, [pc, #528]	; (8002fc8 <PIDController2in1+0x234>)
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd fb70 	bl	80004a0 <__aeabi_f2d>
 8002dc0:	4604      	mov	r4, r0
 8002dc2:	460d      	mov	r5, r1
 8002dc4:	4b80      	ldr	r3, [pc, #512]	; (8002fc8 <PIDController2in1+0x234>)
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fb69 	bl	80004a0 <__aeabi_f2d>
 8002dce:	4b7e      	ldr	r3, [pc, #504]	; (8002fc8 <PIDController2in1+0x234>)
 8002dd0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002dd4:	f7fd fbbc 	bl	8000550 <__aeabi_dmul>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4620      	mov	r0, r4
 8002dde:	4629      	mov	r1, r5
 8002de0:	f7fd fa00 	bl	80001e4 <__adddf3>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4610      	mov	r0, r2
 8002dea:	4619      	mov	r1, r3
 8002dec:	f7fd fe80 	bl	8000af0 <__aeabi_d2f>
 8002df0:	4603      	mov	r3, r0
 8002df2:	4a75      	ldr	r2, [pc, #468]	; (8002fc8 <PIDController2in1+0x234>)
 8002df4:	6253      	str	r3, [r2, #36]	; 0x24
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002df6:	4b74      	ldr	r3, [pc, #464]	; (8002fc8 <PIDController2in1+0x234>)
 8002df8:	ed93 7a00 	vldr	s14, [r3]
 8002dfc:	4b72      	ldr	r3, [pc, #456]	; (8002fc8 <PIDController2in1+0x234>)
 8002dfe:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e02:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(PositionPIDController.Ki * PositionPIDController.Integral_Value)
 8002e06:	4b70      	ldr	r3, [pc, #448]	; (8002fc8 <PIDController2in1+0x234>)
 8002e08:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e0c:	4b6e      	ldr	r3, [pc, #440]	; (8002fc8 <PIDController2in1+0x234>)
 8002e0e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002e12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e1a:	ee17 0a90 	vmov	r0, s15
 8002e1e:	f7fd fb3f 	bl	80004a0 <__aeabi_f2d>
 8002e22:	4604      	mov	r4, r0
 8002e24:	460d      	mov	r5, r1
					  +(PositionPIDController.Kd * (PositionPIDController.NowError-PositionPIDController.PreviousError)/PositionPIDController.SamplingTime)
 8002e26:	4b68      	ldr	r3, [pc, #416]	; (8002fc8 <PIDController2in1+0x234>)
 8002e28:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e2c:	4b66      	ldr	r3, [pc, #408]	; (8002fc8 <PIDController2in1+0x234>)
 8002e2e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002e32:	4b65      	ldr	r3, [pc, #404]	; (8002fc8 <PIDController2in1+0x234>)
 8002e34:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002e38:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e40:	ee17 0a90 	vmov	r0, s15
 8002e44:	f7fd fb2c 	bl	80004a0 <__aeabi_f2d>
 8002e48:	4b5f      	ldr	r3, [pc, #380]	; (8002fc8 <PIDController2in1+0x234>)
 8002e4a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002e4e:	f7fd fca9 	bl	80007a4 <__aeabi_ddiv>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4620      	mov	r0, r4
 8002e58:	4629      	mov	r1, r5
 8002e5a:	f7fd f9c3 	bl	80001e4 <__adddf3>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4614      	mov	r4, r2
 8002e64:	461d      	mov	r5, r3
					  +( TrjStruc.Alpha * PositionPIDController.offSet);
 8002e66:	4b57      	ldr	r3, [pc, #348]	; (8002fc4 <PIDController2in1+0x230>)
 8002e68:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002e6c:	4b56      	ldr	r3, [pc, #344]	; (8002fc8 <PIDController2in1+0x234>)
 8002e6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e76:	ee17 0a90 	vmov	r0, s15
 8002e7a:	f7fd fb11 	bl	80004a0 <__aeabi_f2d>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4620      	mov	r0, r4
 8002e84:	4629      	mov	r1, r5
 8002e86:	f7fd f9ad 	bl	80001e4 <__adddf3>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	f7fd fe2d 	bl	8000af0 <__aeabi_d2f>
 8002e96:	4603      	mov	r3, r0
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002e98:	4a4b      	ldr	r2, [pc, #300]	; (8002fc8 <PIDController2in1+0x234>)
 8002e9a:	6153      	str	r3, [r2, #20]
    PositionPIDController.PreviousError = PositionPIDController.NowError;
 8002e9c:	4b4a      	ldr	r3, [pc, #296]	; (8002fc8 <PIDController2in1+0x234>)
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	4a49      	ldr	r2, [pc, #292]	; (8002fc8 <PIDController2in1+0x234>)
 8002ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

    VelocityPIDController.OutputDesire = PositionPIDController.ControllerOutput + TrjStruc.AngularVelocityDesire;
 8002ea4:	4b48      	ldr	r3, [pc, #288]	; (8002fc8 <PIDController2in1+0x234>)
 8002ea6:	ed93 7a05 	vldr	s14, [r3, #20]
 8002eaa:	4b46      	ldr	r3, [pc, #280]	; (8002fc4 <PIDController2in1+0x230>)
 8002eac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb4:	4b45      	ldr	r3, [pc, #276]	; (8002fcc <PIDController2in1+0x238>)
 8002eb6:	edc3 7a07 	vstr	s15, [r3, #28]
//    VelocityPIDController.OutputDesire = PositionPIDController.ControllerOutput;
    VelocityPIDController.NowError = VelocityPIDController.OutputDesire - VelocityPIDController.OutputFeedback;
 8002eba:	4b44      	ldr	r3, [pc, #272]	; (8002fcc <PIDController2in1+0x238>)
 8002ebc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ec0:	4b42      	ldr	r3, [pc, #264]	; (8002fcc <PIDController2in1+0x238>)
 8002ec2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eca:	4b40      	ldr	r3, [pc, #256]	; (8002fcc <PIDController2in1+0x238>)
 8002ecc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    VelocityPIDController.Integral_Value += VelocityPIDController.NowError*VelocityPIDController.SamplingTime;
 8002ed0:	4b3e      	ldr	r3, [pc, #248]	; (8002fcc <PIDController2in1+0x238>)
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd fae3 	bl	80004a0 <__aeabi_f2d>
 8002eda:	4604      	mov	r4, r0
 8002edc:	460d      	mov	r5, r1
 8002ede:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <PIDController2in1+0x238>)
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd fadc 	bl	80004a0 <__aeabi_f2d>
 8002ee8:	4b38      	ldr	r3, [pc, #224]	; (8002fcc <PIDController2in1+0x238>)
 8002eea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002eee:	f7fd fb2f 	bl	8000550 <__aeabi_dmul>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	4629      	mov	r1, r5
 8002efa:	f7fd f973 	bl	80001e4 <__adddf3>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	f7fd fdf3 	bl	8000af0 <__aeabi_d2f>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4a2f      	ldr	r2, [pc, #188]	; (8002fcc <PIDController2in1+0x238>)
 8002f0e:	6253      	str	r3, [r2, #36]	; 0x24
    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
 8002f10:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <PIDController2in1+0x238>)
 8002f12:	ed93 7a00 	vldr	s14, [r3]
 8002f16:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <PIDController2in1+0x238>)
 8002f18:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002f1c:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(VelocityPIDController.Ki * VelocityPIDController.Integral_Value)
 8002f20:	4b2a      	ldr	r3, [pc, #168]	; (8002fcc <PIDController2in1+0x238>)
 8002f22:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f26:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <PIDController2in1+0x238>)
 8002f28:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f34:	ee17 0a90 	vmov	r0, s15
 8002f38:	f7fd fab2 	bl	80004a0 <__aeabi_f2d>
 8002f3c:	4604      	mov	r4, r0
 8002f3e:	460d      	mov	r5, r1
					  +(VelocityPIDController.Kd * (VelocityPIDController.NowError-VelocityPIDController.PreviousError)/VelocityPIDController.SamplingTime)
 8002f40:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <PIDController2in1+0x238>)
 8002f42:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f46:	4b21      	ldr	r3, [pc, #132]	; (8002fcc <PIDController2in1+0x238>)
 8002f48:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002f4c:	4b1f      	ldr	r3, [pc, #124]	; (8002fcc <PIDController2in1+0x238>)
 8002f4e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002f52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f5a:	ee17 0a90 	vmov	r0, s15
 8002f5e:	f7fd fa9f 	bl	80004a0 <__aeabi_f2d>
 8002f62:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <PIDController2in1+0x238>)
 8002f64:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002f68:	f7fd fc1c 	bl	80007a4 <__aeabi_ddiv>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4620      	mov	r0, r4
 8002f72:	4629      	mov	r1, r5
 8002f74:	f7fd f936 	bl	80001e4 <__adddf3>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4614      	mov	r4, r2
 8002f7e:	461d      	mov	r5, r3
					  +( TrjStruc.Alpha * VelocityPIDController.offSet );
 8002f80:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <PIDController2in1+0x230>)
 8002f82:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002f86:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <PIDController2in1+0x238>)
 8002f88:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f90:	ee17 0a90 	vmov	r0, s15
 8002f94:	f7fd fa84 	bl	80004a0 <__aeabi_f2d>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	f7fd f920 	bl	80001e4 <__adddf3>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4610      	mov	r0, r2
 8002faa:	4619      	mov	r1, r3
 8002fac:	f7fd fda0 	bl	8000af0 <__aeabi_d2f>
 8002fb0:	4603      	mov	r3, r0
    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
 8002fb2:	4a06      	ldr	r2, [pc, #24]	; (8002fcc <PIDController2in1+0x238>)
 8002fb4:	6153      	str	r3, [r2, #20]
    VelocityPIDController.PreviousError = VelocityPIDController.NowError;
 8002fb6:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <PIDController2in1+0x238>)
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	4a04      	ldr	r2, [pc, #16]	; (8002fcc <PIDController2in1+0x238>)
 8002fbc:	62d3      	str	r3, [r2, #44]	; 0x2c
//					  +(VelocityPIDController.Ki * PositionPIDController.Integral_Value)
//					  +(VelocityPIDController.Kd * (VelocityPIDController.NowError-VelocityPIDController.PreviousError))
//					  +( TrjStruc.Alpha * VelocityPIDController.offSet);
//	VelocityPIDController.PreviousError = VelocityPIDController.NowError;

}
 8002fbe:	bf00      	nop
 8002fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000278 	.word	0x20000278
 8002fc8:	200001f8 	.word	0x200001f8
 8002fcc:	20000238 	.word	0x20000238

08002fd0 <UARTInit>:



///UART ZONE
void UARTInit(UARTStucrture *uart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8002fd8:	4b10      	ldr	r3, [pc, #64]	; (800301c <UARTInit+0x4c>)
 8002fda:	88db      	ldrh	r3, [r3, #6]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f006 fe0e 	bl	8009c00 <calloc>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <UARTInit+0x4c>)
 8002fee:	889b      	ldrh	r3, [r3, #4]
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	2001      	movs	r0, #1
 8002ff4:	f006 fe04 	bl	8009c00 <calloc>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	81da      	strh	r2, [r3, #14]
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200000b8 	.word	0x200000b8

08003020 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6919      	ldr	r1, [r3, #16]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	88db      	ldrh	r3, [r3, #6]
 8003034:	461a      	mov	r2, r3
 8003036:	f005 ff5f 	bl	8008ef8 <HAL_UART_Receive_DMA>
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	88db      	ldrh	r3, [r3, #6]
 800304e:	461a      	mov	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	1ad3      	subs	r3, r2, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8003070:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003074:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8a9b      	ldrh	r3, [r3, #20]
 800307a:	461c      	mov	r4, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff ffe0 	bl	8003042 <UARTGetRxHead>
 8003082:	4603      	mov	r3, r0
 8003084:	429c      	cmp	r4, r3
 8003086:	d013      	beq.n	80030b0 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	8a92      	ldrh	r2, [r2, #20]
 8003090:	4413      	add	r3, r2
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	8a9b      	ldrh	r3, [r3, #20]
 800309a:	3301      	adds	r3, #1
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	88d2      	ldrh	r2, [r2, #6]
 80030a0:	fb93 f1f2 	sdiv	r1, r3, r2
 80030a4:	fb02 f201 	mul.w	r2, r2, r1
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 80030b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd90      	pop	{r4, r7, pc}

080030bc <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d13d      	bne.n	800314e <UARTTxDumpBuffer+0x92>
 80030d2:	4b21      	ldr	r3, [pc, #132]	; (8003158 <UARTTxDumpBuffer+0x9c>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d139      	bne.n	800314e <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 80030da:	4b1f      	ldr	r3, [pc, #124]	; (8003158 <UARTTxDumpBuffer+0x9c>)
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	89da      	ldrh	r2, [r3, #14]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	899b      	ldrh	r3, [r3, #12]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d02d      	beq.n	8003148 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	89da      	ldrh	r2, [r3, #14]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d906      	bls.n	8003106 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	89da      	ldrh	r2, [r3, #14]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	b29b      	uxth	r3, r3
 8003104:	e005      	b.n	8003112 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	889a      	ldrh	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	b29b      	uxth	r3, r3
 8003112:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	8992      	ldrh	r2, [r2, #12]
 8003120:	4413      	add	r3, r2
 8003122:	89fa      	ldrh	r2, [r7, #14]
 8003124:	4619      	mov	r1, r3
 8003126:	f005 fe7b 	bl	8008e20 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	899b      	ldrh	r3, [r3, #12]
 800312e:	461a      	mov	r2, r3
 8003130:	89fb      	ldrh	r3, [r7, #14]
 8003132:	4413      	add	r3, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	8892      	ldrh	r2, [r2, #4]
 8003138:	fb93 f1f2 	sdiv	r1, r3, r2
 800313c:	fb02 f201 	mul.w	r2, r2, r1
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	b29a      	uxth	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8003148:	4b03      	ldr	r3, [pc, #12]	; (8003158 <UARTTxDumpBuffer+0x9c>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
	}
}
 800314e:	bf00      	nop
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000338 	.word	0x20000338

0800315c <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	4613      	mov	r3, r2
 8003168:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	889b      	ldrh	r3, [r3, #4]
 800316e:	88fa      	ldrh	r2, [r7, #6]
 8003170:	4293      	cmp	r3, r2
 8003172:	bf28      	it	cs
 8003174:	4613      	movcs	r3, r2
 8003176:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8003178:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	889b      	ldrh	r3, [r3, #4]
 800317e:	4619      	mov	r1, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	89db      	ldrh	r3, [r3, #14]
 8003184:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8003186:	4293      	cmp	r3, r2
 8003188:	bfa8      	it	ge
 800318a:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 800318c:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	89d2      	ldrh	r2, [r2, #14]
 8003196:	4413      	add	r3, r2
 8003198:	8aba      	ldrh	r2, [r7, #20]
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	4618      	mov	r0, r3
 800319e:	f006 fd61 	bl	8009c64 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	89db      	ldrh	r3, [r3, #14]
 80031a6:	461a      	mov	r2, r3
 80031a8:	8afb      	ldrh	r3, [r7, #22]
 80031aa:	4413      	add	r3, r2
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	8892      	ldrh	r2, [r2, #4]
 80031b0:	fb93 f1f2 	sdiv	r1, r3, r2
 80031b4:	fb02 f201 	mul.w	r2, r2, r1
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 80031c0:	8afa      	ldrh	r2, [r7, #22]
 80031c2:	8abb      	ldrh	r3, [r7, #20]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d00a      	beq.n	80031de <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6898      	ldr	r0, [r3, #8]
 80031cc:	8abb      	ldrh	r3, [r7, #20]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 80031d2:	8afa      	ldrh	r2, [r7, #22]
 80031d4:	8abb      	ldrh	r3, [r7, #20]
 80031d6:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80031d8:	461a      	mov	r2, r3
 80031da:	f006 fd43 	bl	8009c64 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f7ff ff6c 	bl	80030bc <UARTTxDumpBuffer>

}
 80031e4:	bf00      	nop
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <ACK1Return>:

void ACK1Return(UARTStucrture *uart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {0x58, 0b01110101};
 80031f4:	f247 5358 	movw	r3, #30040	; 0x7558
 80031f8:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 80031fa:	f107 030c 	add.w	r3, r7, #12
 80031fe:	2202      	movs	r2, #2
 8003200:	4619      	mov	r1, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ffaa 	bl	800315c <UARTTxWrite>
	}
}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <ACK2Return>:

void ACK2Return(UARTStucrture *uart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {70, 110};
 8003218:	f646 6346 	movw	r3, #28230	; 0x6e46
 800321c:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 800321e:	f107 030c 	add.w	r3, r7, #12
 8003222:	2202      	movs	r2, #2
 8003224:	4619      	mov	r1, r3
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff ff98 	bl	800315c <UARTTxWrite>
	}
}
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	0000      	movs	r0, r0
	...

08003238 <Munmunbot_Protocol>:
	UARTTxWrite(uart, temp, 2);
	}
}

void Munmunbot_Protocol(int16_t dataIn,UARTStucrture *uart)
{
 8003238:	b5b0      	push	{r4, r5, r7, lr}
 800323a:	b08e      	sub	sp, #56	; 0x38
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	6039      	str	r1, [r7, #0]
 8003242:	80fb      	strh	r3, [r7, #6]
	static uint8_t parameter_ptr = 0;
	static uint16_t Data_HAck = 0;
	static uint32_t CheckSum = 0;
	static uint16_t DataForReturn = 0;

	switch (Munmunbot_Protocol_State)
 8003244:	4b8b      	ldr	r3, [pc, #556]	; (8003474 <Munmunbot_Protocol+0x23c>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b05      	cmp	r3, #5
 800324a:	f200 8418 	bhi.w	8003a7e <Munmunbot_Protocol+0x846>
 800324e:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <Munmunbot_Protocol+0x1c>)
 8003250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003254:	0800326d 	.word	0x0800326d
 8003258:	08003321 	.word	0x08003321
 800325c:	08003363 	.word	0x08003363
 8003260:	080033b1 	.word	0x080033b1
 8003264:	080033d5 	.word	0x080033d5
 8003268:	08003495 	.word	0x08003495
	{
		case PP_STARTandMode:
			if (((dataIn>>4) & 0b1111) == 0b1001)
 800326c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003270:	111b      	asrs	r3, r3, #4
 8003272:	b21b      	sxth	r3, r3
 8003274:	b29b      	uxth	r3, r3
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	2b09      	cmp	r3, #9
 800327c:	f040 83fc 	bne.w	8003a78 <Munmunbot_Protocol+0x840>
			{
				CheckSum = dataIn;
 8003280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003284:	4a7c      	ldr	r2, [pc, #496]	; (8003478 <Munmunbot_Protocol+0x240>)
 8003286:	6013      	str	r3, [r2, #0]
				ProtocolMode = dataIn & 0b1111;
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4b7a      	ldr	r3, [pc, #488]	; (800347c <Munmunbot_Protocol+0x244>)
 8003294:	701a      	strb	r2, [r3, #0]

				if (ProtocolMode == 7)
 8003296:	4b79      	ldr	r3, [pc, #484]	; (800347c <Munmunbot_Protocol+0x244>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b07      	cmp	r3, #7
 800329c:	d103      	bne.n	80032a6 <Munmunbot_Protocol+0x6e>
				{
					Munmunbot_Protocol_State = PP_Frame3_Data_0; ///Frame3
 800329e:	4b75      	ldr	r3, [pc, #468]	; (8003474 <Munmunbot_Protocol+0x23c>)
 80032a0:	2203      	movs	r2, #3
 80032a2:	701a      	strb	r2, [r3, #0]
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
				{
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
				}
			}
			break;
 80032a4:	e3e8      	b.n	8003a78 <Munmunbot_Protocol+0x840>
				else if (ProtocolMode == 1 || ProtocolMode == 4 || ProtocolMode == 5 ||ProtocolMode == 6)
 80032a6:	4b75      	ldr	r3, [pc, #468]	; (800347c <Munmunbot_Protocol+0x244>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d00b      	beq.n	80032c6 <Munmunbot_Protocol+0x8e>
 80032ae:	4b73      	ldr	r3, [pc, #460]	; (800347c <Munmunbot_Protocol+0x244>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d007      	beq.n	80032c6 <Munmunbot_Protocol+0x8e>
 80032b6:	4b71      	ldr	r3, [pc, #452]	; (800347c <Munmunbot_Protocol+0x244>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b05      	cmp	r3, #5
 80032bc:	d003      	beq.n	80032c6 <Munmunbot_Protocol+0x8e>
 80032be:	4b6f      	ldr	r3, [pc, #444]	; (800347c <Munmunbot_Protocol+0x244>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b06      	cmp	r3, #6
 80032c4:	d103      	bne.n	80032ce <Munmunbot_Protocol+0x96>
					Munmunbot_Protocol_State = PP_Frame2_Data_0; //Frame2
 80032c6:	4b6b      	ldr	r3, [pc, #428]	; (8003474 <Munmunbot_Protocol+0x23c>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	701a      	strb	r2, [r3, #0]
			break;
 80032cc:	e3d4      	b.n	8003a78 <Munmunbot_Protocol+0x840>
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 80032ce:	4b6b      	ldr	r3, [pc, #428]	; (800347c <Munmunbot_Protocol+0x244>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d020      	beq.n	8003318 <Munmunbot_Protocol+0xe0>
 80032d6:	4b69      	ldr	r3, [pc, #420]	; (800347c <Munmunbot_Protocol+0x244>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d01c      	beq.n	8003318 <Munmunbot_Protocol+0xe0>
 80032de:	4b67      	ldr	r3, [pc, #412]	; (800347c <Munmunbot_Protocol+0x244>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d018      	beq.n	8003318 <Munmunbot_Protocol+0xe0>
 80032e6:	4b65      	ldr	r3, [pc, #404]	; (800347c <Munmunbot_Protocol+0x244>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b09      	cmp	r3, #9
 80032ec:	d014      	beq.n	8003318 <Munmunbot_Protocol+0xe0>
 80032ee:	4b63      	ldr	r3, [pc, #396]	; (800347c <Munmunbot_Protocol+0x244>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b0a      	cmp	r3, #10
 80032f4:	d010      	beq.n	8003318 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 80032f6:	4b61      	ldr	r3, [pc, #388]	; (800347c <Munmunbot_Protocol+0x244>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 80032fa:	2b0b      	cmp	r3, #11
 80032fc:	d00c      	beq.n	8003318 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 80032fe:	4b5f      	ldr	r3, [pc, #380]	; (800347c <Munmunbot_Protocol+0x244>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b0c      	cmp	r3, #12
 8003304:	d008      	beq.n	8003318 <Munmunbot_Protocol+0xe0>
 8003306:	4b5d      	ldr	r3, [pc, #372]	; (800347c <Munmunbot_Protocol+0x244>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b0d      	cmp	r3, #13
 800330c:	d004      	beq.n	8003318 <Munmunbot_Protocol+0xe0>
 800330e:	4b5b      	ldr	r3, [pc, #364]	; (800347c <Munmunbot_Protocol+0x244>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b0e      	cmp	r3, #14
 8003314:	f040 83b0 	bne.w	8003a78 <Munmunbot_Protocol+0x840>
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
 8003318:	4b56      	ldr	r3, [pc, #344]	; (8003474 <Munmunbot_Protocol+0x23c>)
 800331a:	2205      	movs	r2, #5
 800331c:	701a      	strb	r2, [r3, #0]
			break;
 800331e:	e3ab      	b.n	8003a78 <Munmunbot_Protocol+0x840>
		case PP_Frame2_Data_0:
			 CheckSum += dataIn;
 8003320:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003324:	4b54      	ldr	r3, [pc, #336]	; (8003478 <Munmunbot_Protocol+0x240>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4413      	add	r3, r2
 800332a:	4a53      	ldr	r2, [pc, #332]	; (8003478 <Munmunbot_Protocol+0x240>)
 800332c:	6013      	str	r3, [r2, #0]
			 Data_HAck = ((dataIn&0b11111111)<<8)&0b1111111100000000;
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	b29a      	uxth	r2, r3
 8003334:	4b52      	ldr	r3, [pc, #328]	; (8003480 <Munmunbot_Protocol+0x248>)
 8003336:	801a      	strh	r2, [r3, #0]
			 parameter[0] = dataIn&0b1111;
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	b2da      	uxtb	r2, r3
 8003342:	4b50      	ldr	r3, [pc, #320]	; (8003484 <Munmunbot_Protocol+0x24c>)
 8003344:	701a      	strb	r2, [r3, #0]
			 parameter[1] = (dataIn>>4)&0b1111;
 8003346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800334a:	111b      	asrs	r3, r3, #4
 800334c:	b21b      	sxth	r3, r3
 800334e:	b2db      	uxtb	r3, r3
 8003350:	f003 030f 	and.w	r3, r3, #15
 8003354:	b2da      	uxtb	r2, r3
 8003356:	4b4b      	ldr	r3, [pc, #300]	; (8003484 <Munmunbot_Protocol+0x24c>)
 8003358:	705a      	strb	r2, [r3, #1]
			 Munmunbot_Protocol_State = PP_Frame2_Data_1;
 800335a:	4b46      	ldr	r3, [pc, #280]	; (8003474 <Munmunbot_Protocol+0x23c>)
 800335c:	2202      	movs	r2, #2
 800335e:	701a      	strb	r2, [r3, #0]

			 break;
 8003360:	e38d      	b.n	8003a7e <Munmunbot_Protocol+0x846>
		case PP_Frame2_Data_1:
			 CheckSum += dataIn;
 8003362:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003366:	4b44      	ldr	r3, [pc, #272]	; (8003478 <Munmunbot_Protocol+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4413      	add	r3, r2
 800336c:	4a42      	ldr	r2, [pc, #264]	; (8003478 <Munmunbot_Protocol+0x240>)
 800336e:	6013      	str	r3, [r2, #0]
			 Data_HAck = (dataIn&0b11111111) | Data_HAck;
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	b21a      	sxth	r2, r3
 8003376:	4b42      	ldr	r3, [pc, #264]	; (8003480 <Munmunbot_Protocol+0x248>)
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b21b      	sxth	r3, r3
 800337c:	4313      	orrs	r3, r2
 800337e:	b21b      	sxth	r3, r3
 8003380:	b29a      	uxth	r2, r3
 8003382:	4b3f      	ldr	r3, [pc, #252]	; (8003480 <Munmunbot_Protocol+0x248>)
 8003384:	801a      	strh	r2, [r3, #0]
			 parameter[2] = dataIn&0b1111;
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	b2da      	uxtb	r2, r3
 8003390:	4b3c      	ldr	r3, [pc, #240]	; (8003484 <Munmunbot_Protocol+0x24c>)
 8003392:	709a      	strb	r2, [r3, #2]
			 parameter[3] = (dataIn>>4)&0b1111;
 8003394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003398:	111b      	asrs	r3, r3, #4
 800339a:	b21b      	sxth	r3, r3
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	4b37      	ldr	r3, [pc, #220]	; (8003484 <Munmunbot_Protocol+0x24c>)
 80033a6:	70da      	strb	r2, [r3, #3]
			 Munmunbot_Protocol_State = PP_CheckSum;
 80033a8:	4b32      	ldr	r3, [pc, #200]	; (8003474 <Munmunbot_Protocol+0x23c>)
 80033aa:	2205      	movs	r2, #5
 80033ac:	701a      	strb	r2, [r3, #0]
			 break;
 80033ae:	e366      	b.n	8003a7e <Munmunbot_Protocol+0x846>

		case PP_Frame3_Data_0:
		     CheckSum += dataIn;
 80033b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033b4:	4b30      	ldr	r3, [pc, #192]	; (8003478 <Munmunbot_Protocol+0x240>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4413      	add	r3, r2
 80033ba:	4a2f      	ldr	r2, [pc, #188]	; (8003478 <Munmunbot_Protocol+0x240>)
 80033bc:	6013      	str	r3, [r2, #0]
		     n_station = dataIn;
 80033be:	88fa      	ldrh	r2, [r7, #6]
 80033c0:	4b31      	ldr	r3, [pc, #196]	; (8003488 <Munmunbot_Protocol+0x250>)
 80033c2:	801a      	strh	r2, [r3, #0]
		     n_station_mem = n_station;
 80033c4:	4b30      	ldr	r3, [pc, #192]	; (8003488 <Munmunbot_Protocol+0x250>)
 80033c6:	881a      	ldrh	r2, [r3, #0]
 80033c8:	4b30      	ldr	r3, [pc, #192]	; (800348c <Munmunbot_Protocol+0x254>)
 80033ca:	801a      	strh	r2, [r3, #0]
		     Munmunbot_Protocol_State = PP_Frame3_Data_1;
 80033cc:	4b29      	ldr	r3, [pc, #164]	; (8003474 <Munmunbot_Protocol+0x23c>)
 80033ce:	2204      	movs	r2, #4
 80033d0:	701a      	strb	r2, [r3, #0]

		   break;
 80033d2:	e354      	b.n	8003a7e <Munmunbot_Protocol+0x846>

		case PP_Frame3_Data_1:
				CheckSum += dataIn;
 80033d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033d8:	4b27      	ldr	r3, [pc, #156]	; (8003478 <Munmunbot_Protocol+0x240>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4413      	add	r3, r2
 80033de:	4a26      	ldr	r2, [pc, #152]	; (8003478 <Munmunbot_Protocol+0x240>)
 80033e0:	6013      	str	r3, [r2, #0]
				if (n_station >= 2)
 80033e2:	4b29      	ldr	r3, [pc, #164]	; (8003488 <Munmunbot_Protocol+0x250>)
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d927      	bls.n	800343a <Munmunbot_Protocol+0x202>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	4a28      	ldr	r2, [pc, #160]	; (8003490 <Munmunbot_Protocol+0x258>)
 80033f0:	7812      	ldrb	r2, [r2, #0]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	b2d9      	uxtb	r1, r3
 80033f8:	4b22      	ldr	r3, [pc, #136]	; (8003484 <Munmunbot_Protocol+0x24c>)
 80033fa:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 80033fc:	4b24      	ldr	r3, [pc, #144]	; (8003490 <Munmunbot_Protocol+0x258>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	3301      	adds	r3, #1
 8003402:	b2da      	uxtb	r2, r3
 8003404:	4b22      	ldr	r3, [pc, #136]	; (8003490 <Munmunbot_Protocol+0x258>)
 8003406:	701a      	strb	r2, [r3, #0]
					parameter[parameter_ptr] = (dataIn>>4)&0b1111;
 8003408:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800340c:	111b      	asrs	r3, r3, #4
 800340e:	b21b      	sxth	r3, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	4a1f      	ldr	r2, [pc, #124]	; (8003490 <Munmunbot_Protocol+0x258>)
 8003414:	7812      	ldrb	r2, [r2, #0]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	b2d9      	uxtb	r1, r3
 800341c:	4b19      	ldr	r3, [pc, #100]	; (8003484 <Munmunbot_Protocol+0x24c>)
 800341e:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8003420:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <Munmunbot_Protocol+0x258>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	3301      	adds	r3, #1
 8003426:	b2da      	uxtb	r2, r3
 8003428:	4b19      	ldr	r3, [pc, #100]	; (8003490 <Munmunbot_Protocol+0x258>)
 800342a:	701a      	strb	r2, [r3, #0]
					n_station -= 2;
 800342c:	4b16      	ldr	r3, [pc, #88]	; (8003488 <Munmunbot_Protocol+0x250>)
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	3b02      	subs	r3, #2
 8003432:	b29a      	uxth	r2, r3
 8003434:	4b14      	ldr	r3, [pc, #80]	; (8003488 <Munmunbot_Protocol+0x250>)
 8003436:	801a      	strh	r2, [r3, #0]
 8003438:	e012      	b.n	8003460 <Munmunbot_Protocol+0x228>
				}
				else if (n_station == 1)
 800343a:	4b13      	ldr	r3, [pc, #76]	; (8003488 <Munmunbot_Protocol+0x250>)
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d10e      	bne.n	8003460 <Munmunbot_Protocol+0x228>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	4a12      	ldr	r2, [pc, #72]	; (8003490 <Munmunbot_Protocol+0x258>)
 8003448:	7812      	ldrb	r2, [r2, #0]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	b2d9      	uxtb	r1, r3
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <Munmunbot_Protocol+0x24c>)
 8003452:	5499      	strb	r1, [r3, r2]
					n_station -= 1;
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <Munmunbot_Protocol+0x250>)
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <Munmunbot_Protocol+0x250>)
 800345e:	801a      	strh	r2, [r3, #0]
				}
				if  (n_station == 0)
 8003460:	4b09      	ldr	r3, [pc, #36]	; (8003488 <Munmunbot_Protocol+0x250>)
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	f040 8309 	bne.w	8003a7c <Munmunbot_Protocol+0x844>
				{
					Munmunbot_Protocol_State = PP_CheckSum;
 800346a:	4b02      	ldr	r3, [pc, #8]	; (8003474 <Munmunbot_Protocol+0x23c>)
 800346c:	2205      	movs	r2, #5
 800346e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8003470:	e304      	b.n	8003a7c <Munmunbot_Protocol+0x844>
 8003472:	bf00      	nop
 8003474:	200000d8 	.word	0x200000d8
 8003478:	2000033c 	.word	0x2000033c
 800347c:	20000340 	.word	0x20000340
 8003480:	20000342 	.word	0x20000342
 8003484:	20000344 	.word	0x20000344
 8003488:	20000444 	.word	0x20000444
 800348c:	20000446 	.word	0x20000446
 8003490:	20000448 	.word	0x20000448

			case PP_CheckSum:
			{
				CheckSum = (~CheckSum) & 0xff;
 8003494:	4bb8      	ldr	r3, [pc, #736]	; (8003778 <Munmunbot_Protocol+0x540>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	43db      	mvns	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	4ab6      	ldr	r2, [pc, #728]	; (8003778 <Munmunbot_Protocol+0x540>)
 800349e:	6013      	str	r3, [r2, #0]
				if (CheckSum == dataIn)
 80034a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034a4:	4bb4      	ldr	r3, [pc, #720]	; (8003778 <Munmunbot_Protocol+0x540>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	f040 82d1 	bne.w	8003a50 <Munmunbot_Protocol+0x818>
				{

					switch (ProtocolMode)
 80034ae:	4bb3      	ldr	r3, [pc, #716]	; (800377c <Munmunbot_Protocol+0x544>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	2b0d      	cmp	r3, #13
 80034b6:	f200 82cc 	bhi.w	8003a52 <Munmunbot_Protocol+0x81a>
 80034ba:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <Munmunbot_Protocol+0x288>)
 80034bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c0:	080034f9 	.word	0x080034f9
 80034c4:	0800356d 	.word	0x0800356d
 80034c8:	08003583 	.word	0x08003583
 80034cc:	08003599 	.word	0x08003599
 80034d0:	080035fb 	.word	0x080035fb
 80034d4:	08003619 	.word	0x08003619
 80034d8:	0800363d 	.word	0x0800363d
 80034dc:	08003687 	.word	0x08003687
 80034e0:	080036b1 	.word	0x080036b1
 80034e4:	080037bd 	.word	0x080037bd
 80034e8:	080038cf 	.word	0x080038cf
 80034ec:	08003a09 	.word	0x08003a09
 80034f0:	08003a1f 	.word	0x08003a1f
 80034f4:	08003a35 	.word	0x08003a35
					{
					case 1: ///Test Command ##Complete##
						{
						uint8_t temp[] =
 80034f8:	2391      	movs	r3, #145	; 0x91
 80034fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						{0b10010001,
						((parameter[1] & 0xff) << 4)  | (parameter[0]& 0xff),
 80034fe:	4ba0      	ldr	r3, [pc, #640]	; (8003780 <Munmunbot_Protocol+0x548>)
 8003500:	785b      	ldrb	r3, [r3, #1]
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	b25a      	sxtb	r2, r3
 8003506:	4b9e      	ldr	r3, [pc, #632]	; (8003780 <Munmunbot_Protocol+0x548>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	b25b      	sxtb	r3, r3
 800350c:	4313      	orrs	r3, r2
 800350e:	b25b      	sxtb	r3, r3
 8003510:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 8003512:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						((parameter[3] & 0xff) << 4)  | (parameter[2]& 0xff),
 8003516:	4b9a      	ldr	r3, [pc, #616]	; (8003780 <Munmunbot_Protocol+0x548>)
 8003518:	78db      	ldrb	r3, [r3, #3]
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	b25a      	sxtb	r2, r3
 800351e:	4b98      	ldr	r3, [pc, #608]	; (8003780 <Munmunbot_Protocol+0x548>)
 8003520:	789b      	ldrb	r3, [r3, #2]
 8003522:	b25b      	sxtb	r3, r3
 8003524:	4313      	orrs	r3, r2
 8003526:	b25b      	sxtb	r3, r3
 8003528:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 800352a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800352e:	2300      	movs	r3, #0
 8003530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003534:	2358      	movs	r3, #88	; 0x58
 8003536:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800353a:	2375      	movs	r3, #117	; 0x75
 800353c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						0b0 , 0x58 ,0x75 };
						temp[3] = (~(temp[0]+temp[1]+temp[2]))& 0xff;
 8003540:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003544:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003548:	4413      	add	r3, r2
 800354a:	b2da      	uxtb	r2, r3
 800354c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003550:	4413      	add	r3, r2
 8003552:	b2db      	uxtb	r3, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						UARTTxWrite(uart, temp, 6);
 800355c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003560:	2206      	movs	r2, #6
 8003562:	4619      	mov	r1, r3
 8003564:	6838      	ldr	r0, [r7, #0]
 8003566:	f7ff fdf9 	bl	800315c <UARTTxWrite>
						}
						break;
 800356a:	e272      	b.n	8003a52 <Munmunbot_Protocol+0x81a>
					case 2: //Connect MCU ##Complete##
						if (Munmunbot_State == STATE_Disconnected)
 800356c:	4b85      	ldr	r3, [pc, #532]	; (8003784 <Munmunbot_Protocol+0x54c>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <Munmunbot_Protocol+0x342>
						{
							Munmunbot_State = STATE_Idle;
 8003574:	4b83      	ldr	r3, [pc, #524]	; (8003784 <Munmunbot_Protocol+0x54c>)
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 800357a:	6838      	ldr	r0, [r7, #0]
 800357c:	f7ff fe36 	bl	80031ec <ACK1Return>
						break;
 8003580:	e267      	b.n	8003a52 <Munmunbot_Protocol+0x81a>
					case 3: //Disconnect MCU ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003582:	4b80      	ldr	r3, [pc, #512]	; (8003784 <Munmunbot_Protocol+0x54c>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d102      	bne.n	8003590 <Munmunbot_Protocol+0x358>
						{
							Munmunbot_State = STATE_Disconnected;
 800358a:	4b7e      	ldr	r3, [pc, #504]	; (8003784 <Munmunbot_Protocol+0x54c>)
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003590:	6838      	ldr	r0, [r7, #0]
 8003592:	f7ff fe2b 	bl	80031ec <ACK1Return>
						break;
 8003596:	e25c      	b.n	8003a52 <Munmunbot_Protocol+0x81a>
					case 4: //Set Angular Velocity ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003598:	4b7a      	ldr	r3, [pc, #488]	; (8003784 <Munmunbot_Protocol+0x54c>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d128      	bne.n	80035f2 <Munmunbot_Protocol+0x3ba>
						{
							CUSSStruc.RPMp = 0.925*(Data_HAck*10.0)/255.0;
 80035a0:	4b79      	ldr	r3, [pc, #484]	; (8003788 <Munmunbot_Protocol+0x550>)
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fc ff69 	bl	800047c <__aeabi_i2d>
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	4b77      	ldr	r3, [pc, #476]	; (800378c <Munmunbot_Protocol+0x554>)
 80035b0:	f7fc ffce 	bl	8000550 <__aeabi_dmul>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4610      	mov	r0, r2
 80035ba:	4619      	mov	r1, r3
 80035bc:	a36a      	add	r3, pc, #424	; (adr r3, 8003768 <Munmunbot_Protocol+0x530>)
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	f7fc ffc5 	bl	8000550 <__aeabi_dmul>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	a368      	add	r3, pc, #416	; (adr r3, 8003770 <Munmunbot_Protocol+0x538>)
 80035d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d4:	f7fd f8e6 	bl	80007a4 <__aeabi_ddiv>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4610      	mov	r0, r2
 80035de:	4619      	mov	r1, r3
 80035e0:	f7fd fa86 	bl	8000af0 <__aeabi_d2f>
 80035e4:	4603      	mov	r3, r0
 80035e6:	4a6a      	ldr	r2, [pc, #424]	; (8003790 <Munmunbot_Protocol+0x558>)
 80035e8:	6093      	str	r3, [r2, #8]
							TrajectoryGenerationVelocityMaxSetting(&TrjStruc , &CUSSStruc);
 80035ea:	4969      	ldr	r1, [pc, #420]	; (8003790 <Munmunbot_Protocol+0x558>)
 80035ec:	4869      	ldr	r0, [pc, #420]	; (8003794 <Munmunbot_Protocol+0x55c>)
 80035ee:	f7fe fd27 	bl	8002040 <TrajectoryGenerationVelocityMaxSetting>
						}
						ACK1Return(uart);
 80035f2:	6838      	ldr	r0, [r7, #0]
 80035f4:	f7ff fdfa 	bl	80031ec <ACK1Return>
						break;
 80035f8:	e22b      	b.n	8003a52 <Munmunbot_Protocol+0x81a>
					case 5:   //Set Angular pos ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80035fa:	4b62      	ldr	r3, [pc, #392]	; (8003784 <Munmunbot_Protocol+0x54c>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d106      	bne.n	8003610 <Munmunbot_Protocol+0x3d8>
						{
							Angularpos_InputNumber = Data_HAck;
 8003602:	4b61      	ldr	r3, [pc, #388]	; (8003788 <Munmunbot_Protocol+0x550>)
 8003604:	881a      	ldrh	r2, [r3, #0]
 8003606:	4b64      	ldr	r3, [pc, #400]	; (8003798 <Munmunbot_Protocol+0x560>)
 8003608:	801a      	strh	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Pos_Directly;
 800360a:	4b64      	ldr	r3, [pc, #400]	; (800379c <Munmunbot_Protocol+0x564>)
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003610:	6838      	ldr	r0, [r7, #0]
 8003612:	f7ff fdeb 	bl	80031ec <ACK1Return>
						break;
 8003616:	e21c      	b.n	8003a52 <Munmunbot_Protocol+0x81a>
					case 6:  /// Set 1 Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003618:	4b5a      	ldr	r3, [pc, #360]	; (8003784 <Munmunbot_Protocol+0x54c>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d109      	bne.n	8003634 <Munmunbot_Protocol+0x3fc>
						{
//							Angularpos_InputArray[0] = parameter[0];
							Angularpos_InputArray[0] = parameter[2];    //150 0x00 0x0A Checksum
 8003620:	4b57      	ldr	r3, [pc, #348]	; (8003780 <Munmunbot_Protocol+0x548>)
 8003622:	789a      	ldrb	r2, [r3, #2]
 8003624:	4b5e      	ldr	r3, [pc, #376]	; (80037a0 <Munmunbot_Protocol+0x568>)
 8003626:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Goal_1_Station;
 8003628:	4b5c      	ldr	r3, [pc, #368]	; (800379c <Munmunbot_Protocol+0x564>)
 800362a:	2202      	movs	r2, #2
 800362c:	701a      	strb	r2, [r3, #0]
							NumberOfStationToGo = 1;
 800362e:	4b5d      	ldr	r3, [pc, #372]	; (80037a4 <Munmunbot_Protocol+0x56c>)
 8003630:	2201      	movs	r2, #1
 8003632:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003634:	6838      	ldr	r0, [r7, #0]
 8003636:	f7ff fdd9 	bl	80031ec <ACK1Return>
						break;
 800363a:	e20a      	b.n	8003a52 <Munmunbot_Protocol+0x81a>
					case 7:  /// Set n Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 800363c:	4b51      	ldr	r3, [pc, #324]	; (8003784 <Munmunbot_Protocol+0x54c>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d11c      	bne.n	800367e <Munmunbot_Protocol+0x446>
						{
							MovingLinkMode = LMM_Set_Goal_n_Station;
 8003644:	4b55      	ldr	r3, [pc, #340]	; (800379c <Munmunbot_Protocol+0x564>)
 8003646:	2203      	movs	r2, #3
 8003648:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 800364a:	2300      	movs	r3, #0
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
 800364e:	e00b      	b.n	8003668 <Munmunbot_Protocol+0x430>
							{
								Angularpos_InputArray[i] = parameter[i];
 8003650:	4a4b      	ldr	r2, [pc, #300]	; (8003780 <Munmunbot_Protocol+0x548>)
 8003652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003654:	4413      	add	r3, r2
 8003656:	7819      	ldrb	r1, [r3, #0]
 8003658:	4a51      	ldr	r2, [pc, #324]	; (80037a0 <Munmunbot_Protocol+0x568>)
 800365a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365c:	4413      	add	r3, r2
 800365e:	460a      	mov	r2, r1
 8003660:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8003662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003664:	3301      	adds	r3, #1
 8003666:	637b      	str	r3, [r7, #52]	; 0x34
 8003668:	4b4f      	ldr	r3, [pc, #316]	; (80037a8 <Munmunbot_Protocol+0x570>)
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003670:	4293      	cmp	r3, r2
 8003672:	dbed      	blt.n	8003650 <Munmunbot_Protocol+0x418>
							}
							NumberOfStationToGo = n_station_mem;
 8003674:	4b4c      	ldr	r3, [pc, #304]	; (80037a8 <Munmunbot_Protocol+0x570>)
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	b2da      	uxtb	r2, r3
 800367a:	4b4a      	ldr	r3, [pc, #296]	; (80037a4 <Munmunbot_Protocol+0x56c>)
 800367c:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 800367e:	6838      	ldr	r0, [r7, #0]
 8003680:	f7ff fdb4 	bl	80031ec <ACK1Return>
						break;
 8003684:	e1e5      	b.n	8003a52 <Munmunbot_Protocol+0x81a>
					case 8:  /// Go go ##Complete##  ///But must implement return ACK after it's done
						if (Munmunbot_State == STATE_Idle)
 8003686:	4b3f      	ldr	r3, [pc, #252]	; (8003784 <Munmunbot_Protocol+0x54c>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d106      	bne.n	800369c <Munmunbot_Protocol+0x464>
						{
							Munmunbot_State = STATE_PrepareDATA;
 800368e:	4b3d      	ldr	r3, [pc, #244]	; (8003784 <Munmunbot_Protocol+0x54c>)
 8003690:	2202      	movs	r2, #2
 8003692:	701a      	strb	r2, [r3, #0]
							ACK1Return(uart);
 8003694:	6838      	ldr	r0, [r7, #0]
 8003696:	f7ff fda9 	bl	80031ec <ACK1Return>
								{0x58 ,  0x75 ,
										70,  110};  ///ACK1 + ACK2
								UARTTxWrite(uart, temp, 4);
							}
						}
						break;
 800369a:	e1da      	b.n	8003a52 <Munmunbot_Protocol+0x81a>
								uint8_t temp[] =
 800369c:	4b43      	ldr	r3, [pc, #268]	; (80037ac <Munmunbot_Protocol+0x574>)
 800369e:	623b      	str	r3, [r7, #32]
								UARTTxWrite(uart, temp, 4);
 80036a0:	f107 0320 	add.w	r3, r7, #32
 80036a4:	2204      	movs	r2, #4
 80036a6:	4619      	mov	r1, r3
 80036a8:	6838      	ldr	r0, [r7, #0]
 80036aa:	f7ff fd57 	bl	800315c <UARTTxWrite>
						break;
 80036ae:	e1d0      	b.n	8003a52 <Munmunbot_Protocol+0x81a>

					case 9:  /// Return Current Station   ##Complete##

						{
							uint8_t temp[] =
 80036b0:	4a3f      	ldr	r2, [pc, #252]	; (80037b0 <Munmunbot_Protocol+0x578>)
 80036b2:	f107 0318 	add.w	r3, r7, #24
 80036b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036ba:	6018      	str	r0, [r3, #0]
 80036bc:	3304      	adds	r3, #4
 80036be:	8019      	strh	r1, [r3, #0]
							{0x58 ,  0x75 ,
									153,  0b0,  0b0, 0b0}; ///ACK1 + Mode 9
							uint8_t Shift = 2;
 80036c0:	2302      	movs	r3, #2
 80036c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
							DataForReturn = Current_Station&(0xff);
 80036c6:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <Munmunbot_Protocol+0x57c>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	4b3a      	ldr	r3, [pc, #232]	; (80037b8 <Munmunbot_Protocol+0x580>)
 80036ce:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 80036d0:	4b39      	ldr	r3, [pc, #228]	; (80037b8 <Munmunbot_Protocol+0x580>)
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	0a1b      	lsrs	r3, r3, #8
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80036dc:	3301      	adds	r3, #1
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80036e4:	440b      	add	r3, r1
 80036e6:	f803 2c20 	strb.w	r2, [r3, #-32]
							temp[2+Shift] = (DataForReturn)&(0xff);
 80036ea:	4b33      	ldr	r3, [pc, #204]	; (80037b8 <Munmunbot_Protocol+0x580>)
 80036ec:	881a      	ldrh	r2, [r3, #0]
 80036ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80036f2:	3302      	adds	r3, #2
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80036fa:	440b      	add	r3, r1
 80036fc:	f803 2c20 	strb.w	r2, [r3, #-32]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8003700:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003704:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003708:	4413      	add	r3, r2
 800370a:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 800370e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003712:	3301      	adds	r3, #1
 8003714:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003718:	440b      	add	r3, r1
 800371a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800371e:	4413      	add	r3, r2
 8003720:	b2da      	uxtb	r2, r3
 8003722:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003726:	3302      	adds	r3, #2
 8003728:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800372c:	440b      	add	r3, r1
 800372e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003732:	4413      	add	r3, r2
 8003734:	b2da      	uxtb	r2, r3
 8003736:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800373a:	3303      	adds	r3, #3
 800373c:	43d2      	mvns	r2, r2
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003744:	440b      	add	r3, r1
 8003746:	f803 2c20 	strb.w	r2, [r3, #-32]
							UARTTxWrite(uart, temp, 4+Shift);
 800374a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	3304      	adds	r3, #4
 8003752:	b29a      	uxth	r2, r3
 8003754:	f107 0318 	add.w	r3, r7, #24
 8003758:	4619      	mov	r1, r3
 800375a:	6838      	ldr	r0, [r7, #0]
 800375c:	f7ff fcfe 	bl	800315c <UARTTxWrite>
						}

						break;
 8003760:	e177      	b.n	8003a52 <Munmunbot_Protocol+0x81a>
 8003762:	bf00      	nop
 8003764:	f3af 8000 	nop.w
 8003768:	9999999a 	.word	0x9999999a
 800376c:	3fed9999 	.word	0x3fed9999
 8003770:	00000000 	.word	0x00000000
 8003774:	406fe000 	.word	0x406fe000
 8003778:	2000033c 	.word	0x2000033c
 800377c:	20000340 	.word	0x20000340
 8003780:	20000344 	.word	0x20000344
 8003784:	200000d9 	.word	0x200000d9
 8003788:	20000342 	.word	0x20000342
 800378c:	40240000 	.word	0x40240000
 8003790:	20000308 	.word	0x20000308
 8003794:	20000278 	.word	0x20000278
 8003798:	200001dc 	.word	0x200001dc
 800379c:	200001de 	.word	0x200001de
 80037a0:	200000dc 	.word	0x200000dc
 80037a4:	200001e0 	.word	0x200001e0
 80037a8:	20000446 	.word	0x20000446
 80037ac:	6e467558 	.word	0x6e467558
 80037b0:	08009f88 	.word	0x08009f88
 80037b4:	200001df 	.word	0x200001df
 80037b8:	2000044a 	.word	0x2000044a

					case 10: /// Return Angular Position  ##Complete##
						{
							uint8_t temp[] =
 80037bc:	4ab8      	ldr	r2, [pc, #736]	; (8003aa0 <Munmunbot_Protocol+0x868>)
 80037be:	f107 0310 	add.w	r3, r7, #16
 80037c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037c6:	6018      	str	r0, [r3, #0]
 80037c8:	3304      	adds	r3, #4
 80037ca:	8019      	strh	r1, [r3, #0]
							{0x58 , 0x75 ,154, 0b0,  0b0, 0b0};
							uint8_t Shift = 2;
 80037cc:	2302      	movs	r3, #2
 80037ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
							DataForReturn = ((((int) htim1.Instance->CNT) % (CUSSStruc.PPRxQEI))*2*3.141*10000)/(CUSSStruc.PPRxQEI);  ///pulse to (radian*10000)
 80037d2:	4bb4      	ldr	r3, [pc, #720]	; (8003aa4 <Munmunbot_Protocol+0x86c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	4ab3      	ldr	r2, [pc, #716]	; (8003aa8 <Munmunbot_Protocol+0x870>)
 80037da:	6852      	ldr	r2, [r2, #4]
 80037dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80037e0:	fb02 f201 	mul.w	r2, r2, r1
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fc fe37 	bl	800045c <__aeabi_ui2d>
 80037ee:	a3a6      	add	r3, pc, #664	; (adr r3, 8003a88 <Munmunbot_Protocol+0x850>)
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f7fc feac 	bl	8000550 <__aeabi_dmul>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4610      	mov	r0, r2
 80037fe:	4619      	mov	r1, r3
 8003800:	a3a3      	add	r3, pc, #652	; (adr r3, 8003a90 <Munmunbot_Protocol+0x858>)
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	f7fc fea3 	bl	8000550 <__aeabi_dmul>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4614      	mov	r4, r2
 8003810:	461d      	mov	r5, r3
 8003812:	4ba5      	ldr	r3, [pc, #660]	; (8003aa8 <Munmunbot_Protocol+0x870>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fc fe20 	bl	800045c <__aeabi_ui2d>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4620      	mov	r0, r4
 8003822:	4629      	mov	r1, r5
 8003824:	f7fc ffbe 	bl	80007a4 <__aeabi_ddiv>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4610      	mov	r0, r2
 800382e:	4619      	mov	r1, r3
 8003830:	f7fd f93e 	bl	8000ab0 <__aeabi_d2uiz>
 8003834:	4603      	mov	r3, r0
 8003836:	b29a      	uxth	r2, r3
 8003838:	4b9c      	ldr	r3, [pc, #624]	; (8003aac <Munmunbot_Protocol+0x874>)
 800383a:	801a      	strh	r2, [r3, #0]
//							DataForReturn = ((((int) PositionPIDController.OutputFeedback) % (CUSSStruc.PPRxQEI))*2*3.141*10000)/(CUSSStruc.PPRxQEI);  ///pulse to (radian*10000)
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 800383c:	4b9b      	ldr	r3, [pc, #620]	; (8003aac <Munmunbot_Protocol+0x874>)
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	0a1b      	lsrs	r3, r3, #8
 8003842:	b29a      	uxth	r2, r3
 8003844:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003848:	3301      	adds	r3, #1
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003850:	440b      	add	r3, r1
 8003852:	f803 2c28 	strb.w	r2, [r3, #-40]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8003856:	4b95      	ldr	r3, [pc, #596]	; (8003aac <Munmunbot_Protocol+0x874>)
 8003858:	881a      	ldrh	r2, [r3, #0]
 800385a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800385e:	3302      	adds	r3, #2
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003866:	440b      	add	r3, r1
 8003868:	f803 2c28 	strb.w	r2, [r3, #-40]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 800386c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003870:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003874:	4413      	add	r3, r2
 8003876:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 800387a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800387e:	3301      	adds	r3, #1
 8003880:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003884:	440b      	add	r3, r1
 8003886:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800388a:	4413      	add	r3, r2
 800388c:	b2da      	uxtb	r2, r3
 800388e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003892:	3302      	adds	r3, #2
 8003894:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003898:	440b      	add	r3, r1
 800389a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800389e:	4413      	add	r3, r2
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038a6:	3303      	adds	r3, #3
 80038a8:	43d2      	mvns	r2, r2
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80038b0:	440b      	add	r3, r1
 80038b2:	f803 2c28 	strb.w	r2, [r3, #-40]
							UARTTxWrite(uart, temp, 4+Shift);
 80038b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3304      	adds	r3, #4
 80038be:	b29a      	uxth	r2, r3
 80038c0:	f107 0310 	add.w	r3, r7, #16
 80038c4:	4619      	mov	r1, r3
 80038c6:	6838      	ldr	r0, [r7, #0]
 80038c8:	f7ff fc48 	bl	800315c <UARTTxWrite>
						}
						break;
 80038cc:	e0c1      	b.n	8003a52 <Munmunbot_Protocol+0x81a>

					case 11: /// Return Angular Velocity Max  ##Complete##
						{
							uint8_t temp[] =
 80038ce:	4a78      	ldr	r2, [pc, #480]	; (8003ab0 <Munmunbot_Protocol+0x878>)
 80038d0:	f107 0308 	add.w	r3, r7, #8
 80038d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038d8:	6018      	str	r0, [r3, #0]
 80038da:	3304      	adds	r3, #4
 80038dc:	8019      	strh	r1, [r3, #0]
							{ 0x58, 0x75, 155, 0b0,  0b0, 0b0 };
							uint8_t Shift = 2;
 80038de:	2302      	movs	r3, #2
 80038e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
//							float temp2  = ( TrjStruc.AngularVelocityMax_Setting*60.0 )/( ( float ) CUSSStruc.PPRxQEI );  ///pps to RPM
							float temp3 = ( abs( VelocityPIDController.OutputFeedback )*60.0 )/( ( float ) CUSSStruc.PPRxQEI );
 80038e4:	4b73      	ldr	r3, [pc, #460]	; (8003ab4 <Munmunbot_Protocol+0x87c>)
 80038e6:	edd3 7a08 	vldr	s15, [r3, #32]
 80038ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038ee:	ee17 3a90 	vmov	r3, s15
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bfb8      	it	lt
 80038f6:	425b      	neglt	r3, r3
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fc fdbf 	bl	800047c <__aeabi_i2d>
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	4b6d      	ldr	r3, [pc, #436]	; (8003ab8 <Munmunbot_Protocol+0x880>)
 8003904:	f7fc fe24 	bl	8000550 <__aeabi_dmul>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4614      	mov	r4, r2
 800390e:	461d      	mov	r5, r3
 8003910:	4b65      	ldr	r3, [pc, #404]	; (8003aa8 <Munmunbot_Protocol+0x870>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	ee07 3a90 	vmov	s15, r3
 8003918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391c:	ee17 0a90 	vmov	r0, s15
 8003920:	f7fc fdbe 	bl	80004a0 <__aeabi_f2d>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	4620      	mov	r0, r4
 800392a:	4629      	mov	r1, r5
 800392c:	f7fc ff3a 	bl	80007a4 <__aeabi_ddiv>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4610      	mov	r0, r2
 8003936:	4619      	mov	r1, r3
 8003938:	f7fd f8da 	bl	8000af0 <__aeabi_d2f>
 800393c:	4603      	mov	r3, r0
 800393e:	62fb      	str	r3, [r7, #44]	; 0x2c
							DataForReturn = ( temp3 * 255.0 )/10.0;
 8003940:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003942:	f7fc fdad 	bl	80004a0 <__aeabi_f2d>
 8003946:	a354      	add	r3, pc, #336	; (adr r3, 8003a98 <Munmunbot_Protocol+0x860>)
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	f7fc fe00 	bl	8000550 <__aeabi_dmul>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4610      	mov	r0, r2
 8003956:	4619      	mov	r1, r3
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	4b57      	ldr	r3, [pc, #348]	; (8003abc <Munmunbot_Protocol+0x884>)
 800395e:	f7fc ff21 	bl	80007a4 <__aeabi_ddiv>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4610      	mov	r0, r2
 8003968:	4619      	mov	r1, r3
 800396a:	f7fd f8a1 	bl	8000ab0 <__aeabi_d2uiz>
 800396e:	4603      	mov	r3, r0
 8003970:	b29a      	uxth	r2, r3
 8003972:	4b4e      	ldr	r3, [pc, #312]	; (8003aac <Munmunbot_Protocol+0x874>)
 8003974:	801a      	strh	r2, [r3, #0]
							temp[ 1+Shift ] = ( DataForReturn>>8 )&( 0xff );
 8003976:	4b4d      	ldr	r3, [pc, #308]	; (8003aac <Munmunbot_Protocol+0x874>)
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	b29a      	uxth	r2, r3
 800397e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003982:	3301      	adds	r3, #1
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800398a:	440b      	add	r3, r1
 800398c:	f803 2c30 	strb.w	r2, [r3, #-48]
							temp[ 2+Shift ] = ( DataForReturn )&( 0xff );
 8003990:	4b46      	ldr	r3, [pc, #280]	; (8003aac <Munmunbot_Protocol+0x874>)
 8003992:	881a      	ldrh	r2, [r3, #0]
 8003994:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003998:	3302      	adds	r3, #2
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80039a0:	440b      	add	r3, r1
 80039a2:	f803 2c30 	strb.w	r2, [r3, #-48]
							temp[ 3+Shift ] = ~( temp[ 0+Shift ]+temp[ 1+Shift ]+temp[ 2+Shift ] );
 80039a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80039ae:	4413      	add	r3, r2
 80039b0:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 80039b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039b8:	3301      	adds	r3, #1
 80039ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80039be:	440b      	add	r3, r1
 80039c0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80039c4:	4413      	add	r3, r2
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039cc:	3302      	adds	r3, #2
 80039ce:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80039d2:	440b      	add	r3, r1
 80039d4:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80039d8:	4413      	add	r3, r2
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039e0:	3303      	adds	r3, #3
 80039e2:	43d2      	mvns	r2, r2
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80039ea:	440b      	add	r3, r1
 80039ec:	f803 2c30 	strb.w	r2, [r3, #-48]
							UARTTxWrite( uart, temp, 4+Shift );
 80039f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3304      	adds	r3, #4
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	f107 0308 	add.w	r3, r7, #8
 80039fe:	4619      	mov	r1, r3
 8003a00:	6838      	ldr	r0, [r7, #0]
 8003a02:	f7ff fbab 	bl	800315c <UARTTxWrite>
						}
						break;
 8003a06:	e024      	b.n	8003a52 <Munmunbot_Protocol+0x81a>

					case 12:  //Enable Gripper
						if (Munmunbot_State == STATE_Idle)
 8003a08:	4b2d      	ldr	r3, [pc, #180]	; (8003ac0 <Munmunbot_Protocol+0x888>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d102      	bne.n	8003a16 <Munmunbot_Protocol+0x7de>
						{
							GripperEnable = 1;
 8003a10:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <Munmunbot_Protocol+0x88c>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003a16:	6838      	ldr	r0, [r7, #0]
 8003a18:	f7ff fbe8 	bl	80031ec <ACK1Return>
						break;
 8003a1c:	e019      	b.n	8003a52 <Munmunbot_Protocol+0x81a>
					case 13: //Disable Gripper
						if (Munmunbot_State == STATE_Idle)
 8003a1e:	4b28      	ldr	r3, [pc, #160]	; (8003ac0 <Munmunbot_Protocol+0x888>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d102      	bne.n	8003a2c <Munmunbot_Protocol+0x7f4>
						{
							GripperEnable = 0;
 8003a26:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <Munmunbot_Protocol+0x88c>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003a2c:	6838      	ldr	r0, [r7, #0]
 8003a2e:	f7ff fbdd 	bl	80031ec <ACK1Return>
						break;
 8003a32:	e00e      	b.n	8003a52 <Munmunbot_Protocol+0x81a>

					case 14: /// Sethome  ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003a34:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <Munmunbot_Protocol+0x888>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d105      	bne.n	8003a48 <Munmunbot_Protocol+0x810>
						{
							Munmunbot_State = STATE_SetHome;
 8003a3c:	4b20      	ldr	r3, [pc, #128]	; (8003ac0 <Munmunbot_Protocol+0x888>)
 8003a3e:	2206      	movs	r2, #6
 8003a40:	701a      	strb	r2, [r3, #0]
							SethomeMode = SetHomeState_0;
 8003a42:	4b21      	ldr	r3, [pc, #132]	; (8003ac8 <Munmunbot_Protocol+0x890>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003a48:	6838      	ldr	r0, [r7, #0]
 8003a4a:	f7ff fbcf 	bl	80031ec <ACK1Return>
						break;
 8003a4e:	e000      	b.n	8003a52 <Munmunbot_Protocol+0x81a>
				    }
			   }
 8003a50:	bf00      	nop
			n_station = 0;
 8003a52:	4b1e      	ldr	r3, [pc, #120]	; (8003acc <Munmunbot_Protocol+0x894>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	801a      	strh	r2, [r3, #0]
			ProtocolMode = 0;
 8003a58:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <Munmunbot_Protocol+0x898>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
			parameter_ptr = 0;
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <Munmunbot_Protocol+0x89c>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]
			Data_HAck = 0;
 8003a64:	4b1c      	ldr	r3, [pc, #112]	; (8003ad8 <Munmunbot_Protocol+0x8a0>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	801a      	strh	r2, [r3, #0]
			CheckSum = 0;
 8003a6a:	4b1c      	ldr	r3, [pc, #112]	; (8003adc <Munmunbot_Protocol+0x8a4>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
			Munmunbot_Protocol_State = PP_STARTandMode;
 8003a70:	4b1b      	ldr	r3, [pc, #108]	; (8003ae0 <Munmunbot_Protocol+0x8a8>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	701a      	strb	r2, [r3, #0]
			break;
 8003a76:	e002      	b.n	8003a7e <Munmunbot_Protocol+0x846>
			break;
 8003a78:	bf00      	nop
 8003a7a:	e000      	b.n	8003a7e <Munmunbot_Protocol+0x846>
				break;
 8003a7c:	bf00      	nop
			}
	}
}
 8003a7e:	bf00      	nop
 8003a80:	3738      	adds	r7, #56	; 0x38
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bdb0      	pop	{r4, r5, r7, pc}
 8003a86:	bf00      	nop
 8003a88:	9ba5e354 	.word	0x9ba5e354
 8003a8c:	400920c4 	.word	0x400920c4
 8003a90:	00000000 	.word	0x00000000
 8003a94:	40c38800 	.word	0x40c38800
 8003a98:	00000000 	.word	0x00000000
 8003a9c:	406fe000 	.word	0x406fe000
 8003aa0:	08009f90 	.word	0x08009f90
 8003aa4:	200005b4 	.word	0x200005b4
 8003aa8:	20000308 	.word	0x20000308
 8003aac:	2000044a 	.word	0x2000044a
 8003ab0:	08009f98 	.word	0x08009f98
 8003ab4:	20000238 	.word	0x20000238
 8003ab8:	404e0000 	.word	0x404e0000
 8003abc:	40240000 	.word	0x40240000
 8003ac0:	200000d9 	.word	0x200000d9
 8003ac4:	200001ea 	.word	0x200001ea
 8003ac8:	200000da 	.word	0x200000da
 8003acc:	20000444 	.word	0x20000444
 8003ad0:	20000340 	.word	0x20000340
 8003ad4:	20000448 	.word	0x20000448
 8003ad8:	20000342 	.word	0x20000342
 8003adc:	2000033c 	.word	0x2000033c
 8003ae0:	200000d8 	.word	0x200000d8

08003ae4 <PID_Reset>:

void PID_Reset()
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
	PositionPIDController.PreviousError = 0;
 8003ae8:	4b28      	ldr	r3, [pc, #160]	; (8003b8c <PID_Reset+0xa8>)
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	62da      	str	r2, [r3, #44]	; 0x2c
	PositionPIDController.Integral_Value = 0;
 8003af0:	4b26      	ldr	r3, [pc, #152]	; (8003b8c <PID_Reset+0xa8>)
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	625a      	str	r2, [r3, #36]	; 0x24
	PositionPIDController.ControllerOutput = 0;
 8003af8:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <PID_Reset+0xa8>)
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	615a      	str	r2, [r3, #20]
	PositionPIDController.NowError = 0;
 8003b00:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <PID_Reset+0xa8>)
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28
	PositionPIDController.OutputDesire = htim1.Instance->CNT;
 8003b08:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <PID_Reset+0xac>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	ee07 3a90 	vmov	s15, r3
 8003b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b16:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <PID_Reset+0xa8>)
 8003b18:	edc3 7a07 	vstr	s15, [r3, #28]
	PositionPIDController.OutputFeedback = htim1.Instance->CNT;
 8003b1c:	4b1c      	ldr	r3, [pc, #112]	; (8003b90 <PID_Reset+0xac>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2a:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <PID_Reset+0xa8>)
 8003b2c:	edc3 7a08 	vstr	s15, [r3, #32]
	PositionPIDController.PreviousPreviousError = 0;
 8003b30:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <PID_Reset+0xa8>)
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
	PositionPIDController.PreviousControllerOutput = 0;
 8003b38:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <PID_Reset+0xa8>)
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	619a      	str	r2, [r3, #24]


	VelocityPIDController.PreviousError = 0;
 8003b40:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <PID_Reset+0xb0>)
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	62da      	str	r2, [r3, #44]	; 0x2c
	VelocityPIDController.Integral_Value = 0;
 8003b48:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <PID_Reset+0xb0>)
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24
	VelocityPIDController.ControllerOutput = 0;
 8003b50:	4b10      	ldr	r3, [pc, #64]	; (8003b94 <PID_Reset+0xb0>)
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	615a      	str	r2, [r3, #20]
	VelocityPIDController.NowError = 0;
 8003b58:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <PID_Reset+0xb0>)
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	629a      	str	r2, [r3, #40]	; 0x28
	VelocityPIDController.OutputDesire = 0;
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <PID_Reset+0xb0>)
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	61da      	str	r2, [r3, #28]
	VelocityPIDController.OutputFeedback = 0;
 8003b68:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <PID_Reset+0xb0>)
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	621a      	str	r2, [r3, #32]
	VelocityPIDController.PreviousPreviousError = 0;
 8003b70:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <PID_Reset+0xb0>)
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
	VelocityPIDController.PreviousControllerOutput = 0;
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <PID_Reset+0xb0>)
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	200001f8 	.word	0x200001f8
 8003b90:	200005b4 	.word	0x200005b4
 8003b94:	20000238 	.word	0x20000238

08003b98 <LAMP_ON>:

void LAMP_ON(uint8_t lampnumber)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	71fb      	strb	r3, [r7, #7]
	if (lampnumber == 0)
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d110      	bne.n	8003bca <LAMP_ON+0x32>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003ba8:	2201      	movs	r2, #1
 8003baa:	2102      	movs	r1, #2
 8003bac:	4830      	ldr	r0, [pc, #192]	; (8003c70 <LAMP_ON+0xd8>)
 8003bae:	f001 fbab 	bl	8005308 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	2104      	movs	r1, #4
 8003bb6:	482e      	ldr	r0, [pc, #184]	; (8003c70 <LAMP_ON+0xd8>)
 8003bb8:	f001 fba6 	bl	8005308 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003bc2:	482c      	ldr	r0, [pc, #176]	; (8003c74 <LAMP_ON+0xdc>)
 8003bc4:	f001 fba0 	bl	8005308 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
	}
}
 8003bc8:	e04e      	b.n	8003c68 <LAMP_ON+0xd0>
	else if (lampnumber == 1)
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d110      	bne.n	8003bf2 <LAMP_ON+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	4826      	ldr	r0, [pc, #152]	; (8003c70 <LAMP_ON+0xd8>)
 8003bd6:	f001 fb97 	bl	8005308 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003bda:	2201      	movs	r2, #1
 8003bdc:	2104      	movs	r1, #4
 8003bde:	4824      	ldr	r0, [pc, #144]	; (8003c70 <LAMP_ON+0xd8>)
 8003be0:	f001 fb92 	bl	8005308 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003be4:	2201      	movs	r2, #1
 8003be6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003bea:	4822      	ldr	r0, [pc, #136]	; (8003c74 <LAMP_ON+0xdc>)
 8003bec:	f001 fb8c 	bl	8005308 <HAL_GPIO_WritePin>
}
 8003bf0:	e03a      	b.n	8003c68 <LAMP_ON+0xd0>
	else if (lampnumber == 2)
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d110      	bne.n	8003c1a <LAMP_ON+0x82>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	2102      	movs	r1, #2
 8003bfc:	481c      	ldr	r0, [pc, #112]	; (8003c70 <LAMP_ON+0xd8>)
 8003bfe:	f001 fb83 	bl	8005308 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8003c02:	2200      	movs	r2, #0
 8003c04:	2104      	movs	r1, #4
 8003c06:	481a      	ldr	r0, [pc, #104]	; (8003c70 <LAMP_ON+0xd8>)
 8003c08:	f001 fb7e 	bl	8005308 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c12:	4818      	ldr	r0, [pc, #96]	; (8003c74 <LAMP_ON+0xdc>)
 8003c14:	f001 fb78 	bl	8005308 <HAL_GPIO_WritePin>
}
 8003c18:	e026      	b.n	8003c68 <LAMP_ON+0xd0>
	else if (lampnumber == 3)
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d110      	bne.n	8003c42 <LAMP_ON+0xaa>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003c20:	2201      	movs	r2, #1
 8003c22:	2102      	movs	r1, #2
 8003c24:	4812      	ldr	r0, [pc, #72]	; (8003c70 <LAMP_ON+0xd8>)
 8003c26:	f001 fb6f 	bl	8005308 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	2104      	movs	r1, #4
 8003c2e:	4810      	ldr	r0, [pc, #64]	; (8003c70 <LAMP_ON+0xd8>)
 8003c30:	f001 fb6a 	bl	8005308 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003c34:	2200      	movs	r2, #0
 8003c36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c3a:	480e      	ldr	r0, [pc, #56]	; (8003c74 <LAMP_ON+0xdc>)
 8003c3c:	f001 fb64 	bl	8005308 <HAL_GPIO_WritePin>
}
 8003c40:	e012      	b.n	8003c68 <LAMP_ON+0xd0>
	else if (lampnumber == 4)
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d10f      	bne.n	8003c68 <LAMP_ON+0xd0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2102      	movs	r1, #2
 8003c4c:	4808      	ldr	r0, [pc, #32]	; (8003c70 <LAMP_ON+0xd8>)
 8003c4e:	f001 fb5b 	bl	8005308 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8003c52:	2200      	movs	r2, #0
 8003c54:	2104      	movs	r1, #4
 8003c56:	4806      	ldr	r0, [pc, #24]	; (8003c70 <LAMP_ON+0xd8>)
 8003c58:	f001 fb56 	bl	8005308 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c62:	4804      	ldr	r0, [pc, #16]	; (8003c74 <LAMP_ON+0xdc>)
 8003c64:	f001 fb50 	bl	8005308 <HAL_GPIO_WritePin>
}
 8003c68:	bf00      	nop
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40020400 	.word	0x40020400
 8003c74:	40020000 	.word	0x40020000

08003c78 <Emergency_switch_trigger>:

void Emergency_switch_trigger()
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1)
 8003c7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c80:	481f      	ldr	r0, [pc, #124]	; (8003d00 <Emergency_switch_trigger+0x88>)
 8003c82:	f001 fb29 	bl	80052d8 <HAL_GPIO_ReadPin>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d136      	bne.n	8003cfa <Emergency_switch_trigger+0x82>
	{
		// Reset State Machine All
		Munmunbot_State = STATE_Disconnected;
 8003c8c:	4b1d      	ldr	r3, [pc, #116]	; (8003d04 <Emergency_switch_trigger+0x8c>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
		MovingLinkMode = LMM_Not_Set;
 8003c92:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <Emergency_switch_trigger+0x90>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
		SethomeMode = SetHomeState_0;
 8003c98:	4b1c      	ldr	r3, [pc, #112]	; (8003d0c <Emergency_switch_trigger+0x94>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
		TrjStruc.Mode = 0;
 8003c9e:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <Emergency_switch_trigger+0x98>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		TrjStruc.Submode = 0;
 8003ca6:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <Emergency_switch_trigger+0x98>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

		// Send back ACK to User-interface
		if ((Munmunbot_State == STATE_Calculation) || (Munmunbot_State == STATE_PrepareDATA) ||
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <Emergency_switch_trigger+0x8c>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d00b      	beq.n	8003cce <Emergency_switch_trigger+0x56>
 8003cb6:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <Emergency_switch_trigger+0x8c>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d007      	beq.n	8003cce <Emergency_switch_trigger+0x56>
				(Munmunbot_State == STATE_Link_Moving) || (Munmunbot_State == STATE_End_Effector_Working))
 8003cbe:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <Emergency_switch_trigger+0x8c>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
		if ((Munmunbot_State == STATE_Calculation) || (Munmunbot_State == STATE_PrepareDATA) ||
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d003      	beq.n	8003cce <Emergency_switch_trigger+0x56>
				(Munmunbot_State == STATE_Link_Moving) || (Munmunbot_State == STATE_End_Effector_Working))
 8003cc6:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <Emergency_switch_trigger+0x8c>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b05      	cmp	r3, #5
 8003ccc:	d102      	bne.n	8003cd4 <Emergency_switch_trigger+0x5c>
		{
			ACK2Return(&UART2);
 8003cce:	4811      	ldr	r0, [pc, #68]	; (8003d14 <Emergency_switch_trigger+0x9c>)
 8003cd0:	f7ff fa9e 	bl	8003210 <ACK2Return>
		}

		// Reset variable
		NumberOfStationToGo = 0;
 8003cd4:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <Emergency_switch_trigger+0xa0>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
		NumberOfStationPTR = 0;
 8003cda:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <Emergency_switch_trigger+0xa4>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
		Moving_Link_Task_Flag = 0;
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <Emergency_switch_trigger+0xa8>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	701a      	strb	r2, [r3, #0]

		// Stop the Motor
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003ce6:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <Emergency_switch_trigger+0xac>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2200      	movs	r2, #0
 8003cec:	635a      	str	r2, [r3, #52]	; 0x34
		TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8003cee:	4b0e      	ldr	r3, [pc, #56]	; (8003d28 <Emergency_switch_trigger+0xb0>)
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	4a07      	ldr	r2, [pc, #28]	; (8003d10 <Emergency_switch_trigger+0x98>)
 8003cf4:	66d3      	str	r3, [r2, #108]	; 0x6c

		PID_Reset();
 8003cf6:	f7ff fef5 	bl	8003ae4 <PID_Reset>
	}
}
 8003cfa:	bf00      	nop
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40020400 	.word	0x40020400
 8003d04:	200000d9 	.word	0x200000d9
 8003d08:	200001de 	.word	0x200001de
 8003d0c:	200000da 	.word	0x200000da
 8003d10:	20000278 	.word	0x20000278
 8003d14:	200000b8 	.word	0x200000b8
 8003d18:	200001e0 	.word	0x200001e0
 8003d1c:	200001e1 	.word	0x200001e1
 8003d20:	200001e8 	.word	0x200001e8
 8003d24:	2000050c 	.word	0x2000050c
 8003d28:	200001f8 	.word	0x200001f8

08003d2c <Controlling_the_LINK>:

void Controlling_the_LINK()
{
 8003d2c:	b5b0      	push	{r4, r5, r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
	  // GEN Trajectory
	  TrajectoryGenerationProcess();
 8003d30:	f7fe fc3e 	bl	80025b0 <TrajectoryGenerationProcess>
	  EncoderVelocityAndPosition_Update();
 8003d34:	f7fd ff1c 	bl	8001b70 <EncoderVelocityAndPosition_Update>
	  PIDController2in1();  ///use only position
 8003d38:	f7ff f82c 	bl	8002d94 <PIDController2in1>
//	  Plant_input = PositionPIDController.ControllerOutput;
	  Plant_input = VelocityPIDController.ControllerOutput;
 8003d3c:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <Controlling_the_LINK+0xb8>)
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	4a29      	ldr	r2, [pc, #164]	; (8003de8 <Controlling_the_LINK+0xbc>)
 8003d42:	6013      	str	r3, [r2, #0]

	  if (Plant_input >= 0) /// Setting DIR
 8003d44:	4b28      	ldr	r3, [pc, #160]	; (8003de8 <Controlling_the_LINK+0xbc>)
 8003d46:	edd3 7a00 	vldr	s15, [r3]
 8003d4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d52:	db0c      	blt.n	8003d6e <Controlling_the_LINK+0x42>
	  {
		  DCMotorStruc.DIR = 1;
 8003d54:	4b25      	ldr	r3, [pc, #148]	; (8003dec <Controlling_the_LINK+0xc0>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input);
 8003d5a:	4b23      	ldr	r3, [pc, #140]	; (8003de8 <Controlling_the_LINK+0xbc>)
 8003d5c:	edd3 7a00 	vldr	s15, [r3]
 8003d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d64:	ee17 2a90 	vmov	r2, s15
 8003d68:	4b20      	ldr	r3, [pc, #128]	; (8003dec <Controlling_the_LINK+0xc0>)
 8003d6a:	605a      	str	r2, [r3, #4]
 8003d6c:	e01b      	b.n	8003da6 <Controlling_the_LINK+0x7a>
	  }
	  else if (Plant_input < 0)
 8003d6e:	4b1e      	ldr	r3, [pc, #120]	; (8003de8 <Controlling_the_LINK+0xbc>)
 8003d70:	edd3 7a00 	vldr	s15, [r3]
 8003d74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7c:	d513      	bpl.n	8003da6 <Controlling_the_LINK+0x7a>
	  {
		  DCMotorStruc.DIR = 0;
 8003d7e:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <Controlling_the_LINK+0xc0>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input * -1.0);
 8003d84:	4b18      	ldr	r3, [pc, #96]	; (8003de8 <Controlling_the_LINK+0xbc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fc fb89 	bl	80004a0 <__aeabi_f2d>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	4614      	mov	r4, r2
 8003d94:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003d98:	4620      	mov	r0, r4
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	f7fc fe88 	bl	8000ab0 <__aeabi_d2uiz>
 8003da0:	4603      	mov	r3, r0
 8003da2:	4a12      	ldr	r2, [pc, #72]	; (8003dec <Controlling_the_LINK+0xc0>)
 8003da4:	6053      	str	r3, [r2, #4]
	  }

	  if (DCMotorStruc.PWMOut > 10000)   /// Saturation Output
 8003da6:	4b11      	ldr	r3, [pc, #68]	; (8003dec <Controlling_the_LINK+0xc0>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f242 7210 	movw	r2, #10000	; 0x2710
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d903      	bls.n	8003dba <Controlling_the_LINK+0x8e>
	  {
		 DCMotorStruc.PWMOut = 10000;
 8003db2:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <Controlling_the_LINK+0xc0>)
 8003db4:	f242 7210 	movw	r2, #10000	; 0x2710
 8003db8:	605a      	str	r2, [r3, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 8003dba:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <Controlling_the_LINK+0xc0>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	2180      	movs	r1, #128	; 0x80
 8003dc2:	480b      	ldr	r0, [pc, #44]	; (8003df0 <Controlling_the_LINK+0xc4>)
 8003dc4:	f001 faa0 	bl	8005308 <HAL_GPIO_WritePin>

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut); ///Setting PWM Pin
 8003dc8:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <Controlling_the_LINK+0xc8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a07      	ldr	r2, [pc, #28]	; (8003dec <Controlling_the_LINK+0xc0>)
 8003dce:	6852      	ldr	r2, [r2, #4]
 8003dd0:	635a      	str	r2, [r3, #52]	; 0x34
	  TrjStruc.Loop_Timestamp = micros();
 8003dd2:	f7fd fff3 	bl	8001dbc <micros>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4907      	ldr	r1, [pc, #28]	; (8003df8 <Controlling_the_LINK+0xcc>)
 8003ddc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8003de0:	bf00      	nop
 8003de2:	bdb0      	pop	{r4, r5, r7, pc}
 8003de4:	20000238 	.word	0x20000238
 8003de8:	200001e4 	.word	0x200001e4
 8003dec:	200000d0 	.word	0x200000d0
 8003df0:	40020800 	.word	0x40020800
 8003df4:	2000050c 	.word	0x2000050c
 8003df8:	20000278 	.word	0x20000278

08003dfc <SETHOME_StateMachine_Function>:

void SETHOME_StateMachine_Function()
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
	switch (SethomeMode)
 8003e00:	4b1c      	ldr	r3, [pc, #112]	; (8003e74 <SETHOME_StateMachine_Function+0x78>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d013      	beq.n	8003e30 <SETHOME_StateMachine_Function+0x34>
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	dc31      	bgt.n	8003e70 <SETHOME_StateMachine_Function+0x74>
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <SETHOME_StateMachine_Function+0x18>
 8003e10:	2b01      	cmp	r3, #1
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2000);
			SethomeMode = SetHomeState_1;
			break;
		case SetHomeState_1:
			break;
 8003e12:	e02d      	b.n	8003e70 <SETHOME_StateMachine_Function+0x74>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8003e14:	2200      	movs	r2, #0
 8003e16:	2180      	movs	r1, #128	; 0x80
 8003e18:	4817      	ldr	r0, [pc, #92]	; (8003e78 <SETHOME_StateMachine_Function+0x7c>)
 8003e1a:	f001 fa75 	bl	8005308 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2000);
 8003e1e:	4b17      	ldr	r3, [pc, #92]	; (8003e7c <SETHOME_StateMachine_Function+0x80>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003e26:	635a      	str	r2, [r3, #52]	; 0x34
			SethomeMode = SetHomeState_1;
 8003e28:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <SETHOME_StateMachine_Function+0x78>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]
			break;
 8003e2e:	e01f      	b.n	8003e70 <SETHOME_StateMachine_Function+0x74>
		case SetHomeState_2:

			SethomeMode = SetHomeState_0;
 8003e30:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <SETHOME_StateMachine_Function+0x78>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]
			Munmunbot_State = STATE_Idle;
 8003e36:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <SETHOME_StateMachine_Function+0x84>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 8003e3c:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <SETHOME_StateMachine_Function+0x88>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003e42:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <SETHOME_StateMachine_Function+0x80>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2200      	movs	r2, #0
 8003e48:	635a      	str	r2, [r3, #52]	; 0x34
			TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
 8003e4a:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <SETHOME_StateMachine_Function+0x8c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	ee07 3a90 	vmov	s15, r3
 8003e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e58:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <SETHOME_StateMachine_Function+0x90>)
 8003e5a:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			Moving_Link_Task_Flag = 0;
 8003e5e:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <SETHOME_StateMachine_Function+0x94>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]
			sethomeTrigger = 1;
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <SETHOME_StateMachine_Function+0x98>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	701a      	strb	r2, [r3, #0]
			PID_Reset();
 8003e6a:	f7ff fe3b 	bl	8003ae4 <PID_Reset>

			break;
 8003e6e:	bf00      	nop

     }

}
 8003e70:	bf00      	nop
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	200000da 	.word	0x200000da
 8003e78:	40020800 	.word	0x40020800
 8003e7c:	2000050c 	.word	0x2000050c
 8003e80:	200000d9 	.word	0x200000d9
 8003e84:	200001de 	.word	0x200001de
 8003e88:	200005b4 	.word	0x200005b4
 8003e8c:	20000278 	.word	0x20000278
 8003e90:	200001e8 	.word	0x200001e8
 8003e94:	200001e9 	.word	0x200001e9

08003e98 <UpdateMunmunBotState>:

void UpdateMunmunBotState()
{
 8003e98:	b5b0      	push	{r4, r5, r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
	if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8003e9c:	f7fd ff8e 	bl	8001dbc <micros>
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <UpdateMunmunBotState+0x38>)
 8003ea2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003ea6:	1a84      	subs	r4, r0, r2
 8003ea8:	eb61 0503 	sbc.w	r5, r1, r3
 8003eac:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <UpdateMunmunBotState+0x38>)
 8003eae:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003eb2:	429d      	cmp	r5, r3
 8003eb4:	bf08      	it	eq
 8003eb6:	4294      	cmpeq	r4, r2
 8003eb8:	d308      	bcc.n	8003ecc <UpdateMunmunBotState+0x34>
	{
		EncoderVelocityAndPosition_Update();
 8003eba:	f7fd fe59 	bl	8001b70 <EncoderVelocityAndPosition_Update>
		TrjStruc.Loop_Timestamp = micros();
 8003ebe:	f7fd ff7d 	bl	8001dbc <micros>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4902      	ldr	r1, [pc, #8]	; (8003ed0 <UpdateMunmunBotState+0x38>)
 8003ec8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	}
}
 8003ecc:	bf00      	nop
 8003ece:	bdb0      	pop	{r4, r5, r7, pc}
 8003ed0:	20000278 	.word	0x20000278

08003ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ed8:	b672      	cpsid	i
}
 8003eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003edc:	e7fe      	b.n	8003edc <Error_Handler+0x8>
	...

08003ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <HAL_MspInit+0x4c>)
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	4a0f      	ldr	r2, [pc, #60]	; (8003f2c <HAL_MspInit+0x4c>)
 8003ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <HAL_MspInit+0x4c>)
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <HAL_MspInit+0x4c>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	4a08      	ldr	r2, [pc, #32]	; (8003f2c <HAL_MspInit+0x4c>)
 8003f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f10:	6413      	str	r3, [r2, #64]	; 0x40
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_MspInit+0x4c>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003f1e:	2007      	movs	r0, #7
 8003f20:	f000 fc04 	bl	800472c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40023800 	.word	0x40023800

08003f30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08a      	sub	sp, #40	; 0x28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f38:	f107 0314 	add.w	r3, r7, #20
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	60da      	str	r2, [r3, #12]
 8003f46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a21      	ldr	r2, [pc, #132]	; (8003fd4 <HAL_I2C_MspInit+0xa4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d13c      	bne.n	8003fcc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <HAL_I2C_MspInit+0xa8>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	4a1f      	ldr	r2, [pc, #124]	; (8003fd8 <HAL_I2C_MspInit+0xa8>)
 8003f5c:	f043 0302 	orr.w	r3, r3, #2
 8003f60:	6313      	str	r3, [r2, #48]	; 0x30
 8003f62:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <HAL_I2C_MspInit+0xa8>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003f6e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f74:	2312      	movs	r3, #18
 8003f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f80:	2304      	movs	r3, #4
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f84:	f107 0314 	add.w	r3, r7, #20
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4814      	ldr	r0, [pc, #80]	; (8003fdc <HAL_I2C_MspInit+0xac>)
 8003f8c:	f001 f820 	bl	8004fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <HAL_I2C_MspInit+0xa8>)
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	4a0f      	ldr	r2, [pc, #60]	; (8003fd8 <HAL_I2C_MspInit+0xa8>)
 8003f9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa0:	4b0d      	ldr	r3, [pc, #52]	; (8003fd8 <HAL_I2C_MspInit+0xa8>)
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003fac:	2200      	movs	r2, #0
 8003fae:	2100      	movs	r1, #0
 8003fb0:	201f      	movs	r0, #31
 8003fb2:	f000 fbc6 	bl	8004742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003fb6:	201f      	movs	r0, #31
 8003fb8:	f000 fbdf 	bl	800477a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	2020      	movs	r0, #32
 8003fc2:	f000 fbbe 	bl	8004742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003fc6:	2020      	movs	r0, #32
 8003fc8:	f000 fbd7 	bl	800477a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003fcc:	bf00      	nop
 8003fce:	3728      	adds	r7, #40	; 0x28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40005400 	.word	0x40005400
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	40020400 	.word	0x40020400

08003fe0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08a      	sub	sp, #40	; 0x28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe8:	f107 0314 	add.w	r3, r7, #20
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	60da      	str	r2, [r3, #12]
 8003ff6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a19      	ldr	r2, [pc, #100]	; (8004064 <HAL_TIM_Encoder_MspInit+0x84>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d12c      	bne.n	800405c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	4b18      	ldr	r3, [pc, #96]	; (8004068 <HAL_TIM_Encoder_MspInit+0x88>)
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	4a17      	ldr	r2, [pc, #92]	; (8004068 <HAL_TIM_Encoder_MspInit+0x88>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	6453      	str	r3, [r2, #68]	; 0x44
 8004012:	4b15      	ldr	r3, [pc, #84]	; (8004068 <HAL_TIM_Encoder_MspInit+0x88>)
 8004014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	4b11      	ldr	r3, [pc, #68]	; (8004068 <HAL_TIM_Encoder_MspInit+0x88>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	4a10      	ldr	r2, [pc, #64]	; (8004068 <HAL_TIM_Encoder_MspInit+0x88>)
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	6313      	str	r3, [r2, #48]	; 0x30
 800402e:	4b0e      	ldr	r3, [pc, #56]	; (8004068 <HAL_TIM_Encoder_MspInit+0x88>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Encoder_A_Pin|Motor_Encoder_B_Pin;
 800403a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800403e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004040:	2302      	movs	r3, #2
 8004042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004044:	2300      	movs	r3, #0
 8004046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004048:	2300      	movs	r3, #0
 800404a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800404c:	2301      	movs	r3, #1
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004050:	f107 0314 	add.w	r3, r7, #20
 8004054:	4619      	mov	r1, r3
 8004056:	4805      	ldr	r0, [pc, #20]	; (800406c <HAL_TIM_Encoder_MspInit+0x8c>)
 8004058:	f000 ffba 	bl	8004fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800405c:	bf00      	nop
 800405e:	3728      	adds	r7, #40	; 0x28
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40010000 	.word	0x40010000
 8004068:	40023800 	.word	0x40023800
 800406c:	40020000 	.word	0x40020000

08004070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004080:	d116      	bne.n	80040b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <HAL_TIM_Base_MspInit+0x70>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <HAL_TIM_Base_MspInit+0x70>)
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	6413      	str	r3, [r2, #64]	; 0x40
 8004092:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <HAL_TIM_Base_MspInit+0x70>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800409e:	2200      	movs	r2, #0
 80040a0:	2100      	movs	r1, #0
 80040a2:	201c      	movs	r0, #28
 80040a4:	f000 fb4d 	bl	8004742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040a8:	201c      	movs	r0, #28
 80040aa:	f000 fb66 	bl	800477a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80040ae:	e012      	b.n	80040d6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a0b      	ldr	r2, [pc, #44]	; (80040e4 <HAL_TIM_Base_MspInit+0x74>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d10d      	bne.n	80040d6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040ba:	2300      	movs	r3, #0
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <HAL_TIM_Base_MspInit+0x70>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	4a07      	ldr	r2, [pc, #28]	; (80040e0 <HAL_TIM_Base_MspInit+0x70>)
 80040c4:	f043 0302 	orr.w	r3, r3, #2
 80040c8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ca:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_TIM_Base_MspInit+0x70>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	68bb      	ldr	r3, [r7, #8]
}
 80040d6:	bf00      	nop
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40000400 	.word	0x40000400

080040e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f0:	f107 030c 	add.w	r3, r7, #12
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a12      	ldr	r2, [pc, #72]	; (8004150 <HAL_TIM_MspPostInit+0x68>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d11d      	bne.n	8004146 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	4b11      	ldr	r3, [pc, #68]	; (8004154 <HAL_TIM_MspPostInit+0x6c>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	4a10      	ldr	r2, [pc, #64]	; (8004154 <HAL_TIM_MspPostInit+0x6c>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	6313      	str	r3, [r2, #48]	; 0x30
 800411a:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <HAL_TIM_MspPostInit+0x6c>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_Generation_Pin;
 8004126:	2340      	movs	r3, #64	; 0x40
 8004128:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412a:	2302      	movs	r3, #2
 800412c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004132:	2300      	movs	r3, #0
 8004134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004136:	2302      	movs	r3, #2
 8004138:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Generation_GPIO_Port, &GPIO_InitStruct);
 800413a:	f107 030c 	add.w	r3, r7, #12
 800413e:	4619      	mov	r1, r3
 8004140:	4805      	ldr	r0, [pc, #20]	; (8004158 <HAL_TIM_MspPostInit+0x70>)
 8004142:	f000 ff45 	bl	8004fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004146:	bf00      	nop
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40000400 	.word	0x40000400
 8004154:	40023800 	.word	0x40023800
 8004158:	40020000 	.word	0x40020000

0800415c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004164:	f107 0314 	add.w	r3, r7, #20
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	605a      	str	r2, [r3, #4]
 800416e:	609a      	str	r2, [r3, #8]
 8004170:	60da      	str	r2, [r3, #12]
 8004172:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a4c      	ldr	r2, [pc, #304]	; (80042ac <HAL_UART_MspInit+0x150>)
 800417a:	4293      	cmp	r3, r2
 800417c:	f040 8091 	bne.w	80042a2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004180:	2300      	movs	r3, #0
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	4b4a      	ldr	r3, [pc, #296]	; (80042b0 <HAL_UART_MspInit+0x154>)
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	4a49      	ldr	r2, [pc, #292]	; (80042b0 <HAL_UART_MspInit+0x154>)
 800418a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800418e:	6413      	str	r3, [r2, #64]	; 0x40
 8004190:	4b47      	ldr	r3, [pc, #284]	; (80042b0 <HAL_UART_MspInit+0x154>)
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	4b43      	ldr	r3, [pc, #268]	; (80042b0 <HAL_UART_MspInit+0x154>)
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	4a42      	ldr	r2, [pc, #264]	; (80042b0 <HAL_UART_MspInit+0x154>)
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	6313      	str	r3, [r2, #48]	; 0x30
 80041ac:	4b40      	ldr	r3, [pc, #256]	; (80042b0 <HAL_UART_MspInit+0x154>)
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80041b8:	230c      	movs	r3, #12
 80041ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041bc:	2302      	movs	r3, #2
 80041be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041c4:	2303      	movs	r3, #3
 80041c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80041c8:	2307      	movs	r3, #7
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041cc:	f107 0314 	add.w	r3, r7, #20
 80041d0:	4619      	mov	r1, r3
 80041d2:	4838      	ldr	r0, [pc, #224]	; (80042b4 <HAL_UART_MspInit+0x158>)
 80041d4:	f000 fefc 	bl	8004fd0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80041d8:	4b37      	ldr	r3, [pc, #220]	; (80042b8 <HAL_UART_MspInit+0x15c>)
 80041da:	4a38      	ldr	r2, [pc, #224]	; (80042bc <HAL_UART_MspInit+0x160>)
 80041dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80041de:	4b36      	ldr	r3, [pc, #216]	; (80042b8 <HAL_UART_MspInit+0x15c>)
 80041e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041e6:	4b34      	ldr	r3, [pc, #208]	; (80042b8 <HAL_UART_MspInit+0x15c>)
 80041e8:	2240      	movs	r2, #64	; 0x40
 80041ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041ec:	4b32      	ldr	r3, [pc, #200]	; (80042b8 <HAL_UART_MspInit+0x15c>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041f2:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <HAL_UART_MspInit+0x15c>)
 80041f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041fa:	4b2f      	ldr	r3, [pc, #188]	; (80042b8 <HAL_UART_MspInit+0x15c>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004200:	4b2d      	ldr	r3, [pc, #180]	; (80042b8 <HAL_UART_MspInit+0x15c>)
 8004202:	2200      	movs	r2, #0
 8004204:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004206:	4b2c      	ldr	r3, [pc, #176]	; (80042b8 <HAL_UART_MspInit+0x15c>)
 8004208:	2200      	movs	r2, #0
 800420a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800420c:	4b2a      	ldr	r3, [pc, #168]	; (80042b8 <HAL_UART_MspInit+0x15c>)
 800420e:	2200      	movs	r2, #0
 8004210:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004212:	4b29      	ldr	r3, [pc, #164]	; (80042b8 <HAL_UART_MspInit+0x15c>)
 8004214:	2200      	movs	r2, #0
 8004216:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004218:	4827      	ldr	r0, [pc, #156]	; (80042b8 <HAL_UART_MspInit+0x15c>)
 800421a:	f000 fac9 	bl	80047b0 <HAL_DMA_Init>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004224:	f7ff fe56 	bl	8003ed4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a23      	ldr	r2, [pc, #140]	; (80042b8 <HAL_UART_MspInit+0x15c>)
 800422c:	635a      	str	r2, [r3, #52]	; 0x34
 800422e:	4a22      	ldr	r2, [pc, #136]	; (80042b8 <HAL_UART_MspInit+0x15c>)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004234:	4b22      	ldr	r3, [pc, #136]	; (80042c0 <HAL_UART_MspInit+0x164>)
 8004236:	4a23      	ldr	r2, [pc, #140]	; (80042c4 <HAL_UART_MspInit+0x168>)
 8004238:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800423a:	4b21      	ldr	r3, [pc, #132]	; (80042c0 <HAL_UART_MspInit+0x164>)
 800423c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004240:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004242:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <HAL_UART_MspInit+0x164>)
 8004244:	2200      	movs	r2, #0
 8004246:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004248:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <HAL_UART_MspInit+0x164>)
 800424a:	2200      	movs	r2, #0
 800424c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800424e:	4b1c      	ldr	r3, [pc, #112]	; (80042c0 <HAL_UART_MspInit+0x164>)
 8004250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004254:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004256:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <HAL_UART_MspInit+0x164>)
 8004258:	2200      	movs	r2, #0
 800425a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800425c:	4b18      	ldr	r3, [pc, #96]	; (80042c0 <HAL_UART_MspInit+0x164>)
 800425e:	2200      	movs	r2, #0
 8004260:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004262:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <HAL_UART_MspInit+0x164>)
 8004264:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004268:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800426a:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <HAL_UART_MspInit+0x164>)
 800426c:	2200      	movs	r2, #0
 800426e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004270:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <HAL_UART_MspInit+0x164>)
 8004272:	2200      	movs	r2, #0
 8004274:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004276:	4812      	ldr	r0, [pc, #72]	; (80042c0 <HAL_UART_MspInit+0x164>)
 8004278:	f000 fa9a 	bl	80047b0 <HAL_DMA_Init>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8004282:	f7ff fe27 	bl	8003ed4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a0d      	ldr	r2, [pc, #52]	; (80042c0 <HAL_UART_MspInit+0x164>)
 800428a:	639a      	str	r2, [r3, #56]	; 0x38
 800428c:	4a0c      	ldr	r2, [pc, #48]	; (80042c0 <HAL_UART_MspInit+0x164>)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004292:	2200      	movs	r2, #0
 8004294:	2100      	movs	r1, #0
 8004296:	2026      	movs	r0, #38	; 0x26
 8004298:	f000 fa53 	bl	8004742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800429c:	2026      	movs	r0, #38	; 0x26
 800429e:	f000 fa6c 	bl	800477a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80042a2:	bf00      	nop
 80042a4:	3728      	adds	r7, #40	; 0x28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40004400 	.word	0x40004400
 80042b0:	40023800 	.word	0x40023800
 80042b4:	40020000 	.word	0x40020000
 80042b8:	20000554 	.word	0x20000554
 80042bc:	400260a0 	.word	0x400260a0
 80042c0:	20000458 	.word	0x20000458
 80042c4:	40026088 	.word	0x40026088

080042c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042cc:	e7fe      	b.n	80042cc <NMI_Handler+0x4>

080042ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042ce:	b480      	push	{r7}
 80042d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042d2:	e7fe      	b.n	80042d2 <HardFault_Handler+0x4>

080042d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042d8:	e7fe      	b.n	80042d8 <MemManage_Handler+0x4>

080042da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042da:	b480      	push	{r7}
 80042dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042de:	e7fe      	b.n	80042de <BusFault_Handler+0x4>

080042e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042e4:	e7fe      	b.n	80042e4 <UsageFault_Handler+0x4>

080042e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042e6:	b480      	push	{r7}
 80042e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042ea:	bf00      	nop
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042f8:	bf00      	nop
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004302:	b480      	push	{r7}
 8004304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004306:	bf00      	nop
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004314:	f000 f91a 	bl	800454c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004318:	bf00      	nop
 800431a:	bd80      	pop	{r7, pc}

0800431c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004320:	4802      	ldr	r0, [pc, #8]	; (800432c <DMA1_Stream5_IRQHandler+0x10>)
 8004322:	f000 fbdd 	bl	8004ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000458 	.word	0x20000458

08004330 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004334:	4802      	ldr	r0, [pc, #8]	; (8004340 <DMA1_Stream6_IRQHandler+0x10>)
 8004336:	f000 fbd3 	bl	8004ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000554 	.word	0x20000554

08004344 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004348:	f44f 7080 	mov.w	r0, #256	; 0x100
 800434c:	f000 fff6 	bl	800533c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004350:	bf00      	nop
 8004352:	bd80      	pop	{r7, pc}

08004354 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004358:	4802      	ldr	r0, [pc, #8]	; (8004364 <TIM2_IRQHandler+0x10>)
 800435a:	f003 ff13 	bl	8008184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800435e:	bf00      	nop
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	200005fc 	.word	0x200005fc

08004368 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800436c:	4802      	ldr	r0, [pc, #8]	; (8004378 <I2C1_EV_IRQHandler+0x10>)
 800436e:	f001 fa95 	bl	800589c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004372:	bf00      	nop
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	200004b8 	.word	0x200004b8

0800437c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004380:	4802      	ldr	r0, [pc, #8]	; (800438c <I2C1_ER_IRQHandler+0x10>)
 8004382:	f001 fbf8 	bl	8005b76 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004386:	bf00      	nop
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	200004b8 	.word	0x200004b8

08004390 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004394:	4802      	ldr	r0, [pc, #8]	; (80043a0 <USART2_IRQHandler+0x10>)
 8004396:	f004 fddf 	bl	8008f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000644 	.word	0x20000644

080043a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80043a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80043ac:	f000 ffc6 	bl	800533c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80043b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80043b4:	f000 ffc2 	bl	800533c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80043b8:	bf00      	nop
 80043ba:	bd80      	pop	{r7, pc}

080043bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043c4:	4a14      	ldr	r2, [pc, #80]	; (8004418 <_sbrk+0x5c>)
 80043c6:	4b15      	ldr	r3, [pc, #84]	; (800441c <_sbrk+0x60>)
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043d0:	4b13      	ldr	r3, [pc, #76]	; (8004420 <_sbrk+0x64>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d102      	bne.n	80043de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043d8:	4b11      	ldr	r3, [pc, #68]	; (8004420 <_sbrk+0x64>)
 80043da:	4a12      	ldr	r2, [pc, #72]	; (8004424 <_sbrk+0x68>)
 80043dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043de:	4b10      	ldr	r3, [pc, #64]	; (8004420 <_sbrk+0x64>)
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4413      	add	r3, r2
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d207      	bcs.n	80043fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043ec:	f005 fc10 	bl	8009c10 <__errno>
 80043f0:	4603      	mov	r3, r0
 80043f2:	220c      	movs	r2, #12
 80043f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043f6:	f04f 33ff 	mov.w	r3, #4294967295
 80043fa:	e009      	b.n	8004410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043fc:	4b08      	ldr	r3, [pc, #32]	; (8004420 <_sbrk+0x64>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <_sbrk+0x64>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4413      	add	r3, r2
 800440a:	4a05      	ldr	r2, [pc, #20]	; (8004420 <_sbrk+0x64>)
 800440c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800440e:	68fb      	ldr	r3, [r7, #12]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	20020000 	.word	0x20020000
 800441c:	00000400 	.word	0x00000400
 8004420:	2000044c 	.word	0x2000044c
 8004424:	200006a0 	.word	0x200006a0

08004428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800442c:	4b08      	ldr	r3, [pc, #32]	; (8004450 <SystemInit+0x28>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	4a07      	ldr	r2, [pc, #28]	; (8004450 <SystemInit+0x28>)
 8004434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800443c:	4b04      	ldr	r3, [pc, #16]	; (8004450 <SystemInit+0x28>)
 800443e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004442:	609a      	str	r2, [r3, #8]
#endif
}
 8004444:	bf00      	nop
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	e000ed00 	.word	0xe000ed00

08004454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800448c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004458:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800445a:	e003      	b.n	8004464 <LoopCopyDataInit>

0800445c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800445c:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800445e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004460:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004462:	3104      	adds	r1, #4

08004464 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004464:	480b      	ldr	r0, [pc, #44]	; (8004494 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004466:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004468:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800446a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800446c:	d3f6      	bcc.n	800445c <CopyDataInit>
  ldr  r2, =_sbss
 800446e:	4a0b      	ldr	r2, [pc, #44]	; (800449c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004470:	e002      	b.n	8004478 <LoopFillZerobss>

08004472 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004472:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004474:	f842 3b04 	str.w	r3, [r2], #4

08004478 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800447a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800447c:	d3f9      	bcc.n	8004472 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800447e:	f7ff ffd3 	bl	8004428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004482:	f005 fbcb 	bl	8009c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004486:	f7fc fe0f 	bl	80010a8 <main>
  bx  lr    
 800448a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800448c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004490:	08009fd0 	.word	0x08009fd0
  ldr  r0, =_sdata
 8004494:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004498:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 800449c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80044a0:	2000069c 	.word	0x2000069c

080044a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044a4:	e7fe      	b.n	80044a4 <ADC_IRQHandler>
	...

080044a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044ac:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <HAL_Init+0x40>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a0d      	ldr	r2, [pc, #52]	; (80044e8 <HAL_Init+0x40>)
 80044b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044b8:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <HAL_Init+0x40>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <HAL_Init+0x40>)
 80044be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044c4:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <HAL_Init+0x40>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a07      	ldr	r2, [pc, #28]	; (80044e8 <HAL_Init+0x40>)
 80044ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044d0:	2003      	movs	r0, #3
 80044d2:	f000 f92b 	bl	800472c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044d6:	2000      	movs	r0, #0
 80044d8:	f000 f808 	bl	80044ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044dc:	f7ff fd00 	bl	8003ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40023c00 	.word	0x40023c00

080044ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044f4:	4b12      	ldr	r3, [pc, #72]	; (8004540 <HAL_InitTick+0x54>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4b12      	ldr	r3, [pc, #72]	; (8004544 <HAL_InitTick+0x58>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	4619      	mov	r1, r3
 80044fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004502:	fbb3 f3f1 	udiv	r3, r3, r1
 8004506:	fbb2 f3f3 	udiv	r3, r2, r3
 800450a:	4618      	mov	r0, r3
 800450c:	f000 f943 	bl	8004796 <HAL_SYSTICK_Config>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e00e      	b.n	8004538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b0f      	cmp	r3, #15
 800451e:	d80a      	bhi.n	8004536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004520:	2200      	movs	r2, #0
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	f04f 30ff 	mov.w	r0, #4294967295
 8004528:	f000 f90b 	bl	8004742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800452c:	4a06      	ldr	r2, [pc, #24]	; (8004548 <HAL_InitTick+0x5c>)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	e000      	b.n	8004538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	20000018 	.word	0x20000018
 8004544:	20000020 	.word	0x20000020
 8004548:	2000001c 	.word	0x2000001c

0800454c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004550:	4b06      	ldr	r3, [pc, #24]	; (800456c <HAL_IncTick+0x20>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	461a      	mov	r2, r3
 8004556:	4b06      	ldr	r3, [pc, #24]	; (8004570 <HAL_IncTick+0x24>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4413      	add	r3, r2
 800455c:	4a04      	ldr	r2, [pc, #16]	; (8004570 <HAL_IncTick+0x24>)
 800455e:	6013      	str	r3, [r2, #0]
}
 8004560:	bf00      	nop
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	20000020 	.word	0x20000020
 8004570:	20000688 	.word	0x20000688

08004574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  return uwTick;
 8004578:	4b03      	ldr	r3, [pc, #12]	; (8004588 <HAL_GetTick+0x14>)
 800457a:	681b      	ldr	r3, [r3, #0]
}
 800457c:	4618      	mov	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	20000688 	.word	0x20000688

0800458c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800459c:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <__NVIC_SetPriorityGrouping+0x44>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045a8:	4013      	ands	r3, r2
 80045aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045be:	4a04      	ldr	r2, [pc, #16]	; (80045d0 <__NVIC_SetPriorityGrouping+0x44>)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	60d3      	str	r3, [r2, #12]
}
 80045c4:	bf00      	nop
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	e000ed00 	.word	0xe000ed00

080045d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045d8:	4b04      	ldr	r3, [pc, #16]	; (80045ec <__NVIC_GetPriorityGrouping+0x18>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	0a1b      	lsrs	r3, r3, #8
 80045de:	f003 0307 	and.w	r3, r3, #7
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	e000ed00 	.word	0xe000ed00

080045f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4603      	mov	r3, r0
 80045f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	db0b      	blt.n	800461a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	f003 021f 	and.w	r2, r3, #31
 8004608:	4907      	ldr	r1, [pc, #28]	; (8004628 <__NVIC_EnableIRQ+0x38>)
 800460a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	2001      	movs	r0, #1
 8004612:	fa00 f202 	lsl.w	r2, r0, r2
 8004616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	e000e100 	.word	0xe000e100

0800462c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	6039      	str	r1, [r7, #0]
 8004636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463c:	2b00      	cmp	r3, #0
 800463e:	db0a      	blt.n	8004656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	b2da      	uxtb	r2, r3
 8004644:	490c      	ldr	r1, [pc, #48]	; (8004678 <__NVIC_SetPriority+0x4c>)
 8004646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464a:	0112      	lsls	r2, r2, #4
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	440b      	add	r3, r1
 8004650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004654:	e00a      	b.n	800466c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	b2da      	uxtb	r2, r3
 800465a:	4908      	ldr	r1, [pc, #32]	; (800467c <__NVIC_SetPriority+0x50>)
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	3b04      	subs	r3, #4
 8004664:	0112      	lsls	r2, r2, #4
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	440b      	add	r3, r1
 800466a:	761a      	strb	r2, [r3, #24]
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	e000e100 	.word	0xe000e100
 800467c:	e000ed00 	.word	0xe000ed00

08004680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004680:	b480      	push	{r7}
 8004682:	b089      	sub	sp, #36	; 0x24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f1c3 0307 	rsb	r3, r3, #7
 800469a:	2b04      	cmp	r3, #4
 800469c:	bf28      	it	cs
 800469e:	2304      	movcs	r3, #4
 80046a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	3304      	adds	r3, #4
 80046a6:	2b06      	cmp	r3, #6
 80046a8:	d902      	bls.n	80046b0 <NVIC_EncodePriority+0x30>
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	3b03      	subs	r3, #3
 80046ae:	e000      	b.n	80046b2 <NVIC_EncodePriority+0x32>
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b4:	f04f 32ff 	mov.w	r2, #4294967295
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	43da      	mvns	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	401a      	ands	r2, r3
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046c8:	f04f 31ff 	mov.w	r1, #4294967295
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	fa01 f303 	lsl.w	r3, r1, r3
 80046d2:	43d9      	mvns	r1, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046d8:	4313      	orrs	r3, r2
         );
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3724      	adds	r7, #36	; 0x24
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
	...

080046e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046f8:	d301      	bcc.n	80046fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046fa:	2301      	movs	r3, #1
 80046fc:	e00f      	b.n	800471e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046fe:	4a0a      	ldr	r2, [pc, #40]	; (8004728 <SysTick_Config+0x40>)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3b01      	subs	r3, #1
 8004704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004706:	210f      	movs	r1, #15
 8004708:	f04f 30ff 	mov.w	r0, #4294967295
 800470c:	f7ff ff8e 	bl	800462c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <SysTick_Config+0x40>)
 8004712:	2200      	movs	r2, #0
 8004714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004716:	4b04      	ldr	r3, [pc, #16]	; (8004728 <SysTick_Config+0x40>)
 8004718:	2207      	movs	r2, #7
 800471a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	e000e010 	.word	0xe000e010

0800472c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7ff ff29 	bl	800458c <__NVIC_SetPriorityGrouping>
}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004742:	b580      	push	{r7, lr}
 8004744:	b086      	sub	sp, #24
 8004746:	af00      	add	r7, sp, #0
 8004748:	4603      	mov	r3, r0
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004754:	f7ff ff3e 	bl	80045d4 <__NVIC_GetPriorityGrouping>
 8004758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	6978      	ldr	r0, [r7, #20]
 8004760:	f7ff ff8e 	bl	8004680 <NVIC_EncodePriority>
 8004764:	4602      	mov	r2, r0
 8004766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800476a:	4611      	mov	r1, r2
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff ff5d 	bl	800462c <__NVIC_SetPriority>
}
 8004772:	bf00      	nop
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	4603      	mov	r3, r0
 8004782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff ff31 	bl	80045f0 <__NVIC_EnableIRQ>
}
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff ffa2 	bl	80046e8 <SysTick_Config>
 80047a4:	4603      	mov	r3, r0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047bc:	f7ff feda 	bl	8004574 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e099      	b.n	8004900 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0201 	bic.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ec:	e00f      	b.n	800480e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047ee:	f7ff fec1 	bl	8004574 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b05      	cmp	r3, #5
 80047fa:	d908      	bls.n	800480e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2203      	movs	r2, #3
 8004806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e078      	b.n	8004900 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e8      	bne.n	80047ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	4b38      	ldr	r3, [pc, #224]	; (8004908 <HAL_DMA_Init+0x158>)
 8004828:	4013      	ands	r3, r2
 800482a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800483a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004846:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004852:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	2b04      	cmp	r3, #4
 8004866:	d107      	bne.n	8004878 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	4313      	orrs	r3, r2
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f023 0307 	bic.w	r3, r3, #7
 800488e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d117      	bne.n	80048d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00e      	beq.n	80048d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fb0f 	bl	8004ed8 <DMA_CheckFifoParam>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2240      	movs	r2, #64	; 0x40
 80048c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048ce:	2301      	movs	r3, #1
 80048d0:	e016      	b.n	8004900 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fac6 	bl	8004e6c <DMA_CalcBaseAndBitshift>
 80048e0:	4603      	mov	r3, r0
 80048e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e8:	223f      	movs	r2, #63	; 0x3f
 80048ea:	409a      	lsls	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	f010803f 	.word	0xf010803f

0800490c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_DMA_Start_IT+0x26>
 800492e:	2302      	movs	r3, #2
 8004930:	e040      	b.n	80049b4 <HAL_DMA_Start_IT+0xa8>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	d12f      	bne.n	80049a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	68b9      	ldr	r1, [r7, #8]
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 fa58 	bl	8004e10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004964:	223f      	movs	r2, #63	; 0x3f
 8004966:	409a      	lsls	r2, r3
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0216 	orr.w	r2, r2, #22
 800497a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0208 	orr.w	r2, r2, #8
 8004992:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	e005      	b.n	80049b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049ae:	2302      	movs	r3, #2
 80049b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049ca:	f7ff fdd3 	bl	8004574 <HAL_GetTick>
 80049ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d008      	beq.n	80049ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2280      	movs	r2, #128	; 0x80
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e052      	b.n	8004a94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0216 	bic.w	r2, r2, #22
 80049fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695a      	ldr	r2, [r3, #20]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d103      	bne.n	8004a1e <HAL_DMA_Abort+0x62>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0208 	bic.w	r2, r2, #8
 8004a2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0201 	bic.w	r2, r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a3e:	e013      	b.n	8004a68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a40:	f7ff fd98 	bl	8004574 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b05      	cmp	r3, #5
 8004a4c:	d90c      	bls.n	8004a68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2220      	movs	r2, #32
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2203      	movs	r2, #3
 8004a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e015      	b.n	8004a94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e4      	bne.n	8004a40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7a:	223f      	movs	r2, #63	; 0x3f
 8004a7c:	409a      	lsls	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d004      	beq.n	8004aba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2280      	movs	r2, #128	; 0x80
 8004ab4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e00c      	b.n	8004ad4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2205      	movs	r2, #5
 8004abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0201 	bic.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004aec:	4b92      	ldr	r3, [pc, #584]	; (8004d38 <HAL_DMA_IRQHandler+0x258>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a92      	ldr	r2, [pc, #584]	; (8004d3c <HAL_DMA_IRQHandler+0x25c>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	0a9b      	lsrs	r3, r3, #10
 8004af8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0a:	2208      	movs	r2, #8
 8004b0c:	409a      	lsls	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d01a      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d013      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0204 	bic.w	r2, r2, #4
 8004b32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b38:	2208      	movs	r2, #8
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b44:	f043 0201 	orr.w	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b50:	2201      	movs	r2, #1
 8004b52:	409a      	lsls	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4013      	ands	r3, r2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d012      	beq.n	8004b82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00b      	beq.n	8004b82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6e:	2201      	movs	r2, #1
 8004b70:	409a      	lsls	r2, r3
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7a:	f043 0202 	orr.w	r2, r3, #2
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b86:	2204      	movs	r2, #4
 8004b88:	409a      	lsls	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d012      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00b      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb0:	f043 0204 	orr.w	r2, r3, #4
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbc:	2210      	movs	r2, #16
 8004bbe:	409a      	lsls	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d043      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d03c      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bda:	2210      	movs	r2, #16
 8004bdc:	409a      	lsls	r2, r3
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d018      	beq.n	8004c22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d108      	bne.n	8004c10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d024      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	4798      	blx	r3
 8004c0e:	e01f      	b.n	8004c50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01b      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	4798      	blx	r3
 8004c20:	e016      	b.n	8004c50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d107      	bne.n	8004c40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0208 	bic.w	r2, r2, #8
 8004c3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c54:	2220      	movs	r2, #32
 8004c56:	409a      	lsls	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 808e 	beq.w	8004d7e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8086 	beq.w	8004d7e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c76:	2220      	movs	r2, #32
 8004c78:	409a      	lsls	r2, r3
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b05      	cmp	r3, #5
 8004c88:	d136      	bne.n	8004cf8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0216 	bic.w	r2, r2, #22
 8004c98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695a      	ldr	r2, [r3, #20]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ca8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d103      	bne.n	8004cba <HAL_DMA_IRQHandler+0x1da>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0208 	bic.w	r2, r2, #8
 8004cc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cce:	223f      	movs	r2, #63	; 0x3f
 8004cd0:	409a      	lsls	r2, r3
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d07d      	beq.n	8004dea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	4798      	blx	r3
        }
        return;
 8004cf6:	e078      	b.n	8004dea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d01c      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d108      	bne.n	8004d26 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d030      	beq.n	8004d7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	4798      	blx	r3
 8004d24:	e02b      	b.n	8004d7e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d027      	beq.n	8004d7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	4798      	blx	r3
 8004d36:	e022      	b.n	8004d7e <HAL_DMA_IRQHandler+0x29e>
 8004d38:	20000018 	.word	0x20000018
 8004d3c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10f      	bne.n	8004d6e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0210 	bic.w	r2, r2, #16
 8004d5c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d032      	beq.n	8004dec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d022      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2205      	movs	r2, #5
 8004d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0201 	bic.w	r2, r2, #1
 8004da8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	3301      	adds	r3, #1
 8004dae:	60bb      	str	r3, [r7, #8]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d307      	bcc.n	8004dc6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1f2      	bne.n	8004daa <HAL_DMA_IRQHandler+0x2ca>
 8004dc4:	e000      	b.n	8004dc8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004dc6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	4798      	blx	r3
 8004de8:	e000      	b.n	8004dec <HAL_DMA_IRQHandler+0x30c>
        return;
 8004dea:	bf00      	nop
    }
  }
}
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop

08004df4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e02:	b2db      	uxtb	r3, r3
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2b40      	cmp	r3, #64	; 0x40
 8004e3c:	d108      	bne.n	8004e50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e4e:	e007      	b.n	8004e60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	60da      	str	r2, [r3, #12]
}
 8004e60:	bf00      	nop
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	3b10      	subs	r3, #16
 8004e7c:	4a14      	ldr	r2, [pc, #80]	; (8004ed0 <DMA_CalcBaseAndBitshift+0x64>)
 8004e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e82:	091b      	lsrs	r3, r3, #4
 8004e84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e86:	4a13      	ldr	r2, [pc, #76]	; (8004ed4 <DMA_CalcBaseAndBitshift+0x68>)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d909      	bls.n	8004eae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ea2:	f023 0303 	bic.w	r3, r3, #3
 8004ea6:	1d1a      	adds	r2, r3, #4
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	659a      	str	r2, [r3, #88]	; 0x58
 8004eac:	e007      	b.n	8004ebe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004eb6:	f023 0303 	bic.w	r3, r3, #3
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	aaaaaaab 	.word	0xaaaaaaab
 8004ed4:	08009fb8 	.word	0x08009fb8

08004ed8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d11f      	bne.n	8004f32 <DMA_CheckFifoParam+0x5a>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d856      	bhi.n	8004fa6 <DMA_CheckFifoParam+0xce>
 8004ef8:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <DMA_CheckFifoParam+0x28>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f11 	.word	0x08004f11
 8004f04:	08004f23 	.word	0x08004f23
 8004f08:	08004f11 	.word	0x08004f11
 8004f0c:	08004fa7 	.word	0x08004fa7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d046      	beq.n	8004faa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f20:	e043      	b.n	8004faa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f2a:	d140      	bne.n	8004fae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f30:	e03d      	b.n	8004fae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f3a:	d121      	bne.n	8004f80 <DMA_CheckFifoParam+0xa8>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d837      	bhi.n	8004fb2 <DMA_CheckFifoParam+0xda>
 8004f42:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <DMA_CheckFifoParam+0x70>)
 8004f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f48:	08004f59 	.word	0x08004f59
 8004f4c:	08004f5f 	.word	0x08004f5f
 8004f50:	08004f59 	.word	0x08004f59
 8004f54:	08004f71 	.word	0x08004f71
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f5c:	e030      	b.n	8004fc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d025      	beq.n	8004fb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f6e:	e022      	b.n	8004fb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f78:	d11f      	bne.n	8004fba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f7e:	e01c      	b.n	8004fba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d903      	bls.n	8004f8e <DMA_CheckFifoParam+0xb6>
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d003      	beq.n	8004f94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f8c:	e018      	b.n	8004fc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	73fb      	strb	r3, [r7, #15]
      break;
 8004f92:	e015      	b.n	8004fc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00e      	beq.n	8004fbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fa4:	e00b      	b.n	8004fbe <DMA_CheckFifoParam+0xe6>
      break;
 8004fa6:	bf00      	nop
 8004fa8:	e00a      	b.n	8004fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8004faa:	bf00      	nop
 8004fac:	e008      	b.n	8004fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8004fae:	bf00      	nop
 8004fb0:	e006      	b.n	8004fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8004fb2:	bf00      	nop
 8004fb4:	e004      	b.n	8004fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8004fb6:	bf00      	nop
 8004fb8:	e002      	b.n	8004fc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004fba:	bf00      	nop
 8004fbc:	e000      	b.n	8004fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8004fbe:	bf00      	nop
    }
  } 
  
  return status; 
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop

08004fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b089      	sub	sp, #36	; 0x24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61fb      	str	r3, [r7, #28]
 8004fea:	e159      	b.n	80052a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fec:	2201      	movs	r2, #1
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	429a      	cmp	r2, r3
 8005006:	f040 8148 	bne.w	800529a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	2b01      	cmp	r3, #1
 8005014:	d005      	beq.n	8005022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800501e:	2b02      	cmp	r3, #2
 8005020:	d130      	bne.n	8005084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	2203      	movs	r2, #3
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	43db      	mvns	r3, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4013      	ands	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	fa02 f303 	lsl.w	r3, r2, r3
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	4313      	orrs	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005058:	2201      	movs	r2, #1
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	fa02 f303 	lsl.w	r3, r2, r3
 8005060:	43db      	mvns	r3, r3
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	4013      	ands	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	091b      	lsrs	r3, r3, #4
 800506e:	f003 0201 	and.w	r2, r3, #1
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4313      	orrs	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f003 0303 	and.w	r3, r3, #3
 800508c:	2b03      	cmp	r3, #3
 800508e:	d017      	beq.n	80050c0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	2203      	movs	r2, #3
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	43db      	mvns	r3, r3
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4013      	ands	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d123      	bne.n	8005114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	08da      	lsrs	r2, r3, #3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3208      	adds	r2, #8
 80050d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	220f      	movs	r2, #15
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	43db      	mvns	r3, r3
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	4013      	ands	r3, r2
 80050ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	4313      	orrs	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	08da      	lsrs	r2, r3, #3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3208      	adds	r2, #8
 800510e:	69b9      	ldr	r1, [r7, #24]
 8005110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	2203      	movs	r2, #3
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	43db      	mvns	r3, r3
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4013      	ands	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f003 0203 	and.w	r2, r3, #3
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	4313      	orrs	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 80a2 	beq.w	800529a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	4b57      	ldr	r3, [pc, #348]	; (80052b8 <HAL_GPIO_Init+0x2e8>)
 800515c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515e:	4a56      	ldr	r2, [pc, #344]	; (80052b8 <HAL_GPIO_Init+0x2e8>)
 8005160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005164:	6453      	str	r3, [r2, #68]	; 0x44
 8005166:	4b54      	ldr	r3, [pc, #336]	; (80052b8 <HAL_GPIO_Init+0x2e8>)
 8005168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005172:	4a52      	ldr	r2, [pc, #328]	; (80052bc <HAL_GPIO_Init+0x2ec>)
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	089b      	lsrs	r3, r3, #2
 8005178:	3302      	adds	r3, #2
 800517a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800517e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	220f      	movs	r2, #15
 800518a:	fa02 f303 	lsl.w	r3, r2, r3
 800518e:	43db      	mvns	r3, r3
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	4013      	ands	r3, r2
 8005194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a49      	ldr	r2, [pc, #292]	; (80052c0 <HAL_GPIO_Init+0x2f0>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d019      	beq.n	80051d2 <HAL_GPIO_Init+0x202>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a48      	ldr	r2, [pc, #288]	; (80052c4 <HAL_GPIO_Init+0x2f4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d013      	beq.n	80051ce <HAL_GPIO_Init+0x1fe>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a47      	ldr	r2, [pc, #284]	; (80052c8 <HAL_GPIO_Init+0x2f8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00d      	beq.n	80051ca <HAL_GPIO_Init+0x1fa>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a46      	ldr	r2, [pc, #280]	; (80052cc <HAL_GPIO_Init+0x2fc>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d007      	beq.n	80051c6 <HAL_GPIO_Init+0x1f6>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a45      	ldr	r2, [pc, #276]	; (80052d0 <HAL_GPIO_Init+0x300>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d101      	bne.n	80051c2 <HAL_GPIO_Init+0x1f2>
 80051be:	2304      	movs	r3, #4
 80051c0:	e008      	b.n	80051d4 <HAL_GPIO_Init+0x204>
 80051c2:	2307      	movs	r3, #7
 80051c4:	e006      	b.n	80051d4 <HAL_GPIO_Init+0x204>
 80051c6:	2303      	movs	r3, #3
 80051c8:	e004      	b.n	80051d4 <HAL_GPIO_Init+0x204>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e002      	b.n	80051d4 <HAL_GPIO_Init+0x204>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <HAL_GPIO_Init+0x204>
 80051d2:	2300      	movs	r3, #0
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	f002 0203 	and.w	r2, r2, #3
 80051da:	0092      	lsls	r2, r2, #2
 80051dc:	4093      	lsls	r3, r2
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051e4:	4935      	ldr	r1, [pc, #212]	; (80052bc <HAL_GPIO_Init+0x2ec>)
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	089b      	lsrs	r3, r3, #2
 80051ea:	3302      	adds	r3, #2
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051f2:	4b38      	ldr	r3, [pc, #224]	; (80052d4 <HAL_GPIO_Init+0x304>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	43db      	mvns	r3, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4013      	ands	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005216:	4a2f      	ldr	r2, [pc, #188]	; (80052d4 <HAL_GPIO_Init+0x304>)
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800521c:	4b2d      	ldr	r3, [pc, #180]	; (80052d4 <HAL_GPIO_Init+0x304>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	43db      	mvns	r3, r3
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	4013      	ands	r3, r2
 800522a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005240:	4a24      	ldr	r2, [pc, #144]	; (80052d4 <HAL_GPIO_Init+0x304>)
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005246:	4b23      	ldr	r3, [pc, #140]	; (80052d4 <HAL_GPIO_Init+0x304>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	43db      	mvns	r3, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4013      	ands	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800526a:	4a1a      	ldr	r2, [pc, #104]	; (80052d4 <HAL_GPIO_Init+0x304>)
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005270:	4b18      	ldr	r3, [pc, #96]	; (80052d4 <HAL_GPIO_Init+0x304>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	43db      	mvns	r3, r3
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	4013      	ands	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005294:	4a0f      	ldr	r2, [pc, #60]	; (80052d4 <HAL_GPIO_Init+0x304>)
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	3301      	adds	r3, #1
 800529e:	61fb      	str	r3, [r7, #28]
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	2b0f      	cmp	r3, #15
 80052a4:	f67f aea2 	bls.w	8004fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	3724      	adds	r7, #36	; 0x24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40023800 	.word	0x40023800
 80052bc:	40013800 	.word	0x40013800
 80052c0:	40020000 	.word	0x40020000
 80052c4:	40020400 	.word	0x40020400
 80052c8:	40020800 	.word	0x40020800
 80052cc:	40020c00 	.word	0x40020c00
 80052d0:	40021000 	.word	0x40021000
 80052d4:	40013c00 	.word	0x40013c00

080052d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	887b      	ldrh	r3, [r7, #2]
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052f0:	2301      	movs	r3, #1
 80052f2:	73fb      	strb	r3, [r7, #15]
 80052f4:	e001      	b.n	80052fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052f6:	2300      	movs	r3, #0
 80052f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	807b      	strh	r3, [r7, #2]
 8005314:	4613      	mov	r3, r2
 8005316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005318:	787b      	ldrb	r3, [r7, #1]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800531e:	887a      	ldrh	r2, [r7, #2]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005324:	e003      	b.n	800532e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005326:	887b      	ldrh	r3, [r7, #2]
 8005328:	041a      	lsls	r2, r3, #16
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	619a      	str	r2, [r3, #24]
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
	...

0800533c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	4603      	mov	r3, r0
 8005344:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005346:	4b08      	ldr	r3, [pc, #32]	; (8005368 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005348:	695a      	ldr	r2, [r3, #20]
 800534a:	88fb      	ldrh	r3, [r7, #6]
 800534c:	4013      	ands	r3, r2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d006      	beq.n	8005360 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005352:	4a05      	ldr	r2, [pc, #20]	; (8005368 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005354:	88fb      	ldrh	r3, [r7, #6]
 8005356:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	4618      	mov	r0, r3
 800535c:	f7fc fcde 	bl	8001d1c <HAL_GPIO_EXTI_Callback>
  }
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	40013c00 	.word	0x40013c00

0800536c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e12b      	b.n	80055d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7fe fdcc 	bl	8003f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2224      	movs	r2, #36	; 0x24
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0201 	bic.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053d0:	f002 fb66 	bl	8007aa0 <HAL_RCC_GetPCLK1Freq>
 80053d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	4a81      	ldr	r2, [pc, #516]	; (80055e0 <HAL_I2C_Init+0x274>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d807      	bhi.n	80053f0 <HAL_I2C_Init+0x84>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4a80      	ldr	r2, [pc, #512]	; (80055e4 <HAL_I2C_Init+0x278>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	bf94      	ite	ls
 80053e8:	2301      	movls	r3, #1
 80053ea:	2300      	movhi	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	e006      	b.n	80053fe <HAL_I2C_Init+0x92>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4a7d      	ldr	r2, [pc, #500]	; (80055e8 <HAL_I2C_Init+0x27c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	bf94      	ite	ls
 80053f8:	2301      	movls	r3, #1
 80053fa:	2300      	movhi	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e0e7      	b.n	80055d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4a78      	ldr	r2, [pc, #480]	; (80055ec <HAL_I2C_Init+0x280>)
 800540a:	fba2 2303 	umull	r2, r3, r2, r3
 800540e:	0c9b      	lsrs	r3, r3, #18
 8005410:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	4a6a      	ldr	r2, [pc, #424]	; (80055e0 <HAL_I2C_Init+0x274>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d802      	bhi.n	8005440 <HAL_I2C_Init+0xd4>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	3301      	adds	r3, #1
 800543e:	e009      	b.n	8005454 <HAL_I2C_Init+0xe8>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005446:	fb02 f303 	mul.w	r3, r2, r3
 800544a:	4a69      	ldr	r2, [pc, #420]	; (80055f0 <HAL_I2C_Init+0x284>)
 800544c:	fba2 2303 	umull	r2, r3, r2, r3
 8005450:	099b      	lsrs	r3, r3, #6
 8005452:	3301      	adds	r3, #1
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6812      	ldr	r2, [r2, #0]
 8005458:	430b      	orrs	r3, r1
 800545a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005466:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	495c      	ldr	r1, [pc, #368]	; (80055e0 <HAL_I2C_Init+0x274>)
 8005470:	428b      	cmp	r3, r1
 8005472:	d819      	bhi.n	80054a8 <HAL_I2C_Init+0x13c>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	1e59      	subs	r1, r3, #1
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005482:	1c59      	adds	r1, r3, #1
 8005484:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005488:	400b      	ands	r3, r1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <HAL_I2C_Init+0x138>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	1e59      	subs	r1, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	fbb1 f3f3 	udiv	r3, r1, r3
 800549c:	3301      	adds	r3, #1
 800549e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054a2:	e051      	b.n	8005548 <HAL_I2C_Init+0x1dc>
 80054a4:	2304      	movs	r3, #4
 80054a6:	e04f      	b.n	8005548 <HAL_I2C_Init+0x1dc>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d111      	bne.n	80054d4 <HAL_I2C_Init+0x168>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	1e58      	subs	r0, r3, #1
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6859      	ldr	r1, [r3, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	440b      	add	r3, r1
 80054be:	fbb0 f3f3 	udiv	r3, r0, r3
 80054c2:	3301      	adds	r3, #1
 80054c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	bf0c      	ite	eq
 80054cc:	2301      	moveq	r3, #1
 80054ce:	2300      	movne	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	e012      	b.n	80054fa <HAL_I2C_Init+0x18e>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	1e58      	subs	r0, r3, #1
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6859      	ldr	r1, [r3, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	0099      	lsls	r1, r3, #2
 80054e4:	440b      	add	r3, r1
 80054e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80054ea:	3301      	adds	r3, #1
 80054ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	bf0c      	ite	eq
 80054f4:	2301      	moveq	r3, #1
 80054f6:	2300      	movne	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <HAL_I2C_Init+0x196>
 80054fe:	2301      	movs	r3, #1
 8005500:	e022      	b.n	8005548 <HAL_I2C_Init+0x1dc>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10e      	bne.n	8005528 <HAL_I2C_Init+0x1bc>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	1e58      	subs	r0, r3, #1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6859      	ldr	r1, [r3, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	440b      	add	r3, r1
 8005518:	fbb0 f3f3 	udiv	r3, r0, r3
 800551c:	3301      	adds	r3, #1
 800551e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005526:	e00f      	b.n	8005548 <HAL_I2C_Init+0x1dc>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	1e58      	subs	r0, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6859      	ldr	r1, [r3, #4]
 8005530:	460b      	mov	r3, r1
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	0099      	lsls	r1, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	fbb0 f3f3 	udiv	r3, r0, r3
 800553e:	3301      	adds	r3, #1
 8005540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	6809      	ldr	r1, [r1, #0]
 800554c:	4313      	orrs	r3, r2
 800554e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69da      	ldr	r2, [r3, #28]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005576:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6911      	ldr	r1, [r2, #16]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68d2      	ldr	r2, [r2, #12]
 8005582:	4311      	orrs	r1, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6812      	ldr	r2, [r2, #0]
 8005588:	430b      	orrs	r3, r1
 800558a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	431a      	orrs	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	000186a0 	.word	0x000186a0
 80055e4:	001e847f 	.word	0x001e847f
 80055e8:	003d08ff 	.word	0x003d08ff
 80055ec:	431bde83 	.word	0x431bde83
 80055f0:	10624dd3 	.word	0x10624dd3

080055f4 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	607a      	str	r2, [r7, #4]
 80055fe:	461a      	mov	r2, r3
 8005600:	460b      	mov	r3, r1
 8005602:	817b      	strh	r3, [r7, #10]
 8005604:	4613      	mov	r3, r2
 8005606:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b20      	cmp	r3, #32
 8005616:	f040 8085 	bne.w	8005724 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800561a:	4b46      	ldr	r3, [pc, #280]	; (8005734 <HAL_I2C_Master_Transmit_IT+0x140>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	08db      	lsrs	r3, r3, #3
 8005620:	4a45      	ldr	r2, [pc, #276]	; (8005738 <HAL_I2C_Master_Transmit_IT+0x144>)
 8005622:	fba2 2303 	umull	r2, r3, r2, r3
 8005626:	0a1a      	lsrs	r2, r3, #8
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	009a      	lsls	r2, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	3b01      	subs	r3, #1
 8005638:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d116      	bne.n	800566e <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2220      	movs	r2, #32
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	f043 0220 	orr.w	r2, r3, #32
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e05b      	b.n	8005726 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b02      	cmp	r3, #2
 800567a:	d0db      	beq.n	8005634 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_I2C_Master_Transmit_IT+0x96>
 8005686:	2302      	movs	r3, #2
 8005688:	e04d      	b.n	8005726 <HAL_I2C_Master_Transmit_IT+0x132>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b01      	cmp	r3, #1
 800569e:	d007      	beq.n	80056b0 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2221      	movs	r2, #33	; 0x21
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2210      	movs	r2, #16
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	893a      	ldrh	r2, [r7, #8]
 80056e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4a13      	ldr	r2, [pc, #76]	; (800573c <HAL_I2C_Master_Transmit_IT+0x148>)
 80056f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80056f2:	897a      	ldrh	r2, [r7, #10]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005706:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800571e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005720:	2300      	movs	r3, #0
 8005722:	e000      	b.n	8005726 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8005724:	2302      	movs	r3, #2
  }
}
 8005726:	4618      	mov	r0, r3
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	20000018 	.word	0x20000018
 8005738:	14f8b589 	.word	0x14f8b589
 800573c:	ffff0000 	.word	0xffff0000

08005740 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	607a      	str	r2, [r7, #4]
 800574a:	461a      	mov	r2, r3
 800574c:	460b      	mov	r3, r1
 800574e:	817b      	strh	r3, [r7, #10]
 8005750:	4613      	mov	r3, r2
 8005752:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b20      	cmp	r3, #32
 8005762:	f040 808d 	bne.w	8005880 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005766:	4b4a      	ldr	r3, [pc, #296]	; (8005890 <HAL_I2C_Master_Receive_IT+0x150>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	08db      	lsrs	r3, r3, #3
 800576c:	4a49      	ldr	r2, [pc, #292]	; (8005894 <HAL_I2C_Master_Receive_IT+0x154>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	0a1a      	lsrs	r2, r3, #8
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009a      	lsls	r2, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	3b01      	subs	r3, #1
 8005784:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d116      	bne.n	80057ba <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f043 0220 	orr.w	r2, r3, #32
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e063      	b.n	8005882 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d0db      	beq.n	8005780 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_I2C_Master_Receive_IT+0x96>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e055      	b.n	8005882 <HAL_I2C_Master_Receive_IT+0x142>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d007      	beq.n	80057fc <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800580a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2222      	movs	r2, #34	; 0x22
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2210      	movs	r2, #16
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	893a      	ldrh	r2, [r7, #8]
 800582c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4a17      	ldr	r2, [pc, #92]	; (8005898 <HAL_I2C_Master_Receive_IT+0x158>)
 800583c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800583e:	897a      	ldrh	r2, [r7, #10]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005852:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005862:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800587a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	e000      	b.n	8005882 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8005880:	2302      	movs	r3, #2
  }
}
 8005882:	4618      	mov	r0, r3
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	20000018 	.word	0x20000018
 8005894:	14f8b589 	.word	0x14f8b589
 8005898:	ffff0000 	.word	0xffff0000

0800589c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d003      	beq.n	80058d4 <HAL_I2C_EV_IRQHandler+0x38>
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
 80058ce:	2b40      	cmp	r3, #64	; 0x40
 80058d0:	f040 80bd 	bne.w	8005a4e <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10d      	bne.n	800590a <HAL_I2C_EV_IRQHandler+0x6e>
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80058f4:	d003      	beq.n	80058fe <HAL_I2C_EV_IRQHandler+0x62>
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80058fc:	d101      	bne.n	8005902 <HAL_I2C_EV_IRQHandler+0x66>
 80058fe:	2301      	movs	r3, #1
 8005900:	e000      	b.n	8005904 <HAL_I2C_EV_IRQHandler+0x68>
 8005902:	2300      	movs	r3, #0
 8005904:	2b01      	cmp	r3, #1
 8005906:	f000 812e 	beq.w	8005b66 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00c      	beq.n	800592e <HAL_I2C_EV_IRQHandler+0x92>
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	0a5b      	lsrs	r3, r3, #9
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d006      	beq.n	800592e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 fc55 	bl	80071d0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fd62 	bl	80063f0 <I2C_Master_SB>
 800592c:	e08e      	b.n	8005a4c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	08db      	lsrs	r3, r3, #3
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <HAL_I2C_EV_IRQHandler+0xb2>
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	0a5b      	lsrs	r3, r3, #9
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fdd8 	bl	80064fc <I2C_Master_ADD10>
 800594c:	e07e      	b.n	8005a4c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	085b      	lsrs	r3, r3, #1
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d009      	beq.n	800596e <HAL_I2C_EV_IRQHandler+0xd2>
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	0a5b      	lsrs	r3, r3, #9
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fdf2 	bl	8006550 <I2C_Master_ADDR>
 800596c:	e06e      	b.n	8005a4c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	089b      	lsrs	r3, r3, #2
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d037      	beq.n	80059ea <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005988:	f000 80ef 	beq.w	8005b6a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	09db      	lsrs	r3, r3, #7
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00f      	beq.n	80059b8 <HAL_I2C_EV_IRQHandler+0x11c>
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	0a9b      	lsrs	r3, r3, #10
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d009      	beq.n	80059b8 <HAL_I2C_EV_IRQHandler+0x11c>
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	089b      	lsrs	r3, r3, #2
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d103      	bne.n	80059b8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f9ef 	bl	8005d94 <I2C_MasterTransmit_TXE>
 80059b6:	e049      	b.n	8005a4c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	089b      	lsrs	r3, r3, #2
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 80d2 	beq.w	8005b6a <HAL_I2C_EV_IRQHandler+0x2ce>
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	0a5b      	lsrs	r3, r3, #9
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 80cb 	beq.w	8005b6a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	2b10      	cmp	r3, #16
 80059d8:	d103      	bne.n	80059e2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fa76 	bl	8005ecc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059e0:	e0c3      	b.n	8005b6a <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fada 	bl	8005f9c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059e8:	e0bf      	b.n	8005b6a <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f8:	f000 80b7 	beq.w	8005b6a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	099b      	lsrs	r3, r3, #6
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00f      	beq.n	8005a28 <HAL_I2C_EV_IRQHandler+0x18c>
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	0a9b      	lsrs	r3, r3, #10
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d009      	beq.n	8005a28 <HAL_I2C_EV_IRQHandler+0x18c>
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	089b      	lsrs	r3, r3, #2
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d103      	bne.n	8005a28 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fb4a 	bl	80060ba <I2C_MasterReceive_RXNE>
 8005a26:	e011      	b.n	8005a4c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	089b      	lsrs	r3, r3, #2
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 809a 	beq.w	8005b6a <HAL_I2C_EV_IRQHandler+0x2ce>
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	0a5b      	lsrs	r3, r3, #9
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 8093 	beq.w	8005b6a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 fbe9 	bl	800621c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a4a:	e08e      	b.n	8005b6a <HAL_I2C_EV_IRQHandler+0x2ce>
 8005a4c:	e08d      	b.n	8005b6a <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d004      	beq.n	8005a60 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	61fb      	str	r3, [r7, #28]
 8005a5e:	e007      	b.n	8005a70 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	085b      	lsrs	r3, r3, #1
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d012      	beq.n	8005aa2 <HAL_I2C_EV_IRQHandler+0x206>
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	0a5b      	lsrs	r3, r3, #9
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00c      	beq.n	8005aa2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005a98:	69b9      	ldr	r1, [r7, #24]
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 ffa7 	bl	80069ee <I2C_Slave_ADDR>
 8005aa0:	e066      	b.n	8005b70 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	091b      	lsrs	r3, r3, #4
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d009      	beq.n	8005ac2 <HAL_I2C_EV_IRQHandler+0x226>
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	0a5b      	lsrs	r3, r3, #9
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 ffdc 	bl	8006a78 <I2C_Slave_STOPF>
 8005ac0:	e056      	b.n	8005b70 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005ac2:	7bbb      	ldrb	r3, [r7, #14]
 8005ac4:	2b21      	cmp	r3, #33	; 0x21
 8005ac6:	d002      	beq.n	8005ace <HAL_I2C_EV_IRQHandler+0x232>
 8005ac8:	7bbb      	ldrb	r3, [r7, #14]
 8005aca:	2b29      	cmp	r3, #41	; 0x29
 8005acc:	d125      	bne.n	8005b1a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	09db      	lsrs	r3, r3, #7
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00f      	beq.n	8005afa <HAL_I2C_EV_IRQHandler+0x25e>
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	0a9b      	lsrs	r3, r3, #10
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <HAL_I2C_EV_IRQHandler+0x25e>
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	089b      	lsrs	r3, r3, #2
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d103      	bne.n	8005afa <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 febd 	bl	8006872 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005af8:	e039      	b.n	8005b6e <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	089b      	lsrs	r3, r3, #2
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d033      	beq.n	8005b6e <HAL_I2C_EV_IRQHandler+0x2d2>
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	0a5b      	lsrs	r3, r3, #9
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d02d      	beq.n	8005b6e <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 feea 	bl	80068ec <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b18:	e029      	b.n	8005b6e <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	099b      	lsrs	r3, r3, #6
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00f      	beq.n	8005b46 <HAL_I2C_EV_IRQHandler+0x2aa>
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	0a9b      	lsrs	r3, r3, #10
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d009      	beq.n	8005b46 <HAL_I2C_EV_IRQHandler+0x2aa>
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	089b      	lsrs	r3, r3, #2
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d103      	bne.n	8005b46 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fef5 	bl	800692e <I2C_SlaveReceive_RXNE>
 8005b44:	e014      	b.n	8005b70 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	089b      	lsrs	r3, r3, #2
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00e      	beq.n	8005b70 <HAL_I2C_EV_IRQHandler+0x2d4>
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	0a5b      	lsrs	r3, r3, #9
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d008      	beq.n	8005b70 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 ff23 	bl	80069aa <I2C_SlaveReceive_BTF>
 8005b64:	e004      	b.n	8005b70 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8005b66:	bf00      	nop
 8005b68:	e002      	b.n	8005b70 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b6a:	bf00      	nop
 8005b6c:	e000      	b.n	8005b70 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b6e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005b70:	3720      	adds	r7, #32
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b08a      	sub	sp, #40	; 0x28
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b98:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	0a1b      	lsrs	r3, r3, #8
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00e      	beq.n	8005bc4 <HAL_I2C_ER_IRQHandler+0x4e>
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	0a1b      	lsrs	r3, r3, #8
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d008      	beq.n	8005bc4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	f043 0301 	orr.w	r3, r3, #1
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bc2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	0a5b      	lsrs	r3, r3, #9
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00e      	beq.n	8005bee <HAL_I2C_ER_IRQHandler+0x78>
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	0a1b      	lsrs	r3, r3, #8
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d008      	beq.n	8005bee <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	f043 0302 	orr.w	r3, r3, #2
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005bec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	0a9b      	lsrs	r3, r3, #10
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d03f      	beq.n	8005c7a <HAL_I2C_ER_IRQHandler+0x104>
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	0a1b      	lsrs	r3, r3, #8
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d039      	beq.n	8005c7a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005c06:	7efb      	ldrb	r3, [r7, #27]
 8005c08:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c18:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005c20:	7ebb      	ldrb	r3, [r7, #26]
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	d112      	bne.n	8005c4c <HAL_I2C_ER_IRQHandler+0xd6>
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10f      	bne.n	8005c4c <HAL_I2C_ER_IRQHandler+0xd6>
 8005c2c:	7cfb      	ldrb	r3, [r7, #19]
 8005c2e:	2b21      	cmp	r3, #33	; 0x21
 8005c30:	d008      	beq.n	8005c44 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005c32:	7cfb      	ldrb	r3, [r7, #19]
 8005c34:	2b29      	cmp	r3, #41	; 0x29
 8005c36:	d005      	beq.n	8005c44 <HAL_I2C_ER_IRQHandler+0xce>
 8005c38:	7cfb      	ldrb	r3, [r7, #19]
 8005c3a:	2b28      	cmp	r3, #40	; 0x28
 8005c3c:	d106      	bne.n	8005c4c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b21      	cmp	r3, #33	; 0x21
 8005c42:	d103      	bne.n	8005c4c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f001 f847 	bl	8006cd8 <I2C_Slave_AF>
 8005c4a:	e016      	b.n	8005c7a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c54:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	f043 0304 	orr.w	r3, r3, #4
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005c5e:	7efb      	ldrb	r3, [r7, #27]
 8005c60:	2b10      	cmp	r3, #16
 8005c62:	d002      	beq.n	8005c6a <HAL_I2C_ER_IRQHandler+0xf4>
 8005c64:	7efb      	ldrb	r3, [r7, #27]
 8005c66:	2b40      	cmp	r3, #64	; 0x40
 8005c68:	d107      	bne.n	8005c7a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c78:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	0adb      	lsrs	r3, r3, #11
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00e      	beq.n	8005ca4 <HAL_I2C_ER_IRQHandler+0x12e>
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	0a1b      	lsrs	r3, r3, #8
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d008      	beq.n	8005ca4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	f043 0308 	orr.w	r3, r3, #8
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005ca2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d008      	beq.n	8005cbc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f001 f87e 	bl	8006db8 <I2C_ITError>
  }
}
 8005cbc:	bf00      	nop
 8005cbe:	3728      	adds	r7, #40	; 0x28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	70fb      	strb	r3, [r7, #3]
 8005d20:	4613      	mov	r3, r2
 8005d22:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005daa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d150      	bne.n	8005e5c <I2C_MasterTransmit_TXE+0xc8>
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
 8005dbc:	2b21      	cmp	r3, #33	; 0x21
 8005dbe:	d14d      	bne.n	8005e5c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	d01d      	beq.n	8005e02 <I2C_MasterTransmit_TXE+0x6e>
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d01a      	beq.n	8005e02 <I2C_MasterTransmit_TXE+0x6e>
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005dd2:	d016      	beq.n	8005e02 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005de2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2211      	movs	r2, #17
 8005de8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7ff ff62 	bl	8005cc4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e00:	e060      	b.n	8005ec4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e10:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e20:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b40      	cmp	r3, #64	; 0x40
 8005e3a:	d107      	bne.n	8005e4c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7ff ff7d 	bl	8005d44 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e4a:	e03b      	b.n	8005ec4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff ff35 	bl	8005cc4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e5a:	e033      	b.n	8005ec4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	2b21      	cmp	r3, #33	; 0x21
 8005e60:	d005      	beq.n	8005e6e <I2C_MasterTransmit_TXE+0xda>
 8005e62:	7bbb      	ldrb	r3, [r7, #14]
 8005e64:	2b40      	cmp	r3, #64	; 0x40
 8005e66:	d12d      	bne.n	8005ec4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	2b22      	cmp	r3, #34	; 0x22
 8005e6c:	d12a      	bne.n	8005ec4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d108      	bne.n	8005e8a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e86:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005e88:	e01c      	b.n	8005ec4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b40      	cmp	r3, #64	; 0x40
 8005e94:	d103      	bne.n	8005e9e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f880 	bl	8005f9c <I2C_MemoryTransmit_TXE_BTF>
}
 8005e9c:	e012      	b.n	8005ec4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	781a      	ldrb	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005ec2:	e7ff      	b.n	8005ec4 <I2C_MasterTransmit_TXE+0x130>
 8005ec4:	bf00      	nop
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b21      	cmp	r3, #33	; 0x21
 8005ee4:	d156      	bne.n	8005f94 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d012      	beq.n	8005f16 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	781a      	ldrb	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005f14:	e03e      	b.n	8005f94 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d01d      	beq.n	8005f58 <I2C_MasterTransmit_BTF+0x8c>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2b20      	cmp	r3, #32
 8005f20:	d01a      	beq.n	8005f58 <I2C_MasterTransmit_BTF+0x8c>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f28:	d016      	beq.n	8005f58 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f38:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2211      	movs	r2, #17
 8005f3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff feb7 	bl	8005cc4 <HAL_I2C_MasterTxCpltCallback>
}
 8005f56:	e01d      	b.n	8005f94 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f66:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f76:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff fe98 	bl	8005cc4 <HAL_I2C_MasterTxCpltCallback>
}
 8005f94:	bf00      	nop
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005faa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d11d      	bne.n	8005ff0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d10b      	bne.n	8005fd4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fcc:	1c9a      	adds	r2, r3, #2
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005fd2:	e06e      	b.n	80060b2 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	121b      	asrs	r3, r3, #8
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005fee:	e060      	b.n	80060b2 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d10b      	bne.n	8006010 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800600e:	e050      	b.n	80060b2 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006014:	2b02      	cmp	r3, #2
 8006016:	d14c      	bne.n	80060b2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	2b22      	cmp	r3, #34	; 0x22
 800601c:	d108      	bne.n	8006030 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800602c:	601a      	str	r2, [r3, #0]
}
 800602e:	e040      	b.n	80060b2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d015      	beq.n	8006066 <I2C_MemoryTransmit_TXE_BTF+0xca>
 800603a:	7bfb      	ldrb	r3, [r7, #15]
 800603c:	2b21      	cmp	r3, #33	; 0x21
 800603e:	d112      	bne.n	8006066 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	781a      	ldrb	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605a:	b29b      	uxth	r3, r3
 800605c:	3b01      	subs	r3, #1
 800605e:	b29a      	uxth	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006064:	e025      	b.n	80060b2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800606a:	b29b      	uxth	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d120      	bne.n	80060b2 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	2b21      	cmp	r3, #33	; 0x21
 8006074:	d11d      	bne.n	80060b2 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006084:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006094:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff fe49 	bl	8005d44 <HAL_I2C_MemTxCpltCallback>
}
 80060b2:	bf00      	nop
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b22      	cmp	r3, #34	; 0x22
 80060cc:	f040 80a2 	bne.w	8006214 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d921      	bls.n	8006122 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006108:	b29b      	uxth	r3, r3
 800610a:	2b03      	cmp	r3, #3
 800610c:	f040 8082 	bne.w	8006214 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800611e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8006120:	e078      	b.n	8006214 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006126:	2b02      	cmp	r3, #2
 8006128:	d074      	beq.n	8006214 <I2C_MasterReceive_RXNE+0x15a>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d002      	beq.n	8006136 <I2C_MasterReceive_RXNE+0x7c>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d16e      	bne.n	8006214 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f001 f818 	bl	800716c <I2C_WaitOnSTOPRequestThroughIT>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d142      	bne.n	80061c8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006150:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006160:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691a      	ldr	r2, [r3, #16]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	b2d2      	uxtb	r2, r2
 800616e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b40      	cmp	r3, #64	; 0x40
 800619a:	d10a      	bne.n	80061b2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff fdd4 	bl	8005d58 <HAL_I2C_MemRxCpltCallback>
}
 80061b0:	e030      	b.n	8006214 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2212      	movs	r2, #18
 80061be:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff fd89 	bl	8005cd8 <HAL_I2C_MasterRxCpltCallback>
}
 80061c6:	e025      	b.n	8006214 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	691a      	ldr	r2, [r3, #16]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2220      	movs	r2, #32
 8006202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff fdac 	bl	8005d6c <HAL_I2C_ErrorCallback>
}
 8006214:	bf00      	nop
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006228:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b04      	cmp	r3, #4
 8006232:	d11b      	bne.n	800626c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006242:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691a      	ldr	r2, [r3, #16]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	1c5a      	adds	r2, r3, #1
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006260:	b29b      	uxth	r3, r3
 8006262:	3b01      	subs	r3, #1
 8006264:	b29a      	uxth	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800626a:	e0bd      	b.n	80063e8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006270:	b29b      	uxth	r3, r3
 8006272:	2b03      	cmp	r3, #3
 8006274:	d129      	bne.n	80062ca <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006284:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2b04      	cmp	r3, #4
 800628a:	d00a      	beq.n	80062a2 <I2C_MasterReceive_BTF+0x86>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b02      	cmp	r3, #2
 8006290:	d007      	beq.n	80062a2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062a0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	691a      	ldr	r2, [r3, #16]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80062c8:	e08e      	b.n	80063e8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d176      	bne.n	80063c2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d002      	beq.n	80062e0 <I2C_MasterReceive_BTF+0xc4>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b10      	cmp	r3, #16
 80062de:	d108      	bne.n	80062f2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	e019      	b.n	8006326 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d002      	beq.n	80062fe <I2C_MasterReceive_BTF+0xe2>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d108      	bne.n	8006310 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	e00a      	b.n	8006326 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b10      	cmp	r3, #16
 8006314:	d007      	beq.n	8006326 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006324:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b01      	subs	r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006368:	b29b      	uxth	r3, r3
 800636a:	3b01      	subs	r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006380:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b40      	cmp	r3, #64	; 0x40
 8006394:	d10a      	bne.n	80063ac <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7ff fcd7 	bl	8005d58 <HAL_I2C_MemRxCpltCallback>
}
 80063aa:	e01d      	b.n	80063e8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2212      	movs	r2, #18
 80063b8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff fc8c 	bl	8005cd8 <HAL_I2C_MasterRxCpltCallback>
}
 80063c0:	e012      	b.n	80063e8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	691a      	ldr	r2, [r3, #16]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063de:	b29b      	uxth	r3, r3
 80063e0:	3b01      	subs	r3, #1
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80063e8:	bf00      	nop
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b40      	cmp	r3, #64	; 0x40
 8006402:	d117      	bne.n	8006434 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006408:	2b00      	cmp	r3, #0
 800640a:	d109      	bne.n	8006420 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006410:	b2db      	uxtb	r3, r3
 8006412:	461a      	mov	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800641c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800641e:	e067      	b.n	80064f0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006424:	b2db      	uxtb	r3, r3
 8006426:	f043 0301 	orr.w	r3, r3, #1
 800642a:	b2da      	uxtb	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	611a      	str	r2, [r3, #16]
}
 8006432:	e05d      	b.n	80064f0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800643c:	d133      	bne.n	80064a6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b21      	cmp	r3, #33	; 0x21
 8006448:	d109      	bne.n	800645e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644e:	b2db      	uxtb	r3, r3
 8006450:	461a      	mov	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800645a:	611a      	str	r2, [r3, #16]
 800645c:	e008      	b.n	8006470 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006462:	b2db      	uxtb	r3, r3
 8006464:	f043 0301 	orr.w	r3, r3, #1
 8006468:	b2da      	uxtb	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006474:	2b00      	cmp	r3, #0
 8006476:	d004      	beq.n	8006482 <I2C_Master_SB+0x92>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d108      	bne.n	8006494 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006486:	2b00      	cmp	r3, #0
 8006488:	d032      	beq.n	80064f0 <I2C_Master_SB+0x100>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006490:	2b00      	cmp	r3, #0
 8006492:	d02d      	beq.n	80064f0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064a2:	605a      	str	r2, [r3, #4]
}
 80064a4:	e024      	b.n	80064f0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10e      	bne.n	80064cc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	11db      	asrs	r3, r3, #7
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	f003 0306 	and.w	r3, r3, #6
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	f063 030f 	orn	r3, r3, #15
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	611a      	str	r2, [r3, #16]
}
 80064ca:	e011      	b.n	80064f0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d10d      	bne.n	80064f0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d8:	b29b      	uxth	r3, r3
 80064da:	11db      	asrs	r3, r3, #7
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	f003 0306 	and.w	r3, r3, #6
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	f063 030e 	orn	r3, r3, #14
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	611a      	str	r2, [r3, #16]
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006508:	b2da      	uxtb	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006514:	2b00      	cmp	r3, #0
 8006516:	d004      	beq.n	8006522 <I2C_Master_ADD10+0x26>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651e:	2b00      	cmp	r3, #0
 8006520:	d108      	bne.n	8006534 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00c      	beq.n	8006544 <I2C_Master_ADD10+0x48>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006530:	2b00      	cmp	r3, #0
 8006532:	d007      	beq.n	8006544 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006542:	605a      	str	r2, [r3, #4]
  }
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006550:	b480      	push	{r7}
 8006552:	b091      	sub	sp, #68	; 0x44
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800655e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006566:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b22      	cmp	r3, #34	; 0x22
 8006578:	f040 8169 	bne.w	800684e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10f      	bne.n	80065a4 <I2C_Master_ADDR+0x54>
 8006584:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006588:	2b40      	cmp	r3, #64	; 0x40
 800658a:	d10b      	bne.n	80065a4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800658c:	2300      	movs	r3, #0
 800658e:	633b      	str	r3, [r7, #48]	; 0x30
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	633b      	str	r3, [r7, #48]	; 0x30
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	633b      	str	r3, [r7, #48]	; 0x30
 80065a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a2:	e160      	b.n	8006866 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d11d      	bne.n	80065e8 <I2C_Master_ADDR+0x98>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065b4:	d118      	bne.n	80065e8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065b6:	2300      	movs	r3, #0
 80065b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065da:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	651a      	str	r2, [r3, #80]	; 0x50
 80065e6:	e13e      	b.n	8006866 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d113      	bne.n	800661a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f2:	2300      	movs	r3, #0
 80065f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	62bb      	str	r3, [r7, #40]	; 0x28
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	e115      	b.n	8006846 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661e:	b29b      	uxth	r3, r3
 8006620:	2b01      	cmp	r3, #1
 8006622:	f040 808a 	bne.w	800673a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006628:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800662c:	d137      	bne.n	800669e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800663c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800664c:	d113      	bne.n	8006676 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800665c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800665e:	2300      	movs	r3, #0
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	627b      	str	r3, [r7, #36]	; 0x24
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	e0e7      	b.n	8006846 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006676:	2300      	movs	r3, #0
 8006678:	623b      	str	r3, [r7, #32]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	623b      	str	r3, [r7, #32]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	623b      	str	r3, [r7, #32]
 800668a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	e0d3      	b.n	8006846 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d02e      	beq.n	8006702 <I2C_Master_ADDR+0x1b2>
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	d02b      	beq.n	8006702 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80066aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ac:	2b12      	cmp	r3, #18
 80066ae:	d102      	bne.n	80066b6 <I2C_Master_ADDR+0x166>
 80066b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d125      	bne.n	8006702 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80066b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b8:	2b04      	cmp	r3, #4
 80066ba:	d00e      	beq.n	80066da <I2C_Master_ADDR+0x18a>
 80066bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d00b      	beq.n	80066da <I2C_Master_ADDR+0x18a>
 80066c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c4:	2b10      	cmp	r3, #16
 80066c6:	d008      	beq.n	80066da <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	e007      	b.n	80066ea <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ea:	2300      	movs	r3, #0
 80066ec:	61fb      	str	r3, [r7, #28]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	61fb      	str	r3, [r7, #28]
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	e0a1      	b.n	8006846 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006710:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006712:	2300      	movs	r3, #0
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	61bb      	str	r3, [r7, #24]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	61bb      	str	r3, [r7, #24]
 8006726:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	e085      	b.n	8006846 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673e:	b29b      	uxth	r3, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d14d      	bne.n	80067e0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006746:	2b04      	cmp	r3, #4
 8006748:	d016      	beq.n	8006778 <I2C_Master_ADDR+0x228>
 800674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674c:	2b02      	cmp	r3, #2
 800674e:	d013      	beq.n	8006778 <I2C_Master_ADDR+0x228>
 8006750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006752:	2b10      	cmp	r3, #16
 8006754:	d010      	beq.n	8006778 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006764:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	e007      	b.n	8006788 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006786:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006796:	d117      	bne.n	80067c8 <I2C_Master_ADDR+0x278>
 8006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800679e:	d00b      	beq.n	80067b8 <I2C_Master_ADDR+0x268>
 80067a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d008      	beq.n	80067b8 <I2C_Master_ADDR+0x268>
 80067a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d005      	beq.n	80067b8 <I2C_Master_ADDR+0x268>
 80067ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ae:	2b10      	cmp	r3, #16
 80067b0:	d002      	beq.n	80067b8 <I2C_Master_ADDR+0x268>
 80067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b4:	2b20      	cmp	r3, #32
 80067b6:	d107      	bne.n	80067c8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067c6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067c8:	2300      	movs	r3, #0
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	e032      	b.n	8006846 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067ee:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067fe:	d117      	bne.n	8006830 <I2C_Master_ADDR+0x2e0>
 8006800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006802:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006806:	d00b      	beq.n	8006820 <I2C_Master_ADDR+0x2d0>
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	2b01      	cmp	r3, #1
 800680c:	d008      	beq.n	8006820 <I2C_Master_ADDR+0x2d0>
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	2b08      	cmp	r3, #8
 8006812:	d005      	beq.n	8006820 <I2C_Master_ADDR+0x2d0>
 8006814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006816:	2b10      	cmp	r3, #16
 8006818:	d002      	beq.n	8006820 <I2C_Master_ADDR+0x2d0>
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	2b20      	cmp	r3, #32
 800681e:	d107      	bne.n	8006830 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800682e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006830:	2300      	movs	r3, #0
 8006832:	613b      	str	r3, [r7, #16]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	613b      	str	r3, [r7, #16]
 8006844:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800684c:	e00b      	b.n	8006866 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800684e:	2300      	movs	r3, #0
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	68fb      	ldr	r3, [r7, #12]
}
 8006864:	e7ff      	b.n	8006866 <I2C_Master_ADDR+0x316>
 8006866:	bf00      	nop
 8006868:	3744      	adds	r7, #68	; 0x44
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006880:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006886:	b29b      	uxth	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d02b      	beq.n	80068e4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	781a      	ldrb	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d114      	bne.n	80068e4 <I2C_SlaveTransmit_TXE+0x72>
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	2b29      	cmp	r3, #41	; 0x29
 80068be:	d111      	bne.n	80068e4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2221      	movs	r2, #33	; 0x21
 80068d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2228      	movs	r2, #40	; 0x28
 80068da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7ff fa04 	bl	8005cec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80068e4:	bf00      	nop
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d011      	beq.n	8006922 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	781a      	ldrb	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006918:	b29b      	uxth	r3, r3
 800691a:	3b01      	subs	r3, #1
 800691c:	b29a      	uxth	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006922:	bf00      	nop
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006942:	b29b      	uxth	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d02c      	beq.n	80069a2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691a      	ldr	r2, [r3, #16]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006964:	b29b      	uxth	r3, r3
 8006966:	3b01      	subs	r3, #1
 8006968:	b29a      	uxth	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006972:	b29b      	uxth	r3, r3
 8006974:	2b00      	cmp	r3, #0
 8006976:	d114      	bne.n	80069a2 <I2C_SlaveReceive_RXNE+0x74>
 8006978:	7bfb      	ldrb	r3, [r7, #15]
 800697a:	2b2a      	cmp	r3, #42	; 0x2a
 800697c:	d111      	bne.n	80069a2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800698c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2222      	movs	r2, #34	; 0x22
 8006992:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2228      	movs	r2, #40	; 0x28
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff f9af 	bl	8005d00 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d012      	beq.n	80069e2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d8:	b29b      	uxth	r3, r3
 80069da:	3b01      	subs	r3, #1
 80069dc:	b29a      	uxth	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80069e2:	bf00      	nop
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80069f8:	2300      	movs	r3, #0
 80069fa:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a08:	2b28      	cmp	r3, #40	; 0x28
 8006a0a:	d127      	bne.n	8006a5c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a1a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	089b      	lsrs	r3, r3, #2
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	09db      	lsrs	r3, r3, #7
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d103      	bne.n	8006a40 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	81bb      	strh	r3, [r7, #12]
 8006a3e:	e002      	b.n	8006a46 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006a4e:	89ba      	ldrh	r2, [r7, #12]
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff f95d 	bl	8005d14 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006a5a:	e008      	b.n	8006a6e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f06f 0202 	mvn.w	r2, #2
 8006a64:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006a6e:	bf00      	nop
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a86:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a96:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006a98:	2300      	movs	r3, #0
 8006a9a:	60bb      	str	r3, [r7, #8]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	60bb      	str	r3, [r7, #8]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 0201 	orr.w	r2, r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad4:	d172      	bne.n	8006bbc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
 8006ad8:	2b22      	cmp	r3, #34	; 0x22
 8006ada:	d002      	beq.n	8006ae2 <I2C_Slave_STOPF+0x6a>
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	2b2a      	cmp	r3, #42	; 0x2a
 8006ae0:	d135      	bne.n	8006b4e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d005      	beq.n	8006b06 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	f043 0204 	orr.w	r2, r3, #4
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b14:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fe f96a 	bl	8004df4 <HAL_DMA_GetState>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d049      	beq.n	8006bba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2a:	4a69      	ldr	r2, [pc, #420]	; (8006cd0 <I2C_Slave_STOPF+0x258>)
 8006b2c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fd ffb2 	bl	8004a9c <HAL_DMA_Abort_IT>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d03d      	beq.n	8006bba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b48:	4610      	mov	r0, r2
 8006b4a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b4c:	e035      	b.n	8006bba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d005      	beq.n	8006b72 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	f043 0204 	orr.w	r2, r3, #4
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b80:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fe f934 	bl	8004df4 <HAL_DMA_GetState>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d014      	beq.n	8006bbc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b96:	4a4e      	ldr	r2, [pc, #312]	; (8006cd0 <I2C_Slave_STOPF+0x258>)
 8006b98:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fd ff7c 	bl	8004a9c <HAL_DMA_Abort_IT>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d008      	beq.n	8006bbc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	4798      	blx	r3
 8006bb8:	e000      	b.n	8006bbc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006bba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d03e      	beq.n	8006c44 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	f003 0304 	and.w	r3, r3, #4
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d112      	bne.n	8006bfa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	691a      	ldr	r2, [r3, #16]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c04:	2b40      	cmp	r3, #64	; 0x40
 8006c06:	d112      	bne.n	8006c2e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	691a      	ldr	r2, [r3, #16]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	3b01      	subs	r3, #1
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d005      	beq.n	8006c44 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	f043 0204 	orr.w	r2, r3, #4
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f8b3 	bl	8006db8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006c52:	e039      	b.n	8006cc8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
 8006c56:	2b2a      	cmp	r3, #42	; 0x2a
 8006c58:	d109      	bne.n	8006c6e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2228      	movs	r2, #40	; 0x28
 8006c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff f849 	bl	8005d00 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b28      	cmp	r3, #40	; 0x28
 8006c78:	d111      	bne.n	8006c9e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a15      	ldr	r2, [pc, #84]	; (8006cd4 <I2C_Slave_STOPF+0x25c>)
 8006c7e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff f84a 	bl	8005d30 <HAL_I2C_ListenCpltCallback>
}
 8006c9c:	e014      	b.n	8006cc8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca2:	2b22      	cmp	r3, #34	; 0x22
 8006ca4:	d002      	beq.n	8006cac <I2C_Slave_STOPF+0x234>
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	2b22      	cmp	r3, #34	; 0x22
 8006caa:	d10d      	bne.n	8006cc8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff f81c 	bl	8005d00 <HAL_I2C_SlaveRxCpltCallback>
}
 8006cc8:	bf00      	nop
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	0800701d 	.word	0x0800701d
 8006cd4:	ffff0000 	.word	0xffff0000

08006cd8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cec:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	d002      	beq.n	8006cfa <I2C_Slave_AF+0x22>
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2b20      	cmp	r3, #32
 8006cf8:	d129      	bne.n	8006d4e <I2C_Slave_AF+0x76>
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	2b28      	cmp	r3, #40	; 0x28
 8006cfe:	d126      	bne.n	8006d4e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a2c      	ldr	r2, [pc, #176]	; (8006db4 <I2C_Slave_AF+0xdc>)
 8006d04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d14:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d1e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d2e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7fe fff2 	bl	8005d30 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006d4c:	e02e      	b.n	8006dac <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	2b21      	cmp	r3, #33	; 0x21
 8006d52:	d126      	bne.n	8006da2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a17      	ldr	r2, [pc, #92]	; (8006db4 <I2C_Slave_AF+0xdc>)
 8006d58:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2221      	movs	r2, #33	; 0x21
 8006d5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2220      	movs	r2, #32
 8006d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d7e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d88:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d98:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fe ffa6 	bl	8005cec <HAL_I2C_SlaveTxCpltCallback>
}
 8006da0:	e004      	b.n	8006dac <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006daa:	615a      	str	r2, [r3, #20]
}
 8006dac:	bf00      	nop
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	ffff0000 	.word	0xffff0000

08006db8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
 8006dd2:	2b10      	cmp	r3, #16
 8006dd4:	d002      	beq.n	8006ddc <I2C_ITError+0x24>
 8006dd6:	7bbb      	ldrb	r3, [r7, #14]
 8006dd8:	2b40      	cmp	r3, #64	; 0x40
 8006dda:	d10a      	bne.n	8006df2 <I2C_ITError+0x3a>
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	2b22      	cmp	r3, #34	; 0x22
 8006de0:	d107      	bne.n	8006df2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006df0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006df8:	2b28      	cmp	r3, #40	; 0x28
 8006dfa:	d107      	bne.n	8006e0c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2228      	movs	r2, #40	; 0x28
 8006e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e0a:	e015      	b.n	8006e38 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e1a:	d00a      	beq.n	8006e32 <I2C_ITError+0x7a>
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	2b60      	cmp	r3, #96	; 0x60
 8006e20:	d007      	beq.n	8006e32 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e46:	d162      	bne.n	8006f0e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e56:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d020      	beq.n	8006ea8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6a:	4a6a      	ldr	r2, [pc, #424]	; (8007014 <I2C_ITError+0x25c>)
 8006e6c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fd fe12 	bl	8004a9c <HAL_DMA_Abort_IT>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 8089 	beq.w	8006f92 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0201 	bic.w	r2, r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2220      	movs	r2, #32
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	4798      	blx	r3
 8006ea6:	e074      	b.n	8006f92 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	4a59      	ldr	r2, [pc, #356]	; (8007014 <I2C_ITError+0x25c>)
 8006eae:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fd fdf1 	bl	8004a9c <HAL_DMA_Abort_IT>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d068      	beq.n	8006f92 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eca:	2b40      	cmp	r3, #64	; 0x40
 8006ecc:	d10b      	bne.n	8006ee6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	691a      	ldr	r2, [r3, #16]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	b2d2      	uxtb	r2, r2
 8006eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0201 	bic.w	r2, r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4798      	blx	r3
 8006f0c:	e041      	b.n	8006f92 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b60      	cmp	r3, #96	; 0x60
 8006f18:	d125      	bne.n	8006f66 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f32:	2b40      	cmp	r3, #64	; 0x40
 8006f34:	d10b      	bne.n	8006f4e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	691a      	ldr	r2, [r3, #16]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	b2d2      	uxtb	r2, r2
 8006f42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	1c5a      	adds	r2, r3, #1
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 0201 	bic.w	r2, r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7fe ff0e 	bl	8005d80 <HAL_I2C_AbortCpltCallback>
 8006f64:	e015      	b.n	8006f92 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f70:	2b40      	cmp	r3, #64	; 0x40
 8006f72:	d10b      	bne.n	8006f8c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	691a      	ldr	r2, [r3, #16]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	b2d2      	uxtb	r2, r2
 8006f80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7fe feed 	bl	8005d6c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10e      	bne.n	8006fc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d109      	bne.n	8006fc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d104      	bne.n	8006fc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d007      	beq.n	8006fd0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b04      	cmp	r3, #4
 8006fe2:	d113      	bne.n	800700c <I2C_ITError+0x254>
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	2b28      	cmp	r3, #40	; 0x28
 8006fe8:	d110      	bne.n	800700c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a0a      	ldr	r2, [pc, #40]	; (8007018 <I2C_ITError+0x260>)
 8006fee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7fe fe92 	bl	8005d30 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800700c:	bf00      	nop
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	0800701d 	.word	0x0800701d
 8007018:	ffff0000 	.word	0xffff0000

0800701c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007034:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007036:	4b4b      	ldr	r3, [pc, #300]	; (8007164 <I2C_DMAAbort+0x148>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	08db      	lsrs	r3, r3, #3
 800703c:	4a4a      	ldr	r2, [pc, #296]	; (8007168 <I2C_DMAAbort+0x14c>)
 800703e:	fba2 2303 	umull	r2, r3, r2, r3
 8007042:	0a1a      	lsrs	r2, r3, #8
 8007044:	4613      	mov	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	00da      	lsls	r2, r3, #3
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d106      	bne.n	8007064 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	f043 0220 	orr.w	r2, r3, #32
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007062:	e00a      	b.n	800707a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3b01      	subs	r3, #1
 8007068:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007078:	d0ea      	beq.n	8007050 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007086:	2200      	movs	r2, #0
 8007088:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007096:	2200      	movs	r2, #0
 8007098:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070a8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2200      	movs	r2, #0
 80070ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070bc:	2200      	movs	r2, #0
 80070be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	2200      	movs	r2, #0
 80070ce:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f022 0201 	bic.w	r2, r2, #1
 80070de:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b60      	cmp	r3, #96	; 0x60
 80070ea:	d10e      	bne.n	800710a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	2200      	movs	r2, #0
 8007100:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007102:	6978      	ldr	r0, [r7, #20]
 8007104:	f7fe fe3c 	bl	8005d80 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007108:	e027      	b.n	800715a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800710a:	7cfb      	ldrb	r3, [r7, #19]
 800710c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007110:	2b28      	cmp	r3, #40	; 0x28
 8007112:	d117      	bne.n	8007144 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f042 0201 	orr.w	r2, r2, #1
 8007122:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007132:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	2200      	movs	r2, #0
 8007138:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2228      	movs	r2, #40	; 0x28
 800713e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007142:	e007      	b.n	8007154 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2220      	movs	r2, #32
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007154:	6978      	ldr	r0, [r7, #20]
 8007156:	f7fe fe09 	bl	8005d6c <HAL_I2C_ErrorCallback>
}
 800715a:	bf00      	nop
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20000018 	.word	0x20000018
 8007168:	14f8b589 	.word	0x14f8b589

0800716c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007178:	4b13      	ldr	r3, [pc, #76]	; (80071c8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	08db      	lsrs	r3, r3, #3
 800717e:	4a13      	ldr	r2, [pc, #76]	; (80071cc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007180:	fba2 2303 	umull	r2, r3, r2, r3
 8007184:	0a1a      	lsrs	r2, r3, #8
 8007186:	4613      	mov	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3b01      	subs	r3, #1
 8007192:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d107      	bne.n	80071aa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	f043 0220 	orr.w	r2, r3, #32
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e008      	b.n	80071bc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b8:	d0e9      	beq.n	800718e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	20000018 	.word	0x20000018
 80071cc:	14f8b589 	.word	0x14f8b589

080071d0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80071e0:	d103      	bne.n	80071ea <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80071e8:	e007      	b.n	80071fa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ee:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80071f2:	d102      	bne.n	80071fa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2208      	movs	r2, #8
 80071f8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80071fa:	bf00      	nop
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
	...

08007208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e264      	b.n	80076e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	d075      	beq.n	8007312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007226:	4ba3      	ldr	r3, [pc, #652]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f003 030c 	and.w	r3, r3, #12
 800722e:	2b04      	cmp	r3, #4
 8007230:	d00c      	beq.n	800724c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007232:	4ba0      	ldr	r3, [pc, #640]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800723a:	2b08      	cmp	r3, #8
 800723c:	d112      	bne.n	8007264 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800723e:	4b9d      	ldr	r3, [pc, #628]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800724a:	d10b      	bne.n	8007264 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800724c:	4b99      	ldr	r3, [pc, #612]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d05b      	beq.n	8007310 <HAL_RCC_OscConfig+0x108>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d157      	bne.n	8007310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e23f      	b.n	80076e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800726c:	d106      	bne.n	800727c <HAL_RCC_OscConfig+0x74>
 800726e:	4b91      	ldr	r3, [pc, #580]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a90      	ldr	r2, [pc, #576]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 8007274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	e01d      	b.n	80072b8 <HAL_RCC_OscConfig+0xb0>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007284:	d10c      	bne.n	80072a0 <HAL_RCC_OscConfig+0x98>
 8007286:	4b8b      	ldr	r3, [pc, #556]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a8a      	ldr	r2, [pc, #552]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 800728c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007290:	6013      	str	r3, [r2, #0]
 8007292:	4b88      	ldr	r3, [pc, #544]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a87      	ldr	r2, [pc, #540]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 8007298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	e00b      	b.n	80072b8 <HAL_RCC_OscConfig+0xb0>
 80072a0:	4b84      	ldr	r3, [pc, #528]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a83      	ldr	r2, [pc, #524]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 80072a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	4b81      	ldr	r3, [pc, #516]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a80      	ldr	r2, [pc, #512]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 80072b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d013      	beq.n	80072e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072c0:	f7fd f958 	bl	8004574 <HAL_GetTick>
 80072c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072c6:	e008      	b.n	80072da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072c8:	f7fd f954 	bl	8004574 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	2b64      	cmp	r3, #100	; 0x64
 80072d4:	d901      	bls.n	80072da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e204      	b.n	80076e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072da:	4b76      	ldr	r3, [pc, #472]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0f0      	beq.n	80072c8 <HAL_RCC_OscConfig+0xc0>
 80072e6:	e014      	b.n	8007312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072e8:	f7fd f944 	bl	8004574 <HAL_GetTick>
 80072ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072ee:	e008      	b.n	8007302 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072f0:	f7fd f940 	bl	8004574 <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	2b64      	cmp	r3, #100	; 0x64
 80072fc:	d901      	bls.n	8007302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e1f0      	b.n	80076e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007302:	4b6c      	ldr	r3, [pc, #432]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1f0      	bne.n	80072f0 <HAL_RCC_OscConfig+0xe8>
 800730e:	e000      	b.n	8007312 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d063      	beq.n	80073e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800731e:	4b65      	ldr	r3, [pc, #404]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f003 030c 	and.w	r3, r3, #12
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00b      	beq.n	8007342 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800732a:	4b62      	ldr	r3, [pc, #392]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007332:	2b08      	cmp	r3, #8
 8007334:	d11c      	bne.n	8007370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007336:	4b5f      	ldr	r3, [pc, #380]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d116      	bne.n	8007370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007342:	4b5c      	ldr	r3, [pc, #368]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d005      	beq.n	800735a <HAL_RCC_OscConfig+0x152>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d001      	beq.n	800735a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e1c4      	b.n	80076e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800735a:	4b56      	ldr	r3, [pc, #344]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	4952      	ldr	r1, [pc, #328]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 800736a:	4313      	orrs	r3, r2
 800736c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800736e:	e03a      	b.n	80073e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d020      	beq.n	80073ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007378:	4b4f      	ldr	r3, [pc, #316]	; (80074b8 <HAL_RCC_OscConfig+0x2b0>)
 800737a:	2201      	movs	r2, #1
 800737c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800737e:	f7fd f8f9 	bl	8004574 <HAL_GetTick>
 8007382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007384:	e008      	b.n	8007398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007386:	f7fd f8f5 	bl	8004574 <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	2b02      	cmp	r3, #2
 8007392:	d901      	bls.n	8007398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e1a5      	b.n	80076e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007398:	4b46      	ldr	r3, [pc, #280]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d0f0      	beq.n	8007386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073a4:	4b43      	ldr	r3, [pc, #268]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	4940      	ldr	r1, [pc, #256]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	600b      	str	r3, [r1, #0]
 80073b8:	e015      	b.n	80073e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073ba:	4b3f      	ldr	r3, [pc, #252]	; (80074b8 <HAL_RCC_OscConfig+0x2b0>)
 80073bc:	2200      	movs	r2, #0
 80073be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c0:	f7fd f8d8 	bl	8004574 <HAL_GetTick>
 80073c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073c6:	e008      	b.n	80073da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073c8:	f7fd f8d4 	bl	8004574 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d901      	bls.n	80073da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e184      	b.n	80076e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073da:	4b36      	ldr	r3, [pc, #216]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1f0      	bne.n	80073c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0308 	and.w	r3, r3, #8
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d030      	beq.n	8007454 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d016      	beq.n	8007428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073fa:	4b30      	ldr	r3, [pc, #192]	; (80074bc <HAL_RCC_OscConfig+0x2b4>)
 80073fc:	2201      	movs	r2, #1
 80073fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007400:	f7fd f8b8 	bl	8004574 <HAL_GetTick>
 8007404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007406:	e008      	b.n	800741a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007408:	f7fd f8b4 	bl	8004574 <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	2b02      	cmp	r3, #2
 8007414:	d901      	bls.n	800741a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e164      	b.n	80076e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800741a:	4b26      	ldr	r3, [pc, #152]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 800741c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0f0      	beq.n	8007408 <HAL_RCC_OscConfig+0x200>
 8007426:	e015      	b.n	8007454 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007428:	4b24      	ldr	r3, [pc, #144]	; (80074bc <HAL_RCC_OscConfig+0x2b4>)
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800742e:	f7fd f8a1 	bl	8004574 <HAL_GetTick>
 8007432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007434:	e008      	b.n	8007448 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007436:	f7fd f89d 	bl	8004574 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	2b02      	cmp	r3, #2
 8007442:	d901      	bls.n	8007448 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e14d      	b.n	80076e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007448:	4b1a      	ldr	r3, [pc, #104]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 800744a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1f0      	bne.n	8007436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 80a0 	beq.w	80075a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007462:	2300      	movs	r3, #0
 8007464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007466:	4b13      	ldr	r3, [pc, #76]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10f      	bne.n	8007492 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007472:	2300      	movs	r3, #0
 8007474:	60bb      	str	r3, [r7, #8]
 8007476:	4b0f      	ldr	r3, [pc, #60]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	4a0e      	ldr	r2, [pc, #56]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 800747c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007480:	6413      	str	r3, [r2, #64]	; 0x40
 8007482:	4b0c      	ldr	r3, [pc, #48]	; (80074b4 <HAL_RCC_OscConfig+0x2ac>)
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800748a:	60bb      	str	r3, [r7, #8]
 800748c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800748e:	2301      	movs	r3, #1
 8007490:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007492:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <HAL_RCC_OscConfig+0x2b8>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800749a:	2b00      	cmp	r3, #0
 800749c:	d121      	bne.n	80074e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800749e:	4b08      	ldr	r3, [pc, #32]	; (80074c0 <HAL_RCC_OscConfig+0x2b8>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a07      	ldr	r2, [pc, #28]	; (80074c0 <HAL_RCC_OscConfig+0x2b8>)
 80074a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074aa:	f7fd f863 	bl	8004574 <HAL_GetTick>
 80074ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074b0:	e011      	b.n	80074d6 <HAL_RCC_OscConfig+0x2ce>
 80074b2:	bf00      	nop
 80074b4:	40023800 	.word	0x40023800
 80074b8:	42470000 	.word	0x42470000
 80074bc:	42470e80 	.word	0x42470e80
 80074c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074c4:	f7fd f856 	bl	8004574 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d901      	bls.n	80074d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e106      	b.n	80076e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074d6:	4b85      	ldr	r3, [pc, #532]	; (80076ec <HAL_RCC_OscConfig+0x4e4>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d0f0      	beq.n	80074c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d106      	bne.n	80074f8 <HAL_RCC_OscConfig+0x2f0>
 80074ea:	4b81      	ldr	r3, [pc, #516]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 80074ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ee:	4a80      	ldr	r2, [pc, #512]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 80074f0:	f043 0301 	orr.w	r3, r3, #1
 80074f4:	6713      	str	r3, [r2, #112]	; 0x70
 80074f6:	e01c      	b.n	8007532 <HAL_RCC_OscConfig+0x32a>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	2b05      	cmp	r3, #5
 80074fe:	d10c      	bne.n	800751a <HAL_RCC_OscConfig+0x312>
 8007500:	4b7b      	ldr	r3, [pc, #492]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 8007502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007504:	4a7a      	ldr	r2, [pc, #488]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 8007506:	f043 0304 	orr.w	r3, r3, #4
 800750a:	6713      	str	r3, [r2, #112]	; 0x70
 800750c:	4b78      	ldr	r3, [pc, #480]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 800750e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007510:	4a77      	ldr	r2, [pc, #476]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 8007512:	f043 0301 	orr.w	r3, r3, #1
 8007516:	6713      	str	r3, [r2, #112]	; 0x70
 8007518:	e00b      	b.n	8007532 <HAL_RCC_OscConfig+0x32a>
 800751a:	4b75      	ldr	r3, [pc, #468]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 800751c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751e:	4a74      	ldr	r2, [pc, #464]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 8007520:	f023 0301 	bic.w	r3, r3, #1
 8007524:	6713      	str	r3, [r2, #112]	; 0x70
 8007526:	4b72      	ldr	r3, [pc, #456]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 8007528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752a:	4a71      	ldr	r2, [pc, #452]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 800752c:	f023 0304 	bic.w	r3, r3, #4
 8007530:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d015      	beq.n	8007566 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800753a:	f7fd f81b 	bl	8004574 <HAL_GetTick>
 800753e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007540:	e00a      	b.n	8007558 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007542:	f7fd f817 	bl	8004574 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007550:	4293      	cmp	r3, r2
 8007552:	d901      	bls.n	8007558 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e0c5      	b.n	80076e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007558:	4b65      	ldr	r3, [pc, #404]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 800755a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800755c:	f003 0302 	and.w	r3, r3, #2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d0ee      	beq.n	8007542 <HAL_RCC_OscConfig+0x33a>
 8007564:	e014      	b.n	8007590 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007566:	f7fd f805 	bl	8004574 <HAL_GetTick>
 800756a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800756c:	e00a      	b.n	8007584 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800756e:	f7fd f801 	bl	8004574 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	f241 3288 	movw	r2, #5000	; 0x1388
 800757c:	4293      	cmp	r3, r2
 800757e:	d901      	bls.n	8007584 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e0af      	b.n	80076e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007584:	4b5a      	ldr	r3, [pc, #360]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 8007586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1ee      	bne.n	800756e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007590:	7dfb      	ldrb	r3, [r7, #23]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d105      	bne.n	80075a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007596:	4b56      	ldr	r3, [pc, #344]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	4a55      	ldr	r2, [pc, #340]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 800759c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 809b 	beq.w	80076e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075ac:	4b50      	ldr	r3, [pc, #320]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f003 030c 	and.w	r3, r3, #12
 80075b4:	2b08      	cmp	r3, #8
 80075b6:	d05c      	beq.n	8007672 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d141      	bne.n	8007644 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075c0:	4b4c      	ldr	r3, [pc, #304]	; (80076f4 <HAL_RCC_OscConfig+0x4ec>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075c6:	f7fc ffd5 	bl	8004574 <HAL_GetTick>
 80075ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075cc:	e008      	b.n	80075e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075ce:	f7fc ffd1 	bl	8004574 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d901      	bls.n	80075e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e081      	b.n	80076e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075e0:	4b43      	ldr	r3, [pc, #268]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1f0      	bne.n	80075ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	69da      	ldr	r2, [r3, #28]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	431a      	orrs	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fa:	019b      	lsls	r3, r3, #6
 80075fc:	431a      	orrs	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007602:	085b      	lsrs	r3, r3, #1
 8007604:	3b01      	subs	r3, #1
 8007606:	041b      	lsls	r3, r3, #16
 8007608:	431a      	orrs	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760e:	061b      	lsls	r3, r3, #24
 8007610:	4937      	ldr	r1, [pc, #220]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 8007612:	4313      	orrs	r3, r2
 8007614:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007616:	4b37      	ldr	r3, [pc, #220]	; (80076f4 <HAL_RCC_OscConfig+0x4ec>)
 8007618:	2201      	movs	r2, #1
 800761a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800761c:	f7fc ffaa 	bl	8004574 <HAL_GetTick>
 8007620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007622:	e008      	b.n	8007636 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007624:	f7fc ffa6 	bl	8004574 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	2b02      	cmp	r3, #2
 8007630:	d901      	bls.n	8007636 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e056      	b.n	80076e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007636:	4b2e      	ldr	r3, [pc, #184]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0f0      	beq.n	8007624 <HAL_RCC_OscConfig+0x41c>
 8007642:	e04e      	b.n	80076e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007644:	4b2b      	ldr	r3, [pc, #172]	; (80076f4 <HAL_RCC_OscConfig+0x4ec>)
 8007646:	2200      	movs	r2, #0
 8007648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800764a:	f7fc ff93 	bl	8004574 <HAL_GetTick>
 800764e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007650:	e008      	b.n	8007664 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007652:	f7fc ff8f 	bl	8004574 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d901      	bls.n	8007664 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e03f      	b.n	80076e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007664:	4b22      	ldr	r3, [pc, #136]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1f0      	bne.n	8007652 <HAL_RCC_OscConfig+0x44a>
 8007670:	e037      	b.n	80076e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d101      	bne.n	800767e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e032      	b.n	80076e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800767e:	4b1c      	ldr	r3, [pc, #112]	; (80076f0 <HAL_RCC_OscConfig+0x4e8>)
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d028      	beq.n	80076de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007696:	429a      	cmp	r2, r3
 8007698:	d121      	bne.n	80076de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d11a      	bne.n	80076de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076ae:	4013      	ands	r3, r2
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80076b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d111      	bne.n	80076de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c4:	085b      	lsrs	r3, r3, #1
 80076c6:	3b01      	subs	r3, #1
 80076c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d107      	bne.n	80076de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076da:	429a      	cmp	r2, r3
 80076dc:	d001      	beq.n	80076e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e000      	b.n	80076e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3718      	adds	r7, #24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	40007000 	.word	0x40007000
 80076f0:	40023800 	.word	0x40023800
 80076f4:	42470060 	.word	0x42470060

080076f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e0cc      	b.n	80078a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800770c:	4b68      	ldr	r3, [pc, #416]	; (80078b0 <HAL_RCC_ClockConfig+0x1b8>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0307 	and.w	r3, r3, #7
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d90c      	bls.n	8007734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800771a:	4b65      	ldr	r3, [pc, #404]	; (80078b0 <HAL_RCC_ClockConfig+0x1b8>)
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	b2d2      	uxtb	r2, r2
 8007720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007722:	4b63      	ldr	r3, [pc, #396]	; (80078b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d001      	beq.n	8007734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e0b8      	b.n	80078a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d020      	beq.n	8007782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b00      	cmp	r3, #0
 800774a:	d005      	beq.n	8007758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800774c:	4b59      	ldr	r3, [pc, #356]	; (80078b4 <HAL_RCC_ClockConfig+0x1bc>)
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	4a58      	ldr	r2, [pc, #352]	; (80078b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0308 	and.w	r3, r3, #8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d005      	beq.n	8007770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007764:	4b53      	ldr	r3, [pc, #332]	; (80078b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	4a52      	ldr	r2, [pc, #328]	; (80078b4 <HAL_RCC_ClockConfig+0x1bc>)
 800776a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800776e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007770:	4b50      	ldr	r3, [pc, #320]	; (80078b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	494d      	ldr	r1, [pc, #308]	; (80078b4 <HAL_RCC_ClockConfig+0x1bc>)
 800777e:	4313      	orrs	r3, r2
 8007780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d044      	beq.n	8007818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d107      	bne.n	80077a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007796:	4b47      	ldr	r3, [pc, #284]	; (80078b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d119      	bne.n	80077d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e07f      	b.n	80078a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d003      	beq.n	80077b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d107      	bne.n	80077c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077b6:	4b3f      	ldr	r3, [pc, #252]	; (80078b4 <HAL_RCC_ClockConfig+0x1bc>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d109      	bne.n	80077d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e06f      	b.n	80078a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077c6:	4b3b      	ldr	r3, [pc, #236]	; (80078b4 <HAL_RCC_ClockConfig+0x1bc>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d101      	bne.n	80077d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e067      	b.n	80078a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80077d6:	4b37      	ldr	r3, [pc, #220]	; (80078b4 <HAL_RCC_ClockConfig+0x1bc>)
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f023 0203 	bic.w	r2, r3, #3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	4934      	ldr	r1, [pc, #208]	; (80078b4 <HAL_RCC_ClockConfig+0x1bc>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077e8:	f7fc fec4 	bl	8004574 <HAL_GetTick>
 80077ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ee:	e00a      	b.n	8007806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077f0:	f7fc fec0 	bl	8004574 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80077fe:	4293      	cmp	r3, r2
 8007800:	d901      	bls.n	8007806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e04f      	b.n	80078a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007806:	4b2b      	ldr	r3, [pc, #172]	; (80078b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 020c 	and.w	r2, r3, #12
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	429a      	cmp	r2, r3
 8007816:	d1eb      	bne.n	80077f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007818:	4b25      	ldr	r3, [pc, #148]	; (80078b0 <HAL_RCC_ClockConfig+0x1b8>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0307 	and.w	r3, r3, #7
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d20c      	bcs.n	8007840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007826:	4b22      	ldr	r3, [pc, #136]	; (80078b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	b2d2      	uxtb	r2, r2
 800782c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800782e:	4b20      	ldr	r3, [pc, #128]	; (80078b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0307 	and.w	r3, r3, #7
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	429a      	cmp	r2, r3
 800783a:	d001      	beq.n	8007840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e032      	b.n	80078a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0304 	and.w	r3, r3, #4
 8007848:	2b00      	cmp	r3, #0
 800784a:	d008      	beq.n	800785e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800784c:	4b19      	ldr	r3, [pc, #100]	; (80078b4 <HAL_RCC_ClockConfig+0x1bc>)
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	4916      	ldr	r1, [pc, #88]	; (80078b4 <HAL_RCC_ClockConfig+0x1bc>)
 800785a:	4313      	orrs	r3, r2
 800785c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0308 	and.w	r3, r3, #8
 8007866:	2b00      	cmp	r3, #0
 8007868:	d009      	beq.n	800787e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800786a:	4b12      	ldr	r3, [pc, #72]	; (80078b4 <HAL_RCC_ClockConfig+0x1bc>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	490e      	ldr	r1, [pc, #56]	; (80078b4 <HAL_RCC_ClockConfig+0x1bc>)
 800787a:	4313      	orrs	r3, r2
 800787c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800787e:	f000 f821 	bl	80078c4 <HAL_RCC_GetSysClockFreq>
 8007882:	4602      	mov	r2, r0
 8007884:	4b0b      	ldr	r3, [pc, #44]	; (80078b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	091b      	lsrs	r3, r3, #4
 800788a:	f003 030f 	and.w	r3, r3, #15
 800788e:	490a      	ldr	r1, [pc, #40]	; (80078b8 <HAL_RCC_ClockConfig+0x1c0>)
 8007890:	5ccb      	ldrb	r3, [r1, r3]
 8007892:	fa22 f303 	lsr.w	r3, r2, r3
 8007896:	4a09      	ldr	r2, [pc, #36]	; (80078bc <HAL_RCC_ClockConfig+0x1c4>)
 8007898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800789a:	4b09      	ldr	r3, [pc, #36]	; (80078c0 <HAL_RCC_ClockConfig+0x1c8>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fc fe24 	bl	80044ec <HAL_InitTick>

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	40023c00 	.word	0x40023c00
 80078b4:	40023800 	.word	0x40023800
 80078b8:	08009fa0 	.word	0x08009fa0
 80078bc:	20000018 	.word	0x20000018
 80078c0:	2000001c 	.word	0x2000001c

080078c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	607b      	str	r3, [r7, #4]
 80078d0:	2300      	movs	r3, #0
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	2300      	movs	r3, #0
 80078d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078dc:	4b67      	ldr	r3, [pc, #412]	; (8007a7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f003 030c 	and.w	r3, r3, #12
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d00d      	beq.n	8007904 <HAL_RCC_GetSysClockFreq+0x40>
 80078e8:	2b08      	cmp	r3, #8
 80078ea:	f200 80bd 	bhi.w	8007a68 <HAL_RCC_GetSysClockFreq+0x1a4>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d002      	beq.n	80078f8 <HAL_RCC_GetSysClockFreq+0x34>
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d003      	beq.n	80078fe <HAL_RCC_GetSysClockFreq+0x3a>
 80078f6:	e0b7      	b.n	8007a68 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078f8:	4b61      	ldr	r3, [pc, #388]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80078fa:	60bb      	str	r3, [r7, #8]
       break;
 80078fc:	e0b7      	b.n	8007a6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078fe:	4b61      	ldr	r3, [pc, #388]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007900:	60bb      	str	r3, [r7, #8]
      break;
 8007902:	e0b4      	b.n	8007a6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007904:	4b5d      	ldr	r3, [pc, #372]	; (8007a7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800790c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800790e:	4b5b      	ldr	r3, [pc, #364]	; (8007a7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d04d      	beq.n	80079b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800791a:	4b58      	ldr	r3, [pc, #352]	; (8007a7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	099b      	lsrs	r3, r3, #6
 8007920:	461a      	mov	r2, r3
 8007922:	f04f 0300 	mov.w	r3, #0
 8007926:	f240 10ff 	movw	r0, #511	; 0x1ff
 800792a:	f04f 0100 	mov.w	r1, #0
 800792e:	ea02 0800 	and.w	r8, r2, r0
 8007932:	ea03 0901 	and.w	r9, r3, r1
 8007936:	4640      	mov	r0, r8
 8007938:	4649      	mov	r1, r9
 800793a:	f04f 0200 	mov.w	r2, #0
 800793e:	f04f 0300 	mov.w	r3, #0
 8007942:	014b      	lsls	r3, r1, #5
 8007944:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007948:	0142      	lsls	r2, r0, #5
 800794a:	4610      	mov	r0, r2
 800794c:	4619      	mov	r1, r3
 800794e:	ebb0 0008 	subs.w	r0, r0, r8
 8007952:	eb61 0109 	sbc.w	r1, r1, r9
 8007956:	f04f 0200 	mov.w	r2, #0
 800795a:	f04f 0300 	mov.w	r3, #0
 800795e:	018b      	lsls	r3, r1, #6
 8007960:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007964:	0182      	lsls	r2, r0, #6
 8007966:	1a12      	subs	r2, r2, r0
 8007968:	eb63 0301 	sbc.w	r3, r3, r1
 800796c:	f04f 0000 	mov.w	r0, #0
 8007970:	f04f 0100 	mov.w	r1, #0
 8007974:	00d9      	lsls	r1, r3, #3
 8007976:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800797a:	00d0      	lsls	r0, r2, #3
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	eb12 0208 	adds.w	r2, r2, r8
 8007984:	eb43 0309 	adc.w	r3, r3, r9
 8007988:	f04f 0000 	mov.w	r0, #0
 800798c:	f04f 0100 	mov.w	r1, #0
 8007990:	0259      	lsls	r1, r3, #9
 8007992:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007996:	0250      	lsls	r0, r2, #9
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4610      	mov	r0, r2
 800799e:	4619      	mov	r1, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	461a      	mov	r2, r3
 80079a4:	f04f 0300 	mov.w	r3, #0
 80079a8:	f7f9 fa00 	bl	8000dac <__aeabi_uldivmod>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4613      	mov	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e04a      	b.n	8007a4c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079b6:	4b31      	ldr	r3, [pc, #196]	; (8007a7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	099b      	lsrs	r3, r3, #6
 80079bc:	461a      	mov	r2, r3
 80079be:	f04f 0300 	mov.w	r3, #0
 80079c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80079c6:	f04f 0100 	mov.w	r1, #0
 80079ca:	ea02 0400 	and.w	r4, r2, r0
 80079ce:	ea03 0501 	and.w	r5, r3, r1
 80079d2:	4620      	mov	r0, r4
 80079d4:	4629      	mov	r1, r5
 80079d6:	f04f 0200 	mov.w	r2, #0
 80079da:	f04f 0300 	mov.w	r3, #0
 80079de:	014b      	lsls	r3, r1, #5
 80079e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80079e4:	0142      	lsls	r2, r0, #5
 80079e6:	4610      	mov	r0, r2
 80079e8:	4619      	mov	r1, r3
 80079ea:	1b00      	subs	r0, r0, r4
 80079ec:	eb61 0105 	sbc.w	r1, r1, r5
 80079f0:	f04f 0200 	mov.w	r2, #0
 80079f4:	f04f 0300 	mov.w	r3, #0
 80079f8:	018b      	lsls	r3, r1, #6
 80079fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80079fe:	0182      	lsls	r2, r0, #6
 8007a00:	1a12      	subs	r2, r2, r0
 8007a02:	eb63 0301 	sbc.w	r3, r3, r1
 8007a06:	f04f 0000 	mov.w	r0, #0
 8007a0a:	f04f 0100 	mov.w	r1, #0
 8007a0e:	00d9      	lsls	r1, r3, #3
 8007a10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a14:	00d0      	lsls	r0, r2, #3
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	1912      	adds	r2, r2, r4
 8007a1c:	eb45 0303 	adc.w	r3, r5, r3
 8007a20:	f04f 0000 	mov.w	r0, #0
 8007a24:	f04f 0100 	mov.w	r1, #0
 8007a28:	0299      	lsls	r1, r3, #10
 8007a2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007a2e:	0290      	lsls	r0, r2, #10
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	4610      	mov	r0, r2
 8007a36:	4619      	mov	r1, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f04f 0300 	mov.w	r3, #0
 8007a40:	f7f9 f9b4 	bl	8000dac <__aeabi_uldivmod>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	4613      	mov	r3, r2
 8007a4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a4c:	4b0b      	ldr	r3, [pc, #44]	; (8007a7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	0c1b      	lsrs	r3, r3, #16
 8007a52:	f003 0303 	and.w	r3, r3, #3
 8007a56:	3301      	adds	r3, #1
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a64:	60bb      	str	r3, [r7, #8]
      break;
 8007a66:	e002      	b.n	8007a6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a68:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007a6a:	60bb      	str	r3, [r7, #8]
      break;
 8007a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a6e:	68bb      	ldr	r3, [r7, #8]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007a7a:	bf00      	nop
 8007a7c:	40023800 	.word	0x40023800
 8007a80:	00f42400 	.word	0x00f42400
 8007a84:	007a1200 	.word	0x007a1200

08007a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a8c:	4b03      	ldr	r3, [pc, #12]	; (8007a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	20000018 	.word	0x20000018

08007aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007aa4:	f7ff fff0 	bl	8007a88 <HAL_RCC_GetHCLKFreq>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	4b05      	ldr	r3, [pc, #20]	; (8007ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	0a9b      	lsrs	r3, r3, #10
 8007ab0:	f003 0307 	and.w	r3, r3, #7
 8007ab4:	4903      	ldr	r1, [pc, #12]	; (8007ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ab6:	5ccb      	ldrb	r3, [r1, r3]
 8007ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	40023800 	.word	0x40023800
 8007ac4:	08009fb0 	.word	0x08009fb0

08007ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007acc:	f7ff ffdc 	bl	8007a88 <HAL_RCC_GetHCLKFreq>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	4b05      	ldr	r3, [pc, #20]	; (8007ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	0b5b      	lsrs	r3, r3, #13
 8007ad8:	f003 0307 	and.w	r3, r3, #7
 8007adc:	4903      	ldr	r1, [pc, #12]	; (8007aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ade:	5ccb      	ldrb	r3, [r1, r3]
 8007ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	40023800 	.word	0x40023800
 8007aec:	08009fb0 	.word	0x08009fb0

08007af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e041      	b.n	8007b86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7fc faaa 	bl	8004070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	4610      	mov	r0, r2
 8007b30:	f000 fdda 	bl	80086e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d001      	beq.n	8007ba8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e03c      	b.n	8007c22 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2202      	movs	r2, #2
 8007bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a1e      	ldr	r2, [pc, #120]	; (8007c30 <HAL_TIM_Base_Start+0xa0>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d018      	beq.n	8007bec <HAL_TIM_Base_Start+0x5c>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bc2:	d013      	beq.n	8007bec <HAL_TIM_Base_Start+0x5c>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a1a      	ldr	r2, [pc, #104]	; (8007c34 <HAL_TIM_Base_Start+0xa4>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d00e      	beq.n	8007bec <HAL_TIM_Base_Start+0x5c>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a19      	ldr	r2, [pc, #100]	; (8007c38 <HAL_TIM_Base_Start+0xa8>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d009      	beq.n	8007bec <HAL_TIM_Base_Start+0x5c>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a17      	ldr	r2, [pc, #92]	; (8007c3c <HAL_TIM_Base_Start+0xac>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d004      	beq.n	8007bec <HAL_TIM_Base_Start+0x5c>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a16      	ldr	r2, [pc, #88]	; (8007c40 <HAL_TIM_Base_Start+0xb0>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d111      	bne.n	8007c10 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 0307 	and.w	r3, r3, #7
 8007bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2b06      	cmp	r3, #6
 8007bfc:	d010      	beq.n	8007c20 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f042 0201 	orr.w	r2, r2, #1
 8007c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c0e:	e007      	b.n	8007c20 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f042 0201 	orr.w	r2, r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	40010000 	.word	0x40010000
 8007c34:	40000400 	.word	0x40000400
 8007c38:	40000800 	.word	0x40000800
 8007c3c:	40000c00 	.word	0x40000c00
 8007c40:	40014000 	.word	0x40014000

08007c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d001      	beq.n	8007c5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e044      	b.n	8007ce6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2202      	movs	r2, #2
 8007c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68da      	ldr	r2, [r3, #12]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f042 0201 	orr.w	r2, r2, #1
 8007c72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a1e      	ldr	r2, [pc, #120]	; (8007cf4 <HAL_TIM_Base_Start_IT+0xb0>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d018      	beq.n	8007cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c86:	d013      	beq.n	8007cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a1a      	ldr	r2, [pc, #104]	; (8007cf8 <HAL_TIM_Base_Start_IT+0xb4>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d00e      	beq.n	8007cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a19      	ldr	r2, [pc, #100]	; (8007cfc <HAL_TIM_Base_Start_IT+0xb8>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d009      	beq.n	8007cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a17      	ldr	r2, [pc, #92]	; (8007d00 <HAL_TIM_Base_Start_IT+0xbc>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d004      	beq.n	8007cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a16      	ldr	r2, [pc, #88]	; (8007d04 <HAL_TIM_Base_Start_IT+0xc0>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d111      	bne.n	8007cd4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2b06      	cmp	r3, #6
 8007cc0:	d010      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f042 0201 	orr.w	r2, r2, #1
 8007cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd2:	e007      	b.n	8007ce4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0201 	orr.w	r2, r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	40010000 	.word	0x40010000
 8007cf8:	40000400 	.word	0x40000400
 8007cfc:	40000800 	.word	0x40000800
 8007d00:	40000c00 	.word	0x40000c00
 8007d04:	40014000 	.word	0x40014000

08007d08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e041      	b.n	8007d9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f839 	bl	8007da6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	3304      	adds	r3, #4
 8007d44:	4619      	mov	r1, r3
 8007d46:	4610      	mov	r0, r2
 8007d48:	f000 fcce 	bl	80086e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b083      	sub	sp, #12
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007dae:	bf00      	nop
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
	...

08007dbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d109      	bne.n	8007de0 <HAL_TIM_PWM_Start+0x24>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	bf14      	ite	ne
 8007dd8:	2301      	movne	r3, #1
 8007dda:	2300      	moveq	r3, #0
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	e022      	b.n	8007e26 <HAL_TIM_PWM_Start+0x6a>
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d109      	bne.n	8007dfa <HAL_TIM_PWM_Start+0x3e>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	bf14      	ite	ne
 8007df2:	2301      	movne	r3, #1
 8007df4:	2300      	moveq	r3, #0
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	e015      	b.n	8007e26 <HAL_TIM_PWM_Start+0x6a>
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	d109      	bne.n	8007e14 <HAL_TIM_PWM_Start+0x58>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	bf14      	ite	ne
 8007e0c:	2301      	movne	r3, #1
 8007e0e:	2300      	moveq	r3, #0
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	e008      	b.n	8007e26 <HAL_TIM_PWM_Start+0x6a>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	bf14      	ite	ne
 8007e20:	2301      	movne	r3, #1
 8007e22:	2300      	moveq	r3, #0
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e068      	b.n	8007f00 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d104      	bne.n	8007e3e <HAL_TIM_PWM_Start+0x82>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e3c:	e013      	b.n	8007e66 <HAL_TIM_PWM_Start+0xaa>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d104      	bne.n	8007e4e <HAL_TIM_PWM_Start+0x92>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e4c:	e00b      	b.n	8007e66 <HAL_TIM_PWM_Start+0xaa>
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b08      	cmp	r3, #8
 8007e52:	d104      	bne.n	8007e5e <HAL_TIM_PWM_Start+0xa2>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e5c:	e003      	b.n	8007e66 <HAL_TIM_PWM_Start+0xaa>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2202      	movs	r2, #2
 8007e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fee0 	bl	8008c34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a23      	ldr	r2, [pc, #140]	; (8007f08 <HAL_TIM_PWM_Start+0x14c>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d107      	bne.n	8007e8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a1d      	ldr	r2, [pc, #116]	; (8007f08 <HAL_TIM_PWM_Start+0x14c>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d018      	beq.n	8007eca <HAL_TIM_PWM_Start+0x10e>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea0:	d013      	beq.n	8007eca <HAL_TIM_PWM_Start+0x10e>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a19      	ldr	r2, [pc, #100]	; (8007f0c <HAL_TIM_PWM_Start+0x150>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d00e      	beq.n	8007eca <HAL_TIM_PWM_Start+0x10e>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a17      	ldr	r2, [pc, #92]	; (8007f10 <HAL_TIM_PWM_Start+0x154>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d009      	beq.n	8007eca <HAL_TIM_PWM_Start+0x10e>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a16      	ldr	r2, [pc, #88]	; (8007f14 <HAL_TIM_PWM_Start+0x158>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d004      	beq.n	8007eca <HAL_TIM_PWM_Start+0x10e>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a14      	ldr	r2, [pc, #80]	; (8007f18 <HAL_TIM_PWM_Start+0x15c>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d111      	bne.n	8007eee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f003 0307 	and.w	r3, r3, #7
 8007ed4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b06      	cmp	r3, #6
 8007eda:	d010      	beq.n	8007efe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f042 0201 	orr.w	r2, r2, #1
 8007eea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eec:	e007      	b.n	8007efe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f042 0201 	orr.w	r2, r2, #1
 8007efc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	40010000 	.word	0x40010000
 8007f0c:	40000400 	.word	0x40000400
 8007f10:	40000800 	.word	0x40000800
 8007f14:	40000c00 	.word	0x40000c00
 8007f18:	40014000 	.word	0x40014000

08007f1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e097      	b.n	8008060 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d106      	bne.n	8007f4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7fc f84b 	bl	8003fe0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	6812      	ldr	r2, [r2, #0]
 8007f5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f60:	f023 0307 	bic.w	r3, r3, #7
 8007f64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	4619      	mov	r1, r3
 8007f70:	4610      	mov	r0, r2
 8007f72:	f000 fbb9 	bl	80086e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f9e:	f023 0303 	bic.w	r3, r3, #3
 8007fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	689a      	ldr	r2, [r3, #8]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	021b      	lsls	r3, r3, #8
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	693a      	ldr	r2, [r7, #16]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007fbc:	f023 030c 	bic.w	r3, r3, #12
 8007fc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	021b      	lsls	r3, r3, #8
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	011a      	lsls	r2, r3, #4
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	031b      	lsls	r3, r3, #12
 8007fec:	4313      	orrs	r3, r2
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007ffa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008002:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	011b      	lsls	r3, r3, #4
 800800e:	4313      	orrs	r3, r2
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	4313      	orrs	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3718      	adds	r7, #24
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008078:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008080:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008088:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008090:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d110      	bne.n	80080ba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d102      	bne.n	80080a4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800809e:	7b7b      	ldrb	r3, [r7, #13]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d001      	beq.n	80080a8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e069      	b.n	800817c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2202      	movs	r2, #2
 80080ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080b8:	e031      	b.n	800811e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b04      	cmp	r3, #4
 80080be:	d110      	bne.n	80080e2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d102      	bne.n	80080cc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80080c6:	7b3b      	ldrb	r3, [r7, #12]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d001      	beq.n	80080d0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e055      	b.n	800817c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2202      	movs	r2, #2
 80080dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080e0:	e01d      	b.n	800811e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d108      	bne.n	80080fa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d105      	bne.n	80080fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080ee:	7b7b      	ldrb	r3, [r7, #13]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d102      	bne.n	80080fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80080f4:	7b3b      	ldrb	r3, [r7, #12]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d001      	beq.n	80080fe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e03e      	b.n	800817c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2202      	movs	r2, #2
 8008102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2202      	movs	r2, #2
 800810a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2202      	movs	r2, #2
 8008112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2202      	movs	r2, #2
 800811a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d003      	beq.n	800812c <HAL_TIM_Encoder_Start+0xc4>
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	2b04      	cmp	r3, #4
 8008128:	d008      	beq.n	800813c <HAL_TIM_Encoder_Start+0xd4>
 800812a:	e00f      	b.n	800814c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2201      	movs	r2, #1
 8008132:	2100      	movs	r1, #0
 8008134:	4618      	mov	r0, r3
 8008136:	f000 fd7d 	bl	8008c34 <TIM_CCxChannelCmd>
      break;
 800813a:	e016      	b.n	800816a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2201      	movs	r2, #1
 8008142:	2104      	movs	r1, #4
 8008144:	4618      	mov	r0, r3
 8008146:	f000 fd75 	bl	8008c34 <TIM_CCxChannelCmd>
      break;
 800814a:	e00e      	b.n	800816a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2201      	movs	r2, #1
 8008152:	2100      	movs	r1, #0
 8008154:	4618      	mov	r0, r3
 8008156:	f000 fd6d 	bl	8008c34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2201      	movs	r2, #1
 8008160:	2104      	movs	r1, #4
 8008162:	4618      	mov	r0, r3
 8008164:	f000 fd66 	bl	8008c34 <TIM_CCxChannelCmd>
      break;
 8008168:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f042 0201 	orr.w	r2, r2, #1
 8008178:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	f003 0302 	and.w	r3, r3, #2
 8008196:	2b02      	cmp	r3, #2
 8008198:	d122      	bne.n	80081e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	f003 0302 	and.w	r3, r3, #2
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d11b      	bne.n	80081e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f06f 0202 	mvn.w	r2, #2
 80081b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	f003 0303 	and.w	r3, r3, #3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d003      	beq.n	80081ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fa70 	bl	80086ac <HAL_TIM_IC_CaptureCallback>
 80081cc:	e005      	b.n	80081da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fa62 	bl	8008698 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fa73 	bl	80086c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	f003 0304 	and.w	r3, r3, #4
 80081ea:	2b04      	cmp	r3, #4
 80081ec:	d122      	bne.n	8008234 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b04      	cmp	r3, #4
 80081fa:	d11b      	bne.n	8008234 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f06f 0204 	mvn.w	r2, #4
 8008204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2202      	movs	r2, #2
 800820a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fa46 	bl	80086ac <HAL_TIM_IC_CaptureCallback>
 8008220:	e005      	b.n	800822e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fa38 	bl	8008698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fa49 	bl	80086c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	f003 0308 	and.w	r3, r3, #8
 800823e:	2b08      	cmp	r3, #8
 8008240:	d122      	bne.n	8008288 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f003 0308 	and.w	r3, r3, #8
 800824c:	2b08      	cmp	r3, #8
 800824e:	d11b      	bne.n	8008288 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f06f 0208 	mvn.w	r2, #8
 8008258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2204      	movs	r2, #4
 800825e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	f003 0303 	and.w	r3, r3, #3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fa1c 	bl	80086ac <HAL_TIM_IC_CaptureCallback>
 8008274:	e005      	b.n	8008282 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fa0e 	bl	8008698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fa1f 	bl	80086c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	f003 0310 	and.w	r3, r3, #16
 8008292:	2b10      	cmp	r3, #16
 8008294:	d122      	bne.n	80082dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f003 0310 	and.w	r3, r3, #16
 80082a0:	2b10      	cmp	r3, #16
 80082a2:	d11b      	bne.n	80082dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f06f 0210 	mvn.w	r2, #16
 80082ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2208      	movs	r2, #8
 80082b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	69db      	ldr	r3, [r3, #28]
 80082ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f9f2 	bl	80086ac <HAL_TIM_IC_CaptureCallback>
 80082c8:	e005      	b.n	80082d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f9e4 	bl	8008698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f9f5 	bl	80086c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d10e      	bne.n	8008308 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f003 0301 	and.w	r3, r3, #1
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d107      	bne.n	8008308 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f06f 0201 	mvn.w	r2, #1
 8008300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7f9 fcee 	bl	8001ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008312:	2b80      	cmp	r3, #128	; 0x80
 8008314:	d10e      	bne.n	8008334 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008320:	2b80      	cmp	r3, #128	; 0x80
 8008322:	d107      	bne.n	8008334 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800832c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fd1e 	bl	8008d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833e:	2b40      	cmp	r3, #64	; 0x40
 8008340:	d10e      	bne.n	8008360 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834c:	2b40      	cmp	r3, #64	; 0x40
 800834e:	d107      	bne.n	8008360 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f9ba 	bl	80086d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	f003 0320 	and.w	r3, r3, #32
 800836a:	2b20      	cmp	r3, #32
 800836c:	d10e      	bne.n	800838c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	f003 0320 	and.w	r3, r3, #32
 8008378:	2b20      	cmp	r3, #32
 800837a:	d107      	bne.n	800838c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f06f 0220 	mvn.w	r2, #32
 8008384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fce8 	bl	8008d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800838c:	bf00      	nop
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d101      	bne.n	80083ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80083aa:	2302      	movs	r3, #2
 80083ac:	e0ac      	b.n	8008508 <HAL_TIM_PWM_ConfigChannel+0x174>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b0c      	cmp	r3, #12
 80083ba:	f200 809f 	bhi.w	80084fc <HAL_TIM_PWM_ConfigChannel+0x168>
 80083be:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80083c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c4:	080083f9 	.word	0x080083f9
 80083c8:	080084fd 	.word	0x080084fd
 80083cc:	080084fd 	.word	0x080084fd
 80083d0:	080084fd 	.word	0x080084fd
 80083d4:	08008439 	.word	0x08008439
 80083d8:	080084fd 	.word	0x080084fd
 80083dc:	080084fd 	.word	0x080084fd
 80083e0:	080084fd 	.word	0x080084fd
 80083e4:	0800847b 	.word	0x0800847b
 80083e8:	080084fd 	.word	0x080084fd
 80083ec:	080084fd 	.word	0x080084fd
 80083f0:	080084fd 	.word	0x080084fd
 80083f4:	080084bb 	.word	0x080084bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68b9      	ldr	r1, [r7, #8]
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 f9f2 	bl	80087e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	699a      	ldr	r2, [r3, #24]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f042 0208 	orr.w	r2, r2, #8
 8008412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	699a      	ldr	r2, [r3, #24]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f022 0204 	bic.w	r2, r2, #4
 8008422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6999      	ldr	r1, [r3, #24]
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	691a      	ldr	r2, [r3, #16]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	619a      	str	r2, [r3, #24]
      break;
 8008436:	e062      	b.n	80084fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68b9      	ldr	r1, [r7, #8]
 800843e:	4618      	mov	r0, r3
 8008440:	f000 fa38 	bl	80088b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	699a      	ldr	r2, [r3, #24]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	699a      	ldr	r2, [r3, #24]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6999      	ldr	r1, [r3, #24]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	021a      	lsls	r2, r3, #8
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	430a      	orrs	r2, r1
 8008476:	619a      	str	r2, [r3, #24]
      break;
 8008478:	e041      	b.n	80084fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68b9      	ldr	r1, [r7, #8]
 8008480:	4618      	mov	r0, r3
 8008482:	f000 fa83 	bl	800898c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	69da      	ldr	r2, [r3, #28]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f042 0208 	orr.w	r2, r2, #8
 8008494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	69da      	ldr	r2, [r3, #28]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 0204 	bic.w	r2, r2, #4
 80084a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	69d9      	ldr	r1, [r3, #28]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	691a      	ldr	r2, [r3, #16]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	430a      	orrs	r2, r1
 80084b6:	61da      	str	r2, [r3, #28]
      break;
 80084b8:	e021      	b.n	80084fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68b9      	ldr	r1, [r7, #8]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 facd 	bl	8008a60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	69da      	ldr	r2, [r3, #28]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	69da      	ldr	r2, [r3, #28]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	69d9      	ldr	r1, [r3, #28]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	021a      	lsls	r2, r3, #8
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	430a      	orrs	r2, r1
 80084f8:	61da      	str	r2, [r3, #28]
      break;
 80084fa:	e000      	b.n	80084fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80084fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008520:	2b01      	cmp	r3, #1
 8008522:	d101      	bne.n	8008528 <HAL_TIM_ConfigClockSource+0x18>
 8008524:	2302      	movs	r3, #2
 8008526:	e0b3      	b.n	8008690 <HAL_TIM_ConfigClockSource+0x180>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2202      	movs	r2, #2
 8008534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008546:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800854e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008560:	d03e      	beq.n	80085e0 <HAL_TIM_ConfigClockSource+0xd0>
 8008562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008566:	f200 8087 	bhi.w	8008678 <HAL_TIM_ConfigClockSource+0x168>
 800856a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800856e:	f000 8085 	beq.w	800867c <HAL_TIM_ConfigClockSource+0x16c>
 8008572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008576:	d87f      	bhi.n	8008678 <HAL_TIM_ConfigClockSource+0x168>
 8008578:	2b70      	cmp	r3, #112	; 0x70
 800857a:	d01a      	beq.n	80085b2 <HAL_TIM_ConfigClockSource+0xa2>
 800857c:	2b70      	cmp	r3, #112	; 0x70
 800857e:	d87b      	bhi.n	8008678 <HAL_TIM_ConfigClockSource+0x168>
 8008580:	2b60      	cmp	r3, #96	; 0x60
 8008582:	d050      	beq.n	8008626 <HAL_TIM_ConfigClockSource+0x116>
 8008584:	2b60      	cmp	r3, #96	; 0x60
 8008586:	d877      	bhi.n	8008678 <HAL_TIM_ConfigClockSource+0x168>
 8008588:	2b50      	cmp	r3, #80	; 0x50
 800858a:	d03c      	beq.n	8008606 <HAL_TIM_ConfigClockSource+0xf6>
 800858c:	2b50      	cmp	r3, #80	; 0x50
 800858e:	d873      	bhi.n	8008678 <HAL_TIM_ConfigClockSource+0x168>
 8008590:	2b40      	cmp	r3, #64	; 0x40
 8008592:	d058      	beq.n	8008646 <HAL_TIM_ConfigClockSource+0x136>
 8008594:	2b40      	cmp	r3, #64	; 0x40
 8008596:	d86f      	bhi.n	8008678 <HAL_TIM_ConfigClockSource+0x168>
 8008598:	2b30      	cmp	r3, #48	; 0x30
 800859a:	d064      	beq.n	8008666 <HAL_TIM_ConfigClockSource+0x156>
 800859c:	2b30      	cmp	r3, #48	; 0x30
 800859e:	d86b      	bhi.n	8008678 <HAL_TIM_ConfigClockSource+0x168>
 80085a0:	2b20      	cmp	r3, #32
 80085a2:	d060      	beq.n	8008666 <HAL_TIM_ConfigClockSource+0x156>
 80085a4:	2b20      	cmp	r3, #32
 80085a6:	d867      	bhi.n	8008678 <HAL_TIM_ConfigClockSource+0x168>
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d05c      	beq.n	8008666 <HAL_TIM_ConfigClockSource+0x156>
 80085ac:	2b10      	cmp	r3, #16
 80085ae:	d05a      	beq.n	8008666 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80085b0:	e062      	b.n	8008678 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6818      	ldr	r0, [r3, #0]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	6899      	ldr	r1, [r3, #8]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	f000 fb17 	bl	8008bf4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	609a      	str	r2, [r3, #8]
      break;
 80085de:	e04e      	b.n	800867e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6818      	ldr	r0, [r3, #0]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	6899      	ldr	r1, [r3, #8]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	f000 fb00 	bl	8008bf4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689a      	ldr	r2, [r3, #8]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008602:	609a      	str	r2, [r3, #8]
      break;
 8008604:	e03b      	b.n	800867e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6818      	ldr	r0, [r3, #0]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	6859      	ldr	r1, [r3, #4]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	461a      	mov	r2, r3
 8008614:	f000 fa74 	bl	8008b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2150      	movs	r1, #80	; 0x50
 800861e:	4618      	mov	r0, r3
 8008620:	f000 facd 	bl	8008bbe <TIM_ITRx_SetConfig>
      break;
 8008624:	e02b      	b.n	800867e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6818      	ldr	r0, [r3, #0]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	6859      	ldr	r1, [r3, #4]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	461a      	mov	r2, r3
 8008634:	f000 fa93 	bl	8008b5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2160      	movs	r1, #96	; 0x60
 800863e:	4618      	mov	r0, r3
 8008640:	f000 fabd 	bl	8008bbe <TIM_ITRx_SetConfig>
      break;
 8008644:	e01b      	b.n	800867e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6818      	ldr	r0, [r3, #0]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	6859      	ldr	r1, [r3, #4]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	461a      	mov	r2, r3
 8008654:	f000 fa54 	bl	8008b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2140      	movs	r1, #64	; 0x40
 800865e:	4618      	mov	r0, r3
 8008660:	f000 faad 	bl	8008bbe <TIM_ITRx_SetConfig>
      break;
 8008664:	e00b      	b.n	800867e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4619      	mov	r1, r3
 8008670:	4610      	mov	r0, r2
 8008672:	f000 faa4 	bl	8008bbe <TIM_ITRx_SetConfig>
        break;
 8008676:	e002      	b.n	800867e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008678:	bf00      	nop
 800867a:	e000      	b.n	800867e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800867c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086b4:	bf00      	nop
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a34      	ldr	r2, [pc, #208]	; (80087cc <TIM_Base_SetConfig+0xe4>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d00f      	beq.n	8008720 <TIM_Base_SetConfig+0x38>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008706:	d00b      	beq.n	8008720 <TIM_Base_SetConfig+0x38>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a31      	ldr	r2, [pc, #196]	; (80087d0 <TIM_Base_SetConfig+0xe8>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d007      	beq.n	8008720 <TIM_Base_SetConfig+0x38>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a30      	ldr	r2, [pc, #192]	; (80087d4 <TIM_Base_SetConfig+0xec>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d003      	beq.n	8008720 <TIM_Base_SetConfig+0x38>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a2f      	ldr	r2, [pc, #188]	; (80087d8 <TIM_Base_SetConfig+0xf0>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d108      	bne.n	8008732 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a25      	ldr	r2, [pc, #148]	; (80087cc <TIM_Base_SetConfig+0xe4>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d01b      	beq.n	8008772 <TIM_Base_SetConfig+0x8a>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008740:	d017      	beq.n	8008772 <TIM_Base_SetConfig+0x8a>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a22      	ldr	r2, [pc, #136]	; (80087d0 <TIM_Base_SetConfig+0xe8>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d013      	beq.n	8008772 <TIM_Base_SetConfig+0x8a>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a21      	ldr	r2, [pc, #132]	; (80087d4 <TIM_Base_SetConfig+0xec>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d00f      	beq.n	8008772 <TIM_Base_SetConfig+0x8a>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a20      	ldr	r2, [pc, #128]	; (80087d8 <TIM_Base_SetConfig+0xf0>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d00b      	beq.n	8008772 <TIM_Base_SetConfig+0x8a>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a1f      	ldr	r2, [pc, #124]	; (80087dc <TIM_Base_SetConfig+0xf4>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d007      	beq.n	8008772 <TIM_Base_SetConfig+0x8a>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a1e      	ldr	r2, [pc, #120]	; (80087e0 <TIM_Base_SetConfig+0xf8>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d003      	beq.n	8008772 <TIM_Base_SetConfig+0x8a>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a1d      	ldr	r2, [pc, #116]	; (80087e4 <TIM_Base_SetConfig+0xfc>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d108      	bne.n	8008784 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	4313      	orrs	r3, r2
 8008782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	4313      	orrs	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a08      	ldr	r2, [pc, #32]	; (80087cc <TIM_Base_SetConfig+0xe4>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d103      	bne.n	80087b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	691a      	ldr	r2, [r3, #16]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	615a      	str	r2, [r3, #20]
}
 80087be:	bf00      	nop
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	40010000 	.word	0x40010000
 80087d0:	40000400 	.word	0x40000400
 80087d4:	40000800 	.word	0x40000800
 80087d8:	40000c00 	.word	0x40000c00
 80087dc:	40014000 	.word	0x40014000
 80087e0:	40014400 	.word	0x40014400
 80087e4:	40014800 	.word	0x40014800

080087e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b087      	sub	sp, #28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	f023 0201 	bic.w	r2, r3, #1
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 0303 	bic.w	r3, r3, #3
 800881e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	4313      	orrs	r3, r2
 8008828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	f023 0302 	bic.w	r3, r3, #2
 8008830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	4313      	orrs	r3, r2
 800883a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a1c      	ldr	r2, [pc, #112]	; (80088b0 <TIM_OC1_SetConfig+0xc8>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d10c      	bne.n	800885e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f023 0308 	bic.w	r3, r3, #8
 800884a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	4313      	orrs	r3, r2
 8008854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f023 0304 	bic.w	r3, r3, #4
 800885c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a13      	ldr	r2, [pc, #76]	; (80088b0 <TIM_OC1_SetConfig+0xc8>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d111      	bne.n	800888a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800886c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	693a      	ldr	r2, [r7, #16]
 800887c:	4313      	orrs	r3, r2
 800887e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	4313      	orrs	r3, r2
 8008888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	621a      	str	r2, [r3, #32]
}
 80088a4:	bf00      	nop
 80088a6:	371c      	adds	r7, #28
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr
 80088b0:	40010000 	.word	0x40010000

080088b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b087      	sub	sp, #28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	f023 0210 	bic.w	r2, r3, #16
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	021b      	lsls	r3, r3, #8
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f023 0320 	bic.w	r3, r3, #32
 80088fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	011b      	lsls	r3, r3, #4
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	4313      	orrs	r3, r2
 800890a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a1e      	ldr	r2, [pc, #120]	; (8008988 <TIM_OC2_SetConfig+0xd4>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d10d      	bne.n	8008930 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800891a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	011b      	lsls	r3, r3, #4
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	4313      	orrs	r3, r2
 8008926:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800892e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a15      	ldr	r2, [pc, #84]	; (8008988 <TIM_OC2_SetConfig+0xd4>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d113      	bne.n	8008960 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800893e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008946:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	4313      	orrs	r3, r2
 8008952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	4313      	orrs	r3, r2
 800895e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	621a      	str	r2, [r3, #32]
}
 800897a:	bf00      	nop
 800897c:	371c      	adds	r7, #28
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	40010000 	.word	0x40010000

0800898c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800898c:	b480      	push	{r7}
 800898e:	b087      	sub	sp, #28
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f023 0303 	bic.w	r3, r3, #3
 80089c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	021b      	lsls	r3, r3, #8
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	4313      	orrs	r3, r2
 80089e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a1d      	ldr	r2, [pc, #116]	; (8008a5c <TIM_OC3_SetConfig+0xd0>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d10d      	bne.n	8008a06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	021b      	lsls	r3, r3, #8
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a14      	ldr	r2, [pc, #80]	; (8008a5c <TIM_OC3_SetConfig+0xd0>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d113      	bne.n	8008a36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	011b      	lsls	r3, r3, #4
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	011b      	lsls	r3, r3, #4
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	685a      	ldr	r2, [r3, #4]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	621a      	str	r2, [r3, #32]
}
 8008a50:	bf00      	nop
 8008a52:	371c      	adds	r7, #28
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	40010000 	.word	0x40010000

08008a60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b087      	sub	sp, #28
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	021b      	lsls	r3, r3, #8
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008aaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	031b      	lsls	r3, r3, #12
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a10      	ldr	r2, [pc, #64]	; (8008afc <TIM_OC4_SetConfig+0x9c>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d109      	bne.n	8008ad4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ac6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	019b      	lsls	r3, r3, #6
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685a      	ldr	r2, [r3, #4]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	621a      	str	r2, [r3, #32]
}
 8008aee:	bf00      	nop
 8008af0:	371c      	adds	r7, #28
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	40010000 	.word	0x40010000

08008b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6a1b      	ldr	r3, [r3, #32]
 8008b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6a1b      	ldr	r3, [r3, #32]
 8008b16:	f023 0201 	bic.w	r2, r3, #1
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	011b      	lsls	r3, r3, #4
 8008b30:	693a      	ldr	r2, [r7, #16]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f023 030a 	bic.w	r3, r3, #10
 8008b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	621a      	str	r2, [r3, #32]
}
 8008b52:	bf00      	nop
 8008b54:	371c      	adds	r7, #28
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b087      	sub	sp, #28
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	60f8      	str	r0, [r7, #12]
 8008b66:	60b9      	str	r1, [r7, #8]
 8008b68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	f023 0210 	bic.w	r2, r3, #16
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6a1b      	ldr	r3, [r3, #32]
 8008b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	031b      	lsls	r3, r3, #12
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	011b      	lsls	r3, r3, #4
 8008ba0:	693a      	ldr	r2, [r7, #16]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	697a      	ldr	r2, [r7, #20]
 8008baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	621a      	str	r2, [r3, #32]
}
 8008bb2:	bf00      	nop
 8008bb4:	371c      	adds	r7, #28
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b085      	sub	sp, #20
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	f043 0307 	orr.w	r3, r3, #7
 8008be0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	609a      	str	r2, [r3, #8]
}
 8008be8:	bf00      	nop
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b087      	sub	sp, #28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
 8008c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	021a      	lsls	r2, r3, #8
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	431a      	orrs	r2, r3
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	697a      	ldr	r2, [r7, #20]
 8008c26:	609a      	str	r2, [r3, #8]
}
 8008c28:	bf00      	nop
 8008c2a:	371c      	adds	r7, #28
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b087      	sub	sp, #28
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	f003 031f 	and.w	r3, r3, #31
 8008c46:	2201      	movs	r2, #1
 8008c48:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6a1a      	ldr	r2, [r3, #32]
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	43db      	mvns	r3, r3
 8008c56:	401a      	ands	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6a1a      	ldr	r2, [r3, #32]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	f003 031f 	and.w	r3, r3, #31
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	fa01 f303 	lsl.w	r3, r1, r3
 8008c6c:	431a      	orrs	r2, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	621a      	str	r2, [r3, #32]
}
 8008c72:	bf00      	nop
 8008c74:	371c      	adds	r7, #28
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
	...

08008c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d101      	bne.n	8008c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c94:	2302      	movs	r3, #2
 8008c96:	e050      	b.n	8008d3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a1c      	ldr	r2, [pc, #112]	; (8008d48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d018      	beq.n	8008d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce4:	d013      	beq.n	8008d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a18      	ldr	r2, [pc, #96]	; (8008d4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d00e      	beq.n	8008d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a16      	ldr	r2, [pc, #88]	; (8008d50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d009      	beq.n	8008d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a15      	ldr	r2, [pc, #84]	; (8008d54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d004      	beq.n	8008d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a13      	ldr	r2, [pc, #76]	; (8008d58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d10c      	bne.n	8008d28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3714      	adds	r7, #20
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	40010000 	.word	0x40010000
 8008d4c:	40000400 	.word	0x40000400
 8008d50:	40000800 	.word	0x40000800
 8008d54:	40000c00 	.word	0x40000c00
 8008d58:	40014000 	.word	0x40014000

08008d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e03f      	b.n	8008e16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d106      	bne.n	8008db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7fb f9d6 	bl	800415c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2224      	movs	r2, #36	; 0x24
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68da      	ldr	r2, [r3, #12]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fd51 	bl	8009870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	691a      	ldr	r2, [r3, #16]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	695a      	ldr	r2, [r3, #20]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68da      	ldr	r2, [r3, #12]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2220      	movs	r2, #32
 8008e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2220      	movs	r2, #32
 8008e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
	...

08008e20 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b20      	cmp	r3, #32
 8008e38:	d153      	bne.n	8008ee2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d002      	beq.n	8008e46 <HAL_UART_Transmit_DMA+0x26>
 8008e40:	88fb      	ldrh	r3, [r7, #6]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d101      	bne.n	8008e4a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e04c      	b.n	8008ee4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d101      	bne.n	8008e58 <HAL_UART_Transmit_DMA+0x38>
 8008e54:	2302      	movs	r3, #2
 8008e56:	e045      	b.n	8008ee4 <HAL_UART_Transmit_DMA+0xc4>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	88fa      	ldrh	r2, [r7, #6]
 8008e6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	88fa      	ldrh	r2, [r7, #6]
 8008e70:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2221      	movs	r2, #33	; 0x21
 8008e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e84:	4a19      	ldr	r2, [pc, #100]	; (8008eec <HAL_UART_Transmit_DMA+0xcc>)
 8008e86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e8c:	4a18      	ldr	r2, [pc, #96]	; (8008ef0 <HAL_UART_Transmit_DMA+0xd0>)
 8008e8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e94:	4a17      	ldr	r2, [pc, #92]	; (8008ef4 <HAL_UART_Transmit_DMA+0xd4>)
 8008e96:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008ea0:	f107 0308 	add.w	r3, r7, #8
 8008ea4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	6819      	ldr	r1, [r3, #0]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	88fb      	ldrh	r3, [r7, #6]
 8008eb8:	f7fb fd28 	bl	800490c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ec4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	695a      	ldr	r2, [r3, #20]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008edc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	e000      	b.n	8008ee4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8008ee2:	2302      	movs	r3, #2
  }
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3718      	adds	r7, #24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	0800932d 	.word	0x0800932d
 8008ef0:	0800937f 	.word	0x0800937f
 8008ef4:	08009467 	.word	0x08009467

08008ef8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	4613      	mov	r3, r2
 8008f04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b20      	cmp	r3, #32
 8008f10:	d11d      	bne.n	8008f4e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d002      	beq.n	8008f1e <HAL_UART_Receive_DMA+0x26>
 8008f18:	88fb      	ldrh	r3, [r7, #6]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e016      	b.n	8008f50 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d101      	bne.n	8008f30 <HAL_UART_Receive_DMA+0x38>
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	e00f      	b.n	8008f50 <HAL_UART_Receive_DMA+0x58>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8008f3e:	88fb      	ldrh	r3, [r7, #6]
 8008f40:	461a      	mov	r2, r3
 8008f42:	68b9      	ldr	r1, [r7, #8]
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f000 fad9 	bl	80094fc <UART_Start_Receive_DMA>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	e000      	b.n	8008f50 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008f4e:	2302      	movs	r3, #2
  }
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b08a      	sub	sp, #40	; 0x28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	f003 030f 	and.w	r3, r3, #15
 8008f86:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10d      	bne.n	8008faa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f90:	f003 0320 	and.w	r3, r3, #32
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d008      	beq.n	8008faa <HAL_UART_IRQHandler+0x52>
 8008f98:	6a3b      	ldr	r3, [r7, #32]
 8008f9a:	f003 0320 	and.w	r3, r3, #32
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d003      	beq.n	8008faa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fbcd 	bl	8009742 <UART_Receive_IT>
      return;
 8008fa8:	e17c      	b.n	80092a4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 80b1 	beq.w	8009114 <HAL_UART_IRQHandler+0x1bc>
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	f003 0301 	and.w	r3, r3, #1
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d105      	bne.n	8008fc8 <HAL_UART_IRQHandler+0x70>
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 80a6 	beq.w	8009114 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00a      	beq.n	8008fe8 <HAL_UART_IRQHandler+0x90>
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d005      	beq.n	8008fe8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe0:	f043 0201 	orr.w	r2, r3, #1
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	f003 0304 	and.w	r3, r3, #4
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00a      	beq.n	8009008 <HAL_UART_IRQHandler+0xb0>
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d005      	beq.n	8009008 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009000:	f043 0202 	orr.w	r2, r3, #2
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	f003 0302 	and.w	r3, r3, #2
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00a      	beq.n	8009028 <HAL_UART_IRQHandler+0xd0>
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	f003 0301 	and.w	r3, r3, #1
 8009018:	2b00      	cmp	r3, #0
 800901a:	d005      	beq.n	8009028 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009020:	f043 0204 	orr.w	r2, r3, #4
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902a:	f003 0308 	and.w	r3, r3, #8
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00f      	beq.n	8009052 <HAL_UART_IRQHandler+0xfa>
 8009032:	6a3b      	ldr	r3, [r7, #32]
 8009034:	f003 0320 	and.w	r3, r3, #32
 8009038:	2b00      	cmp	r3, #0
 800903a:	d104      	bne.n	8009046 <HAL_UART_IRQHandler+0xee>
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	2b00      	cmp	r3, #0
 8009044:	d005      	beq.n	8009052 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904a:	f043 0208 	orr.w	r2, r3, #8
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009056:	2b00      	cmp	r3, #0
 8009058:	f000 811f 	beq.w	800929a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	f003 0320 	and.w	r3, r3, #32
 8009062:	2b00      	cmp	r3, #0
 8009064:	d007      	beq.n	8009076 <HAL_UART_IRQHandler+0x11e>
 8009066:	6a3b      	ldr	r3, [r7, #32]
 8009068:	f003 0320 	and.w	r3, r3, #32
 800906c:	2b00      	cmp	r3, #0
 800906e:	d002      	beq.n	8009076 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fb66 	bl	8009742 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009080:	2b40      	cmp	r3, #64	; 0x40
 8009082:	bf0c      	ite	eq
 8009084:	2301      	moveq	r3, #1
 8009086:	2300      	movne	r3, #0
 8009088:	b2db      	uxtb	r3, r3
 800908a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009090:	f003 0308 	and.w	r3, r3, #8
 8009094:	2b00      	cmp	r3, #0
 8009096:	d102      	bne.n	800909e <HAL_UART_IRQHandler+0x146>
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d031      	beq.n	8009102 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 faa6 	bl	80095f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ae:	2b40      	cmp	r3, #64	; 0x40
 80090b0:	d123      	bne.n	80090fa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	695a      	ldr	r2, [r3, #20]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090c0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d013      	beq.n	80090f2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ce:	4a77      	ldr	r2, [pc, #476]	; (80092ac <HAL_UART_IRQHandler+0x354>)
 80090d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fb fce0 	bl	8004a9c <HAL_DMA_Abort_IT>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d016      	beq.n	8009110 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80090ec:	4610      	mov	r0, r2
 80090ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f0:	e00e      	b.n	8009110 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f904 	bl	8009300 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f8:	e00a      	b.n	8009110 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f900 	bl	8009300 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009100:	e006      	b.n	8009110 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f8fc 	bl	8009300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800910e:	e0c4      	b.n	800929a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009110:	bf00      	nop
    return;
 8009112:	e0c2      	b.n	800929a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009118:	2b01      	cmp	r3, #1
 800911a:	f040 80a2 	bne.w	8009262 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800911e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009120:	f003 0310 	and.w	r3, r3, #16
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 809c 	beq.w	8009262 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	f003 0310 	and.w	r3, r3, #16
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 8096 	beq.w	8009262 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009136:	2300      	movs	r3, #0
 8009138:	60fb      	str	r3, [r7, #12]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	60fb      	str	r3, [r7, #12]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	60fb      	str	r3, [r7, #12]
 800914a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	695b      	ldr	r3, [r3, #20]
 8009152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009156:	2b40      	cmp	r3, #64	; 0x40
 8009158:	d14f      	bne.n	80091fa <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009164:	8a3b      	ldrh	r3, [r7, #16]
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 8099 	beq.w	800929e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009170:	8a3a      	ldrh	r2, [r7, #16]
 8009172:	429a      	cmp	r2, r3
 8009174:	f080 8093 	bcs.w	800929e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	8a3a      	ldrh	r2, [r7, #16]
 800917c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009188:	d02b      	beq.n	80091e2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68da      	ldr	r2, [r3, #12]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009198:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	695a      	ldr	r2, [r3, #20]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 0201 	bic.w	r2, r2, #1
 80091a8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	695a      	ldr	r2, [r3, #20]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091b8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2220      	movs	r2, #32
 80091be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68da      	ldr	r2, [r3, #12]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f022 0210 	bic.w	r2, r2, #16
 80091d6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fb fbed 	bl	80049bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	4619      	mov	r1, r3
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f88e 	bl	8009314 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80091f8:	e051      	b.n	800929e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009202:	b29b      	uxth	r3, r3
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800920c:	b29b      	uxth	r3, r3
 800920e:	2b00      	cmp	r3, #0
 8009210:	d047      	beq.n	80092a2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8009212:	8a7b      	ldrh	r3, [r7, #18]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d044      	beq.n	80092a2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68da      	ldr	r2, [r3, #12]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009226:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	695a      	ldr	r2, [r3, #20]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f022 0201 	bic.w	r2, r2, #1
 8009236:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2220      	movs	r2, #32
 800923c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68da      	ldr	r2, [r3, #12]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f022 0210 	bic.w	r2, r2, #16
 8009254:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009256:	8a7b      	ldrh	r3, [r7, #18]
 8009258:	4619      	mov	r1, r3
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f85a 	bl	8009314 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009260:	e01f      	b.n	80092a2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009268:	2b00      	cmp	r3, #0
 800926a:	d008      	beq.n	800927e <HAL_UART_IRQHandler+0x326>
 800926c:	6a3b      	ldr	r3, [r7, #32]
 800926e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f9fb 	bl	8009672 <UART_Transmit_IT>
    return;
 800927c:	e012      	b.n	80092a4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800927e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00d      	beq.n	80092a4 <HAL_UART_IRQHandler+0x34c>
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928e:	2b00      	cmp	r3, #0
 8009290:	d008      	beq.n	80092a4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 fa3d 	bl	8009712 <UART_EndTransmit_IT>
    return;
 8009298:	e004      	b.n	80092a4 <HAL_UART_IRQHandler+0x34c>
    return;
 800929a:	bf00      	nop
 800929c:	e002      	b.n	80092a4 <HAL_UART_IRQHandler+0x34c>
      return;
 800929e:	bf00      	nop
 80092a0:	e000      	b.n	80092a4 <HAL_UART_IRQHandler+0x34c>
      return;
 80092a2:	bf00      	nop
  }
}
 80092a4:	3728      	adds	r7, #40	; 0x28
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	0800964b 	.word	0x0800964b

080092b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80092cc:	bf00      	nop
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009308:	bf00      	nop
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009338:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009344:	2b00      	cmp	r3, #0
 8009346:	d113      	bne.n	8009370 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	695a      	ldr	r2, [r3, #20]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800935c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68da      	ldr	r2, [r3, #12]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800936c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800936e:	e002      	b.n	8009376 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f7ff ff9d 	bl	80092b0 <HAL_UART_TxCpltCallback>
}
 8009376:	bf00      	nop
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f7ff ff99 	bl	80092c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009392:	bf00      	nop
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b084      	sub	sp, #16
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d12a      	bne.n	800940c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68da      	ldr	r2, [r3, #12]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093ca:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	695a      	ldr	r2, [r3, #20]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f022 0201 	bic.w	r2, r2, #1
 80093da:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	695a      	ldr	r2, [r3, #20]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093ea:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2220      	movs	r2, #32
 80093f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d107      	bne.n	800940c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f022 0210 	bic.w	r2, r2, #16
 800940a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009410:	2b01      	cmp	r3, #1
 8009412:	d106      	bne.n	8009422 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009418:	4619      	mov	r1, r3
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f7ff ff7a 	bl	8009314 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009420:	e002      	b.n	8009428 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f7ff ff58 	bl	80092d8 <HAL_UART_RxCpltCallback>
}
 8009428:	bf00      	nop
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009442:	2b01      	cmp	r3, #1
 8009444:	d108      	bne.n	8009458 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800944a:	085b      	lsrs	r3, r3, #1
 800944c:	b29b      	uxth	r3, r3
 800944e:	4619      	mov	r1, r3
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f7ff ff5f 	bl	8009314 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009456:	e002      	b.n	800945e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f7ff ff47 	bl	80092ec <HAL_UART_RxHalfCpltCallback>
}
 800945e:	bf00      	nop
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b084      	sub	sp, #16
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800946e:	2300      	movs	r3, #0
 8009470:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009476:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009482:	2b80      	cmp	r3, #128	; 0x80
 8009484:	bf0c      	ite	eq
 8009486:	2301      	moveq	r3, #1
 8009488:	2300      	movne	r3, #0
 800948a:	b2db      	uxtb	r3, r3
 800948c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b21      	cmp	r3, #33	; 0x21
 8009498:	d108      	bne.n	80094ac <UART_DMAError+0x46>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d005      	beq.n	80094ac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2200      	movs	r2, #0
 80094a4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80094a6:	68b8      	ldr	r0, [r7, #8]
 80094a8:	f000 f88c 	bl	80095c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b6:	2b40      	cmp	r3, #64	; 0x40
 80094b8:	bf0c      	ite	eq
 80094ba:	2301      	moveq	r3, #1
 80094bc:	2300      	movne	r3, #0
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	2b22      	cmp	r3, #34	; 0x22
 80094cc:	d108      	bne.n	80094e0 <UART_DMAError+0x7a>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d005      	beq.n	80094e0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2200      	movs	r2, #0
 80094d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80094da:	68b8      	ldr	r0, [r7, #8]
 80094dc:	f000 f888 	bl	80095f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e4:	f043 0210 	orr.w	r2, r3, #16
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094ec:	68b8      	ldr	r0, [r7, #8]
 80094ee:	f7ff ff07 	bl	8009300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094f2:	bf00      	nop
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
	...

080094fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	4613      	mov	r3, r2
 8009508:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	88fa      	ldrh	r2, [r7, #6]
 8009514:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2222      	movs	r2, #34	; 0x22
 8009520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009528:	4a23      	ldr	r2, [pc, #140]	; (80095b8 <UART_Start_Receive_DMA+0xbc>)
 800952a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009530:	4a22      	ldr	r2, [pc, #136]	; (80095bc <UART_Start_Receive_DMA+0xc0>)
 8009532:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009538:	4a21      	ldr	r2, [pc, #132]	; (80095c0 <UART_Start_Receive_DMA+0xc4>)
 800953a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009540:	2200      	movs	r2, #0
 8009542:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009544:	f107 0308 	add.w	r3, r7, #8
 8009548:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3304      	adds	r3, #4
 8009554:	4619      	mov	r1, r3
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	88fb      	ldrh	r3, [r7, #6]
 800955c:	f7fb f9d6 	bl	800490c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009560:	2300      	movs	r3, #0
 8009562:	613b      	str	r3, [r7, #16]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	613b      	str	r3, [r7, #16]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	613b      	str	r3, [r7, #16]
 8009574:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2200      	movs	r2, #0
 800957a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68da      	ldr	r2, [r3, #12]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800958c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	695a      	ldr	r2, [r3, #20]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f042 0201 	orr.w	r2, r2, #1
 800959c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	695a      	ldr	r2, [r3, #20]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095ac:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3718      	adds	r7, #24
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	0800939b 	.word	0x0800939b
 80095bc:	08009431 	.word	0x08009431
 80095c0:	08009467 	.word	0x08009467

080095c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80095da:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2220      	movs	r2, #32
 80095e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68da      	ldr	r2, [r3, #12]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009606:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	695a      	ldr	r2, [r3, #20]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f022 0201 	bic.w	r2, r2, #1
 8009616:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961c:	2b01      	cmp	r3, #1
 800961e:	d107      	bne.n	8009630 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68da      	ldr	r2, [r3, #12]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f022 0210 	bic.w	r2, r2, #16
 800962e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2220      	movs	r2, #32
 8009634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800963e:	bf00      	nop
 8009640:	370c      	adds	r7, #12
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr

0800964a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009656:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2200      	movs	r2, #0
 800965c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f7ff fe4b 	bl	8009300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800966a:	bf00      	nop
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009672:	b480      	push	{r7}
 8009674:	b085      	sub	sp, #20
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b21      	cmp	r3, #33	; 0x21
 8009684:	d13e      	bne.n	8009704 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800968e:	d114      	bne.n	80096ba <UART_Transmit_IT+0x48>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d110      	bne.n	80096ba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a1b      	ldr	r3, [r3, #32]
 800969c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	881b      	ldrh	r3, [r3, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	1c9a      	adds	r2, r3, #2
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	621a      	str	r2, [r3, #32]
 80096b8:	e008      	b.n	80096cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	1c59      	adds	r1, r3, #1
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	6211      	str	r1, [r2, #32]
 80096c4:	781a      	ldrb	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	3b01      	subs	r3, #1
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	4619      	mov	r1, r3
 80096da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10f      	bne.n	8009700 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68da      	ldr	r2, [r3, #12]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009700:	2300      	movs	r3, #0
 8009702:	e000      	b.n	8009706 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009704:	2302      	movs	r3, #2
  }
}
 8009706:	4618      	mov	r0, r3
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b082      	sub	sp, #8
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68da      	ldr	r2, [r3, #12]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009728:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2220      	movs	r2, #32
 800972e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f7ff fdbc 	bl	80092b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b084      	sub	sp, #16
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b22      	cmp	r3, #34	; 0x22
 8009754:	f040 8087 	bne.w	8009866 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009760:	d117      	bne.n	8009792 <UART_Receive_IT+0x50>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d113      	bne.n	8009792 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800976a:	2300      	movs	r3, #0
 800976c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009772:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	b29b      	uxth	r3, r3
 800977c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009780:	b29a      	uxth	r2, r3
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978a:	1c9a      	adds	r2, r3, #2
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	629a      	str	r2, [r3, #40]	; 0x28
 8009790:	e026      	b.n	80097e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009796:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009798:	2300      	movs	r3, #0
 800979a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097a4:	d007      	beq.n	80097b6 <UART_Receive_IT+0x74>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10a      	bne.n	80097c4 <UART_Receive_IT+0x82>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d106      	bne.n	80097c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	701a      	strb	r2, [r3, #0]
 80097c2:	e008      	b.n	80097d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097da:	1c5a      	adds	r2, r3, #1
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	3b01      	subs	r3, #1
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	4619      	mov	r1, r3
 80097ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d136      	bne.n	8009862 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68da      	ldr	r2, [r3, #12]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f022 0220 	bic.w	r2, r2, #32
 8009802:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68da      	ldr	r2, [r3, #12]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009812:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	695a      	ldr	r2, [r3, #20]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f022 0201 	bic.w	r2, r2, #1
 8009822:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2220      	movs	r2, #32
 8009828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009830:	2b01      	cmp	r3, #1
 8009832:	d10e      	bne.n	8009852 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68da      	ldr	r2, [r3, #12]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f022 0210 	bic.w	r2, r2, #16
 8009842:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009848:	4619      	mov	r1, r3
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7ff fd62 	bl	8009314 <HAL_UARTEx_RxEventCallback>
 8009850:	e002      	b.n	8009858 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f7ff fd40 	bl	80092d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	e002      	b.n	8009868 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	e000      	b.n	8009868 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009866:	2302      	movs	r3, #2
  }
}
 8009868:	4618      	mov	r0, r3
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009874:	b09f      	sub	sp, #124	; 0x7c
 8009876:	af00      	add	r7, sp, #0
 8009878:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800987a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009886:	68d9      	ldr	r1, [r3, #12]
 8009888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	ea40 0301 	orr.w	r3, r0, r1
 8009890:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009894:	689a      	ldr	r2, [r3, #8]
 8009896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	431a      	orrs	r2, r3
 800989c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800989e:	695b      	ldr	r3, [r3, #20]
 80098a0:	431a      	orrs	r2, r3
 80098a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098a4:	69db      	ldr	r3, [r3, #28]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80098aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80098b4:	f021 010c 	bic.w	r1, r1, #12
 80098b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098be:	430b      	orrs	r3, r1
 80098c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80098cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098ce:	6999      	ldr	r1, [r3, #24]
 80098d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	ea40 0301 	orr.w	r3, r0, r1
 80098d8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80098da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	4bc5      	ldr	r3, [pc, #788]	; (8009bf4 <UART_SetConfig+0x384>)
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d004      	beq.n	80098ee <UART_SetConfig+0x7e>
 80098e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	4bc3      	ldr	r3, [pc, #780]	; (8009bf8 <UART_SetConfig+0x388>)
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d103      	bne.n	80098f6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80098ee:	f7fe f8eb 	bl	8007ac8 <HAL_RCC_GetPCLK2Freq>
 80098f2:	6778      	str	r0, [r7, #116]	; 0x74
 80098f4:	e002      	b.n	80098fc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80098f6:	f7fe f8d3 	bl	8007aa0 <HAL_RCC_GetPCLK1Freq>
 80098fa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098fe:	69db      	ldr	r3, [r3, #28]
 8009900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009904:	f040 80b6 	bne.w	8009a74 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009908:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800990a:	461c      	mov	r4, r3
 800990c:	f04f 0500 	mov.w	r5, #0
 8009910:	4622      	mov	r2, r4
 8009912:	462b      	mov	r3, r5
 8009914:	1891      	adds	r1, r2, r2
 8009916:	6439      	str	r1, [r7, #64]	; 0x40
 8009918:	415b      	adcs	r3, r3
 800991a:	647b      	str	r3, [r7, #68]	; 0x44
 800991c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009920:	1912      	adds	r2, r2, r4
 8009922:	eb45 0303 	adc.w	r3, r5, r3
 8009926:	f04f 0000 	mov.w	r0, #0
 800992a:	f04f 0100 	mov.w	r1, #0
 800992e:	00d9      	lsls	r1, r3, #3
 8009930:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009934:	00d0      	lsls	r0, r2, #3
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	1911      	adds	r1, r2, r4
 800993c:	6639      	str	r1, [r7, #96]	; 0x60
 800993e:	416b      	adcs	r3, r5
 8009940:	667b      	str	r3, [r7, #100]	; 0x64
 8009942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	461a      	mov	r2, r3
 8009948:	f04f 0300 	mov.w	r3, #0
 800994c:	1891      	adds	r1, r2, r2
 800994e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009950:	415b      	adcs	r3, r3
 8009952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009954:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009958:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800995c:	f7f7 fa26 	bl	8000dac <__aeabi_uldivmod>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4ba5      	ldr	r3, [pc, #660]	; (8009bfc <UART_SetConfig+0x38c>)
 8009966:	fba3 2302 	umull	r2, r3, r3, r2
 800996a:	095b      	lsrs	r3, r3, #5
 800996c:	011e      	lsls	r6, r3, #4
 800996e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009970:	461c      	mov	r4, r3
 8009972:	f04f 0500 	mov.w	r5, #0
 8009976:	4622      	mov	r2, r4
 8009978:	462b      	mov	r3, r5
 800997a:	1891      	adds	r1, r2, r2
 800997c:	6339      	str	r1, [r7, #48]	; 0x30
 800997e:	415b      	adcs	r3, r3
 8009980:	637b      	str	r3, [r7, #52]	; 0x34
 8009982:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009986:	1912      	adds	r2, r2, r4
 8009988:	eb45 0303 	adc.w	r3, r5, r3
 800998c:	f04f 0000 	mov.w	r0, #0
 8009990:	f04f 0100 	mov.w	r1, #0
 8009994:	00d9      	lsls	r1, r3, #3
 8009996:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800999a:	00d0      	lsls	r0, r2, #3
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	1911      	adds	r1, r2, r4
 80099a2:	65b9      	str	r1, [r7, #88]	; 0x58
 80099a4:	416b      	adcs	r3, r5
 80099a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	461a      	mov	r2, r3
 80099ae:	f04f 0300 	mov.w	r3, #0
 80099b2:	1891      	adds	r1, r2, r2
 80099b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80099b6:	415b      	adcs	r3, r3
 80099b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80099c2:	f7f7 f9f3 	bl	8000dac <__aeabi_uldivmod>
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	4b8c      	ldr	r3, [pc, #560]	; (8009bfc <UART_SetConfig+0x38c>)
 80099cc:	fba3 1302 	umull	r1, r3, r3, r2
 80099d0:	095b      	lsrs	r3, r3, #5
 80099d2:	2164      	movs	r1, #100	; 0x64
 80099d4:	fb01 f303 	mul.w	r3, r1, r3
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	3332      	adds	r3, #50	; 0x32
 80099de:	4a87      	ldr	r2, [pc, #540]	; (8009bfc <UART_SetConfig+0x38c>)
 80099e0:	fba2 2303 	umull	r2, r3, r2, r3
 80099e4:	095b      	lsrs	r3, r3, #5
 80099e6:	005b      	lsls	r3, r3, #1
 80099e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80099ec:	441e      	add	r6, r3
 80099ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099f0:	4618      	mov	r0, r3
 80099f2:	f04f 0100 	mov.w	r1, #0
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	1894      	adds	r4, r2, r2
 80099fc:	623c      	str	r4, [r7, #32]
 80099fe:	415b      	adcs	r3, r3
 8009a00:	627b      	str	r3, [r7, #36]	; 0x24
 8009a02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a06:	1812      	adds	r2, r2, r0
 8009a08:	eb41 0303 	adc.w	r3, r1, r3
 8009a0c:	f04f 0400 	mov.w	r4, #0
 8009a10:	f04f 0500 	mov.w	r5, #0
 8009a14:	00dd      	lsls	r5, r3, #3
 8009a16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a1a:	00d4      	lsls	r4, r2, #3
 8009a1c:	4622      	mov	r2, r4
 8009a1e:	462b      	mov	r3, r5
 8009a20:	1814      	adds	r4, r2, r0
 8009a22:	653c      	str	r4, [r7, #80]	; 0x50
 8009a24:	414b      	adcs	r3, r1
 8009a26:	657b      	str	r3, [r7, #84]	; 0x54
 8009a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	f04f 0300 	mov.w	r3, #0
 8009a32:	1891      	adds	r1, r2, r2
 8009a34:	61b9      	str	r1, [r7, #24]
 8009a36:	415b      	adcs	r3, r3
 8009a38:	61fb      	str	r3, [r7, #28]
 8009a3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009a42:	f7f7 f9b3 	bl	8000dac <__aeabi_uldivmod>
 8009a46:	4602      	mov	r2, r0
 8009a48:	460b      	mov	r3, r1
 8009a4a:	4b6c      	ldr	r3, [pc, #432]	; (8009bfc <UART_SetConfig+0x38c>)
 8009a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8009a50:	095b      	lsrs	r3, r3, #5
 8009a52:	2164      	movs	r1, #100	; 0x64
 8009a54:	fb01 f303 	mul.w	r3, r1, r3
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	00db      	lsls	r3, r3, #3
 8009a5c:	3332      	adds	r3, #50	; 0x32
 8009a5e:	4a67      	ldr	r2, [pc, #412]	; (8009bfc <UART_SetConfig+0x38c>)
 8009a60:	fba2 2303 	umull	r2, r3, r2, r3
 8009a64:	095b      	lsrs	r3, r3, #5
 8009a66:	f003 0207 	and.w	r2, r3, #7
 8009a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4432      	add	r2, r6
 8009a70:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009a72:	e0b9      	b.n	8009be8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a76:	461c      	mov	r4, r3
 8009a78:	f04f 0500 	mov.w	r5, #0
 8009a7c:	4622      	mov	r2, r4
 8009a7e:	462b      	mov	r3, r5
 8009a80:	1891      	adds	r1, r2, r2
 8009a82:	6139      	str	r1, [r7, #16]
 8009a84:	415b      	adcs	r3, r3
 8009a86:	617b      	str	r3, [r7, #20]
 8009a88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009a8c:	1912      	adds	r2, r2, r4
 8009a8e:	eb45 0303 	adc.w	r3, r5, r3
 8009a92:	f04f 0000 	mov.w	r0, #0
 8009a96:	f04f 0100 	mov.w	r1, #0
 8009a9a:	00d9      	lsls	r1, r3, #3
 8009a9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009aa0:	00d0      	lsls	r0, r2, #3
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	eb12 0804 	adds.w	r8, r2, r4
 8009aaa:	eb43 0905 	adc.w	r9, r3, r5
 8009aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f04f 0100 	mov.w	r1, #0
 8009ab8:	f04f 0200 	mov.w	r2, #0
 8009abc:	f04f 0300 	mov.w	r3, #0
 8009ac0:	008b      	lsls	r3, r1, #2
 8009ac2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009ac6:	0082      	lsls	r2, r0, #2
 8009ac8:	4640      	mov	r0, r8
 8009aca:	4649      	mov	r1, r9
 8009acc:	f7f7 f96e 	bl	8000dac <__aeabi_uldivmod>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	4b49      	ldr	r3, [pc, #292]	; (8009bfc <UART_SetConfig+0x38c>)
 8009ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8009ada:	095b      	lsrs	r3, r3, #5
 8009adc:	011e      	lsls	r6, r3, #4
 8009ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f04f 0100 	mov.w	r1, #0
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	460b      	mov	r3, r1
 8009aea:	1894      	adds	r4, r2, r2
 8009aec:	60bc      	str	r4, [r7, #8]
 8009aee:	415b      	adcs	r3, r3
 8009af0:	60fb      	str	r3, [r7, #12]
 8009af2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009af6:	1812      	adds	r2, r2, r0
 8009af8:	eb41 0303 	adc.w	r3, r1, r3
 8009afc:	f04f 0400 	mov.w	r4, #0
 8009b00:	f04f 0500 	mov.w	r5, #0
 8009b04:	00dd      	lsls	r5, r3, #3
 8009b06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009b0a:	00d4      	lsls	r4, r2, #3
 8009b0c:	4622      	mov	r2, r4
 8009b0e:	462b      	mov	r3, r5
 8009b10:	1814      	adds	r4, r2, r0
 8009b12:	64bc      	str	r4, [r7, #72]	; 0x48
 8009b14:	414b      	adcs	r3, r1
 8009b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f04f 0100 	mov.w	r1, #0
 8009b22:	f04f 0200 	mov.w	r2, #0
 8009b26:	f04f 0300 	mov.w	r3, #0
 8009b2a:	008b      	lsls	r3, r1, #2
 8009b2c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009b30:	0082      	lsls	r2, r0, #2
 8009b32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009b36:	f7f7 f939 	bl	8000dac <__aeabi_uldivmod>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	4b2f      	ldr	r3, [pc, #188]	; (8009bfc <UART_SetConfig+0x38c>)
 8009b40:	fba3 1302 	umull	r1, r3, r3, r2
 8009b44:	095b      	lsrs	r3, r3, #5
 8009b46:	2164      	movs	r1, #100	; 0x64
 8009b48:	fb01 f303 	mul.w	r3, r1, r3
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	011b      	lsls	r3, r3, #4
 8009b50:	3332      	adds	r3, #50	; 0x32
 8009b52:	4a2a      	ldr	r2, [pc, #168]	; (8009bfc <UART_SetConfig+0x38c>)
 8009b54:	fba2 2303 	umull	r2, r3, r2, r3
 8009b58:	095b      	lsrs	r3, r3, #5
 8009b5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b5e:	441e      	add	r6, r3
 8009b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b62:	4618      	mov	r0, r3
 8009b64:	f04f 0100 	mov.w	r1, #0
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	1894      	adds	r4, r2, r2
 8009b6e:	603c      	str	r4, [r7, #0]
 8009b70:	415b      	adcs	r3, r3
 8009b72:	607b      	str	r3, [r7, #4]
 8009b74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b78:	1812      	adds	r2, r2, r0
 8009b7a:	eb41 0303 	adc.w	r3, r1, r3
 8009b7e:	f04f 0400 	mov.w	r4, #0
 8009b82:	f04f 0500 	mov.w	r5, #0
 8009b86:	00dd      	lsls	r5, r3, #3
 8009b88:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009b8c:	00d4      	lsls	r4, r2, #3
 8009b8e:	4622      	mov	r2, r4
 8009b90:	462b      	mov	r3, r5
 8009b92:	eb12 0a00 	adds.w	sl, r2, r0
 8009b96:	eb43 0b01 	adc.w	fp, r3, r1
 8009b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f04f 0100 	mov.w	r1, #0
 8009ba4:	f04f 0200 	mov.w	r2, #0
 8009ba8:	f04f 0300 	mov.w	r3, #0
 8009bac:	008b      	lsls	r3, r1, #2
 8009bae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009bb2:	0082      	lsls	r2, r0, #2
 8009bb4:	4650      	mov	r0, sl
 8009bb6:	4659      	mov	r1, fp
 8009bb8:	f7f7 f8f8 	bl	8000dac <__aeabi_uldivmod>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	4b0e      	ldr	r3, [pc, #56]	; (8009bfc <UART_SetConfig+0x38c>)
 8009bc2:	fba3 1302 	umull	r1, r3, r3, r2
 8009bc6:	095b      	lsrs	r3, r3, #5
 8009bc8:	2164      	movs	r1, #100	; 0x64
 8009bca:	fb01 f303 	mul.w	r3, r1, r3
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	011b      	lsls	r3, r3, #4
 8009bd2:	3332      	adds	r3, #50	; 0x32
 8009bd4:	4a09      	ldr	r2, [pc, #36]	; (8009bfc <UART_SetConfig+0x38c>)
 8009bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bda:	095b      	lsrs	r3, r3, #5
 8009bdc:	f003 020f 	and.w	r2, r3, #15
 8009be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4432      	add	r2, r6
 8009be6:	609a      	str	r2, [r3, #8]
}
 8009be8:	bf00      	nop
 8009bea:	377c      	adds	r7, #124	; 0x7c
 8009bec:	46bd      	mov	sp, r7
 8009bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf2:	bf00      	nop
 8009bf4:	40011000 	.word	0x40011000
 8009bf8:	40011400 	.word	0x40011400
 8009bfc:	51eb851f 	.word	0x51eb851f

08009c00 <calloc>:
 8009c00:	4b02      	ldr	r3, [pc, #8]	; (8009c0c <calloc+0xc>)
 8009c02:	460a      	mov	r2, r1
 8009c04:	4601      	mov	r1, r0
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	f000 b842 	b.w	8009c90 <_calloc_r>
 8009c0c:	20000024 	.word	0x20000024

08009c10 <__errno>:
 8009c10:	4b01      	ldr	r3, [pc, #4]	; (8009c18 <__errno+0x8>)
 8009c12:	6818      	ldr	r0, [r3, #0]
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	20000024 	.word	0x20000024

08009c1c <__libc_init_array>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	4d0d      	ldr	r5, [pc, #52]	; (8009c54 <__libc_init_array+0x38>)
 8009c20:	4c0d      	ldr	r4, [pc, #52]	; (8009c58 <__libc_init_array+0x3c>)
 8009c22:	1b64      	subs	r4, r4, r5
 8009c24:	10a4      	asrs	r4, r4, #2
 8009c26:	2600      	movs	r6, #0
 8009c28:	42a6      	cmp	r6, r4
 8009c2a:	d109      	bne.n	8009c40 <__libc_init_array+0x24>
 8009c2c:	4d0b      	ldr	r5, [pc, #44]	; (8009c5c <__libc_init_array+0x40>)
 8009c2e:	4c0c      	ldr	r4, [pc, #48]	; (8009c60 <__libc_init_array+0x44>)
 8009c30:	f000 f99e 	bl	8009f70 <_init>
 8009c34:	1b64      	subs	r4, r4, r5
 8009c36:	10a4      	asrs	r4, r4, #2
 8009c38:	2600      	movs	r6, #0
 8009c3a:	42a6      	cmp	r6, r4
 8009c3c:	d105      	bne.n	8009c4a <__libc_init_array+0x2e>
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}
 8009c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c44:	4798      	blx	r3
 8009c46:	3601      	adds	r6, #1
 8009c48:	e7ee      	b.n	8009c28 <__libc_init_array+0xc>
 8009c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c4e:	4798      	blx	r3
 8009c50:	3601      	adds	r6, #1
 8009c52:	e7f2      	b.n	8009c3a <__libc_init_array+0x1e>
 8009c54:	08009fc8 	.word	0x08009fc8
 8009c58:	08009fc8 	.word	0x08009fc8
 8009c5c:	08009fc8 	.word	0x08009fc8
 8009c60:	08009fcc 	.word	0x08009fcc

08009c64 <memcpy>:
 8009c64:	440a      	add	r2, r1
 8009c66:	4291      	cmp	r1, r2
 8009c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c6c:	d100      	bne.n	8009c70 <memcpy+0xc>
 8009c6e:	4770      	bx	lr
 8009c70:	b510      	push	{r4, lr}
 8009c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c7a:	4291      	cmp	r1, r2
 8009c7c:	d1f9      	bne.n	8009c72 <memcpy+0xe>
 8009c7e:	bd10      	pop	{r4, pc}

08009c80 <memset>:
 8009c80:	4402      	add	r2, r0
 8009c82:	4603      	mov	r3, r0
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d100      	bne.n	8009c8a <memset+0xa>
 8009c88:	4770      	bx	lr
 8009c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c8e:	e7f9      	b.n	8009c84 <memset+0x4>

08009c90 <_calloc_r>:
 8009c90:	b513      	push	{r0, r1, r4, lr}
 8009c92:	434a      	muls	r2, r1
 8009c94:	4611      	mov	r1, r2
 8009c96:	9201      	str	r2, [sp, #4]
 8009c98:	f000 f80a 	bl	8009cb0 <_malloc_r>
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	b118      	cbz	r0, 8009ca8 <_calloc_r+0x18>
 8009ca0:	9a01      	ldr	r2, [sp, #4]
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	f7ff ffec 	bl	8009c80 <memset>
 8009ca8:	4620      	mov	r0, r4
 8009caa:	b002      	add	sp, #8
 8009cac:	bd10      	pop	{r4, pc}
	...

08009cb0 <_malloc_r>:
 8009cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb2:	1ccd      	adds	r5, r1, #3
 8009cb4:	f025 0503 	bic.w	r5, r5, #3
 8009cb8:	3508      	adds	r5, #8
 8009cba:	2d0c      	cmp	r5, #12
 8009cbc:	bf38      	it	cc
 8009cbe:	250c      	movcc	r5, #12
 8009cc0:	2d00      	cmp	r5, #0
 8009cc2:	4606      	mov	r6, r0
 8009cc4:	db01      	blt.n	8009cca <_malloc_r+0x1a>
 8009cc6:	42a9      	cmp	r1, r5
 8009cc8:	d903      	bls.n	8009cd2 <_malloc_r+0x22>
 8009cca:	230c      	movs	r3, #12
 8009ccc:	6033      	str	r3, [r6, #0]
 8009cce:	2000      	movs	r0, #0
 8009cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cd2:	f000 f857 	bl	8009d84 <__malloc_lock>
 8009cd6:	4921      	ldr	r1, [pc, #132]	; (8009d5c <_malloc_r+0xac>)
 8009cd8:	680a      	ldr	r2, [r1, #0]
 8009cda:	4614      	mov	r4, r2
 8009cdc:	b99c      	cbnz	r4, 8009d06 <_malloc_r+0x56>
 8009cde:	4f20      	ldr	r7, [pc, #128]	; (8009d60 <_malloc_r+0xb0>)
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	b923      	cbnz	r3, 8009cee <_malloc_r+0x3e>
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f000 f83c 	bl	8009d64 <_sbrk_r>
 8009cec:	6038      	str	r0, [r7, #0]
 8009cee:	4629      	mov	r1, r5
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	f000 f837 	bl	8009d64 <_sbrk_r>
 8009cf6:	1c43      	adds	r3, r0, #1
 8009cf8:	d123      	bne.n	8009d42 <_malloc_r+0x92>
 8009cfa:	230c      	movs	r3, #12
 8009cfc:	6033      	str	r3, [r6, #0]
 8009cfe:	4630      	mov	r0, r6
 8009d00:	f000 f846 	bl	8009d90 <__malloc_unlock>
 8009d04:	e7e3      	b.n	8009cce <_malloc_r+0x1e>
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	1b5b      	subs	r3, r3, r5
 8009d0a:	d417      	bmi.n	8009d3c <_malloc_r+0x8c>
 8009d0c:	2b0b      	cmp	r3, #11
 8009d0e:	d903      	bls.n	8009d18 <_malloc_r+0x68>
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	441c      	add	r4, r3
 8009d14:	6025      	str	r5, [r4, #0]
 8009d16:	e004      	b.n	8009d22 <_malloc_r+0x72>
 8009d18:	6863      	ldr	r3, [r4, #4]
 8009d1a:	42a2      	cmp	r2, r4
 8009d1c:	bf0c      	ite	eq
 8009d1e:	600b      	streq	r3, [r1, #0]
 8009d20:	6053      	strne	r3, [r2, #4]
 8009d22:	4630      	mov	r0, r6
 8009d24:	f000 f834 	bl	8009d90 <__malloc_unlock>
 8009d28:	f104 000b 	add.w	r0, r4, #11
 8009d2c:	1d23      	adds	r3, r4, #4
 8009d2e:	f020 0007 	bic.w	r0, r0, #7
 8009d32:	1ac2      	subs	r2, r0, r3
 8009d34:	d0cc      	beq.n	8009cd0 <_malloc_r+0x20>
 8009d36:	1a1b      	subs	r3, r3, r0
 8009d38:	50a3      	str	r3, [r4, r2]
 8009d3a:	e7c9      	b.n	8009cd0 <_malloc_r+0x20>
 8009d3c:	4622      	mov	r2, r4
 8009d3e:	6864      	ldr	r4, [r4, #4]
 8009d40:	e7cc      	b.n	8009cdc <_malloc_r+0x2c>
 8009d42:	1cc4      	adds	r4, r0, #3
 8009d44:	f024 0403 	bic.w	r4, r4, #3
 8009d48:	42a0      	cmp	r0, r4
 8009d4a:	d0e3      	beq.n	8009d14 <_malloc_r+0x64>
 8009d4c:	1a21      	subs	r1, r4, r0
 8009d4e:	4630      	mov	r0, r6
 8009d50:	f000 f808 	bl	8009d64 <_sbrk_r>
 8009d54:	3001      	adds	r0, #1
 8009d56:	d1dd      	bne.n	8009d14 <_malloc_r+0x64>
 8009d58:	e7cf      	b.n	8009cfa <_malloc_r+0x4a>
 8009d5a:	bf00      	nop
 8009d5c:	20000450 	.word	0x20000450
 8009d60:	20000454 	.word	0x20000454

08009d64 <_sbrk_r>:
 8009d64:	b538      	push	{r3, r4, r5, lr}
 8009d66:	4d06      	ldr	r5, [pc, #24]	; (8009d80 <_sbrk_r+0x1c>)
 8009d68:	2300      	movs	r3, #0
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	4608      	mov	r0, r1
 8009d6e:	602b      	str	r3, [r5, #0]
 8009d70:	f7fa fb24 	bl	80043bc <_sbrk>
 8009d74:	1c43      	adds	r3, r0, #1
 8009d76:	d102      	bne.n	8009d7e <_sbrk_r+0x1a>
 8009d78:	682b      	ldr	r3, [r5, #0]
 8009d7a:	b103      	cbz	r3, 8009d7e <_sbrk_r+0x1a>
 8009d7c:	6023      	str	r3, [r4, #0]
 8009d7e:	bd38      	pop	{r3, r4, r5, pc}
 8009d80:	2000068c 	.word	0x2000068c

08009d84 <__malloc_lock>:
 8009d84:	4801      	ldr	r0, [pc, #4]	; (8009d8c <__malloc_lock+0x8>)
 8009d86:	f000 b809 	b.w	8009d9c <__retarget_lock_acquire_recursive>
 8009d8a:	bf00      	nop
 8009d8c:	20000694 	.word	0x20000694

08009d90 <__malloc_unlock>:
 8009d90:	4801      	ldr	r0, [pc, #4]	; (8009d98 <__malloc_unlock+0x8>)
 8009d92:	f000 b804 	b.w	8009d9e <__retarget_lock_release_recursive>
 8009d96:	bf00      	nop
 8009d98:	20000694 	.word	0x20000694

08009d9c <__retarget_lock_acquire_recursive>:
 8009d9c:	4770      	bx	lr

08009d9e <__retarget_lock_release_recursive>:
 8009d9e:	4770      	bx	lr

08009da0 <sqrt>:
 8009da0:	b538      	push	{r3, r4, r5, lr}
 8009da2:	ed2d 8b02 	vpush	{d8}
 8009da6:	ec55 4b10 	vmov	r4, r5, d0
 8009daa:	f000 f82d 	bl	8009e08 <__ieee754_sqrt>
 8009dae:	4b15      	ldr	r3, [pc, #84]	; (8009e04 <sqrt+0x64>)
 8009db0:	eeb0 8a40 	vmov.f32	s16, s0
 8009db4:	eef0 8a60 	vmov.f32	s17, s1
 8009db8:	f993 3000 	ldrsb.w	r3, [r3]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	d019      	beq.n	8009df4 <sqrt+0x54>
 8009dc0:	4622      	mov	r2, r4
 8009dc2:	462b      	mov	r3, r5
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	f7f6 fe5c 	bl	8000a84 <__aeabi_dcmpun>
 8009dcc:	b990      	cbnz	r0, 8009df4 <sqrt+0x54>
 8009dce:	2200      	movs	r2, #0
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	f7f6 fe2d 	bl	8000a34 <__aeabi_dcmplt>
 8009dda:	b158      	cbz	r0, 8009df4 <sqrt+0x54>
 8009ddc:	f7ff ff18 	bl	8009c10 <__errno>
 8009de0:	2321      	movs	r3, #33	; 0x21
 8009de2:	6003      	str	r3, [r0, #0]
 8009de4:	2200      	movs	r2, #0
 8009de6:	2300      	movs	r3, #0
 8009de8:	4610      	mov	r0, r2
 8009dea:	4619      	mov	r1, r3
 8009dec:	f7f6 fcda 	bl	80007a4 <__aeabi_ddiv>
 8009df0:	ec41 0b18 	vmov	d8, r0, r1
 8009df4:	eeb0 0a48 	vmov.f32	s0, s16
 8009df8:	eef0 0a68 	vmov.f32	s1, s17
 8009dfc:	ecbd 8b02 	vpop	{d8}
 8009e00:	bd38      	pop	{r3, r4, r5, pc}
 8009e02:	bf00      	nop
 8009e04:	20000088 	.word	0x20000088

08009e08 <__ieee754_sqrt>:
 8009e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e0c:	ec55 4b10 	vmov	r4, r5, d0
 8009e10:	4e56      	ldr	r6, [pc, #344]	; (8009f6c <__ieee754_sqrt+0x164>)
 8009e12:	43ae      	bics	r6, r5
 8009e14:	ee10 0a10 	vmov	r0, s0
 8009e18:	ee10 3a10 	vmov	r3, s0
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	462a      	mov	r2, r5
 8009e20:	d110      	bne.n	8009e44 <__ieee754_sqrt+0x3c>
 8009e22:	ee10 2a10 	vmov	r2, s0
 8009e26:	462b      	mov	r3, r5
 8009e28:	f7f6 fb92 	bl	8000550 <__aeabi_dmul>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	4620      	mov	r0, r4
 8009e32:	4629      	mov	r1, r5
 8009e34:	f7f6 f9d6 	bl	80001e4 <__adddf3>
 8009e38:	4604      	mov	r4, r0
 8009e3a:	460d      	mov	r5, r1
 8009e3c:	ec45 4b10 	vmov	d0, r4, r5
 8009e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e44:	2d00      	cmp	r5, #0
 8009e46:	dc10      	bgt.n	8009e6a <__ieee754_sqrt+0x62>
 8009e48:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009e4c:	4330      	orrs	r0, r6
 8009e4e:	d0f5      	beq.n	8009e3c <__ieee754_sqrt+0x34>
 8009e50:	b15d      	cbz	r5, 8009e6a <__ieee754_sqrt+0x62>
 8009e52:	ee10 2a10 	vmov	r2, s0
 8009e56:	462b      	mov	r3, r5
 8009e58:	ee10 0a10 	vmov	r0, s0
 8009e5c:	f7f6 f9c0 	bl	80001e0 <__aeabi_dsub>
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	f7f6 fc9e 	bl	80007a4 <__aeabi_ddiv>
 8009e68:	e7e6      	b.n	8009e38 <__ieee754_sqrt+0x30>
 8009e6a:	1509      	asrs	r1, r1, #20
 8009e6c:	d076      	beq.n	8009f5c <__ieee754_sqrt+0x154>
 8009e6e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009e72:	07ce      	lsls	r6, r1, #31
 8009e74:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009e78:	bf5e      	ittt	pl
 8009e7a:	0fda      	lsrpl	r2, r3, #31
 8009e7c:	005b      	lslpl	r3, r3, #1
 8009e7e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009e82:	0fda      	lsrs	r2, r3, #31
 8009e84:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009e88:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	106d      	asrs	r5, r5, #1
 8009e90:	005b      	lsls	r3, r3, #1
 8009e92:	f04f 0e16 	mov.w	lr, #22
 8009e96:	4684      	mov	ip, r0
 8009e98:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e9c:	eb0c 0401 	add.w	r4, ip, r1
 8009ea0:	4294      	cmp	r4, r2
 8009ea2:	bfde      	ittt	le
 8009ea4:	1b12      	suble	r2, r2, r4
 8009ea6:	eb04 0c01 	addle.w	ip, r4, r1
 8009eaa:	1840      	addle	r0, r0, r1
 8009eac:	0052      	lsls	r2, r2, #1
 8009eae:	f1be 0e01 	subs.w	lr, lr, #1
 8009eb2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009eb6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009eba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009ebe:	d1ed      	bne.n	8009e9c <__ieee754_sqrt+0x94>
 8009ec0:	4671      	mov	r1, lr
 8009ec2:	2720      	movs	r7, #32
 8009ec4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009ec8:	4562      	cmp	r2, ip
 8009eca:	eb04 060e 	add.w	r6, r4, lr
 8009ece:	dc02      	bgt.n	8009ed6 <__ieee754_sqrt+0xce>
 8009ed0:	d113      	bne.n	8009efa <__ieee754_sqrt+0xf2>
 8009ed2:	429e      	cmp	r6, r3
 8009ed4:	d811      	bhi.n	8009efa <__ieee754_sqrt+0xf2>
 8009ed6:	2e00      	cmp	r6, #0
 8009ed8:	eb06 0e04 	add.w	lr, r6, r4
 8009edc:	da43      	bge.n	8009f66 <__ieee754_sqrt+0x15e>
 8009ede:	f1be 0f00 	cmp.w	lr, #0
 8009ee2:	db40      	blt.n	8009f66 <__ieee754_sqrt+0x15e>
 8009ee4:	f10c 0801 	add.w	r8, ip, #1
 8009ee8:	eba2 020c 	sub.w	r2, r2, ip
 8009eec:	429e      	cmp	r6, r3
 8009eee:	bf88      	it	hi
 8009ef0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009ef4:	1b9b      	subs	r3, r3, r6
 8009ef6:	4421      	add	r1, r4
 8009ef8:	46c4      	mov	ip, r8
 8009efa:	0052      	lsls	r2, r2, #1
 8009efc:	3f01      	subs	r7, #1
 8009efe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009f02:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009f06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f0a:	d1dd      	bne.n	8009ec8 <__ieee754_sqrt+0xc0>
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	d006      	beq.n	8009f1e <__ieee754_sqrt+0x116>
 8009f10:	1c4c      	adds	r4, r1, #1
 8009f12:	bf13      	iteet	ne
 8009f14:	3101      	addne	r1, #1
 8009f16:	3001      	addeq	r0, #1
 8009f18:	4639      	moveq	r1, r7
 8009f1a:	f021 0101 	bicne.w	r1, r1, #1
 8009f1e:	1043      	asrs	r3, r0, #1
 8009f20:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009f24:	0849      	lsrs	r1, r1, #1
 8009f26:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009f2a:	07c2      	lsls	r2, r0, #31
 8009f2c:	bf48      	it	mi
 8009f2e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009f32:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009f36:	460c      	mov	r4, r1
 8009f38:	463d      	mov	r5, r7
 8009f3a:	e77f      	b.n	8009e3c <__ieee754_sqrt+0x34>
 8009f3c:	0ada      	lsrs	r2, r3, #11
 8009f3e:	3815      	subs	r0, #21
 8009f40:	055b      	lsls	r3, r3, #21
 8009f42:	2a00      	cmp	r2, #0
 8009f44:	d0fa      	beq.n	8009f3c <__ieee754_sqrt+0x134>
 8009f46:	02d7      	lsls	r7, r2, #11
 8009f48:	d50a      	bpl.n	8009f60 <__ieee754_sqrt+0x158>
 8009f4a:	f1c1 0420 	rsb	r4, r1, #32
 8009f4e:	fa23 f404 	lsr.w	r4, r3, r4
 8009f52:	1e4d      	subs	r5, r1, #1
 8009f54:	408b      	lsls	r3, r1
 8009f56:	4322      	orrs	r2, r4
 8009f58:	1b41      	subs	r1, r0, r5
 8009f5a:	e788      	b.n	8009e6e <__ieee754_sqrt+0x66>
 8009f5c:	4608      	mov	r0, r1
 8009f5e:	e7f0      	b.n	8009f42 <__ieee754_sqrt+0x13a>
 8009f60:	0052      	lsls	r2, r2, #1
 8009f62:	3101      	adds	r1, #1
 8009f64:	e7ef      	b.n	8009f46 <__ieee754_sqrt+0x13e>
 8009f66:	46e0      	mov	r8, ip
 8009f68:	e7be      	b.n	8009ee8 <__ieee754_sqrt+0xe0>
 8009f6a:	bf00      	nop
 8009f6c:	7ff00000 	.word	0x7ff00000

08009f70 <_init>:
 8009f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f72:	bf00      	nop
 8009f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f76:	bc08      	pop	{r3}
 8009f78:	469e      	mov	lr, r3
 8009f7a:	4770      	bx	lr

08009f7c <_fini>:
 8009f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7e:	bf00      	nop
 8009f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f82:	bc08      	pop	{r3}
 8009f84:	469e      	mov	lr, r3
 8009f86:	4770      	bx	lr
