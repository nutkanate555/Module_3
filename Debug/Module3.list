
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1cc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800a364  0800a364  0001a364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a39c  0800a39c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a39c  0800a39c  0001a39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3a4  0800a3a4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3a4  0800a3a4  0001a3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3a8  0800a3a8  0001a3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800a3ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  20000090  0800a438  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  0800a438  000206dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201f  00000000  00000000  000310e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00033108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00034150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f71  00000000  00000000  00035108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e6f  00000000  00000000  0004c079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091e89  00000000  00000000  0005dee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efd71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b18  00000000  00000000  000efdc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a34c 	.word	0x0800a34c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800a34c 	.word	0x0800a34c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b96e 	b.w	80010a0 <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f806 	bl	8000ddc <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	4604      	mov	r4, r0
 8000de4:	468c      	mov	ip, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 8083 	bne.w	8000ef2 <__udivmoddi4+0x116>
 8000dec:	428a      	cmp	r2, r1
 8000dee:	4617      	mov	r7, r2
 8000df0:	d947      	bls.n	8000e82 <__udivmoddi4+0xa6>
 8000df2:	fab2 f282 	clz	r2, r2
 8000df6:	b142      	cbz	r2, 8000e0a <__udivmoddi4+0x2e>
 8000df8:	f1c2 0020 	rsb	r0, r2, #32
 8000dfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4097      	lsls	r7, r2
 8000e04:	ea40 0c01 	orr.w	ip, r0, r1
 8000e08:	4094      	lsls	r4, r2
 8000e0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e0e:	0c23      	lsrs	r3, r4, #16
 8000e10:	fbbc f6f8 	udiv	r6, ip, r8
 8000e14:	fa1f fe87 	uxth.w	lr, r7
 8000e18:	fb08 c116 	mls	r1, r8, r6, ip
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f10e 	mul.w	r1, r6, lr
 8000e24:	4299      	cmp	r1, r3
 8000e26:	d909      	bls.n	8000e3c <__udivmoddi4+0x60>
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 8119 	bcs.w	8001064 <__udivmoddi4+0x288>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 8116 	bls.w	8001064 <__udivmoddi4+0x288>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	443b      	add	r3, r7
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x8c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	f080 8105 	bcs.w	8001068 <__udivmoddi4+0x28c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8102 	bls.w	8001068 <__udivmoddi4+0x28c>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6c:	eba4 040e 	sub.w	r4, r4, lr
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa0>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	b902      	cbnz	r2, 8000e86 <__udivmoddi4+0xaa>
 8000e84:	deff      	udf	#255	; 0xff
 8000e86:	fab2 f282 	clz	r2, r2
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d150      	bne.n	8000f30 <__udivmoddi4+0x154>
 8000e8e:	1bcb      	subs	r3, r1, r7
 8000e90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	2601      	movs	r6, #1
 8000e9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e9e:	0c21      	lsrs	r1, r4, #16
 8000ea0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb08 f30c 	mul.w	r3, r8, ip
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d907      	bls.n	8000ec0 <__udivmoddi4+0xe4>
 8000eb0:	1879      	adds	r1, r7, r1
 8000eb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0xe2>
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	f200 80e9 	bhi.w	8001090 <__udivmoddi4+0x2b4>
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	1ac9      	subs	r1, r1, r3
 8000ec2:	b2a3      	uxth	r3, r4
 8000ec4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ecc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed0:	fb08 f800 	mul.w	r8, r8, r0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x10c>
 8000ed8:	193c      	adds	r4, r7, r4
 8000eda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x10a>
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	f200 80d9 	bhi.w	8001098 <__udivmoddi4+0x2bc>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	eba4 0408 	sub.w	r4, r4, r8
 8000eec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef0:	e7bf      	b.n	8000e72 <__udivmoddi4+0x96>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d909      	bls.n	8000f0a <__udivmoddi4+0x12e>
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	f000 80b1 	beq.w	800105e <__udivmoddi4+0x282>
 8000efc:	2600      	movs	r6, #0
 8000efe:	e9c5 0100 	strd	r0, r1, [r5]
 8000f02:	4630      	mov	r0, r6
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	fab3 f683 	clz	r6, r3
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d14a      	bne.n	8000fa8 <__udivmoddi4+0x1cc>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d302      	bcc.n	8000f1c <__udivmoddi4+0x140>
 8000f16:	4282      	cmp	r2, r0
 8000f18:	f200 80b8 	bhi.w	800108c <__udivmoddi4+0x2b0>
 8000f1c:	1a84      	subs	r4, r0, r2
 8000f1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000f22:	2001      	movs	r0, #1
 8000f24:	468c      	mov	ip, r1
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d0a8      	beq.n	8000e7c <__udivmoddi4+0xa0>
 8000f2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f2e:	e7a5      	b.n	8000e7c <__udivmoddi4+0xa0>
 8000f30:	f1c2 0320 	rsb	r3, r2, #32
 8000f34:	fa20 f603 	lsr.w	r6, r0, r3
 8000f38:	4097      	lsls	r7, r2
 8000f3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000f3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f42:	40d9      	lsrs	r1, r3
 8000f44:	4330      	orrs	r0, r6
 8000f46:	0c03      	lsrs	r3, r0, #16
 8000f48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f4c:	fa1f f887 	uxth.w	r8, r7
 8000f50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f58:	fb06 f108 	mul.w	r1, r6, r8
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f62:	d909      	bls.n	8000f78 <__udivmoddi4+0x19c>
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f6a:	f080 808d 	bcs.w	8001088 <__udivmoddi4+0x2ac>
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	f240 808a 	bls.w	8001088 <__udivmoddi4+0x2ac>
 8000f74:	3e02      	subs	r6, #2
 8000f76:	443b      	add	r3, r7
 8000f78:	1a5b      	subs	r3, r3, r1
 8000f7a:	b281      	uxth	r1, r0
 8000f7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f88:	fb00 f308 	mul.w	r3, r0, r8
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d907      	bls.n	8000fa0 <__udivmoddi4+0x1c4>
 8000f90:	1879      	adds	r1, r7, r1
 8000f92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f96:	d273      	bcs.n	8001080 <__udivmoddi4+0x2a4>
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d971      	bls.n	8001080 <__udivmoddi4+0x2a4>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4439      	add	r1, r7
 8000fa0:	1acb      	subs	r3, r1, r3
 8000fa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fa6:	e778      	b.n	8000e9a <__udivmoddi4+0xbe>
 8000fa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000fac:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fb4:	431c      	orrs	r4, r3
 8000fb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fba:	fa01 f306 	lsl.w	r3, r1, r6
 8000fbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fc6:	431f      	orrs	r7, r3
 8000fc8:	0c3b      	lsrs	r3, r7, #16
 8000fca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fce:	fa1f f884 	uxth.w	r8, r4
 8000fd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fda:	fb09 fa08 	mul.w	sl, r9, r8
 8000fde:	458a      	cmp	sl, r1
 8000fe0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fe4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0x220>
 8000fea:	1861      	adds	r1, r4, r1
 8000fec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff0:	d248      	bcs.n	8001084 <__udivmoddi4+0x2a8>
 8000ff2:	458a      	cmp	sl, r1
 8000ff4:	d946      	bls.n	8001084 <__udivmoddi4+0x2a8>
 8000ff6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ffa:	4421      	add	r1, r4
 8000ffc:	eba1 010a 	sub.w	r1, r1, sl
 8001000:	b2bf      	uxth	r7, r7
 8001002:	fbb1 f0fe 	udiv	r0, r1, lr
 8001006:	fb0e 1110 	mls	r1, lr, r0, r1
 800100a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800100e:	fb00 f808 	mul.w	r8, r0, r8
 8001012:	45b8      	cmp	r8, r7
 8001014:	d907      	bls.n	8001026 <__udivmoddi4+0x24a>
 8001016:	19e7      	adds	r7, r4, r7
 8001018:	f100 31ff 	add.w	r1, r0, #4294967295
 800101c:	d22e      	bcs.n	800107c <__udivmoddi4+0x2a0>
 800101e:	45b8      	cmp	r8, r7
 8001020:	d92c      	bls.n	800107c <__udivmoddi4+0x2a0>
 8001022:	3802      	subs	r0, #2
 8001024:	4427      	add	r7, r4
 8001026:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800102a:	eba7 0708 	sub.w	r7, r7, r8
 800102e:	fba0 8902 	umull	r8, r9, r0, r2
 8001032:	454f      	cmp	r7, r9
 8001034:	46c6      	mov	lr, r8
 8001036:	4649      	mov	r1, r9
 8001038:	d31a      	bcc.n	8001070 <__udivmoddi4+0x294>
 800103a:	d017      	beq.n	800106c <__udivmoddi4+0x290>
 800103c:	b15d      	cbz	r5, 8001056 <__udivmoddi4+0x27a>
 800103e:	ebb3 020e 	subs.w	r2, r3, lr
 8001042:	eb67 0701 	sbc.w	r7, r7, r1
 8001046:	fa07 fc0c 	lsl.w	ip, r7, ip
 800104a:	40f2      	lsrs	r2, r6
 800104c:	ea4c 0202 	orr.w	r2, ip, r2
 8001050:	40f7      	lsrs	r7, r6
 8001052:	e9c5 2700 	strd	r2, r7, [r5]
 8001056:	2600      	movs	r6, #0
 8001058:	4631      	mov	r1, r6
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105e:	462e      	mov	r6, r5
 8001060:	4628      	mov	r0, r5
 8001062:	e70b      	b.n	8000e7c <__udivmoddi4+0xa0>
 8001064:	4606      	mov	r6, r0
 8001066:	e6e9      	b.n	8000e3c <__udivmoddi4+0x60>
 8001068:	4618      	mov	r0, r3
 800106a:	e6fd      	b.n	8000e68 <__udivmoddi4+0x8c>
 800106c:	4543      	cmp	r3, r8
 800106e:	d2e5      	bcs.n	800103c <__udivmoddi4+0x260>
 8001070:	ebb8 0e02 	subs.w	lr, r8, r2
 8001074:	eb69 0104 	sbc.w	r1, r9, r4
 8001078:	3801      	subs	r0, #1
 800107a:	e7df      	b.n	800103c <__udivmoddi4+0x260>
 800107c:	4608      	mov	r0, r1
 800107e:	e7d2      	b.n	8001026 <__udivmoddi4+0x24a>
 8001080:	4660      	mov	r0, ip
 8001082:	e78d      	b.n	8000fa0 <__udivmoddi4+0x1c4>
 8001084:	4681      	mov	r9, r0
 8001086:	e7b9      	b.n	8000ffc <__udivmoddi4+0x220>
 8001088:	4666      	mov	r6, ip
 800108a:	e775      	b.n	8000f78 <__udivmoddi4+0x19c>
 800108c:	4630      	mov	r0, r6
 800108e:	e74a      	b.n	8000f26 <__udivmoddi4+0x14a>
 8001090:	f1ac 0c02 	sub.w	ip, ip, #2
 8001094:	4439      	add	r1, r7
 8001096:	e713      	b.n	8000ec0 <__udivmoddi4+0xe4>
 8001098:	3802      	subs	r0, #2
 800109a:	443c      	add	r4, r7
 800109c:	e724      	b.n	8000ee8 <__udivmoddi4+0x10c>
 800109e:	bf00      	nop

080010a0 <__aeabi_idiv0>:
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b5b0      	push	{r4, r5, r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010aa:	f003 fbeb 	bl	8004884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ae:	f000 f97d 	bl	80013ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b2:	f000 fb7f 	bl	80017b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80010b6:	f000 fb55 	bl	8001764 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010ba:	f000 fb27 	bl	800170c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010be:	f000 fa0b 	bl	80014d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010c2:	f000 fa61 	bl	8001588 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010c6:	f000 faab 	bl	8001620 <MX_TIM3_Init>
  MX_I2C1_Init();
 80010ca:	f000 f9d7 	bl	800147c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80010ce:	48a6      	ldr	r0, [pc, #664]	; (8001368 <main+0x2c4>)
 80010d0:	f006 ffa6 	bl	8008020 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010d4:	213c      	movs	r1, #60	; 0x3c
 80010d6:	48a5      	ldr	r0, [pc, #660]	; (800136c <main+0x2c8>)
 80010d8:	f007 f9b4 	bl	8008444 <HAL_TIM_Encoder_Start>

	// start PWM
  HAL_TIM_Base_Start(&htim3);
 80010dc:	48a4      	ldr	r0, [pc, #656]	; (8001370 <main+0x2cc>)
 80010de:	f006 ff45 	bl	8007f6c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010e2:	2100      	movs	r1, #0
 80010e4:	48a2      	ldr	r0, [pc, #648]	; (8001370 <main+0x2cc>)
 80010e6:	f007 f857 	bl	8008198 <HAL_TIM_PWM_Start>

  ///Init Data
  ConverterUnitSystemStructureInit(&CUSSStruc);
 80010ea:	48a2      	ldr	r0, [pc, #648]	; (8001374 <main+0x2d0>)
 80010ec:	f000 fd70 	bl	8001bd0 <ConverterUnitSystemStructureInit>
  TrajectoryGenerationStructureInit(&TrjStruc, &CUSSStruc);
 80010f0:	49a0      	ldr	r1, [pc, #640]	; (8001374 <main+0x2d0>)
 80010f2:	48a1      	ldr	r0, [pc, #644]	; (8001378 <main+0x2d4>)
 80010f4:	f000 fd84 	bl	8001c00 <TrajectoryGenerationStructureInit>

  StabilizerPIDLoad();
 80010f8:	f000 fe7e 	bl	8001df8 <StabilizerPIDLoad>
  LinkMovingPIDLoad();
 80010fc:	f000 fe24 	bl	8001d48 <LinkMovingPIDLoad>

  Encoder_SetHome_Position();
 8001100:	f000 fce4 	bl	8001acc <Encoder_SetHome_Position>

  ///UART init
  UART2.huart = &huart2;
 8001104:	4b9d      	ldr	r3, [pc, #628]	; (800137c <main+0x2d8>)
 8001106:	4a9e      	ldr	r2, [pc, #632]	; (8001380 <main+0x2dc>)
 8001108:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 800110a:	4b9c      	ldr	r3, [pc, #624]	; (800137c <main+0x2d8>)
 800110c:	22ff      	movs	r2, #255	; 0xff
 800110e:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8001110:	4b9a      	ldr	r3, [pc, #616]	; (800137c <main+0x2d8>)
 8001112:	22ff      	movs	r2, #255	; 0xff
 8001114:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 8001116:	4899      	ldr	r0, [pc, #612]	; (800137c <main+0x2d8>)
 8001118:	f001 ff2a 	bl	8002f70 <UARTInit>
  UARTResetStart(&UART2);
 800111c:	4897      	ldr	r0, [pc, #604]	; (800137c <main+0x2d8>)
 800111e:	f001 ff4f 	bl	8002fc0 <UARTResetStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int16_t inputChar = UARTReadChar(&UART2);
 8001122:	4896      	ldr	r0, [pc, #600]	; (800137c <main+0x2d8>)
 8001124:	f001 ff70 	bl	8003008 <UARTReadChar>
 8001128:	4603      	mov	r3, r0
 800112a:	80fb      	strh	r3, [r7, #6]
	  if (inputChar != -1)
 800112c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001134:	d005      	beq.n	8001142 <main+0x9e>
	  {
		  Munmunbot_Protocol(inputChar, &UART2);
 8001136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113a:	4990      	ldr	r1, [pc, #576]	; (800137c <main+0x2d8>)
 800113c:	4618      	mov	r0, r3
 800113e:	f002 f84b 	bl	80031d8 <Munmunbot_Protocol>

	  }

	  switch (Munmunbot_State)
 8001142:	4b90      	ldr	r3, [pc, #576]	; (8001384 <main+0x2e0>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b07      	cmp	r3, #7
 8001148:	f200 80f4 	bhi.w	8001334 <main+0x290>
 800114c:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <main+0xb0>)
 800114e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001152:	bf00      	nop
 8001154:	08001175 	.word	0x08001175
 8001158:	080011a3 	.word	0x080011a3
 800115c:	080011bb 	.word	0x080011bb
 8001160:	080011d5 	.word	0x080011d5
 8001164:	080011ef 	.word	0x080011ef
 8001168:	08001237 	.word	0x08001237
 800116c:	08001303 	.word	0x08001303
 8001170:	0800131b 	.word	0x0800131b
	  {
	  	  case STATE_Disconnected:
	  		  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0)
 8001174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001178:	4883      	ldr	r0, [pc, #524]	; (8001388 <main+0x2e4>)
 800117a:	f004 fa9b 	bl	80056b4 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d103      	bne.n	800118c <main+0xe8>
	  		  {
	  			  LAMP_ON(0);
 8001184:	2000      	movs	r0, #0
 8001186:	f002 fcdb 	bl	8003b40 <LAMP_ON>
 800118a:	e002      	b.n	8001192 <main+0xee>
	  		  }
	  		  else
	  		  {
	  			  LAMP_ON(4);
 800118c:	2004      	movs	r0, #4
 800118e:	f002 fcd7 	bl	8003b40 <LAMP_ON>
	  		  }
	  		  UpdateMunmunBotState();
 8001192:	f002 ff97 	bl	80040c4 <UpdateMunmunBotState>
	  		  sethomeTrigger = 0;
 8001196:	4b7d      	ldr	r3, [pc, #500]	; (800138c <main+0x2e8>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
	  		  Emergency_switch_trigger();
 800119c:	f002 fd40 	bl	8003c20 <Emergency_switch_trigger>
	  		  break;
 80011a0:	e0c8      	b.n	8001334 <main+0x290>

	  	  case STATE_Idle:
	  		  LAMP_ON(1);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f002 fccc 	bl	8003b40 <LAMP_ON>
//	  		  Stabilizing_the_LINK( StabilizePosition );
	  		  if ( sethomeTrigger == 1 )
 80011a8:	4b78      	ldr	r3, [pc, #480]	; (800138c <main+0x2e8>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d101      	bne.n	80011b4 <main+0x110>
	  		  {
	  			  Encoder_SetHome_Position();
 80011b0:	f000 fc8c 	bl	8001acc <Encoder_SetHome_Position>
	  		  }
	  		  Emergency_switch_trigger();
 80011b4:	f002 fd34 	bl	8003c20 <Emergency_switch_trigger>
		  	  break;
 80011b8:	e0bc      	b.n	8001334 <main+0x290>

	  	  case STATE_PrepareDATA:
	  		  sethomeTrigger = 0;
 80011ba:	4b74      	ldr	r3, [pc, #464]	; (800138c <main+0x2e8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
	  		  UpdateMunmunBotState();
 80011c0:	f002 ff80 	bl	80040c4 <UpdateMunmunBotState>
	  		  LAMP_ON(2);
 80011c4:	2002      	movs	r0, #2
 80011c6:	f002 fcbb 	bl	8003b40 <LAMP_ON>
	  		  TrajectoryGenerationPrepareDATA();
 80011ca:	f000 fe7d 	bl	8001ec8 <TrajectoryGenerationPrepareDATA>
	  		  Emergency_switch_trigger();
 80011ce:	f002 fd27 	bl	8003c20 <Emergency_switch_trigger>
		  	  break;
 80011d2:	e0af      	b.n	8001334 <main+0x290>

	  	  case STATE_Calculation:
	  		  LAMP_ON(2);
 80011d4:	2002      	movs	r0, #2
 80011d6:	f002 fcb3 	bl	8003b40 <LAMP_ON>
	  		  UpdateMunmunBotState();
 80011da:	f002 ff73 	bl	80040c4 <UpdateMunmunBotState>
	  		  TrajectoryGenerationCalculation();
 80011de:	f000 ffcf 	bl	8002180 <TrajectoryGenerationCalculation>
	  		  Munmunbot_State = STATE_Link_Moving;
 80011e2:	4b68      	ldr	r3, [pc, #416]	; (8001384 <main+0x2e0>)
 80011e4:	2204      	movs	r2, #4
 80011e6:	701a      	strb	r2, [r3, #0]
	  		  Emergency_switch_trigger();
 80011e8:	f002 fd1a 	bl	8003c20 <Emergency_switch_trigger>
	  		  break;
 80011ec:	e0a2      	b.n	8001334 <main+0x290>

	   	  case STATE_Link_Moving:
	   		  LAMP_ON(2);
 80011ee:	2002      	movs	r0, #2
 80011f0:	f002 fca6 	bl	8003b40 <LAMP_ON>
	   		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 80011f4:	f000 fcd2 	bl	8001b9c <micros>
 80011f8:	4b5f      	ldr	r3, [pc, #380]	; (8001378 <main+0x2d4>)
 80011fa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80011fe:	1a84      	subs	r4, r0, r2
 8001200:	eb61 0503 	sbc.w	r5, r1, r3
 8001204:	4b5c      	ldr	r3, [pc, #368]	; (8001378 <main+0x2d4>)
 8001206:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800120a:	429d      	cmp	r5, r3
 800120c:	bf08      	it	eq
 800120e:	4294      	cmpeq	r4, r2
 8001210:	d30e      	bcc.n	8001230 <main+0x18c>
	   		  {
	   			  Controlling_the_LINK();
 8001212:	f002 fd5f 	bl	8003cd4 <Controlling_the_LINK>


				  if (Moving_Link_Task_Flag == 1)
 8001216:	4b5e      	ldr	r3, [pc, #376]	; (8001390 <main+0x2ec>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d108      	bne.n	8001230 <main+0x18c>
				  {
					  Munmunbot_State = STATE_Stabilized_Link;
 800121e:	4b59      	ldr	r3, [pc, #356]	; (8001384 <main+0x2e0>)
 8001220:	2205      	movs	r2, #5
 8001222:	701a      	strb	r2, [r3, #0]
					  StabilizePosition = TrjStruc.Desire_Theta;
 8001224:	4b54      	ldr	r3, [pc, #336]	; (8001378 <main+0x2d4>)
 8001226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001228:	4a5a      	ldr	r2, [pc, #360]	; (8001394 <main+0x2f0>)
 800122a:	6013      	str	r3, [r2, #0]
					  PID_Reset();
 800122c:	f002 fc32 	bl	8003a94 <PID_Reset>
				  }
	   		  }
	  		  Emergency_switch_trigger();
 8001230:	f002 fcf6 	bl	8003c20 <Emergency_switch_trigger>
	  		  break;
 8001234:	e07e      	b.n	8001334 <main+0x290>

	   	  case STATE_Stabilized_Link:
	   		  LAMP_ON(3);
 8001236:	2003      	movs	r0, #3
 8001238:	f002 fc82 	bl	8003b40 <LAMP_ON>
//	   		  Stabilizing_the_LINK( StabilizePosition );
	   		  HackTheLink( StabilizePosition );
 800123c:	4b55      	ldr	r3, [pc, #340]	; (8001394 <main+0x2f0>)
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	eeb0 0a67 	vmov.f32	s0, s15
 8001246:	f002 fe2d 	bl	8003ea4 <HackTheLink>
			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 800124a:	4b53      	ldr	r3, [pc, #332]	; (8001398 <main+0x2f4>)
 800124c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001250:	4b49      	ldr	r3, [pc, #292]	; (8001378 <main+0x2d4>)
 8001252:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8001256:	4b51      	ldr	r3, [pc, #324]	; (800139c <main+0x2f8>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800126a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126e:	d845      	bhi.n	80012fc <main+0x258>
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8001270:	4b49      	ldr	r3, [pc, #292]	; (8001398 <main+0x2f4>)
 8001272:	ed93 7a08 	vldr	s14, [r3, #32]
 8001276:	4b40      	ldr	r3, [pc, #256]	; (8001378 <main+0x2d4>)
 8001278:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800127c:	4b47      	ldr	r3, [pc, #284]	; (800139c <main+0x2f8>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001288:	ee76 7ae7 	vsub.f32	s15, s13, s15
			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 800128c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001294:	db32      	blt.n	80012fc <main+0x258>
					  (Moving_Link_Task_Flag == 1))
 8001296:	4b3e      	ldr	r3, [pc, #248]	; (8001390 <main+0x2ec>)
 8001298:	781b      	ldrb	r3, [r3, #0]
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 800129a:	2b01      	cmp	r3, #1
 800129c:	d12e      	bne.n	80012fc <main+0x258>
			  {
				  if(MovingLinkMode == LMM_Set_Pos_Directly)
 800129e:	4b40      	ldr	r3, [pc, #256]	; (80013a0 <main+0x2fc>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d10f      	bne.n	80012c6 <main+0x222>
				  {
					Munmunbot_State = STATE_Idle;
 80012a6:	4b37      	ldr	r3, [pc, #220]	; (8001384 <main+0x2e0>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
					MovingLinkMode = LMM_Not_Set;
 80012ac:	4b3c      	ldr	r3, [pc, #240]	; (80013a0 <main+0x2fc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
					StabilizePosition = TrjStruc.Desire_Theta;
 80012b2:	4b31      	ldr	r3, [pc, #196]	; (8001378 <main+0x2d4>)
 80012b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012b6:	4a37      	ldr	r2, [pc, #220]	; (8001394 <main+0x2f0>)
 80012b8:	6013      	str	r3, [r2, #0]
					PID_Reset();
 80012ba:	f002 fbeb 	bl	8003a94 <PID_Reset>
					ACK2Return(&UART2);
 80012be:	482f      	ldr	r0, [pc, #188]	; (800137c <main+0x2d8>)
 80012c0:	f001 ff76 	bl	80031b0 <ACK2Return>
 80012c4:	e013      	b.n	80012ee <main+0x24a>
				  }

				  else if ((MovingLinkMode == LMM_Set_Goal_1_Station) || (MovingLinkMode == LMM_Set_Goal_n_Station))
 80012c6:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <main+0x2fc>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d003      	beq.n	80012d6 <main+0x232>
 80012ce:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <main+0x2fc>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d10b      	bne.n	80012ee <main+0x24a>
				  {
					Munmunbot_State = STATE_End_Effector_Working;
 80012d6:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <main+0x2e0>)
 80012d8:	2206      	movs	r2, #6
 80012da:	701a      	strb	r2, [r3, #0]
					GripperState = 0;
 80012dc:	4b31      	ldr	r3, [pc, #196]	; (80013a4 <main+0x300>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
					StabilizePosition = TrjStruc.Desire_Theta;
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <main+0x2d4>)
 80012e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012e6:	4a2b      	ldr	r2, [pc, #172]	; (8001394 <main+0x2f0>)
 80012e8:	6013      	str	r3, [r2, #0]
					PID_Reset();
 80012ea:	f002 fbd3 	bl	8003a94 <PID_Reset>
				  }
				 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <main+0x2cc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2200      	movs	r2, #0
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34
				 Moving_Link_Task_Flag = 0;
 80012f6:	4b26      	ldr	r3, [pc, #152]	; (8001390 <main+0x2ec>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
			  }
	   		  Emergency_switch_trigger();
 80012fc:	f002 fc90 	bl	8003c20 <Emergency_switch_trigger>
	   		  break;
 8001300:	e018      	b.n	8001334 <main+0x290>

	  	  case STATE_End_Effector_Working:
	  		  Stabilizing_the_LINK( StabilizePosition );
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <main+0x2f0>)
 8001304:	edd3 7a00 	vldr	s15, [r3]
 8001308:	eeb0 0a67 	vmov.f32	s0, s15
 800130c:	f002 fd4a 	bl	8003da4 <Stabilizing_the_LINK>
	  		  EndEffectorWorkingState();
 8001310:	f002 fef6 	bl	8004100 <EndEffectorWorkingState>
	  		  Emergency_switch_trigger();
 8001314:	f002 fc84 	bl	8003c20 <Emergency_switch_trigger>
	  		  break;
 8001318:	e00c      	b.n	8001334 <main+0x290>

	  	  case STATE_SetHome:
	  		  sethomeTrigger = 0;
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <main+0x2e8>)
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
	  		  LAMP_ON(2);
 8001320:	2002      	movs	r0, #2
 8001322:	f002 fc0d 	bl	8003b40 <LAMP_ON>
	  		  UpdateMunmunBotState();
 8001326:	f002 fecd 	bl	80040c4 <UpdateMunmunBotState>
	  		  SETHOME_StateMachine_Function();
 800132a:	f002 fe7f 	bl	800402c <SETHOME_StateMachine_Function>
	  		  Emergency_switch_trigger();
 800132e:	f002 fc77 	bl	8003c20 <Emergency_switch_trigger>
	  		  break;
 8001332:	bf00      	nop

	  }

	  if ( pidSetZeroFlag != 0 )
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <main+0x304>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d010      	beq.n	800135e <main+0x2ba>
	  {
		  pidSetZeroFlag = 0;
 800133c:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <main+0x304>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <main+0x2cc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2200      	movs	r2, #0
 8001348:	635a      	str	r2, [r3, #52]	; 0x34
		  TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <main+0x2f4>)
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <main+0x2d4>)
 8001350:	66d3      	str	r3, [r2, #108]	; 0x6c
		  TrjStruc.AngularVelocityDesire = 0;
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <main+0x2d4>)
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
		  PID_Reset();
 800135a:	f002 fb9b 	bl	8003a94 <PID_Reset>
	  }



	  UARTTxDumpBuffer(&UART2);
 800135e:	4807      	ldr	r0, [pc, #28]	; (800137c <main+0x2d8>)
 8001360:	f001 fe7c 	bl	800305c <UARTTxDumpBuffer>
  {
 8001364:	e6dd      	b.n	8001122 <main+0x7e>
 8001366:	bf00      	nop
 8001368:	2000063c 	.word	0x2000063c
 800136c:	200005f4 	.word	0x200005f4
 8001370:	2000054c 	.word	0x2000054c
 8001374:	20000350 	.word	0x20000350
 8001378:	200002c0 	.word	0x200002c0
 800137c:	200000b8 	.word	0x200000b8
 8001380:	20000684 	.word	0x20000684
 8001384:	200000d9 	.word	0x200000d9
 8001388:	40020400 	.word	0x40020400
 800138c:	200001e9 	.word	0x200001e9
 8001390:	200001e8 	.word	0x200001e8
 8001394:	200001f8 	.word	0x200001f8
 8001398:	20000200 	.word	0x20000200
 800139c:	20000014 	.word	0x20000014
 80013a0:	200001de 	.word	0x200001de
 80013a4:	200001eb 	.word	0x200001eb
 80013a8:	200000ac 	.word	0x200000ac

080013ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b094      	sub	sp, #80	; 0x50
 80013b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	2230      	movs	r2, #48	; 0x30
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f008 fe4e 	bl	800a05c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	4b27      	ldr	r3, [pc, #156]	; (8001474 <SystemClock_Config+0xc8>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	4a26      	ldr	r2, [pc, #152]	; (8001474 <SystemClock_Config+0xc8>)
 80013da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013de:	6413      	str	r3, [r2, #64]	; 0x40
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <SystemClock_Config+0xc8>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <SystemClock_Config+0xcc>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a20      	ldr	r2, [pc, #128]	; (8001478 <SystemClock_Config+0xcc>)
 80013f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <SystemClock_Config+0xcc>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001408:	2302      	movs	r3, #2
 800140a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800140c:	2301      	movs	r3, #1
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001410:	2310      	movs	r3, #16
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001414:	2302      	movs	r3, #2
 8001416:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001418:	2300      	movs	r3, #0
 800141a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800141c:	2308      	movs	r3, #8
 800141e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001420:	2364      	movs	r3, #100	; 0x64
 8001422:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001424:	2302      	movs	r3, #2
 8001426:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001428:	2304      	movs	r3, #4
 800142a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142c:	f107 0320 	add.w	r3, r7, #32
 8001430:	4618      	mov	r0, r3
 8001432:	f006 f8d7 	bl	80075e4 <HAL_RCC_OscConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800143c:	f002 ff38 	bl	80042b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001440:	230f      	movs	r3, #15
 8001442:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001444:	2302      	movs	r3, #2
 8001446:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800144c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001450:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	2103      	movs	r1, #3
 800145c:	4618      	mov	r0, r3
 800145e:	f006 fb39 	bl	8007ad4 <HAL_RCC_ClockConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001468:	f002 ff22 	bl	80042b0 <Error_Handler>
  }
}
 800146c:	bf00      	nop
 800146e:	3750      	adds	r7, #80	; 0x50
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	40007000 	.word	0x40007000

0800147c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <MX_I2C1_Init+0x54>)
 8001482:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <MX_I2C1_Init+0x58>)
 8001484:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_I2C1_Init+0x54>)
 8001488:	f242 7210 	movw	r2, #10000	; 0x2710
 800148c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <MX_I2C1_Init+0x54>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_I2C1_Init+0x54>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <MX_I2C1_Init+0x54>)
 800149c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <MX_I2C1_Init+0x54>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_I2C1_Init+0x54>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <MX_I2C1_Init+0x54>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_I2C1_Init+0x54>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_I2C1_Init+0x54>)
 80014bc:	f004 f944 	bl	8005748 <HAL_I2C_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80014c6:	f002 fef3 	bl	80042b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200004f8 	.word	0x200004f8
 80014d4:	40005400 	.word	0x40005400

080014d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	; 0x30
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	2224      	movs	r2, #36	; 0x24
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f008 fdb8 	bl	800a05c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014f4:	4b22      	ldr	r3, [pc, #136]	; (8001580 <MX_TIM1_Init+0xa8>)
 80014f6:	4a23      	ldr	r2, [pc, #140]	; (8001584 <MX_TIM1_Init+0xac>)
 80014f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014fa:	4b21      	ldr	r3, [pc, #132]	; (8001580 <MX_TIM1_Init+0xa8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <MX_TIM1_Init+0xa8>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24575;
 8001506:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <MX_TIM1_Init+0xa8>)
 8001508:	f645 72ff 	movw	r2, #24575	; 0x5fff
 800150c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <MX_TIM1_Init+0xa8>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <MX_TIM1_Init+0xa8>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <MX_TIM1_Init+0xa8>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001520:	2303      	movs	r3, #3
 8001522:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001528:	2301      	movs	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001530:	2302      	movs	r3, #2
 8001532:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001538:	2301      	movs	r3, #1
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	4619      	mov	r1, r3
 800154a:	480d      	ldr	r0, [pc, #52]	; (8001580 <MX_TIM1_Init+0xa8>)
 800154c:	f006 fed4 	bl	80082f8 <HAL_TIM_Encoder_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001556:	f002 feab 	bl	80042b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	4619      	mov	r1, r3
 8001566:	4806      	ldr	r0, [pc, #24]	; (8001580 <MX_TIM1_Init+0xa8>)
 8001568:	f007 fd78 	bl	800905c <HAL_TIMEx_MasterConfigSynchronization>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001572:	f002 fe9d 	bl	80042b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	3730      	adds	r7, #48	; 0x30
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200005f4 	.word	0x200005f4
 8001584:	40010000 	.word	0x40010000

08001588 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158e:	f107 0308 	add.w	r3, r7, #8
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159c:	463b      	mov	r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <MX_TIM2_Init+0x94>)
 80015a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <MX_TIM2_Init+0x94>)
 80015ae:	2263      	movs	r2, #99	; 0x63
 80015b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_TIM2_Init+0x94>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <MX_TIM2_Init+0x94>)
 80015ba:	f04f 32ff 	mov.w	r2, #4294967295
 80015be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <MX_TIM2_Init+0x94>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <MX_TIM2_Init+0x94>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015cc:	4813      	ldr	r0, [pc, #76]	; (800161c <MX_TIM2_Init+0x94>)
 80015ce:	f006 fc7d 	bl	8007ecc <HAL_TIM_Base_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015d8:	f002 fe6a 	bl	80042b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	4619      	mov	r1, r3
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <MX_TIM2_Init+0x94>)
 80015ea:	f007 f97f 	bl	80088ec <HAL_TIM_ConfigClockSource>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015f4:	f002 fe5c 	bl	80042b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001600:	463b      	mov	r3, r7
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_TIM2_Init+0x94>)
 8001606:	f007 fd29 	bl	800905c <HAL_TIMEx_MasterConfigSynchronization>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001610:	f002 fe4e 	bl	80042b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000063c 	.word	0x2000063c

08001620 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08e      	sub	sp, #56	; 0x38
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001634:	f107 0320 	add.w	r3, r7, #32
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
 800164c:	615a      	str	r2, [r3, #20]
 800164e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001650:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <MX_TIM3_Init+0xe4>)
 8001652:	4a2d      	ldr	r2, [pc, #180]	; (8001708 <MX_TIM3_Init+0xe8>)
 8001654:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001656:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <MX_TIM3_Init+0xe4>)
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165c:	4b29      	ldr	r3, [pc, #164]	; (8001704 <MX_TIM3_Init+0xe4>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001662:	4b28      	ldr	r3, [pc, #160]	; (8001704 <MX_TIM3_Init+0xe4>)
 8001664:	f242 7210 	movw	r2, #10000	; 0x2710
 8001668:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <MX_TIM3_Init+0xe4>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001670:	4b24      	ldr	r3, [pc, #144]	; (8001704 <MX_TIM3_Init+0xe4>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001676:	4823      	ldr	r0, [pc, #140]	; (8001704 <MX_TIM3_Init+0xe4>)
 8001678:	f006 fc28 	bl	8007ecc <HAL_TIM_Base_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001682:	f002 fe15 	bl	80042b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800168c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001690:	4619      	mov	r1, r3
 8001692:	481c      	ldr	r0, [pc, #112]	; (8001704 <MX_TIM3_Init+0xe4>)
 8001694:	f007 f92a 	bl	80088ec <HAL_TIM_ConfigClockSource>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800169e:	f002 fe07 	bl	80042b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016a2:	4818      	ldr	r0, [pc, #96]	; (8001704 <MX_TIM3_Init+0xe4>)
 80016a4:	f006 fd1e 	bl	80080e4 <HAL_TIM_PWM_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80016ae:	f002 fdff 	bl	80042b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ba:	f107 0320 	add.w	r3, r7, #32
 80016be:	4619      	mov	r1, r3
 80016c0:	4810      	ldr	r0, [pc, #64]	; (8001704 <MX_TIM3_Init+0xe4>)
 80016c2:	f007 fccb 	bl	800905c <HAL_TIMEx_MasterConfigSynchronization>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80016cc:	f002 fdf0 	bl	80042b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d0:	2360      	movs	r3, #96	; 0x60
 80016d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	4619      	mov	r1, r3
 80016e6:	4807      	ldr	r0, [pc, #28]	; (8001704 <MX_TIM3_Init+0xe4>)
 80016e8:	f007 f842 	bl	8008770 <HAL_TIM_PWM_ConfigChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016f2:	f002 fddd 	bl	80042b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016f6:	4803      	ldr	r0, [pc, #12]	; (8001704 <MX_TIM3_Init+0xe4>)
 80016f8:	f002 fee4 	bl	80044c4 <HAL_TIM_MspPostInit>

}
 80016fc:	bf00      	nop
 80016fe:	3738      	adds	r7, #56	; 0x38
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	2000054c 	.word	0x2000054c
 8001708:	40000400 	.word	0x40000400

0800170c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_USART2_UART_Init+0x50>)
 8001712:	4a13      	ldr	r2, [pc, #76]	; (8001760 <MX_USART2_UART_Init+0x54>)
 8001714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_USART2_UART_Init+0x50>)
 8001718:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 800171c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_USART2_UART_Init+0x50>)
 8001720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001724:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <MX_USART2_UART_Init+0x50>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MX_USART2_UART_Init+0x50>)
 800172e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_USART2_UART_Init+0x50>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <MX_USART2_UART_Init+0x50>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_USART2_UART_Init+0x50>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_USART2_UART_Init+0x50>)
 8001748:	f007 fd0a 	bl	8009160 <HAL_UART_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001752:	f002 fdad 	bl	80042b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000684 	.word	0x20000684
 8001760:	40004400 	.word	0x40004400

08001764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <MX_DMA_Init+0x4c>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <MX_DMA_Init+0x4c>)
 8001774:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <MX_DMA_Init+0x4c>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	2010      	movs	r0, #16
 800178c:	f003 f9c7 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001790:	2010      	movs	r0, #16
 8001792:	f003 f9e0 	bl	8004b56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2011      	movs	r0, #17
 800179c:	f003 f9bf 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80017a0:	2011      	movs	r0, #17
 80017a2:	f003 f9d8 	bl	8004b56 <HAL_NVIC_EnableIRQ>

}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800

080017b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b5f      	ldr	r3, [pc, #380]	; (800194c <MX_GPIO_Init+0x198>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a5e      	ldr	r2, [pc, #376]	; (800194c <MX_GPIO_Init+0x198>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b5c      	ldr	r3, [pc, #368]	; (800194c <MX_GPIO_Init+0x198>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b58      	ldr	r3, [pc, #352]	; (800194c <MX_GPIO_Init+0x198>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a57      	ldr	r2, [pc, #348]	; (800194c <MX_GPIO_Init+0x198>)
 80017f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b55      	ldr	r3, [pc, #340]	; (800194c <MX_GPIO_Init+0x198>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b51      	ldr	r3, [pc, #324]	; (800194c <MX_GPIO_Init+0x198>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a50      	ldr	r2, [pc, #320]	; (800194c <MX_GPIO_Init+0x198>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b4e      	ldr	r3, [pc, #312]	; (800194c <MX_GPIO_Init+0x198>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	4b4a      	ldr	r3, [pc, #296]	; (800194c <MX_GPIO_Init+0x198>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a49      	ldr	r2, [pc, #292]	; (800194c <MX_GPIO_Init+0x198>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b47      	ldr	r3, [pc, #284]	; (800194c <MX_GPIO_Init+0x198>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	2120      	movs	r1, #32
 800183e:	4844      	ldr	r0, [pc, #272]	; (8001950 <MX_GPIO_Init+0x19c>)
 8001840:	f003 ff50 	bl	80056e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Lamp1_Pin|Lamp2_Pin, GPIO_PIN_SET);
 8001844:	2201      	movs	r2, #1
 8001846:	2106      	movs	r1, #6
 8001848:	4842      	ldr	r0, [pc, #264]	; (8001954 <MX_GPIO_Init+0x1a0>)
 800184a:	f003 ff4b 	bl	80056e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	4841      	ldr	r0, [pc, #260]	; (8001958 <MX_GPIO_Init+0x1a4>)
 8001854:	f003 ff46 	bl	80056e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Lamp3_GPIO_Port, Lamp3_Pin, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800185e:	483c      	ldr	r0, [pc, #240]	; (8001950 <MX_GPIO_Init+0x19c>)
 8001860:	f003 ff40 	bl	80056e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800186a:	4b3c      	ldr	r3, [pc, #240]	; (800195c <MX_GPIO_Init+0x1a8>)
 800186c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	4837      	ldr	r0, [pc, #220]	; (8001958 <MX_GPIO_Init+0x1a4>)
 800187a:	f003 fd97 	bl	80053ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Lamp3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Lamp3_Pin;
 800187e:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	482e      	ldr	r0, [pc, #184]	; (8001950 <MX_GPIO_Init+0x19c>)
 8001898:	f003 fd88 	bl	80053ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Lamp1_Pin Lamp2_Pin */
  GPIO_InitStruct.Pin = Lamp1_Pin|Lamp2_Pin;
 800189c:	2306      	movs	r3, #6
 800189e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	4828      	ldr	r0, [pc, #160]	; (8001954 <MX_GPIO_Init+0x1a0>)
 80018b4:	f003 fd7a 	bl	80053ac <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Switch_Signal_Pin */
  GPIO_InitStruct.Pin = Emergency_Switch_Signal_Pin;
 80018b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Switch_Signal_GPIO_Port, &GPIO_InitStruct);
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	4619      	mov	r1, r3
 80018cc:	4821      	ldr	r0, [pc, #132]	; (8001954 <MX_GPIO_Init+0x1a0>)
 80018ce:	f003 fd6d 	bl	80053ac <HAL_GPIO_Init>

  /*Configure GPIO pin : Index_Signal_Pin */
  GPIO_InitStruct.Pin = Index_Signal_Pin;
 80018d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <MX_GPIO_Init+0x1ac>)
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Index_Signal_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	481b      	ldr	r0, [pc, #108]	; (8001954 <MX_GPIO_Init+0x1a0>)
 80018e8:	f003 fd60 	bl	80053ac <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	4815      	ldr	r0, [pc, #84]	; (8001958 <MX_GPIO_Init+0x1a4>)
 8001904:	f003 fd52 	bl	80053ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LimitSwitchSignal_Pin */
  GPIO_InitStruct.Pin = LimitSwitchSignal_Pin;
 8001908:	f44f 7380 	mov.w	r3, #256	; 0x100
 800190c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_GPIO_Init+0x1ac>)
 8001910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LimitSwitchSignal_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	480e      	ldr	r0, [pc, #56]	; (8001958 <MX_GPIO_Init+0x1a4>)
 800191e:	f003 fd45 	bl	80053ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	2017      	movs	r0, #23
 8001928:	f003 f8f9 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800192c:	2017      	movs	r0, #23
 800192e:	f003 f912 	bl	8004b56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	2028      	movs	r0, #40	; 0x28
 8001938:	f003 f8f1 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800193c:	2028      	movs	r0, #40	; 0x28
 800193e:	f003 f90a 	bl	8004b56 <HAL_NVIC_EnableIRQ>

}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	; 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40020000 	.word	0x40020000
 8001954:	40020400 	.word	0x40020400
 8001958:	40020800 	.word	0x40020800
 800195c:	10210000 	.word	0x10210000
 8001960:	10110000 	.word	0x10110000

08001964 <EncoderVelocityAndPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 12288
#define  MAX_ENCODER_PERIOD 24576

void EncoderVelocityAndPosition_Update()
{
 8001964:	b5b0      	push	{r4, r5, r7, lr}
 8001966:	ed2d 8b02 	vpush	{d8}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0

	static float EncoderLastVelocity = 0;
	static float Velocity_Output = 0;
	static float Acceration_Output = 0;
	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 800196e:	4b49      	ldr	r3, [pc, #292]	; (8001a94 <EncoderVelocityAndPosition_Update+0x130>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
	uint64_t EncoderNowTimestamp = micros();
 8001976:	f000 f911 	bl	8001b9c <micros>
 800197a:	e9c7 0106 	strd	r0, r1, [r7, #24]

	int32_t EncoderPositionDiff;
	float EncoderVelocityDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 800197e:	4b46      	ldr	r3, [pc, #280]	; (8001a98 <EncoderVelocityAndPosition_Update+0x134>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001988:	1a84      	subs	r4, r0, r2
 800198a:	eb61 0503 	sbc.w	r5, r1, r3
 800198e:	e9c7 4504 	strd	r4, r5, [r7, #16]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8001992:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <EncoderVelocityAndPosition_Update+0x138>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	60fb      	str	r3, [r7, #12]

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 800199c:	4a3f      	ldr	r2, [pc, #252]	; (8001a9c <EncoderVelocityAndPosition_Update+0x138>)
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80019a2:	493d      	ldr	r1, [pc, #244]	; (8001a98 <EncoderVelocityAndPosition_Update+0x134>)
 80019a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019a8:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity and Encoder Pos
	PositionPIDController.OutputFeedback = EncoderNowPosition;
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019b6:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <EncoderVelocityAndPosition_Update+0x13c>)
 80019b8:	edc3 7a08 	vstr	s15, [r3, #32]
	StabilizerPIDController.OutputFeedback = EncoderNowPosition;
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c6:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <EncoderVelocityAndPosition_Update+0x140>)
 80019c8:	edc3 7a08 	vstr	s15, [r3, #32]
	// LPF
	Velocity_Output = (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;  /// Pulse per second
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4a36      	ldr	r2, [pc, #216]	; (8001aa8 <EncoderVelocityAndPosition_Update+0x144>)
 80019d0:	fb02 f303 	mul.w	r3, r2, r3
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80019dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019e0:	f7ff f99e 	bl	8000d20 <__aeabi_ul2f>
 80019e4:	ee07 0a10 	vmov	s14, r0
 80019e8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80019ec:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <EncoderVelocityAndPosition_Update+0x148>)
 80019ee:	edc3 7a00 	vstr	s15, [r3]
	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*299))/300.0;
 80019f2:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <EncoderVelocityAndPosition_Update+0x14c>)
 80019f4:	edd3 7a08 	vldr	s15, [r3, #32]
 80019f8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001ab4 <EncoderVelocityAndPosition_Update+0x150>
 80019fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a00:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <EncoderVelocityAndPosition_Update+0x148>)
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0a:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001ab8 <EncoderVelocityAndPosition_Update+0x154>
 8001a0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a12:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <EncoderVelocityAndPosition_Update+0x14c>)
 8001a14:	edc3 7a08 	vstr	s15, [r3, #32]
//	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*49))/50.0;

	float EncoderNowVelocity = VelocityPIDController.OutputFeedback;
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <EncoderVelocityAndPosition_Update+0x14c>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	60bb      	str	r3, [r7, #8]

	EncoderVelocityDiff = EncoderNowVelocity - EncoderLastVelocity;
 8001a1e:	4b27      	ldr	r3, [pc, #156]	; (8001abc <EncoderVelocityAndPosition_Update+0x158>)
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a2c:	edc7 7a01 	vstr	s15, [r7, #4]
	EncoderLastVelocity = VelocityPIDController.OutputFeedback;
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <EncoderVelocityAndPosition_Update+0x14c>)
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4a21      	ldr	r2, [pc, #132]	; (8001abc <EncoderVelocityAndPosition_Update+0x158>)
 8001a36:	6013      	str	r3, [r2, #0]

	Acceration_Output = ( EncoderVelocityDiff * 1000000)  / (float) EncoderTimeDiff;
 8001a38:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a3c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001ac0 <EncoderVelocityAndPosition_Update+0x15c>
 8001a40:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001a44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a48:	f7ff f96a 	bl	8000d20 <__aeabi_ul2f>
 8001a4c:	ee07 0a10 	vmov	s14, r0
 8001a50:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <EncoderVelocityAndPosition_Update+0x160>)
 8001a56:	edc3 7a00 	vstr	s15, [r3]
	Acceration_Output = (Acceration_Output + (EstimatedAngularAcceration*299))/300.0;
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <EncoderVelocityAndPosition_Update+0x164>)
 8001a5c:	edd3 7a00 	vldr	s15, [r3]
 8001a60:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001ab4 <EncoderVelocityAndPosition_Update+0x150>
 8001a64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <EncoderVelocityAndPosition_Update+0x160>)
 8001a6a:	edd3 7a00 	vldr	s15, [r3]
 8001a6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a72:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001ab8 <EncoderVelocityAndPosition_Update+0x154>
 8001a76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <EncoderVelocityAndPosition_Update+0x160>)
 8001a7c:	edc3 7a00 	vstr	s15, [r3]
//	Acceration_Output = (Acceration_Output + (EstimatedAngularAcceration*49))/50.0;
	EstimatedAngularAcceration = ( Acceration_Output );
 8001a80:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <EncoderVelocityAndPosition_Update+0x160>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <EncoderVelocityAndPosition_Update+0x164>)
 8001a86:	6013      	str	r3, [r2, #0]

}
 8001a88:	bf00      	nop
 8001a8a:	3728      	adds	r7, #40	; 0x28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	ecbd 8b02 	vpop	{d8}
 8001a92:	bdb0      	pop	{r4, r5, r7, pc}
 8001a94:	200005f4 	.word	0x200005f4
 8001a98:	20000360 	.word	0x20000360
 8001a9c:	20000368 	.word	0x20000368
 8001aa0:	20000200 	.word	0x20000200
 8001aa4:	20000280 	.word	0x20000280
 8001aa8:	000f4240 	.word	0x000f4240
 8001aac:	2000036c 	.word	0x2000036c
 8001ab0:	20000240 	.word	0x20000240
 8001ab4:	43958000 	.word	0x43958000
 8001ab8:	43960000 	.word	0x43960000
 8001abc:	20000370 	.word	0x20000370
 8001ac0:	49742400 	.word	0x49742400
 8001ac4:	20000374 	.word	0x20000374
 8001ac8:	2000035c 	.word	0x2000035c

08001acc <Encoder_SetHome_Position>:


void Encoder_SetHome_Position()
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
	HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <Encoder_SetHome_Position+0x2c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a09      	ldr	r2, [pc, #36]	; (8001afc <Encoder_SetHome_Position+0x30>)
 8001ad6:	6852      	ldr	r2, [r2, #4]
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
	StabilizePosition = CUSSStruc.PPRxQEI;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <Encoder_SetHome_Position+0x30>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <Encoder_SetHome_Position+0x34>)
 8001ae8:	edc3 7a00 	vstr	s15, [r3]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200005f4 	.word	0x200005f4
 8001afc:	20000350 	.word	0x20000350
 8001b00:	200001f8 	.word	0x200001f8

08001b04 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b04:	b4b0      	push	{r4, r5, r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a09      	ldr	r2, [pc, #36]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d109      	bne.n	8001b28 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1a:	f112 34ff 	adds.w	r4, r2, #4294967295
 8001b1e:	f143 0500 	adc.w	r5, r3, #0
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001b24:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bcb0      	pop	{r4, r5, r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	2000063c 	.word	0x2000063c
 8001b38:	200000b0 	.word	0x200000b0

08001b3c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
    if ((GPIO_Pin == GPIO_PIN_13) || (GPIO_Pin == GPIO_PIN_8))  //13 -> BlueButton, 8 -> Limitswitch
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_EXTI_Callback+0x1a>
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b54:	d115      	bne.n	8001b82 <HAL_GPIO_EXTI_Callback+0x46>
	{
    	if (Munmunbot_State == STATE_SetHome)
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <HAL_GPIO_EXTI_Callback+0x50>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b07      	cmp	r3, #7
 8001b5c:	d111      	bne.n	8001b82 <HAL_GPIO_EXTI_Callback+0x46>
    	{
    		if (SethomeMode == SetHomeState_1)
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d10d      	bne.n	8001b82 <HAL_GPIO_EXTI_Callback+0x46>
    		{
    			Encoder_SetHome_Position();
 8001b66:	f7ff ffb1 	bl	8001acc <Encoder_SetHome_Position>
    			SethomeMode = SetHomeState_2;
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	701a      	strb	r2, [r3, #0]
    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	4807      	ldr	r0, [pc, #28]	; (8001b94 <HAL_GPIO_EXTI_Callback+0x58>)
 8001b76:	f003 fdb5 	bl	80056e4 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	635a      	str	r2, [r3, #52]	; 0x34
    		}
    	}
	}

}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200000d9 	.word	0x200000d9
 8001b90:	200000da 	.word	0x200000da
 8001b94:	40020800 	.word	0x40020800
 8001b98:	2000054c 	.word	0x2000054c

08001b9c <micros>:

uint64_t micros()
{
 8001b9c:	b4b0      	push	{r4, r5, r7}
 8001b9e:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <micros+0x2c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f04f 0100 	mov.w	r1, #0
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <micros+0x30>)
 8001bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb2:	1884      	adds	r4, r0, r2
 8001bb4:	eb41 0503 	adc.w	r5, r1, r3
 8001bb8:	4622      	mov	r2, r4
 8001bba:	462b      	mov	r3, r5
}
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bcb0      	pop	{r4, r5, r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	2000063c 	.word	0x2000063c
 8001bcc:	200000b0 	.word	0x200000b0

08001bd0 <ConverterUnitSystemStructureInit>:

void ConverterUnitSystemStructureInit(ConverterUnitSystemStructure *CUSSvar)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	CUSSvar->PPR = 2048;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bde:	601a      	str	r2, [r3, #0]
	CUSSvar->PPRxQEI = CUSSvar->PPR * 4;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	009a      	lsls	r2, r3, #2
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	605a      	str	r2, [r3, #4]
	CUSSvar->RPMp = 10;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a03      	ldr	r2, [pc, #12]	; (8001bfc <ConverterUnitSystemStructureInit+0x2c>)
 8001bee:	609a      	str	r2, [r3, #8]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	41200000 	.word	0x41200000

08001c00 <TrajectoryGenerationStructureInit>:

void TrajectoryGenerationStructureInit(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
	TGSvar->AngularAccerationMax_Setting = (0.3*(CUSSvar->PPRxQEI))/(3.1416*2.0);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fc24 	bl	800045c <__aeabi_ui2d>
 8001c14:	a347      	add	r3, pc, #284	; (adr r3, 8001d34 <TrajectoryGenerationStructureInit+0x134>)
 8001c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1a:	f7fe fc99 	bl	8000550 <__aeabi_dmul>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	a345      	add	r3, pc, #276	; (adr r3, 8001d3c <TrajectoryGenerationStructureInit+0x13c>)
 8001c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2c:	f7fe fdba 	bl	80007a4 <__aeabi_ddiv>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	f7fe ff5a 	bl	8000af0 <__aeabi_d2f>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	615a      	str	r2, [r3, #20]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*10)/(60.0);  //pps
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fc04 	bl	800045c <__aeabi_ui2d>
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	4b33      	ldr	r3, [pc, #204]	; (8001d28 <TrajectoryGenerationStructureInit+0x128>)
 8001c5a:	f7fe fda3 	bl	80007a4 <__aeabi_ddiv>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4610      	mov	r0, r2
 8001c64:	4619      	mov	r1, r3
 8001c66:	f7fe ff43 	bl	8000af0 <__aeabi_d2f>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	611a      	str	r2, [r3, #16]
	TGSvar->Start_Theta = CUSSStruc.PPRxQEI;  /// PPRxQEI == 0 degree
 8001c70:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <TrajectoryGenerationStructureInit+0x12c>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	TGSvar->Mode = 0;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	TGSvar->Submode = 0;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	TGSvar->Loop_Freq = 1000;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c98:	659a      	str	r2, [r3, #88]	; 0x58
	TGSvar->Loop_Period = 1000000/(TGSvar->Loop_Freq);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	4a24      	ldr	r2, [pc, #144]	; (8001d30 <TrajectoryGenerationStructureInit+0x130>)
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	edd3 6a04 	vldr	s13, [r3, #16]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	ed93 7a05 	vldr	s14, [r3, #20]
 8001cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	edd3 7a00 	vldr	s15, [r3]
 8001cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	edc3 7a03 	vstr	s15, [r3, #12]
	TGSvar->AngularVelocityFinalMin = 0*1.8*(CUSSvar->PPRxQEI)/60.0;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fbbb 	bl	800045c <__aeabi_ui2d>
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	f7fe fc2f 	bl	8000550 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <TrajectoryGenerationStructureInit+0x128>)
 8001d00:	f7fe fd50 	bl	80007a4 <__aeabi_ddiv>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f7fe fef0 	bl	8000af0 <__aeabi_d2f>
 8001d10:	4602      	mov	r2, r0
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	679a      	str	r2, [r3, #120]	; 0x78
	TGSvar->Alpha = 1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d1c:	67da      	str	r2, [r3, #124]	; 0x7c

}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	404e0000 	.word	0x404e0000
 8001d2c:	20000350 	.word	0x20000350
 8001d30:	000f4240 	.word	0x000f4240
 8001d34:	33333333 	.word	0x33333333
 8001d38:	3fd33333 	.word	0x3fd33333
 8001d3c:	2e48e8a7 	.word	0x2e48e8a7
 8001d40:	401921ff 	.word	0x401921ff
 8001d44:	00000000 	.word	0x00000000

08001d48 <LinkMovingPIDLoad>:

void LinkMovingPIDLoad()
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	PositionPIDController.Kp = 0;
 8001d4c:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <LinkMovingPIDLoad+0x90>)
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
	PositionPIDController.Ki = 0;
 8001d54:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <LinkMovingPIDLoad+0x90>)
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]
	PositionPIDController.Kd = 0;
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <LinkMovingPIDLoad+0x90>)
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
	PositionPIDController.offSet = 0;
 8001d64:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <LinkMovingPIDLoad+0x90>)
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
	PositionPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <LinkMovingPIDLoad+0x94>)
 8001d6e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	f7fe fbb5 	bl	80004e4 <__aeabi_ul2d>
 8001d7a:	a315      	add	r3, pc, #84	; (adr r3, 8001dd0 <LinkMovingPIDLoad+0x88>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f7fe fd10 	bl	80007a4 <__aeabi_ddiv>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4913      	ldr	r1, [pc, #76]	; (8001dd8 <LinkMovingPIDLoad+0x90>)
 8001d8a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	VelocityPIDController.Kp = 6;
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <LinkMovingPIDLoad+0x98>)
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <LinkMovingPIDLoad+0x9c>)
 8001d92:	601a      	str	r2, [r3, #0]
	VelocityPIDController.Ki = 17;
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <LinkMovingPIDLoad+0x98>)
 8001d96:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <LinkMovingPIDLoad+0xa0>)
 8001d98:	605a      	str	r2, [r3, #4]
	VelocityPIDController.Kd = 0.00005;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <LinkMovingPIDLoad+0x98>)
 8001d9c:	4a13      	ldr	r2, [pc, #76]	; (8001dec <LinkMovingPIDLoad+0xa4>)
 8001d9e:	609a      	str	r2, [r3, #8]
	VelocityPIDController.offSet = 1500;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <LinkMovingPIDLoad+0x98>)
 8001da2:	4a13      	ldr	r2, [pc, #76]	; (8001df0 <LinkMovingPIDLoad+0xa8>)
 8001da4:	611a      	str	r2, [r3, #16]
	VelocityPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <LinkMovingPIDLoad+0x94>)
 8001da8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7fe fb98 	bl	80004e4 <__aeabi_ul2d>
 8001db4:	a306      	add	r3, pc, #24	; (adr r3, 8001dd0 <LinkMovingPIDLoad+0x88>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	f7fe fcf3 	bl	80007a4 <__aeabi_ddiv>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4907      	ldr	r1, [pc, #28]	; (8001de0 <LinkMovingPIDLoad+0x98>)
 8001dc4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	f3af 8000 	nop.w
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	412e8480 	.word	0x412e8480
 8001dd8:	20000200 	.word	0x20000200
 8001ddc:	200002c0 	.word	0x200002c0
 8001de0:	20000240 	.word	0x20000240
 8001de4:	40c00000 	.word	0x40c00000
 8001de8:	41880000 	.word	0x41880000
 8001dec:	3851b717 	.word	0x3851b717
 8001df0:	44bb8000 	.word	0x44bb8000
 8001df4:	00000000 	.word	0x00000000

08001df8 <StabilizerPIDLoad>:
	VelocityPIDController.offSet = 1500;
	VelocityPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
}

void StabilizerPIDLoad()
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
//	StabilizerPIDController.Kp = 35;
//	StabilizerPIDController.Ki = 17;
	StabilizerPIDController.Kp = 0.0000000000001;
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <StabilizerPIDLoad+0x50>)
 8001dfe:	4a13      	ldr	r2, [pc, #76]	; (8001e4c <StabilizerPIDLoad+0x54>)
 8001e00:	601a      	str	r2, [r3, #0]
	StabilizerPIDController.Ki = 1.3;
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <StabilizerPIDLoad+0x50>)
 8001e04:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <StabilizerPIDLoad+0x58>)
 8001e06:	605a      	str	r2, [r3, #4]
	StabilizerPIDController.Kd = 0;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <StabilizerPIDLoad+0x50>)
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
	StabilizerPIDController.offSet = 1200;
 8001e10:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <StabilizerPIDLoad+0x50>)
 8001e12:	4a10      	ldr	r2, [pc, #64]	; (8001e54 <StabilizerPIDLoad+0x5c>)
 8001e14:	611a      	str	r2, [r3, #16]
	StabilizerPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <StabilizerPIDLoad+0x60>)
 8001e18:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f7fe fb60 	bl	80004e4 <__aeabi_ul2d>
 8001e24:	a306      	add	r3, pc, #24	; (adr r3, 8001e40 <StabilizerPIDLoad+0x48>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe fcbb 	bl	80007a4 <__aeabi_ddiv>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4905      	ldr	r1, [pc, #20]	; (8001e48 <StabilizerPIDLoad+0x50>)
 8001e34:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	f3af 8000 	nop.w
 8001e40:	00000000 	.word	0x00000000
 8001e44:	412e8480 	.word	0x412e8480
 8001e48:	20000280 	.word	0x20000280
 8001e4c:	29e12e13 	.word	0x29e12e13
 8001e50:	3fa66666 	.word	0x3fa66666
 8001e54:	44960000 	.word	0x44960000
 8001e58:	200002c0 	.word	0x200002c0

08001e5c <TrajectoryGenerationVelocityMaxSetting>:



void TrajectoryGenerationVelocityMaxSetting(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*(CUSSvar->RPMp))/(60.0);   ///RPM to pps
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e7c:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001ec4 <TrajectoryGenerationVelocityMaxSetting+0x68>
 8001e80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	edc3 7a04 	vstr	s15, [r3, #16]
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	edd3 6a04 	vldr	s13, [r3, #16]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	42700000 	.word	0x42700000

08001ec8 <TrajectoryGenerationPrepareDATA>:

void TrajectoryGenerationPrepareDATA()
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	// fix start position base on Encoder
	TrjStruc.Start_Theta = htim1.Instance->CNT;
 8001ecc:	4b9e      	ldr	r3, [pc, #632]	; (8002148 <TrajectoryGenerationPrepareDATA+0x280>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eda:	4b9c      	ldr	r3, [pc, #624]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 8001edc:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

	if (MovingLinkMode == LMM_Set_Pos_Directly)
 8001ee0:	4b9b      	ldr	r3, [pc, #620]	; (8002150 <TrajectoryGenerationPrepareDATA+0x288>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d165      	bne.n	8001fb4 <TrajectoryGenerationPrepareDATA+0xec>
	  {
		  TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(10000.0*2.0*3.14159));  //pulse
 8001ee8:	4b9a      	ldr	r3, [pc, #616]	; (8002154 <TrajectoryGenerationPrepareDATA+0x28c>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b9a      	ldr	r3, [pc, #616]	; (8002158 <TrajectoryGenerationPrepareDATA+0x290>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	fb03 f302 	mul.w	r3, r3, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fab0 	bl	800045c <__aeabi_ui2d>
 8001efc:	a390      	add	r3, pc, #576	; (adr r3, 8002140 <TrajectoryGenerationPrepareDATA+0x278>)
 8001efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f02:	f7fe fc4f 	bl	80007a4 <__aeabi_ddiv>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f7fe fdef 	bl	8000af0 <__aeabi_d2f>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4a8d      	ldr	r2, [pc, #564]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 8001f16:	6693      	str	r3, [r2, #104]	; 0x68
		  if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)   ///wrap input into 1 revolute.
 8001f18:	4b8c      	ldr	r3, [pc, #560]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 8001f1a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001f1e:	4b8e      	ldr	r3, [pc, #568]	; (8002158 <TrajectoryGenerationPrepareDATA+0x290>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f32:	db0d      	blt.n	8001f50 <TrajectoryGenerationPrepareDATA+0x88>
		  {
			 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001f34:	4b85      	ldr	r3, [pc, #532]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 8001f36:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001f3a:	4b87      	ldr	r3, [pc, #540]	; (8002158 <TrajectoryGenerationPrepareDATA+0x290>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f4a:	4b80      	ldr	r3, [pc, #512]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 8001f4c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		  }
		  TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8001f50:	4b7e      	ldr	r3, [pc, #504]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 8001f52:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001f56:	4b80      	ldr	r3, [pc, #512]	; (8002158 <TrajectoryGenerationPrepareDATA+0x290>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f66:	4b79      	ldr	r3, [pc, #484]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 8001f68:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

		  if (TrjStruc.Desire_Theta != TrjStruc.Start_Theta)
 8001f6c:	4b77      	ldr	r3, [pc, #476]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 8001f6e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001f72:	4b76      	ldr	r3, [pc, #472]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 8001f74:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001f78:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f80:	d00e      	beq.n	8001fa0 <TrajectoryGenerationPrepareDATA+0xd8>
		  {
			  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 8001f82:	4b72      	ldr	r3, [pc, #456]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 8001f84:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001f88:	4b70      	ldr	r3, [pc, #448]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 8001f8a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f92:	4b6e      	ldr	r3, [pc, #440]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 8001f94:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
			  Munmunbot_State = STATE_Calculation;
 8001f98:	4b70      	ldr	r3, [pc, #448]	; (800215c <TrajectoryGenerationPrepareDATA+0x294>)
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	701a      	strb	r2, [r3, #0]
	  {
		MovingLinkMode = LMM_Not_Set;
		Munmunbot_State = STATE_Idle;
		ACK2Return(&UART2);
	  }
}
 8001f9e:	e0cd      	b.n	800213c <TrajectoryGenerationPrepareDATA+0x274>
			Munmunbot_State = STATE_Idle;
 8001fa0:	4b6e      	ldr	r3, [pc, #440]	; (800215c <TrajectoryGenerationPrepareDATA+0x294>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 8001fa6:	4b6a      	ldr	r3, [pc, #424]	; (8002150 <TrajectoryGenerationPrepareDATA+0x288>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
			ACK2Return(&UART2);
 8001fac:	486c      	ldr	r0, [pc, #432]	; (8002160 <TrajectoryGenerationPrepareDATA+0x298>)
 8001fae:	f001 f8ff 	bl	80031b0 <ACK2Return>
}
 8001fb2:	e0c3      	b.n	800213c <TrajectoryGenerationPrepareDATA+0x274>
	else if (MovingLinkMode == LMM_Set_Goal_1_Station || MovingLinkMode == LMM_Set_Goal_n_Station )
 8001fb4:	4b66      	ldr	r3, [pc, #408]	; (8002150 <TrajectoryGenerationPrepareDATA+0x288>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d004      	beq.n	8001fc6 <TrajectoryGenerationPrepareDATA+0xfe>
 8001fbc:	4b64      	ldr	r3, [pc, #400]	; (8002150 <TrajectoryGenerationPrepareDATA+0x288>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	f040 80b1 	bne.w	8002128 <TrajectoryGenerationPrepareDATA+0x260>
		  if (NumberOfStationToGo == 0)
 8001fc6:	4b67      	ldr	r3, [pc, #412]	; (8002164 <TrajectoryGenerationPrepareDATA+0x29c>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10f      	bne.n	8001fee <TrajectoryGenerationPrepareDATA+0x126>
				Munmunbot_State = STATE_Idle;
 8001fce:	4b63      	ldr	r3, [pc, #396]	; (800215c <TrajectoryGenerationPrepareDATA+0x294>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	701a      	strb	r2, [r3, #0]
				NumberOfStationPTR = 0;
 8001fd4:	4b64      	ldr	r3, [pc, #400]	; (8002168 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo = 0;
 8001fda:	4b62      	ldr	r3, [pc, #392]	; (8002164 <TrajectoryGenerationPrepareDATA+0x29c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
				MovingLinkMode = LMM_Not_Set;
 8001fe0:	4b5b      	ldr	r3, [pc, #364]	; (8002150 <TrajectoryGenerationPrepareDATA+0x288>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
				ACK2Return(&UART2);
 8001fe6:	485e      	ldr	r0, [pc, #376]	; (8002160 <TrajectoryGenerationPrepareDATA+0x298>)
 8001fe8:	f001 f8e2 	bl	80031b0 <ACK2Return>
		  if (NumberOfStationToGo == 0)
 8001fec:	e0a6      	b.n	800213c <TrajectoryGenerationPrepareDATA+0x274>
			Current_Station = Angularpos_InputArray[NumberOfStationPTR];
 8001fee:	4b5e      	ldr	r3, [pc, #376]	; (8002168 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4b5d      	ldr	r3, [pc, #372]	; (800216c <TrajectoryGenerationPrepareDATA+0x2a4>)
 8001ff6:	5c9a      	ldrb	r2, [r3, r2]
 8001ff8:	4b5d      	ldr	r3, [pc, #372]	; (8002170 <TrajectoryGenerationPrepareDATA+0x2a8>)
 8001ffa:	701a      	strb	r2, [r3, #0]
			if (Current_Station > 10)   //pass input
 8001ffc:	4b5c      	ldr	r3, [pc, #368]	; (8002170 <TrajectoryGenerationPrepareDATA+0x2a8>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b0a      	cmp	r3, #10
 8002002:	d90c      	bls.n	800201e <TrajectoryGenerationPrepareDATA+0x156>
				NumberOfStationPTR += 1;
 8002004:	4b58      	ldr	r3, [pc, #352]	; (8002168 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	b2da      	uxtb	r2, r3
 800200c:	4b56      	ldr	r3, [pc, #344]	; (8002168 <TrajectoryGenerationPrepareDATA+0x2a0>)
 800200e:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo -= 1;
 8002010:	4b54      	ldr	r3, [pc, #336]	; (8002164 <TrajectoryGenerationPrepareDATA+0x29c>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	3b01      	subs	r3, #1
 8002016:	b2da      	uxtb	r2, r3
 8002018:	4b52      	ldr	r3, [pc, #328]	; (8002164 <TrajectoryGenerationPrepareDATA+0x29c>)
 800201a:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 800201c:	e08e      	b.n	800213c <TrajectoryGenerationPrepareDATA+0x274>
				TrjStruc.Desire_Theta = (StationPos[Current_Station-1]*CUSSStruc.PPRxQEI/(360.0))*5.0;   ///fix this if change algorithm
 800201e:	4b54      	ldr	r3, [pc, #336]	; (8002170 <TrajectoryGenerationPrepareDATA+0x2a8>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	3b01      	subs	r3, #1
 8002024:	4a53      	ldr	r2, [pc, #332]	; (8002174 <TrajectoryGenerationPrepareDATA+0x2ac>)
 8002026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800202a:	461a      	mov	r2, r3
 800202c:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <TrajectoryGenerationPrepareDATA+0x290>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	fb03 f302 	mul.w	r3, r3, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fa11 	bl	800045c <__aeabi_ui2d>
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	4b4e      	ldr	r3, [pc, #312]	; (8002178 <TrajectoryGenerationPrepareDATA+0x2b0>)
 8002040:	f7fe fbb0 	bl	80007a4 <__aeabi_ddiv>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	4b4a      	ldr	r3, [pc, #296]	; (800217c <TrajectoryGenerationPrepareDATA+0x2b4>)
 8002052:	f7fe fa7d 	bl	8000550 <__aeabi_dmul>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
 800205e:	f7fe fd47 	bl	8000af0 <__aeabi_d2f>
 8002062:	4603      	mov	r3, r0
 8002064:	4a39      	ldr	r2, [pc, #228]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 8002066:	6693      	str	r3, [r2, #104]	; 0x68
				if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)  ///wrap input into 1 revolute. ///shouldn't happen
 8002068:	4b38      	ldr	r3, [pc, #224]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 800206a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800206e:	4b3a      	ldr	r3, [pc, #232]	; (8002158 <TrajectoryGenerationPrepareDATA+0x290>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800207a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002082:	db0d      	blt.n	80020a0 <TrajectoryGenerationPrepareDATA+0x1d8>
					TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8002084:	4b31      	ldr	r3, [pc, #196]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 8002086:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800208a:	4b33      	ldr	r3, [pc, #204]	; (8002158 <TrajectoryGenerationPrepareDATA+0x290>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	ee07 3a90 	vmov	s15, r3
 8002092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209a:	4b2c      	ldr	r3, [pc, #176]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 800209c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
				TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 80020a0:	4b2a      	ldr	r3, [pc, #168]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 80020a2:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80020a6:	4b2c      	ldr	r3, [pc, #176]	; (8002158 <TrajectoryGenerationPrepareDATA+0x290>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b6:	4b25      	ldr	r3, [pc, #148]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 80020b8:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
				if (TrjStruc.Desire_Theta == TrjStruc.Start_Theta)
 80020bc:	4b23      	ldr	r3, [pc, #140]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 80020be:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80020c2:	4b22      	ldr	r3, [pc, #136]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 80020c4:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80020c8:	eeb4 7a67 	vcmp.f32	s14, s15
 80020cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d0:	d10f      	bne.n	80020f2 <TrajectoryGenerationPrepareDATA+0x22a>
					NumberOfStationPTR += 1;
 80020d2:	4b25      	ldr	r3, [pc, #148]	; (8002168 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	3301      	adds	r3, #1
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4b23      	ldr	r3, [pc, #140]	; (8002168 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80020dc:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <TrajectoryGenerationPrepareDATA+0x29c>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <TrajectoryGenerationPrepareDATA+0x29c>)
 80020e8:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_End_Effector_Working;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <TrajectoryGenerationPrepareDATA+0x294>)
 80020ec:	2206      	movs	r2, #6
 80020ee:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 80020f0:	e024      	b.n	800213c <TrajectoryGenerationPrepareDATA+0x274>
					TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 80020f2:	4b16      	ldr	r3, [pc, #88]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 80020f4:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 80020fa:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80020fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <TrajectoryGenerationPrepareDATA+0x284>)
 8002104:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
					Munmunbot_State = STATE_Calculation;
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <TrajectoryGenerationPrepareDATA+0x294>)
 800210a:	2203      	movs	r2, #3
 800210c:	701a      	strb	r2, [r3, #0]
					NumberOfStationPTR += 1;
 800210e:	4b16      	ldr	r3, [pc, #88]	; (8002168 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	3301      	adds	r3, #1
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002118:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 800211a:	4b12      	ldr	r3, [pc, #72]	; (8002164 <TrajectoryGenerationPrepareDATA+0x29c>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	3b01      	subs	r3, #1
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <TrajectoryGenerationPrepareDATA+0x29c>)
 8002124:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8002126:	e009      	b.n	800213c <TrajectoryGenerationPrepareDATA+0x274>
		MovingLinkMode = LMM_Not_Set;
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <TrajectoryGenerationPrepareDATA+0x288>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
		Munmunbot_State = STATE_Idle;
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <TrajectoryGenerationPrepareDATA+0x294>)
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]
		ACK2Return(&UART2);
 8002134:	480a      	ldr	r0, [pc, #40]	; (8002160 <TrajectoryGenerationPrepareDATA+0x298>)
 8002136:	f001 f83b 	bl	80031b0 <ACK2Return>
}
 800213a:	e7ff      	b.n	800213c <TrajectoryGenerationPrepareDATA+0x274>
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}
 8002140:	99999999 	.word	0x99999999
 8002144:	40eeadf9 	.word	0x40eeadf9
 8002148:	200005f4 	.word	0x200005f4
 800214c:	200002c0 	.word	0x200002c0
 8002150:	200001de 	.word	0x200001de
 8002154:	200001dc 	.word	0x200001dc
 8002158:	20000350 	.word	0x20000350
 800215c:	200000d9 	.word	0x200000d9
 8002160:	200000b8 	.word	0x200000b8
 8002164:	200001e0 	.word	0x200001e0
 8002168:	200001e1 	.word	0x200001e1
 800216c:	200000dc 	.word	0x200000dc
 8002170:	200001df 	.word	0x200001df
 8002174:	20000000 	.word	0x20000000
 8002178:	40768000 	.word	0x40768000
 800217c:	40140000 	.word	0x40140000

08002180 <TrajectoryGenerationCalculation>:

void TrajectoryGenerationCalculation()
{
 8002180:	b5b0      	push	{r4, r5, r7, lr}
 8002182:	af00      	add	r7, sp, #0
	if (TrjStruc.Delta_Theta < 0)
 8002184:	4b8d      	ldr	r3, [pc, #564]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 8002186:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800218a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800218e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002192:	d51b      	bpl.n	80021cc <TrajectoryGenerationCalculation+0x4c>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting * -1;
 8002194:	4b89      	ldr	r3, [pc, #548]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 8002196:	edd3 7a05 	vldr	s15, [r3, #20]
 800219a:	eef1 7a67 	vneg.f32	s15, s15
 800219e:	4b87      	ldr	r3, [pc, #540]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80021a0:	edc3 7a07 	vstr	s15, [r3, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting *-1;
 80021a4:	4b85      	ldr	r3, [pc, #532]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80021a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80021aa:	eef1 7a67 	vneg.f32	s15, s15
 80021ae:	4b83      	ldr	r3, [pc, #524]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80021b0:	edc3 7a06 	vstr	s15, [r3, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta * -1;
 80021b4:	4b81      	ldr	r3, [pc, #516]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80021b6:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80021ba:	eef1 7a67 	vneg.f32	s15, s15
 80021be:	4b7f      	ldr	r3, [pc, #508]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80021c0:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
		 TrjStruc.Alpha = -1;
 80021c4:	4b7d      	ldr	r3, [pc, #500]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80021c6:	4a7e      	ldr	r2, [pc, #504]	; (80023c0 <TrajectoryGenerationCalculation+0x240>)
 80021c8:	67da      	str	r2, [r3, #124]	; 0x7c
 80021ca:	e017      	b.n	80021fc <TrajectoryGenerationCalculation+0x7c>
	  }
	  else if (TrjStruc.Delta_Theta > 0)
 80021cc:	4b7b      	ldr	r3, [pc, #492]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80021ce:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80021d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021da:	dd0f      	ble.n	80021fc <TrajectoryGenerationCalculation+0x7c>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting;
 80021dc:	4b77      	ldr	r3, [pc, #476]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	4a76      	ldr	r2, [pc, #472]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80021e2:	61d3      	str	r3, [r2, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting;
 80021e4:	4b75      	ldr	r3, [pc, #468]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	4a74      	ldr	r2, [pc, #464]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80021ea:	6193      	str	r3, [r2, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta;
 80021ec:	4b73      	ldr	r3, [pc, #460]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	4a72      	ldr	r2, [pc, #456]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80021f2:	6753      	str	r3, [r2, #116]	; 0x74
		 TrjStruc.Alpha = 1;
 80021f4:	4b71      	ldr	r3, [pc, #452]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80021f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021fa:	67da      	str	r2, [r3, #124]	; 0x7c
	  }

	  if (TrjStruc.Abs_Delta_Theta < TrjStruc.Theta_min_for_LSPB)   ///Triangular mode0
 80021fc:	4b6f      	ldr	r3, [pc, #444]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80021fe:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002202:	4b6e      	ldr	r3, [pc, #440]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 8002204:	edd3 7a03 	vldr	s15, [r3, #12]
 8002208:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800220c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002210:	d55a      	bpl.n	80022c8 <TrajectoryGenerationCalculation+0x148>
	  {
		 TrjStruc.BlendTimeTriangular = sqrt(TrjStruc.Abs_Delta_Theta/TrjStruc.AngularAccerationMax_Setting);
 8002212:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 8002214:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002218:	4b68      	ldr	r3, [pc, #416]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 800221a:	edd3 7a05 	vldr	s15, [r3, #20]
 800221e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002222:	ee16 0a90 	vmov	r0, s13
 8002226:	f7fe f93b 	bl	80004a0 <__aeabi_f2d>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	ec43 2b10 	vmov	d0, r2, r3
 8002232:	f007 ffa3 	bl	800a17c <sqrt>
 8002236:	ec53 2b10 	vmov	r2, r3, d0
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	f7fe fc57 	bl	8000af0 <__aeabi_d2f>
 8002242:	4603      	mov	r3, r0
 8002244:	4a5d      	ldr	r2, [pc, #372]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 8002246:	6053      	str	r3, [r2, #4]
		 TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 8002248:	4b5c      	ldr	r3, [pc, #368]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 800224a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800224c:	4a5b      	ldr	r2, [pc, #364]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 800224e:	6293      	str	r3, [r2, #40]	; 0x28
		 TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeTriangular*TrjStruc.BlendTimeTriangular))/2.0) + TrjStruc.Theta_Stamp_0;
 8002250:	4b5a      	ldr	r3, [pc, #360]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 8002252:	ed93 7a07 	vldr	s14, [r3, #28]
 8002256:	4b59      	ldr	r3, [pc, #356]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 8002258:	edd3 6a01 	vldr	s13, [r3, #4]
 800225c:	4b57      	ldr	r3, [pc, #348]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 800225e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226a:	ee17 0a90 	vmov	r0, s15
 800226e:	f7fe f917 	bl	80004a0 <__aeabi_f2d>
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800227a:	f7fe fa93 	bl	80007a4 <__aeabi_ddiv>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4614      	mov	r4, r2
 8002284:	461d      	mov	r5, r3
 8002286:	4b4d      	ldr	r3, [pc, #308]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 8002288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f908 	bl	80004a0 <__aeabi_f2d>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4620      	mov	r0, r4
 8002296:	4629      	mov	r1, r5
 8002298:	f7fd ffa4 	bl	80001e4 <__adddf3>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	f7fe fc24 	bl	8000af0 <__aeabi_d2f>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4a44      	ldr	r2, [pc, #272]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80022ac:	62d3      	str	r3, [r2, #44]	; 0x2c
		 TrjStruc.Mode = 0;
 80022ae:	4b43      	ldr	r3, [pc, #268]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		 TrjStruc.Submode = 0;
 80022b6:	4b41      	ldr	r3, [pc, #260]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		 TrjStruc.Subsubmode = 0;
 80022be:	4b3f      	ldr	r3, [pc, #252]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80022c6:	e069      	b.n	800239c <TrajectoryGenerationCalculation+0x21c>
	  }
	  else if (TrjStruc.Abs_Delta_Theta >= TrjStruc.Theta_min_for_LSPB)  ///LSPB mode1
 80022c8:	4b3c      	ldr	r3, [pc, #240]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80022ca:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80022ce:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80022d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80022d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022dc:	db5e      	blt.n	800239c <TrajectoryGenerationCalculation+0x21c>
	  {
		  TrjStruc.LinearTimeLSPB = (TrjStruc.Abs_Delta_Theta-TrjStruc.Theta_min_for_LSPB)/TrjStruc.AngularVelocityMax_Setting;
 80022de:	4b37      	ldr	r3, [pc, #220]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80022e0:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80022e4:	4b35      	ldr	r3, [pc, #212]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80022e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80022ea:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022ee:	4b33      	ldr	r3, [pc, #204]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80022f0:	ed93 7a04 	vldr	s14, [r3, #16]
 80022f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f8:	4b30      	ldr	r3, [pc, #192]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80022fa:	edc3 7a02 	vstr	s15, [r3, #8]
		  TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 80022fe:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 8002300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002302:	4a2e      	ldr	r2, [pc, #184]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 8002304:	6293      	str	r3, [r2, #40]	; 0x28
		  TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeLSPB*TrjStruc.BlendTimeLSPB))/2.0) + TrjStruc.Theta_Stamp_0;
 8002306:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 8002308:	ed93 7a07 	vldr	s14, [r3, #28]
 800230c:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 800230e:	edd3 6a00 	vldr	s13, [r3]
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800231c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002320:	ee17 0a90 	vmov	r0, s15
 8002324:	f7fe f8bc 	bl	80004a0 <__aeabi_f2d>
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002330:	f7fe fa38 	bl	80007a4 <__aeabi_ddiv>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4614      	mov	r4, r2
 800233a:	461d      	mov	r5, r3
 800233c:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f8ad 	bl	80004a0 <__aeabi_f2d>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4620      	mov	r0, r4
 800234c:	4629      	mov	r1, r5
 800234e:	f7fd ff49 	bl	80001e4 <__adddf3>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	f7fe fbc9 	bl	8000af0 <__aeabi_d2f>
 800235e:	4603      	mov	r3, r0
 8002360:	4a16      	ldr	r2, [pc, #88]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 8002362:	62d3      	str	r3, [r2, #44]	; 0x2c
		  TrjStruc.Theta_Stamp_2 = (TrjStruc.AngularVelocity*TrjStruc.LinearTimeLSPB) + TrjStruc.Theta_Stamp_1;
 8002364:	4b15      	ldr	r3, [pc, #84]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 8002366:	ed93 7a06 	vldr	s14, [r3, #24]
 800236a:	4b14      	ldr	r3, [pc, #80]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 800236c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002370:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 8002376:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800237a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 8002380:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		  TrjStruc.Mode = 1;
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 8002386:	2201      	movs	r2, #1
 8002388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		  TrjStruc.Submode = 0;
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 800238e:	2200      	movs	r2, #0
 8002390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		  TrjStruc.Subsubmode = 0;
 8002394:	4b09      	ldr	r3, [pc, #36]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 8002396:	2200      	movs	r2, #0
 8002398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  }
	 TrjStruc.Equation_Timestamp = micros();
 800239c:	f7ff fbfe 	bl	8001b9c <micros>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4905      	ldr	r1, [pc, #20]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80023a6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 TrjStruc.Loop_Timestamp = micros();
 80023aa:	f7ff fbf7 	bl	8001b9c <micros>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4902      	ldr	r1, [pc, #8]	; (80023bc <TrajectoryGenerationCalculation+0x23c>)
 80023b4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80023b8:	bf00      	nop
 80023ba:	bdb0      	pop	{r4, r5, r7, pc}
 80023bc:	200002c0 	.word	0x200002c0
 80023c0:	bf800000 	.word	0xbf800000
 80023c4:	00000000 	.word	0x00000000

080023c8 <TrajectoryGenerationProcess>:

void TrajectoryGenerationProcess()
{
 80023c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023cc:	ed2d 8b02 	vpush	{d8}
 80023d0:	b091      	sub	sp, #68	; 0x44
 80023d2:	af00      	add	r7, sp, #0

	TrjStruc.Equation_Realtime_Sec = (micros()-TrjStruc.Equation_Timestamp)/1000000.0;
 80023d4:	f7ff fbe2 	bl	8001b9c <micros>
 80023d8:	4ba3      	ldr	r3, [pc, #652]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 80023da:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80023de:	1a84      	subs	r4, r0, r2
 80023e0:	eb61 0503 	sbc.w	r5, r1, r3
 80023e4:	4620      	mov	r0, r4
 80023e6:	4629      	mov	r1, r5
 80023e8:	f7fe f87c 	bl	80004e4 <__aeabi_ul2d>
 80023ec:	a39c      	add	r3, pc, #624	; (adr r3, 8002660 <TrajectoryGenerationProcess+0x298>)
 80023ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f2:	f7fe f9d7 	bl	80007a4 <__aeabi_ddiv>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	4b9a      	ldr	r3, [pc, #616]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 8002400:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38

	 switch (TrjStruc.Mode)
 8002404:	4b98      	ldr	r3, [pc, #608]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 8002406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800240a:	2b02      	cmp	r3, #2
 800240c:	f000 83b0 	beq.w	8002b70 <TrajectoryGenerationProcess+0x7a8>
 8002410:	2b02      	cmp	r3, #2
 8002412:	f200 83bc 	bhi.w	8002b8e <TrajectoryGenerationProcess+0x7c6>
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <TrajectoryGenerationProcess+0x5a>
 800241a:	2b01      	cmp	r3, #1
 800241c:	f000 81b8 	beq.w	8002790 <TrajectoryGenerationProcess+0x3c8>
			  Moving_Link_Task_Flag = 1;
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
			  TrjStruc.AngularVelocityDesire = 0;
			  break;
		  }
}
 8002420:	e3b5      	b.n	8002b8e <TrajectoryGenerationProcess+0x7c6>
			  if (TrjStruc.Submode == 0)
 8002422:	4b91      	ldr	r3, [pc, #580]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 8002424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002428:	2b00      	cmp	r3, #0
 800242a:	d16f      	bne.n	800250c <TrajectoryGenerationProcess+0x144>
						  ((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 800242c:	4b8e      	ldr	r3, [pc, #568]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe f835 	bl	80004a0 <__aeabi_f2d>
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	4b8c      	ldr	r3, [pc, #560]	; (800266c <TrajectoryGenerationProcess+0x2a4>)
 800243c:	f7fe f888 	bl	8000550 <__aeabi_dmul>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4614      	mov	r4, r2
 8002446:	461d      	mov	r5, r3
 8002448:	4b87      	ldr	r3, [pc, #540]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 800244a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800244e:	4b86      	ldr	r3, [pc, #536]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 8002450:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002454:	f7fe f87c 	bl	8000550 <__aeabi_dmul>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4620      	mov	r0, r4
 800245e:	4629      	mov	r1, r5
 8002460:	f7fe f876 	bl	8000550 <__aeabi_dmul>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4614      	mov	r4, r2
 800246a:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_0;
 800246c:	4b7e      	ldr	r3, [pc, #504]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe f815 	bl	80004a0 <__aeabi_f2d>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4620      	mov	r0, r4
 800247c:	4629      	mov	r1, r5
 800247e:	f7fd feb1 	bl	80001e4 <__adddf3>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	f7fe fb31 	bl	8000af0 <__aeabi_d2f>
 800248e:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002490:	4a75      	ldr	r2, [pc, #468]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 8002492:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularAcceration * TrjStruc.Equation_Realtime_Sec;
 8002494:	4b74      	ldr	r3, [pc, #464]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe f801 	bl	80004a0 <__aeabi_f2d>
 800249e:	4b72      	ldr	r3, [pc, #456]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 80024a0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80024a4:	f7fe f854 	bl	8000550 <__aeabi_dmul>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7fe fb1e 	bl	8000af0 <__aeabi_d2f>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4a6c      	ldr	r2, [pc, #432]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 80024b8:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 80024ba:	f7ff fb6f 	bl	8001b9c <micros>
 80024be:	4b6a      	ldr	r3, [pc, #424]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 80024c0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80024c4:	1a84      	subs	r4, r0, r2
 80024c6:	63bc      	str	r4, [r7, #56]	; 0x38
 80024c8:	eb61 0303 	sbc.w	r3, r1, r3
 80024cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80024d2:	f7fe fc25 	bl	8000d20 <__aeabi_ul2f>
 80024d6:	ee06 0a90 	vmov	s13, r0
 80024da:	4b63      	ldr	r3, [pc, #396]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 80024dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80024e0:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002670 <TrajectoryGenerationProcess+0x2a8>
 80024e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80024ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f0:	da00      	bge.n	80024f4 <TrajectoryGenerationProcess+0x12c>
			  break;
 80024f2:	e349      	b.n	8002b88 <TrajectoryGenerationProcess+0x7c0>
					  TrjStruc.Equation_Timestamp = micros();
 80024f4:	f7ff fb52 	bl	8001b9c <micros>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	495a      	ldr	r1, [pc, #360]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 80024fe:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 1;
 8002502:	4b59      	ldr	r3, [pc, #356]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 8002504:	2201      	movs	r2, #1
 8002506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 800250a:	e33d      	b.n	8002b88 <TrajectoryGenerationProcess+0x7c0>
			  else if (TrjStruc.Submode == 1)
 800250c:	4b56      	ldr	r3, [pc, #344]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 800250e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002512:	2b01      	cmp	r3, #1
 8002514:	f040 8338 	bne.w	8002b88 <TrajectoryGenerationProcess+0x7c0>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002518:	4b53      	ldr	r3, [pc, #332]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fd ffbf 	bl	80004a0 <__aeabi_f2d>
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	4b53      	ldr	r3, [pc, #332]	; (8002674 <TrajectoryGenerationProcess+0x2ac>)
 8002528:	f7fe f812 	bl	8000550 <__aeabi_dmul>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4614      	mov	r4, r2
 8002532:	461d      	mov	r5, r3
 8002534:	4b4c      	ldr	r3, [pc, #304]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 8002536:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800253a:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 800253c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002540:	f7fe f806 	bl	8000550 <__aeabi_dmul>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4620      	mov	r0, r4
 800254a:	4629      	mov	r1, r5
 800254c:	f7fe f800 	bl	8000550 <__aeabi_dmul>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4614      	mov	r4, r2
 8002556:	461d      	mov	r5, r3
						  + (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular*(TrjStruc.Equation_Realtime_Sec))
 8002558:	4b43      	ldr	r3, [pc, #268]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 800255a:	ed93 7a07 	vldr	s14, [r3, #28]
 800255e:	4b42      	ldr	r3, [pc, #264]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 8002560:	edd3 7a01 	vldr	s15, [r3, #4]
 8002564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002568:	ee17 0a90 	vmov	r0, s15
 800256c:	f7fd ff98 	bl	80004a0 <__aeabi_f2d>
 8002570:	4b3d      	ldr	r3, [pc, #244]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 8002572:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002576:	f7fd ffeb 	bl	8000550 <__aeabi_dmul>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4620      	mov	r0, r4
 8002580:	4629      	mov	r1, r5
 8002582:	f7fd fe2f 	bl	80001e4 <__adddf3>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4614      	mov	r4, r2
 800258c:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_1;
 800258e:	4b36      	ldr	r3, [pc, #216]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	4618      	mov	r0, r3
 8002594:	f7fd ff84 	bl	80004a0 <__aeabi_f2d>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4620      	mov	r0, r4
 800259e:	4629      	mov	r1, r5
 80025a0:	f7fd fe20 	bl	80001e4 <__adddf3>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4610      	mov	r0, r2
 80025aa:	4619      	mov	r1, r3
 80025ac:	f7fe faa0 	bl	8000af0 <__aeabi_d2f>
 80025b0:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80025b2:	4a2d      	ldr	r2, [pc, #180]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 80025b4:	6213      	str	r3, [r2, #32]
				  if ( TrjStruc.Subsubmode == 0 )
 80025b6:	4b2c      	ldr	r3, [pc, #176]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 80025b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d15b      	bne.n	8002678 <TrajectoryGenerationProcess+0x2b0>
					  TrjStruc.AngularVelocityDesire = ( -1.0*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec ) +
 80025c0:	4b29      	ldr	r3, [pc, #164]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd ff6b 	bl	80004a0 <__aeabi_f2d>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	633a      	str	r2, [r7, #48]	; 0x30
 80025d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
 80025d6:	4b24      	ldr	r3, [pc, #144]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 80025d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80025dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80025e0:	f7fd ffb6 	bl	8000550 <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4614      	mov	r4, r2
 80025ea:	461d      	mov	r5, r3
													   (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular);
 80025ec:	4b1e      	ldr	r3, [pc, #120]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 80025ee:	ed93 7a07 	vldr	s14, [r3, #28]
 80025f2:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 80025f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80025f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fc:	ee17 0a90 	vmov	r0, s15
 8002600:	f7fd ff4e 	bl	80004a0 <__aeabi_f2d>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
					  TrjStruc.AngularVelocityDesire = ( -1.0*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec ) +
 8002608:	4620      	mov	r0, r4
 800260a:	4629      	mov	r1, r5
 800260c:	f7fd fdea 	bl	80001e4 <__adddf3>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	f7fe fa6a 	bl	8000af0 <__aeabi_d2f>
 800261c:	4603      	mov	r3, r0
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 8002620:	6253      	str	r3, [r2, #36]	; 0x24
					  if ( TrjStruc.Alpha * TrjStruc.AngularVelocityDesire <= TrjStruc.AngularVelocityFinalMin )
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 8002624:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002628:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 800262a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800262e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002632:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 8002634:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002638:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800263c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002640:	d875      	bhi.n	800272e <TrajectoryGenerationProcess+0x366>
						  TrjStruc.Subsubmode = 1;
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 8002644:	2201      	movs	r2, #1
 8002646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						  TrjStruc.Velocity_Timestamp = micros();
 800264a:	f7ff faa7 	bl	8001b9c <micros>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4905      	ldr	r1, [pc, #20]	; (8002668 <TrajectoryGenerationProcess+0x2a0>)
 8002654:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8002658:	e069      	b.n	800272e <TrajectoryGenerationProcess+0x366>
 800265a:	bf00      	nop
 800265c:	f3af 8000 	nop.w
 8002660:	00000000 	.word	0x00000000
 8002664:	412e8480 	.word	0x412e8480
 8002668:	200002c0 	.word	0x200002c0
 800266c:	3fe00000 	.word	0x3fe00000
 8002670:	49742400 	.word	0x49742400
 8002674:	bfe00000 	.word	0xbfe00000
				  else if ( TrjStruc.Subsubmode == 1 )
 8002678:	4ba9      	ldr	r3, [pc, #676]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	2b01      	cmp	r3, #1
 8002680:	d14c      	bne.n	800271c <TrajectoryGenerationProcess+0x354>
					  TrjStruc.AngularVelocityDesire = TrjStruc.Alpha * TrjStruc.AngularVelocityFinalMin;
 8002682:	4ba7      	ldr	r3, [pc, #668]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002684:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002688:	4ba5      	ldr	r3, [pc, #660]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 800268a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800268e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002692:	4ba3      	ldr	r3, [pc, #652]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002694:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					  if (micros()-TrjStruc.Velocity_Timestamp >= ((TrjStruc.BlendTimeTriangular*1000000)-(TrjStruc.Velocity_Timestamp - TrjStruc.Equation_Timestamp))/2.0)
 8002698:	f7ff fa80 	bl	8001b9c <micros>
 800269c:	4ba0      	ldr	r3, [pc, #640]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 800269e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80026a2:	1a84      	subs	r4, r0, r2
 80026a4:	62bc      	str	r4, [r7, #40]	; 0x28
 80026a6:	eb61 0303 	sbc.w	r3, r1, r3
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80026b0:	f7fd ff18 	bl	80004e4 <__aeabi_ul2d>
 80026b4:	4604      	mov	r4, r0
 80026b6:	460d      	mov	r5, r1
 80026b8:	4b99      	ldr	r3, [pc, #612]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 80026ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80026be:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8002924 <TrajectoryGenerationProcess+0x55c>
 80026c2:	ee27 8a87 	vmul.f32	s16, s15, s14
 80026c6:	4b96      	ldr	r3, [pc, #600]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 80026c8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80026cc:	4b94      	ldr	r3, [pc, #592]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 80026ce:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80026d2:	1a86      	subs	r6, r0, r2
 80026d4:	623e      	str	r6, [r7, #32]
 80026d6:	eb61 0303 	sbc.w	r3, r1, r3
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
 80026dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80026e0:	f7fe fb1e 	bl	8000d20 <__aeabi_ul2f>
 80026e4:	ee07 0a90 	vmov	s15, r0
 80026e8:	ee78 7a67 	vsub.f32	s15, s16, s15
 80026ec:	ee17 0a90 	vmov	r0, s15
 80026f0:	f7fd fed6 	bl	80004a0 <__aeabi_f2d>
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026fc:	f7fe f852 	bl	80007a4 <__aeabi_ddiv>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4620      	mov	r0, r4
 8002706:	4629      	mov	r1, r5
 8002708:	f7fe f9a8 	bl	8000a5c <__aeabi_dcmpge>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00d      	beq.n	800272e <TrajectoryGenerationProcess+0x366>
						  TrjStruc.Subsubmode = 2;
 8002712:	4b83      	ldr	r3, [pc, #524]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002714:	2202      	movs	r2, #2
 8002716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800271a:	e008      	b.n	800272e <TrajectoryGenerationProcess+0x366>
				  else if ( TrjStruc.Subsubmode == 2 )
 800271c:	4b80      	ldr	r3, [pc, #512]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	2b02      	cmp	r3, #2
 8002724:	d103      	bne.n	800272e <TrajectoryGenerationProcess+0x366>
					  TrjStruc.AngularVelocityDesire = 0;
 8002726:	4b7e      	ldr	r3, [pc, #504]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	625a      	str	r2, [r3, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 800272e:	f7ff fa35 	bl	8001b9c <micros>
 8002732:	4b7b      	ldr	r3, [pc, #492]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002734:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002738:	1a84      	subs	r4, r0, r2
 800273a:	61bc      	str	r4, [r7, #24]
 800273c:	eb61 0303 	sbc.w	r3, r1, r3
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002746:	f7fe faeb 	bl	8000d20 <__aeabi_ul2f>
 800274a:	ee06 0a90 	vmov	s13, r0
 800274e:	4b74      	ldr	r3, [pc, #464]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002750:	edd3 7a01 	vldr	s15, [r3, #4]
 8002754:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002924 <TrajectoryGenerationProcess+0x55c>
 8002758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800275c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002764:	da00      	bge.n	8002768 <TrajectoryGenerationProcess+0x3a0>
			  break;
 8002766:	e20f      	b.n	8002b88 <TrajectoryGenerationProcess+0x7c0>
					  TrjStruc.Equation_Timestamp = micros();
 8002768:	f7ff fa18 	bl	8001b9c <micros>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	496b      	ldr	r1, [pc, #428]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002772:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 0;
 8002776:	4b6a      	ldr	r3, [pc, #424]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002778:	2200      	movs	r2, #0
 800277a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					  TrjStruc.Subsubmode = 0;
 800277e:	4b68      	ldr	r3, [pc, #416]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002780:	2200      	movs	r2, #0
 8002782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					  TrjStruc.Mode = 2; ///Final Value Mode
 8002786:	4b66      	ldr	r3, [pc, #408]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002788:	2202      	movs	r2, #2
 800278a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			  break;
 800278e:	e1fb      	b.n	8002b88 <TrajectoryGenerationProcess+0x7c0>
			  if (TrjStruc.Submode == 0)
 8002790:	4b63      	ldr	r3, [pc, #396]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002796:	2b00      	cmp	r3, #0
 8002798:	d16e      	bne.n	8002878 <TrajectoryGenerationProcess+0x4b0>
							((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 800279a:	4b61      	ldr	r3, [pc, #388]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fe7e 	bl	80004a0 <__aeabi_f2d>
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	4b5f      	ldr	r3, [pc, #380]	; (8002928 <TrajectoryGenerationProcess+0x560>)
 80027aa:	f7fd fed1 	bl	8000550 <__aeabi_dmul>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4614      	mov	r4, r2
 80027b4:	461d      	mov	r5, r3
 80027b6:	4b5a      	ldr	r3, [pc, #360]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 80027b8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80027bc:	4b58      	ldr	r3, [pc, #352]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 80027be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80027c2:	f7fd fec5 	bl	8000550 <__aeabi_dmul>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4620      	mov	r0, r4
 80027cc:	4629      	mov	r1, r5
 80027ce:	f7fd febf 	bl	8000550 <__aeabi_dmul>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4614      	mov	r4, r2
 80027d8:	461d      	mov	r5, r3
							+TrjStruc.Theta_Stamp_0;
 80027da:	4b51      	ldr	r3, [pc, #324]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fd fe5e 	bl	80004a0 <__aeabi_f2d>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4620      	mov	r0, r4
 80027ea:	4629      	mov	r1, r5
 80027ec:	f7fd fcfa 	bl	80001e4 <__adddf3>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	f7fe f97a 	bl	8000af0 <__aeabi_d2f>
 80027fc:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80027fe:	4a48      	ldr	r2, [pc, #288]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002800:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularAcceration * TrjStruc.Equation_Realtime_Sec;
 8002802:	4b47      	ldr	r3, [pc, #284]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4618      	mov	r0, r3
 8002808:	f7fd fe4a 	bl	80004a0 <__aeabi_f2d>
 800280c:	4b44      	ldr	r3, [pc, #272]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 800280e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002812:	f7fd fe9d 	bl	8000550 <__aeabi_dmul>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	f7fe f967 	bl	8000af0 <__aeabi_d2f>
 8002822:	4603      	mov	r3, r0
 8002824:	4a3e      	ldr	r2, [pc, #248]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002826:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 8002828:	f7ff f9b8 	bl	8001b9c <micros>
 800282c:	4b3c      	ldr	r3, [pc, #240]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 800282e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002832:	ebb0 0a02 	subs.w	sl, r0, r2
 8002836:	eb61 0b03 	sbc.w	fp, r1, r3
 800283a:	4650      	mov	r0, sl
 800283c:	4659      	mov	r1, fp
 800283e:	f7fe fa6f 	bl	8000d20 <__aeabi_ul2f>
 8002842:	ee06 0a90 	vmov	s13, r0
 8002846:	4b36      	ldr	r3, [pc, #216]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002848:	edd3 7a00 	vldr	s15, [r3]
 800284c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002924 <TrajectoryGenerationProcess+0x55c>
 8002850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002854:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285c:	da00      	bge.n	8002860 <TrajectoryGenerationProcess+0x498>
			  break;
 800285e:	e195      	b.n	8002b8c <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002860:	f7ff f99c 	bl	8001b9c <micros>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	492d      	ldr	r1, [pc, #180]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 800286a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 1;
 800286e:	4b2c      	ldr	r3, [pc, #176]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002870:	2201      	movs	r2, #1
 8002872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 8002876:	e189      	b.n	8002b8c <TrajectoryGenerationProcess+0x7c4>
			  else if (TrjStruc.Submode == 1)
 8002878:	4b29      	ldr	r3, [pc, #164]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 800287a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800287e:	2b01      	cmp	r3, #1
 8002880:	d154      	bne.n	800292c <TrajectoryGenerationProcess+0x564>
						  (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8002882:	4b27      	ldr	r3, [pc, #156]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	4618      	mov	r0, r3
 8002888:	f7fd fe0a 	bl	80004a0 <__aeabi_f2d>
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 800288e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002892:	f7fd fe5d 	bl	8000550 <__aeabi_dmul>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4614      	mov	r4, r2
 800289c:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_1;
 800289e:	4b20      	ldr	r3, [pc, #128]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fd fdfc 	bl	80004a0 <__aeabi_f2d>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4620      	mov	r0, r4
 80028ae:	4629      	mov	r1, r5
 80028b0:	f7fd fc98 	bl	80001e4 <__adddf3>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	f7fe f918 	bl	8000af0 <__aeabi_d2f>
 80028c0:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80028c2:	4a17      	ldr	r2, [pc, #92]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 80028c4:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularVelocity;
 80028c6:	4b16      	ldr	r3, [pc, #88]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	4a15      	ldr	r2, [pc, #84]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 80028cc:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.LinearTimeLSPB*1000000)
 80028ce:	f7ff f965 	bl	8001b9c <micros>
 80028d2:	4b13      	ldr	r3, [pc, #76]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 80028d4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80028d8:	ebb0 0802 	subs.w	r8, r0, r2
 80028dc:	eb61 0903 	sbc.w	r9, r1, r3
 80028e0:	4640      	mov	r0, r8
 80028e2:	4649      	mov	r1, r9
 80028e4:	f7fe fa1c 	bl	8000d20 <__aeabi_ul2f>
 80028e8:	ee06 0a90 	vmov	s13, r0
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 80028ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80028f2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002924 <TrajectoryGenerationProcess+0x55c>
 80028f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028fa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80028fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002902:	da00      	bge.n	8002906 <TrajectoryGenerationProcess+0x53e>
			  break;
 8002904:	e142      	b.n	8002b8c <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002906:	f7ff f949 	bl	8001b9c <micros>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4904      	ldr	r1, [pc, #16]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002910:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 2;
 8002914:	4b02      	ldr	r3, [pc, #8]	; (8002920 <TrajectoryGenerationProcess+0x558>)
 8002916:	2202      	movs	r2, #2
 8002918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 800291c:	e136      	b.n	8002b8c <TrajectoryGenerationProcess+0x7c4>
 800291e:	bf00      	nop
 8002920:	200002c0 	.word	0x200002c0
 8002924:	49742400 	.word	0x49742400
 8002928:	3fe00000 	.word	0x3fe00000
			  else if (TrjStruc.Submode == 2)
 800292c:	4b9b      	ldr	r3, [pc, #620]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 800292e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002932:	2b02      	cmp	r3, #2
 8002934:	f040 812a 	bne.w	8002b8c <TrajectoryGenerationProcess+0x7c4>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002938:	4b98      	ldr	r3, [pc, #608]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fdaf 	bl	80004a0 <__aeabi_f2d>
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	4b96      	ldr	r3, [pc, #600]	; (8002ba0 <TrajectoryGenerationProcess+0x7d8>)
 8002948:	f7fd fe02 	bl	8000550 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4614      	mov	r4, r2
 8002952:	461d      	mov	r5, r3
 8002954:	4b91      	ldr	r3, [pc, #580]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002956:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800295a:	4b90      	ldr	r3, [pc, #576]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 800295c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002960:	f7fd fdf6 	bl	8000550 <__aeabi_dmul>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4620      	mov	r0, r4
 800296a:	4629      	mov	r1, r5
 800296c:	f7fd fdf0 	bl	8000550 <__aeabi_dmul>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4614      	mov	r4, r2
 8002976:	461d      	mov	r5, r3
						  + (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8002978:	4b88      	ldr	r3, [pc, #544]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fd8f 	bl	80004a0 <__aeabi_f2d>
 8002982:	4b86      	ldr	r3, [pc, #536]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002984:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002988:	f7fd fde2 	bl	8000550 <__aeabi_dmul>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4620      	mov	r0, r4
 8002992:	4629      	mov	r1, r5
 8002994:	f7fd fc26 	bl	80001e4 <__adddf3>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4614      	mov	r4, r2
 800299e:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_2;
 80029a0:	4b7e      	ldr	r3, [pc, #504]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fd fd7b 	bl	80004a0 <__aeabi_f2d>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4620      	mov	r0, r4
 80029b0:	4629      	mov	r1, r5
 80029b2:	f7fd fc17 	bl	80001e4 <__adddf3>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	f7fe f897 	bl	8000af0 <__aeabi_d2f>
 80029c2:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80029c4:	4a75      	ldr	r2, [pc, #468]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 80029c6:	6213      	str	r3, [r2, #32]
				  if ( TrjStruc.Subsubmode == 0 )
 80029c8:	4b74      	ldr	r3, [pc, #464]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d142      	bne.n	8002a58 <TrajectoryGenerationProcess+0x690>
					  TrjStruc.AngularVelocityDesire = ( -1*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec )
 80029d2:	4b72      	ldr	r3, [pc, #456]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 80029d4:	edd3 7a07 	vldr	s15, [r3, #28]
 80029d8:	eef1 7a67 	vneg.f32	s15, s15
 80029dc:	ee17 3a90 	vmov	r3, s15
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fd5d 	bl	80004a0 <__aeabi_f2d>
 80029e6:	4b6d      	ldr	r3, [pc, #436]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 80029e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80029ec:	f7fd fdb0 	bl	8000550 <__aeabi_dmul>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4614      	mov	r4, r2
 80029f6:	461d      	mov	r5, r3
							                           + ( TrjStruc.AngularVelocity );
 80029f8:	4b68      	ldr	r3, [pc, #416]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fd fd4f 	bl	80004a0 <__aeabi_f2d>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4620      	mov	r0, r4
 8002a08:	4629      	mov	r1, r5
 8002a0a:	f7fd fbeb 	bl	80001e4 <__adddf3>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4610      	mov	r0, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	f7fe f86b 	bl	8000af0 <__aeabi_d2f>
 8002a1a:	4603      	mov	r3, r0
					  TrjStruc.AngularVelocityDesire = ( -1*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec )
 8002a1c:	4a5f      	ldr	r2, [pc, #380]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002a1e:	6253      	str	r3, [r2, #36]	; 0x24
					  if (  TrjStruc.Alpha * TrjStruc.AngularVelocityDesire <=  TrjStruc.AngularVelocityFinalMin )
 8002a20:	4b5e      	ldr	r3, [pc, #376]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002a22:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002a26:	4b5d      	ldr	r3, [pc, #372]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002a28:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a30:	4b5a      	ldr	r3, [pc, #360]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002a32:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3e:	d866      	bhi.n	8002b0e <TrajectoryGenerationProcess+0x746>
						  TrjStruc.Subsubmode = 1;
 8002a40:	4b56      	ldr	r3, [pc, #344]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						  TrjStruc.Velocity_Timestamp = micros();
 8002a48:	f7ff f8a8 	bl	8001b9c <micros>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4952      	ldr	r1, [pc, #328]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002a52:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8002a56:	e05a      	b.n	8002b0e <TrajectoryGenerationProcess+0x746>
				  else if ( TrjStruc.Subsubmode == 1 )
 8002a58:	4b50      	ldr	r3, [pc, #320]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d14c      	bne.n	8002afc <TrajectoryGenerationProcess+0x734>
					  TrjStruc.AngularVelocityDesire = TrjStruc.Alpha * TrjStruc.AngularVelocityFinalMin;
 8002a62:	4b4e      	ldr	r3, [pc, #312]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002a64:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002a68:	4b4c      	ldr	r3, [pc, #304]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002a6a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a72:	4b4a      	ldr	r3, [pc, #296]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002a74:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					  if (micros()-TrjStruc.Velocity_Timestamp >= ((TrjStruc.BlendTimeLSPB*1000000)-(TrjStruc.Velocity_Timestamp - TrjStruc.Equation_Timestamp))/2.0)
 8002a78:	f7ff f890 	bl	8001b9c <micros>
 8002a7c:	4b47      	ldr	r3, [pc, #284]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002a7e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002a82:	1a84      	subs	r4, r0, r2
 8002a84:	613c      	str	r4, [r7, #16]
 8002a86:	eb61 0303 	sbc.w	r3, r1, r3
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a90:	f7fd fd28 	bl	80004e4 <__aeabi_ul2d>
 8002a94:	4604      	mov	r4, r0
 8002a96:	460d      	mov	r5, r1
 8002a98:	4b40      	ldr	r3, [pc, #256]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002a9a:	edd3 7a00 	vldr	s15, [r3]
 8002a9e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002ba4 <TrajectoryGenerationProcess+0x7dc>
 8002aa2:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002aa8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002aac:	4b3b      	ldr	r3, [pc, #236]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002aae:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002ab2:	1a86      	subs	r6, r0, r2
 8002ab4:	60be      	str	r6, [r7, #8]
 8002ab6:	eb61 0303 	sbc.w	r3, r1, r3
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ac0:	f7fe f92e 	bl	8000d20 <__aeabi_ul2f>
 8002ac4:	ee07 0a90 	vmov	s15, r0
 8002ac8:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002acc:	ee17 0a90 	vmov	r0, s15
 8002ad0:	f7fd fce6 	bl	80004a0 <__aeabi_f2d>
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002adc:	f7fd fe62 	bl	80007a4 <__aeabi_ddiv>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	f7fd ffb8 	bl	8000a5c <__aeabi_dcmpge>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00d      	beq.n	8002b0e <TrajectoryGenerationProcess+0x746>
						  TrjStruc.Subsubmode = 2;
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002af4:	2202      	movs	r2, #2
 8002af6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8002afa:	e008      	b.n	8002b0e <TrajectoryGenerationProcess+0x746>
				  else if ( TrjStruc.Subsubmode == 2 )
 8002afc:	4b27      	ldr	r3, [pc, #156]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d103      	bne.n	8002b0e <TrajectoryGenerationProcess+0x746>
					  TrjStruc.AngularVelocityDesire = 0;
 8002b06:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 8002b0e:	f7ff f845 	bl	8001b9c <micros>
 8002b12:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002b14:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002b18:	1a84      	subs	r4, r0, r2
 8002b1a:	603c      	str	r4, [r7, #0]
 8002b1c:	eb61 0303 	sbc.w	r3, r1, r3
 8002b20:	607b      	str	r3, [r7, #4]
 8002b22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b26:	f7fe f8fb 	bl	8000d20 <__aeabi_ul2f>
 8002b2a:	ee06 0a90 	vmov	s13, r0
 8002b2e:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002b30:	edd3 7a00 	vldr	s15, [r3]
 8002b34:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002ba4 <TrajectoryGenerationProcess+0x7dc>
 8002b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b3c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b44:	da00      	bge.n	8002b48 <TrajectoryGenerationProcess+0x780>
			  break;
 8002b46:	e021      	b.n	8002b8c <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002b48:	f7ff f828 	bl	8001b9c <micros>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4912      	ldr	r1, [pc, #72]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002b52:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 0;
 8002b56:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					  TrjStruc.Subsubmode = 0;
 8002b5e:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					  TrjStruc.Mode = 2; ///Final Value Mode
 8002b66:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002b68:	2202      	movs	r2, #2
 8002b6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			  break;
 8002b6e:	e00d      	b.n	8002b8c <TrajectoryGenerationProcess+0x7c4>
			  Moving_Link_Task_Flag = 1;
 8002b70:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <TrajectoryGenerationProcess+0x7e0>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	701a      	strb	r2, [r3, #0]
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002b78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b7a:	4a08      	ldr	r2, [pc, #32]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002b7c:	6213      	str	r3, [r2, #32]
			  TrjStruc.AngularVelocityDesire = 0;
 8002b7e:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <TrajectoryGenerationProcess+0x7d4>)
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24
			  break;
 8002b86:	e002      	b.n	8002b8e <TrajectoryGenerationProcess+0x7c6>
			  break;
 8002b88:	bf00      	nop
 8002b8a:	e000      	b.n	8002b8e <TrajectoryGenerationProcess+0x7c6>
			  break;
 8002b8c:	bf00      	nop
}
 8002b8e:	bf00      	nop
 8002b90:	3744      	adds	r7, #68	; 0x44
 8002b92:	46bd      	mov	sp, r7
 8002b94:	ecbd 8b02 	vpop	{d8}
 8002b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b9c:	200002c0 	.word	0x200002c0
 8002ba0:	bfe00000 	.word	0xbfe00000
 8002ba4:	49742400 	.word	0x49742400
 8002ba8:	200001e8 	.word	0x200001e8

08002bac <PIDController2in1>:

void PIDController2in1()
{
 8002bac:	b5b0      	push	{r4, r5, r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	PositionPIDController.OutputDesire = TrjStruc.AngularDisplacementDesire;
 8002bb0:	4b7f      	ldr	r3, [pc, #508]	; (8002db0 <PIDController2in1+0x204>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	4a7f      	ldr	r2, [pc, #508]	; (8002db4 <PIDController2in1+0x208>)
 8002bb6:	61d3      	str	r3, [r2, #28]
    PositionPIDController.NowError = PositionPIDController.OutputDesire - PositionPIDController.OutputFeedback;
 8002bb8:	4b7e      	ldr	r3, [pc, #504]	; (8002db4 <PIDController2in1+0x208>)
 8002bba:	ed93 7a07 	vldr	s14, [r3, #28]
 8002bbe:	4b7d      	ldr	r3, [pc, #500]	; (8002db4 <PIDController2in1+0x208>)
 8002bc0:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bc8:	4b7a      	ldr	r3, [pc, #488]	; (8002db4 <PIDController2in1+0x208>)
 8002bca:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    PositionPIDController.Integral_Value += PositionPIDController.NowError*PositionPIDController.SamplingTime;
 8002bce:	4b79      	ldr	r3, [pc, #484]	; (8002db4 <PIDController2in1+0x208>)
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fd fc64 	bl	80004a0 <__aeabi_f2d>
 8002bd8:	4604      	mov	r4, r0
 8002bda:	460d      	mov	r5, r1
 8002bdc:	4b75      	ldr	r3, [pc, #468]	; (8002db4 <PIDController2in1+0x208>)
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fd fc5d 	bl	80004a0 <__aeabi_f2d>
 8002be6:	4b73      	ldr	r3, [pc, #460]	; (8002db4 <PIDController2in1+0x208>)
 8002be8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002bec:	f7fd fcb0 	bl	8000550 <__aeabi_dmul>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	f7fd faf4 	bl	80001e4 <__adddf3>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	f7fd ff74 	bl	8000af0 <__aeabi_d2f>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	4a6a      	ldr	r2, [pc, #424]	; (8002db4 <PIDController2in1+0x208>)
 8002c0c:	6253      	str	r3, [r2, #36]	; 0x24
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002c0e:	4b69      	ldr	r3, [pc, #420]	; (8002db4 <PIDController2in1+0x208>)
 8002c10:	ed93 7a00 	vldr	s14, [r3]
 8002c14:	4b67      	ldr	r3, [pc, #412]	; (8002db4 <PIDController2in1+0x208>)
 8002c16:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(PositionPIDController.Ki * PositionPIDController.Integral_Value)
 8002c1e:	4b65      	ldr	r3, [pc, #404]	; (8002db4 <PIDController2in1+0x208>)
 8002c20:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c24:	4b63      	ldr	r3, [pc, #396]	; (8002db4 <PIDController2in1+0x208>)
 8002c26:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c32:	ee17 0a90 	vmov	r0, s15
 8002c36:	f7fd fc33 	bl	80004a0 <__aeabi_f2d>
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	460d      	mov	r5, r1
					  +(PositionPIDController.Kd * (PositionPIDController.NowError-PositionPIDController.PreviousError)/PositionPIDController.SamplingTime);
 8002c3e:	4b5d      	ldr	r3, [pc, #372]	; (8002db4 <PIDController2in1+0x208>)
 8002c40:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c44:	4b5b      	ldr	r3, [pc, #364]	; (8002db4 <PIDController2in1+0x208>)
 8002c46:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002c4a:	4b5a      	ldr	r3, [pc, #360]	; (8002db4 <PIDController2in1+0x208>)
 8002c4c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002c50:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c58:	ee17 0a90 	vmov	r0, s15
 8002c5c:	f7fd fc20 	bl	80004a0 <__aeabi_f2d>
 8002c60:	4b54      	ldr	r3, [pc, #336]	; (8002db4 <PIDController2in1+0x208>)
 8002c62:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002c66:	f7fd fd9d 	bl	80007a4 <__aeabi_ddiv>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4620      	mov	r0, r4
 8002c70:	4629      	mov	r1, r5
 8002c72:	f7fd fab7 	bl	80001e4 <__adddf3>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f7fd ff37 	bl	8000af0 <__aeabi_d2f>
 8002c82:	4603      	mov	r3, r0
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002c84:	4a4b      	ldr	r2, [pc, #300]	; (8002db4 <PIDController2in1+0x208>)
 8002c86:	6153      	str	r3, [r2, #20]
    PositionPIDController.PreviousError = PositionPIDController.NowError;
 8002c88:	4b4a      	ldr	r3, [pc, #296]	; (8002db4 <PIDController2in1+0x208>)
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	4a49      	ldr	r2, [pc, #292]	; (8002db4 <PIDController2in1+0x208>)
 8002c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

    VelocityPIDController.OutputDesire = PositionPIDController.ControllerOutput + TrjStruc.AngularVelocityDesire;
 8002c90:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <PIDController2in1+0x208>)
 8002c92:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c96:	4b46      	ldr	r3, [pc, #280]	; (8002db0 <PIDController2in1+0x204>)
 8002c98:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca0:	4b45      	ldr	r3, [pc, #276]	; (8002db8 <PIDController2in1+0x20c>)
 8002ca2:	edc3 7a07 	vstr	s15, [r3, #28]
    VelocityPIDController.NowError = VelocityPIDController.OutputDesire - VelocityPIDController.OutputFeedback;
 8002ca6:	4b44      	ldr	r3, [pc, #272]	; (8002db8 <PIDController2in1+0x20c>)
 8002ca8:	ed93 7a07 	vldr	s14, [r3, #28]
 8002cac:	4b42      	ldr	r3, [pc, #264]	; (8002db8 <PIDController2in1+0x20c>)
 8002cae:	edd3 7a08 	vldr	s15, [r3, #32]
 8002cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb6:	4b40      	ldr	r3, [pc, #256]	; (8002db8 <PIDController2in1+0x20c>)
 8002cb8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    VelocityPIDController.Integral_Value += VelocityPIDController.NowError*VelocityPIDController.SamplingTime;
 8002cbc:	4b3e      	ldr	r3, [pc, #248]	; (8002db8 <PIDController2in1+0x20c>)
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fbed 	bl	80004a0 <__aeabi_f2d>
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	460d      	mov	r5, r1
 8002cca:	4b3b      	ldr	r3, [pc, #236]	; (8002db8 <PIDController2in1+0x20c>)
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fd fbe6 	bl	80004a0 <__aeabi_f2d>
 8002cd4:	4b38      	ldr	r3, [pc, #224]	; (8002db8 <PIDController2in1+0x20c>)
 8002cd6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002cda:	f7fd fc39 	bl	8000550 <__aeabi_dmul>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	f7fd fa7d 	bl	80001e4 <__adddf3>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f7fd fefd 	bl	8000af0 <__aeabi_d2f>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4a2f      	ldr	r2, [pc, #188]	; (8002db8 <PIDController2in1+0x20c>)
 8002cfa:	6253      	str	r3, [r2, #36]	; 0x24
    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
 8002cfc:	4b2e      	ldr	r3, [pc, #184]	; (8002db8 <PIDController2in1+0x20c>)
 8002cfe:	ed93 7a00 	vldr	s14, [r3]
 8002d02:	4b2d      	ldr	r3, [pc, #180]	; (8002db8 <PIDController2in1+0x20c>)
 8002d04:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d08:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(VelocityPIDController.Ki * VelocityPIDController.Integral_Value)
 8002d0c:	4b2a      	ldr	r3, [pc, #168]	; (8002db8 <PIDController2in1+0x20c>)
 8002d0e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002d12:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <PIDController2in1+0x20c>)
 8002d14:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d20:	ee17 0a90 	vmov	r0, s15
 8002d24:	f7fd fbbc 	bl	80004a0 <__aeabi_f2d>
 8002d28:	4604      	mov	r4, r0
 8002d2a:	460d      	mov	r5, r1
					  +(VelocityPIDController.Kd * (VelocityPIDController.NowError-VelocityPIDController.PreviousError)/VelocityPIDController.SamplingTime)
 8002d2c:	4b22      	ldr	r3, [pc, #136]	; (8002db8 <PIDController2in1+0x20c>)
 8002d2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d32:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <PIDController2in1+0x20c>)
 8002d34:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002d38:	4b1f      	ldr	r3, [pc, #124]	; (8002db8 <PIDController2in1+0x20c>)
 8002d3a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d3e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d46:	ee17 0a90 	vmov	r0, s15
 8002d4a:	f7fd fba9 	bl	80004a0 <__aeabi_f2d>
 8002d4e:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <PIDController2in1+0x20c>)
 8002d50:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002d54:	f7fd fd26 	bl	80007a4 <__aeabi_ddiv>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	4629      	mov	r1, r5
 8002d60:	f7fd fa40 	bl	80001e4 <__adddf3>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4614      	mov	r4, r2
 8002d6a:	461d      	mov	r5, r3
					  +( TrjStruc.Alpha * VelocityPIDController.offSet );
 8002d6c:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <PIDController2in1+0x204>)
 8002d6e:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <PIDController2in1+0x20c>)
 8002d74:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d7c:	ee17 0a90 	vmov	r0, s15
 8002d80:	f7fd fb8e 	bl	80004a0 <__aeabi_f2d>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4620      	mov	r0, r4
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	f7fd fa2a 	bl	80001e4 <__adddf3>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	f7fd feaa 	bl	8000af0 <__aeabi_d2f>
 8002d9c:	4603      	mov	r3, r0
    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
 8002d9e:	4a06      	ldr	r2, [pc, #24]	; (8002db8 <PIDController2in1+0x20c>)
 8002da0:	6153      	str	r3, [r2, #20]
    VelocityPIDController.PreviousError = VelocityPIDController.NowError;
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <PIDController2in1+0x20c>)
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <PIDController2in1+0x20c>)
 8002da8:	62d3      	str	r3, [r2, #44]	; 0x2c

}
 8002daa:	bf00      	nop
 8002dac:	bdb0      	pop	{r4, r5, r7, pc}
 8002dae:	bf00      	nop
 8002db0:	200002c0 	.word	0x200002c0
 8002db4:	20000200 	.word	0x20000200
 8002db8:	20000240 	.word	0x20000240

08002dbc <StabilizerPID>:

void StabilizerPID()
{
 8002dbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002dc0:	af00      	add	r7, sp, #0
	StabilizerPIDController.OutputDesire = TrjStruc.AngularDisplacementDesire;
 8002dc2:	4b67      	ldr	r3, [pc, #412]	; (8002f60 <StabilizerPID+0x1a4>)
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	4a67      	ldr	r2, [pc, #412]	; (8002f64 <StabilizerPID+0x1a8>)
 8002dc8:	61d3      	str	r3, [r2, #28]
	StabilizerPIDController.NowError = StabilizerPIDController.OutputDesire - StabilizerPIDController.OutputFeedback;
 8002dca:	4b66      	ldr	r3, [pc, #408]	; (8002f64 <StabilizerPID+0x1a8>)
 8002dcc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002dd0:	4b64      	ldr	r3, [pc, #400]	; (8002f64 <StabilizerPID+0x1a8>)
 8002dd2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dda:	4b62      	ldr	r3, [pc, #392]	; (8002f64 <StabilizerPID+0x1a8>)
 8002ddc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	if (( StabilizerPIDController.NowError <= AcceptableError ) && ( StabilizerPIDController.NowError >= -1.0*AcceptableError ))
 8002de0:	4b60      	ldr	r3, [pc, #384]	; (8002f64 <StabilizerPID+0x1a8>)
 8002de2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002de6:	4b60      	ldr	r3, [pc, #384]	; (8002f68 <StabilizerPID+0x1ac>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002df2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfa:	d81e      	bhi.n	8002e3a <StabilizerPID+0x7e>
 8002dfc:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <StabilizerPID+0x1a8>)
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd fb4d 	bl	80004a0 <__aeabi_f2d>
 8002e06:	4680      	mov	r8, r0
 8002e08:	4689      	mov	r9, r1
 8002e0a:	4b57      	ldr	r3, [pc, #348]	; (8002f68 <StabilizerPID+0x1ac>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd fb34 	bl	800047c <__aeabi_i2d>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4614      	mov	r4, r2
 8002e1a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002e1e:	4622      	mov	r2, r4
 8002e20:	462b      	mov	r3, r5
 8002e22:	4640      	mov	r0, r8
 8002e24:	4649      	mov	r1, r9
 8002e26:	f7fd fe19 	bl	8000a5c <__aeabi_dcmpge>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d004      	beq.n	8002e3a <StabilizerPID+0x7e>
	{
		StabilizerPIDController.NowError = 0;
 8002e30:	4b4c      	ldr	r3, [pc, #304]	; (8002f64 <StabilizerPID+0x1a8>)
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28
 8002e38:	e017      	b.n	8002e6a <StabilizerPID+0xae>
	}
	else if ( StabilizerPIDController.NowError < 0 )
 8002e3a:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <StabilizerPID+0x1a8>)
 8002e3c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e48:	d503      	bpl.n	8002e52 <StabilizerPID+0x96>
	{
		TrjStruc.Alpha = -1;
 8002e4a:	4b45      	ldr	r3, [pc, #276]	; (8002f60 <StabilizerPID+0x1a4>)
 8002e4c:	4a47      	ldr	r2, [pc, #284]	; (8002f6c <StabilizerPID+0x1b0>)
 8002e4e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002e50:	e00b      	b.n	8002e6a <StabilizerPID+0xae>
	}
	else if ( StabilizerPIDController.NowError >= 0 )
 8002e52:	4b44      	ldr	r3, [pc, #272]	; (8002f64 <StabilizerPID+0x1a8>)
 8002e54:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e60:	db03      	blt.n	8002e6a <StabilizerPID+0xae>
	{
		TrjStruc.Alpha = 1;
 8002e62:	4b3f      	ldr	r3, [pc, #252]	; (8002f60 <StabilizerPID+0x1a4>)
 8002e64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e68:	67da      	str	r2, [r3, #124]	; 0x7c
	}
	StabilizerPIDController.Integral_Value += StabilizerPIDController.NowError*StabilizerPIDController.SamplingTime;
 8002e6a:	4b3e      	ldr	r3, [pc, #248]	; (8002f64 <StabilizerPID+0x1a8>)
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd fb16 	bl	80004a0 <__aeabi_f2d>
 8002e74:	4604      	mov	r4, r0
 8002e76:	460d      	mov	r5, r1
 8002e78:	4b3a      	ldr	r3, [pc, #232]	; (8002f64 <StabilizerPID+0x1a8>)
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd fb0f 	bl	80004a0 <__aeabi_f2d>
 8002e82:	4b38      	ldr	r3, [pc, #224]	; (8002f64 <StabilizerPID+0x1a8>)
 8002e84:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002e88:	f7fd fb62 	bl	8000550 <__aeabi_dmul>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4620      	mov	r0, r4
 8002e92:	4629      	mov	r1, r5
 8002e94:	f7fd f9a6 	bl	80001e4 <__adddf3>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f7fd fe26 	bl	8000af0 <__aeabi_d2f>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	4a2f      	ldr	r2, [pc, #188]	; (8002f64 <StabilizerPID+0x1a8>)
 8002ea8:	6253      	str	r3, [r2, #36]	; 0x24
	StabilizerPIDController.ControllerOutput = (StabilizerPIDController.Kp*StabilizerPIDController.NowError)
 8002eaa:	4b2e      	ldr	r3, [pc, #184]	; (8002f64 <StabilizerPID+0x1a8>)
 8002eac:	ed93 7a00 	vldr	s14, [r3]
 8002eb0:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <StabilizerPID+0x1a8>)
 8002eb2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002eb6:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(StabilizerPIDController.Ki * StabilizerPIDController.Integral_Value)
 8002eba:	4b2a      	ldr	r3, [pc, #168]	; (8002f64 <StabilizerPID+0x1a8>)
 8002ebc:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ec0:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <StabilizerPID+0x1a8>)
 8002ec2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ece:	ee17 0a90 	vmov	r0, s15
 8002ed2:	f7fd fae5 	bl	80004a0 <__aeabi_f2d>
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	460d      	mov	r5, r1
					  +(StabilizerPIDController.Kd * (StabilizerPIDController.NowError-StabilizerPIDController.PreviousError)/StabilizerPIDController.SamplingTime)
 8002eda:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <StabilizerPID+0x1a8>)
 8002edc:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ee0:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <StabilizerPID+0x1a8>)
 8002ee2:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002ee6:	4b1f      	ldr	r3, [pc, #124]	; (8002f64 <StabilizerPID+0x1a8>)
 8002ee8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002eec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef4:	ee17 0a90 	vmov	r0, s15
 8002ef8:	f7fd fad2 	bl	80004a0 <__aeabi_f2d>
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <StabilizerPID+0x1a8>)
 8002efe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002f02:	f7fd fc4f 	bl	80007a4 <__aeabi_ddiv>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	f7fd f969 	bl	80001e4 <__adddf3>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4614      	mov	r4, r2
 8002f18:	461d      	mov	r5, r3
					  +( TrjStruc.Alpha * StabilizerPIDController.offSet );
 8002f1a:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <StabilizerPID+0x1a4>)
 8002f1c:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002f20:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <StabilizerPID+0x1a8>)
 8002f22:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2a:	ee17 0a90 	vmov	r0, s15
 8002f2e:	f7fd fab7 	bl	80004a0 <__aeabi_f2d>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4620      	mov	r0, r4
 8002f38:	4629      	mov	r1, r5
 8002f3a:	f7fd f953 	bl	80001e4 <__adddf3>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4610      	mov	r0, r2
 8002f44:	4619      	mov	r1, r3
 8002f46:	f7fd fdd3 	bl	8000af0 <__aeabi_d2f>
 8002f4a:	4603      	mov	r3, r0
	StabilizerPIDController.ControllerOutput = (StabilizerPIDController.Kp*StabilizerPIDController.NowError)
 8002f4c:	4a05      	ldr	r2, [pc, #20]	; (8002f64 <StabilizerPID+0x1a8>)
 8002f4e:	6153      	str	r3, [r2, #20]

	StabilizerPIDController.PreviousError = StabilizerPIDController.NowError;
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <StabilizerPID+0x1a8>)
 8002f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f54:	4a03      	ldr	r2, [pc, #12]	; (8002f64 <StabilizerPID+0x1a8>)
 8002f56:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002f58:	bf00      	nop
 8002f5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f5e:	bf00      	nop
 8002f60:	200002c0 	.word	0x200002c0
 8002f64:	20000280 	.word	0x20000280
 8002f68:	20000014 	.word	0x20000014
 8002f6c:	bf800000 	.word	0xbf800000

08002f70 <UARTInit>:


///UART ZONE
void UARTInit(UARTStucrture *uart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8002f78:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <UARTInit+0x4c>)
 8002f7a:	88db      	ldrh	r3, [r3, #6]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f007 f82c 	bl	8009fdc <calloc>
 8002f84:	4603      	mov	r3, r0
 8002f86:	461a      	mov	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <UARTInit+0x4c>)
 8002f8e:	889b      	ldrh	r3, [r3, #4]
 8002f90:	4619      	mov	r1, r3
 8002f92:	2001      	movs	r0, #1
 8002f94:	f007 f822 	bl	8009fdc <calloc>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	81da      	strh	r2, [r3, #14]
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	200000b8 	.word	0x200000b8

08002fc0 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6919      	ldr	r1, [r3, #16]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	88db      	ldrh	r3, [r3, #6]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	f006 f97d 	bl	80092d4 <HAL_UART_Receive_DMA>
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	88db      	ldrh	r3, [r3, #6]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	1ad3      	subs	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8003010:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003014:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	8a9b      	ldrh	r3, [r3, #20]
 800301a:	461c      	mov	r4, r3
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff ffe0 	bl	8002fe2 <UARTGetRxHead>
 8003022:	4603      	mov	r3, r0
 8003024:	429c      	cmp	r4, r3
 8003026:	d013      	beq.n	8003050 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	8a92      	ldrh	r2, [r2, #20]
 8003030:	4413      	add	r3, r2
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	8a9b      	ldrh	r3, [r3, #20]
 800303a:	3301      	adds	r3, #1
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	88d2      	ldrh	r2, [r2, #6]
 8003040:	fb93 f1f2 	sdiv	r1, r3, r2
 8003044:	fb02 f201 	mul.w	r2, r2, r1
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	b29a      	uxth	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8003050:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	bd90      	pop	{r4, r7, pc}

0800305c <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b20      	cmp	r3, #32
 8003070:	d13d      	bne.n	80030ee <UARTTxDumpBuffer+0x92>
 8003072:	4b21      	ldr	r3, [pc, #132]	; (80030f8 <UARTTxDumpBuffer+0x9c>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d139      	bne.n	80030ee <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 800307a:	4b1f      	ldr	r3, [pc, #124]	; (80030f8 <UARTTxDumpBuffer+0x9c>)
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	89da      	ldrh	r2, [r3, #14]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	899b      	ldrh	r3, [r3, #12]
 8003088:	429a      	cmp	r2, r3
 800308a:	d02d      	beq.n	80030e8 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	89da      	ldrh	r2, [r3, #14]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8003094:	429a      	cmp	r2, r3
 8003096:	d906      	bls.n	80030a6 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	89da      	ldrh	r2, [r3, #14]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	e005      	b.n	80030b2 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	889a      	ldrh	r2, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	8992      	ldrh	r2, [r2, #12]
 80030c0:	4413      	add	r3, r2
 80030c2:	89fa      	ldrh	r2, [r7, #14]
 80030c4:	4619      	mov	r1, r3
 80030c6:	f006 f899 	bl	80091fc <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	899b      	ldrh	r3, [r3, #12]
 80030ce:	461a      	mov	r2, r3
 80030d0:	89fb      	ldrh	r3, [r7, #14]
 80030d2:	4413      	add	r3, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	8892      	ldrh	r2, [r2, #4]
 80030d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80030dc:	fb02 f201 	mul.w	r2, r2, r1
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 80030e8:	4b03      	ldr	r3, [pc, #12]	; (80030f8 <UARTTxDumpBuffer+0x9c>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	701a      	strb	r2, [r3, #0]
	}
}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000378 	.word	0x20000378

080030fc <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	4613      	mov	r3, r2
 8003108:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	889b      	ldrh	r3, [r3, #4]
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	4293      	cmp	r3, r2
 8003112:	bf28      	it	cs
 8003114:	4613      	movcs	r3, r2
 8003116:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8003118:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	889b      	ldrh	r3, [r3, #4]
 800311e:	4619      	mov	r1, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	89db      	ldrh	r3, [r3, #14]
 8003124:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8003126:	4293      	cmp	r3, r2
 8003128:	bfa8      	it	ge
 800312a:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 800312c:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	89d2      	ldrh	r2, [r2, #14]
 8003136:	4413      	add	r3, r2
 8003138:	8aba      	ldrh	r2, [r7, #20]
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	4618      	mov	r0, r3
 800313e:	f006 ff7f 	bl	800a040 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	89db      	ldrh	r3, [r3, #14]
 8003146:	461a      	mov	r2, r3
 8003148:	8afb      	ldrh	r3, [r7, #22]
 800314a:	4413      	add	r3, r2
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	8892      	ldrh	r2, [r2, #4]
 8003150:	fb93 f1f2 	sdiv	r1, r3, r2
 8003154:	fb02 f201 	mul.w	r2, r2, r1
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8003160:	8afa      	ldrh	r2, [r7, #22]
 8003162:	8abb      	ldrh	r3, [r7, #20]
 8003164:	429a      	cmp	r2, r3
 8003166:	d00a      	beq.n	800317e <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6898      	ldr	r0, [r3, #8]
 800316c:	8abb      	ldrh	r3, [r7, #20]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8003172:	8afa      	ldrh	r2, [r7, #22]
 8003174:	8abb      	ldrh	r3, [r7, #20]
 8003176:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8003178:	461a      	mov	r2, r3
 800317a:	f006 ff61 	bl	800a040 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f7ff ff6c 	bl	800305c <UARTTxDumpBuffer>

}
 8003184:	bf00      	nop
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <ACK1Return>:

void ACK1Return(UARTStucrture *uart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {0x58, 0b01110101};
 8003194:	f247 5358 	movw	r3, #30040	; 0x7558
 8003198:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 800319a:	f107 030c 	add.w	r3, r7, #12
 800319e:	2202      	movs	r2, #2
 80031a0:	4619      	mov	r1, r3
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff ffaa 	bl	80030fc <UARTTxWrite>
	}
}
 80031a8:	bf00      	nop
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <ACK2Return>:

void ACK2Return(UARTStucrture *uart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {70, 110};
 80031b8:	f646 6346 	movw	r3, #28230	; 0x6e46
 80031bc:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 80031be:	f107 030c 	add.w	r3, r7, #12
 80031c2:	2202      	movs	r2, #2
 80031c4:	4619      	mov	r1, r3
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff ff98 	bl	80030fc <UARTTxWrite>
	}
}
 80031cc:	bf00      	nop
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	0000      	movs	r0, r0
	...

080031d8 <Munmunbot_Protocol>:
	UARTTxWrite(uart, temp, 2);
	}
}

void Munmunbot_Protocol(int16_t dataIn,UARTStucrture *uart)
{
 80031d8:	b5b0      	push	{r4, r5, r7, lr}
 80031da:	b08e      	sub	sp, #56	; 0x38
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	6039      	str	r1, [r7, #0]
 80031e2:	80fb      	strh	r3, [r7, #6]
	static uint8_t parameter_ptr = 0;
	static uint16_t Data_HAck = 0;
	static uint32_t CheckSum = 0;
	static uint16_t DataForReturn = 0;

	switch (Munmunbot_Protocol_State)
 80031e4:	4b8b      	ldr	r3, [pc, #556]	; (8003414 <Munmunbot_Protocol+0x23c>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b05      	cmp	r3, #5
 80031ea:	f200 841e 	bhi.w	8003a2a <Munmunbot_Protocol+0x852>
 80031ee:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <Munmunbot_Protocol+0x1c>)
 80031f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f4:	0800320d 	.word	0x0800320d
 80031f8:	080032c1 	.word	0x080032c1
 80031fc:	08003303 	.word	0x08003303
 8003200:	08003351 	.word	0x08003351
 8003204:	08003375 	.word	0x08003375
 8003208:	08003435 	.word	0x08003435
	{
		case PP_STARTandMode:
			if (((dataIn>>4) & 0b1111) == 0b1001)
 800320c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003210:	111b      	asrs	r3, r3, #4
 8003212:	b21b      	sxth	r3, r3
 8003214:	b29b      	uxth	r3, r3
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	2b09      	cmp	r3, #9
 800321c:	f040 8402 	bne.w	8003a24 <Munmunbot_Protocol+0x84c>
			{
				CheckSum = dataIn;
 8003220:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003224:	4a7c      	ldr	r2, [pc, #496]	; (8003418 <Munmunbot_Protocol+0x240>)
 8003226:	6013      	str	r3, [r2, #0]
				ProtocolMode = dataIn & 0b1111;
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4b7a      	ldr	r3, [pc, #488]	; (800341c <Munmunbot_Protocol+0x244>)
 8003234:	701a      	strb	r2, [r3, #0]

				if (ProtocolMode == 7)
 8003236:	4b79      	ldr	r3, [pc, #484]	; (800341c <Munmunbot_Protocol+0x244>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b07      	cmp	r3, #7
 800323c:	d103      	bne.n	8003246 <Munmunbot_Protocol+0x6e>
				{
					Munmunbot_Protocol_State = PP_Frame3_Data_0; ///Frame3
 800323e:	4b75      	ldr	r3, [pc, #468]	; (8003414 <Munmunbot_Protocol+0x23c>)
 8003240:	2203      	movs	r2, #3
 8003242:	701a      	strb	r2, [r3, #0]
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
				{
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
				}
			}
			break;
 8003244:	e3ee      	b.n	8003a24 <Munmunbot_Protocol+0x84c>
				else if (ProtocolMode == 1 || ProtocolMode == 4 || ProtocolMode == 5 ||ProtocolMode == 6)
 8003246:	4b75      	ldr	r3, [pc, #468]	; (800341c <Munmunbot_Protocol+0x244>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d00b      	beq.n	8003266 <Munmunbot_Protocol+0x8e>
 800324e:	4b73      	ldr	r3, [pc, #460]	; (800341c <Munmunbot_Protocol+0x244>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b04      	cmp	r3, #4
 8003254:	d007      	beq.n	8003266 <Munmunbot_Protocol+0x8e>
 8003256:	4b71      	ldr	r3, [pc, #452]	; (800341c <Munmunbot_Protocol+0x244>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b05      	cmp	r3, #5
 800325c:	d003      	beq.n	8003266 <Munmunbot_Protocol+0x8e>
 800325e:	4b6f      	ldr	r3, [pc, #444]	; (800341c <Munmunbot_Protocol+0x244>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b06      	cmp	r3, #6
 8003264:	d103      	bne.n	800326e <Munmunbot_Protocol+0x96>
					Munmunbot_Protocol_State = PP_Frame2_Data_0; //Frame2
 8003266:	4b6b      	ldr	r3, [pc, #428]	; (8003414 <Munmunbot_Protocol+0x23c>)
 8003268:	2201      	movs	r2, #1
 800326a:	701a      	strb	r2, [r3, #0]
			break;
 800326c:	e3da      	b.n	8003a24 <Munmunbot_Protocol+0x84c>
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 800326e:	4b6b      	ldr	r3, [pc, #428]	; (800341c <Munmunbot_Protocol+0x244>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d020      	beq.n	80032b8 <Munmunbot_Protocol+0xe0>
 8003276:	4b69      	ldr	r3, [pc, #420]	; (800341c <Munmunbot_Protocol+0x244>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d01c      	beq.n	80032b8 <Munmunbot_Protocol+0xe0>
 800327e:	4b67      	ldr	r3, [pc, #412]	; (800341c <Munmunbot_Protocol+0x244>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b08      	cmp	r3, #8
 8003284:	d018      	beq.n	80032b8 <Munmunbot_Protocol+0xe0>
 8003286:	4b65      	ldr	r3, [pc, #404]	; (800341c <Munmunbot_Protocol+0x244>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b09      	cmp	r3, #9
 800328c:	d014      	beq.n	80032b8 <Munmunbot_Protocol+0xe0>
 800328e:	4b63      	ldr	r3, [pc, #396]	; (800341c <Munmunbot_Protocol+0x244>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b0a      	cmp	r3, #10
 8003294:	d010      	beq.n	80032b8 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 8003296:	4b61      	ldr	r3, [pc, #388]	; (800341c <Munmunbot_Protocol+0x244>)
 8003298:	781b      	ldrb	r3, [r3, #0]
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 800329a:	2b0b      	cmp	r3, #11
 800329c:	d00c      	beq.n	80032b8 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 800329e:	4b5f      	ldr	r3, [pc, #380]	; (800341c <Munmunbot_Protocol+0x244>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d008      	beq.n	80032b8 <Munmunbot_Protocol+0xe0>
 80032a6:	4b5d      	ldr	r3, [pc, #372]	; (800341c <Munmunbot_Protocol+0x244>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b0d      	cmp	r3, #13
 80032ac:	d004      	beq.n	80032b8 <Munmunbot_Protocol+0xe0>
 80032ae:	4b5b      	ldr	r3, [pc, #364]	; (800341c <Munmunbot_Protocol+0x244>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b0e      	cmp	r3, #14
 80032b4:	f040 83b6 	bne.w	8003a24 <Munmunbot_Protocol+0x84c>
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
 80032b8:	4b56      	ldr	r3, [pc, #344]	; (8003414 <Munmunbot_Protocol+0x23c>)
 80032ba:	2205      	movs	r2, #5
 80032bc:	701a      	strb	r2, [r3, #0]
			break;
 80032be:	e3b1      	b.n	8003a24 <Munmunbot_Protocol+0x84c>
		case PP_Frame2_Data_0:
			 CheckSum += dataIn;
 80032c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80032c4:	4b54      	ldr	r3, [pc, #336]	; (8003418 <Munmunbot_Protocol+0x240>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4413      	add	r3, r2
 80032ca:	4a53      	ldr	r2, [pc, #332]	; (8003418 <Munmunbot_Protocol+0x240>)
 80032cc:	6013      	str	r3, [r2, #0]
			 Data_HAck = ((dataIn&0b11111111)<<8)&0b1111111100000000;
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	021b      	lsls	r3, r3, #8
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	4b52      	ldr	r3, [pc, #328]	; (8003420 <Munmunbot_Protocol+0x248>)
 80032d6:	801a      	strh	r2, [r3, #0]
			 parameter[0] = dataIn&0b1111;
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4b50      	ldr	r3, [pc, #320]	; (8003424 <Munmunbot_Protocol+0x24c>)
 80032e4:	701a      	strb	r2, [r3, #0]
			 parameter[1] = (dataIn>>4)&0b1111;
 80032e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032ea:	111b      	asrs	r3, r3, #4
 80032ec:	b21b      	sxth	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4b4b      	ldr	r3, [pc, #300]	; (8003424 <Munmunbot_Protocol+0x24c>)
 80032f8:	705a      	strb	r2, [r3, #1]
			 Munmunbot_Protocol_State = PP_Frame2_Data_1;
 80032fa:	4b46      	ldr	r3, [pc, #280]	; (8003414 <Munmunbot_Protocol+0x23c>)
 80032fc:	2202      	movs	r2, #2
 80032fe:	701a      	strb	r2, [r3, #0]

			 break;
 8003300:	e393      	b.n	8003a2a <Munmunbot_Protocol+0x852>
		case PP_Frame2_Data_1:
			 CheckSum += dataIn;
 8003302:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003306:	4b44      	ldr	r3, [pc, #272]	; (8003418 <Munmunbot_Protocol+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4413      	add	r3, r2
 800330c:	4a42      	ldr	r2, [pc, #264]	; (8003418 <Munmunbot_Protocol+0x240>)
 800330e:	6013      	str	r3, [r2, #0]
			 Data_HAck = (dataIn&0b11111111) | Data_HAck;
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	b21a      	sxth	r2, r3
 8003316:	4b42      	ldr	r3, [pc, #264]	; (8003420 <Munmunbot_Protocol+0x248>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	b21b      	sxth	r3, r3
 800331c:	4313      	orrs	r3, r2
 800331e:	b21b      	sxth	r3, r3
 8003320:	b29a      	uxth	r2, r3
 8003322:	4b3f      	ldr	r3, [pc, #252]	; (8003420 <Munmunbot_Protocol+0x248>)
 8003324:	801a      	strh	r2, [r3, #0]
			 parameter[2] = dataIn&0b1111;
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	b2da      	uxtb	r2, r3
 8003330:	4b3c      	ldr	r3, [pc, #240]	; (8003424 <Munmunbot_Protocol+0x24c>)
 8003332:	709a      	strb	r2, [r3, #2]
			 parameter[3] = (dataIn>>4)&0b1111;
 8003334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003338:	111b      	asrs	r3, r3, #4
 800333a:	b21b      	sxth	r3, r3
 800333c:	b2db      	uxtb	r3, r3
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	b2da      	uxtb	r2, r3
 8003344:	4b37      	ldr	r3, [pc, #220]	; (8003424 <Munmunbot_Protocol+0x24c>)
 8003346:	70da      	strb	r2, [r3, #3]
			 Munmunbot_Protocol_State = PP_CheckSum;
 8003348:	4b32      	ldr	r3, [pc, #200]	; (8003414 <Munmunbot_Protocol+0x23c>)
 800334a:	2205      	movs	r2, #5
 800334c:	701a      	strb	r2, [r3, #0]
			 break;
 800334e:	e36c      	b.n	8003a2a <Munmunbot_Protocol+0x852>

		case PP_Frame3_Data_0:
		     CheckSum += dataIn;
 8003350:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003354:	4b30      	ldr	r3, [pc, #192]	; (8003418 <Munmunbot_Protocol+0x240>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4413      	add	r3, r2
 800335a:	4a2f      	ldr	r2, [pc, #188]	; (8003418 <Munmunbot_Protocol+0x240>)
 800335c:	6013      	str	r3, [r2, #0]
		     n_station = dataIn;
 800335e:	88fa      	ldrh	r2, [r7, #6]
 8003360:	4b31      	ldr	r3, [pc, #196]	; (8003428 <Munmunbot_Protocol+0x250>)
 8003362:	801a      	strh	r2, [r3, #0]
		     n_station_mem = n_station;
 8003364:	4b30      	ldr	r3, [pc, #192]	; (8003428 <Munmunbot_Protocol+0x250>)
 8003366:	881a      	ldrh	r2, [r3, #0]
 8003368:	4b30      	ldr	r3, [pc, #192]	; (800342c <Munmunbot_Protocol+0x254>)
 800336a:	801a      	strh	r2, [r3, #0]
		     Munmunbot_Protocol_State = PP_Frame3_Data_1;
 800336c:	4b29      	ldr	r3, [pc, #164]	; (8003414 <Munmunbot_Protocol+0x23c>)
 800336e:	2204      	movs	r2, #4
 8003370:	701a      	strb	r2, [r3, #0]

		   break;
 8003372:	e35a      	b.n	8003a2a <Munmunbot_Protocol+0x852>

		case PP_Frame3_Data_1:
				CheckSum += dataIn;
 8003374:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003378:	4b27      	ldr	r3, [pc, #156]	; (8003418 <Munmunbot_Protocol+0x240>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4413      	add	r3, r2
 800337e:	4a26      	ldr	r2, [pc, #152]	; (8003418 <Munmunbot_Protocol+0x240>)
 8003380:	6013      	str	r3, [r2, #0]
				if (n_station >= 2)
 8003382:	4b29      	ldr	r3, [pc, #164]	; (8003428 <Munmunbot_Protocol+0x250>)
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d927      	bls.n	80033da <Munmunbot_Protocol+0x202>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	4a28      	ldr	r2, [pc, #160]	; (8003430 <Munmunbot_Protocol+0x258>)
 8003390:	7812      	ldrb	r2, [r2, #0]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	b2d9      	uxtb	r1, r3
 8003398:	4b22      	ldr	r3, [pc, #136]	; (8003424 <Munmunbot_Protocol+0x24c>)
 800339a:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 800339c:	4b24      	ldr	r3, [pc, #144]	; (8003430 <Munmunbot_Protocol+0x258>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	3301      	adds	r3, #1
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	4b22      	ldr	r3, [pc, #136]	; (8003430 <Munmunbot_Protocol+0x258>)
 80033a6:	701a      	strb	r2, [r3, #0]
					parameter[parameter_ptr] = (dataIn>>4)&0b1111;
 80033a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ac:	111b      	asrs	r3, r3, #4
 80033ae:	b21b      	sxth	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	4a1f      	ldr	r2, [pc, #124]	; (8003430 <Munmunbot_Protocol+0x258>)
 80033b4:	7812      	ldrb	r2, [r2, #0]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	b2d9      	uxtb	r1, r3
 80033bc:	4b19      	ldr	r3, [pc, #100]	; (8003424 <Munmunbot_Protocol+0x24c>)
 80033be:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 80033c0:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <Munmunbot_Protocol+0x258>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	4b19      	ldr	r3, [pc, #100]	; (8003430 <Munmunbot_Protocol+0x258>)
 80033ca:	701a      	strb	r2, [r3, #0]
					n_station -= 2;
 80033cc:	4b16      	ldr	r3, [pc, #88]	; (8003428 <Munmunbot_Protocol+0x250>)
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	3b02      	subs	r3, #2
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	4b14      	ldr	r3, [pc, #80]	; (8003428 <Munmunbot_Protocol+0x250>)
 80033d6:	801a      	strh	r2, [r3, #0]
 80033d8:	e012      	b.n	8003400 <Munmunbot_Protocol+0x228>
				}
				else if (n_station == 1)
 80033da:	4b13      	ldr	r3, [pc, #76]	; (8003428 <Munmunbot_Protocol+0x250>)
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d10e      	bne.n	8003400 <Munmunbot_Protocol+0x228>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 80033e2:	88fb      	ldrh	r3, [r7, #6]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	4a12      	ldr	r2, [pc, #72]	; (8003430 <Munmunbot_Protocol+0x258>)
 80033e8:	7812      	ldrb	r2, [r2, #0]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	b2d9      	uxtb	r1, r3
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <Munmunbot_Protocol+0x24c>)
 80033f2:	5499      	strb	r1, [r3, r2]
					n_station -= 1;
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <Munmunbot_Protocol+0x250>)
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <Munmunbot_Protocol+0x250>)
 80033fe:	801a      	strh	r2, [r3, #0]
				}
				if  (n_station == 0)
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <Munmunbot_Protocol+0x250>)
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	f040 830f 	bne.w	8003a28 <Munmunbot_Protocol+0x850>
				{
					Munmunbot_Protocol_State = PP_CheckSum;
 800340a:	4b02      	ldr	r3, [pc, #8]	; (8003414 <Munmunbot_Protocol+0x23c>)
 800340c:	2205      	movs	r2, #5
 800340e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8003410:	e30a      	b.n	8003a28 <Munmunbot_Protocol+0x850>
 8003412:	bf00      	nop
 8003414:	200000d8 	.word	0x200000d8
 8003418:	2000037c 	.word	0x2000037c
 800341c:	20000380 	.word	0x20000380
 8003420:	20000382 	.word	0x20000382
 8003424:	20000384 	.word	0x20000384
 8003428:	20000484 	.word	0x20000484
 800342c:	20000486 	.word	0x20000486
 8003430:	20000488 	.word	0x20000488

			case PP_CheckSum:
			{
				CheckSum = (~CheckSum) & 0xff;
 8003434:	4bba      	ldr	r3, [pc, #744]	; (8003720 <Munmunbot_Protocol+0x548>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	43db      	mvns	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	4ab8      	ldr	r2, [pc, #736]	; (8003720 <Munmunbot_Protocol+0x548>)
 800343e:	6013      	str	r3, [r2, #0]
				if (CheckSum == dataIn)
 8003440:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003444:	4bb6      	ldr	r3, [pc, #728]	; (8003720 <Munmunbot_Protocol+0x548>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	f040 82d7 	bne.w	80039fc <Munmunbot_Protocol+0x824>
				{

					switch (ProtocolMode)
 800344e:	4bb5      	ldr	r3, [pc, #724]	; (8003724 <Munmunbot_Protocol+0x54c>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	3b01      	subs	r3, #1
 8003454:	2b0d      	cmp	r3, #13
 8003456:	f200 82d2 	bhi.w	80039fe <Munmunbot_Protocol+0x826>
 800345a:	a201      	add	r2, pc, #4	; (adr r2, 8003460 <Munmunbot_Protocol+0x288>)
 800345c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003460:	08003499 	.word	0x08003499
 8003464:	0800350d 	.word	0x0800350d
 8003468:	08003527 	.word	0x08003527
 800346c:	0800353d 	.word	0x0800353d
 8003470:	0800359f 	.word	0x0800359f
 8003474:	080035bd 	.word	0x080035bd
 8003478:	080035e1 	.word	0x080035e1
 800347c:	0800362b 	.word	0x0800362b
 8003480:	08003659 	.word	0x08003659
 8003484:	08003765 	.word	0x08003765
 8003488:	08003877 	.word	0x08003877
 800348c:	080039b1 	.word	0x080039b1
 8003490:	080039c7 	.word	0x080039c7
 8003494:	080039dd 	.word	0x080039dd
					{
					case 1: ///Test Command ##Complete##
						{
						uint8_t temp[] =
 8003498:	2391      	movs	r3, #145	; 0x91
 800349a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						{0b10010001,
						((parameter[1] & 0xff) << 4)  | (parameter[0]& 0xff),
 800349e:	4ba2      	ldr	r3, [pc, #648]	; (8003728 <Munmunbot_Protocol+0x550>)
 80034a0:	785b      	ldrb	r3, [r3, #1]
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	b25a      	sxtb	r2, r3
 80034a6:	4ba0      	ldr	r3, [pc, #640]	; (8003728 <Munmunbot_Protocol+0x550>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	b25b      	sxtb	r3, r3
 80034ac:	4313      	orrs	r3, r2
 80034ae:	b25b      	sxtb	r3, r3
 80034b0:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 80034b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						((parameter[3] & 0xff) << 4)  | (parameter[2]& 0xff),
 80034b6:	4b9c      	ldr	r3, [pc, #624]	; (8003728 <Munmunbot_Protocol+0x550>)
 80034b8:	78db      	ldrb	r3, [r3, #3]
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	b25a      	sxtb	r2, r3
 80034be:	4b9a      	ldr	r3, [pc, #616]	; (8003728 <Munmunbot_Protocol+0x550>)
 80034c0:	789b      	ldrb	r3, [r3, #2]
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	4313      	orrs	r3, r2
 80034c6:	b25b      	sxtb	r3, r3
 80034c8:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 80034ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80034d4:	2358      	movs	r3, #88	; 0x58
 80034d6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80034da:	2375      	movs	r3, #117	; 0x75
 80034dc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						0b0 , 0x58 ,0x75 };
						temp[3] = (~(temp[0]+temp[1]+temp[2]))& 0xff;
 80034e0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80034e4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80034e8:	4413      	add	r3, r2
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034f0:	4413      	add	r3, r2
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						UARTTxWrite(uart, temp, 6);
 80034fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003500:	2206      	movs	r2, #6
 8003502:	4619      	mov	r1, r3
 8003504:	6838      	ldr	r0, [r7, #0]
 8003506:	f7ff fdf9 	bl	80030fc <UARTTxWrite>
						}
						break;
 800350a:	e278      	b.n	80039fe <Munmunbot_Protocol+0x826>
					case 2: //Connect MCU ##Complete##
						if (Munmunbot_State == STATE_Disconnected)
 800350c:	4b87      	ldr	r3, [pc, #540]	; (800372c <Munmunbot_Protocol+0x554>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d104      	bne.n	800351e <Munmunbot_Protocol+0x346>
						{
							Munmunbot_State = STATE_Idle;
 8003514:	4b85      	ldr	r3, [pc, #532]	; (800372c <Munmunbot_Protocol+0x554>)
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
							PID_Reset();
 800351a:	f000 fabb 	bl	8003a94 <PID_Reset>
						}
						ACK1Return(uart);
 800351e:	6838      	ldr	r0, [r7, #0]
 8003520:	f7ff fe34 	bl	800318c <ACK1Return>
						break;
 8003524:	e26b      	b.n	80039fe <Munmunbot_Protocol+0x826>
					case 3: //Disconnect MCU ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003526:	4b81      	ldr	r3, [pc, #516]	; (800372c <Munmunbot_Protocol+0x554>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d102      	bne.n	8003534 <Munmunbot_Protocol+0x35c>
						{
							Munmunbot_State = STATE_Disconnected;
 800352e:	4b7f      	ldr	r3, [pc, #508]	; (800372c <Munmunbot_Protocol+0x554>)
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003534:	6838      	ldr	r0, [r7, #0]
 8003536:	f7ff fe29 	bl	800318c <ACK1Return>
						break;
 800353a:	e260      	b.n	80039fe <Munmunbot_Protocol+0x826>
					case 4: //Set Angular Velocity ##Complete##
						if (Munmunbot_State == STATE_Idle)
 800353c:	4b7b      	ldr	r3, [pc, #492]	; (800372c <Munmunbot_Protocol+0x554>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d128      	bne.n	8003596 <Munmunbot_Protocol+0x3be>
						{
							CUSSStruc.RPMp = 0.925*(Data_HAck*10.0)/255.0;
 8003544:	4b7a      	ldr	r3, [pc, #488]	; (8003730 <Munmunbot_Protocol+0x558>)
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fc ff97 	bl	800047c <__aeabi_i2d>
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	4b78      	ldr	r3, [pc, #480]	; (8003734 <Munmunbot_Protocol+0x55c>)
 8003554:	f7fc fffc 	bl	8000550 <__aeabi_dmul>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4610      	mov	r0, r2
 800355e:	4619      	mov	r1, r3
 8003560:	a36b      	add	r3, pc, #428	; (adr r3, 8003710 <Munmunbot_Protocol+0x538>)
 8003562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003566:	f7fc fff3 	bl	8000550 <__aeabi_dmul>
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	4610      	mov	r0, r2
 8003570:	4619      	mov	r1, r3
 8003572:	a369      	add	r3, pc, #420	; (adr r3, 8003718 <Munmunbot_Protocol+0x540>)
 8003574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003578:	f7fd f914 	bl	80007a4 <__aeabi_ddiv>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	f7fd fab4 	bl	8000af0 <__aeabi_d2f>
 8003588:	4603      	mov	r3, r0
 800358a:	4a6b      	ldr	r2, [pc, #428]	; (8003738 <Munmunbot_Protocol+0x560>)
 800358c:	6093      	str	r3, [r2, #8]
							TrajectoryGenerationVelocityMaxSetting(&TrjStruc , &CUSSStruc);
 800358e:	496a      	ldr	r1, [pc, #424]	; (8003738 <Munmunbot_Protocol+0x560>)
 8003590:	486a      	ldr	r0, [pc, #424]	; (800373c <Munmunbot_Protocol+0x564>)
 8003592:	f7fe fc63 	bl	8001e5c <TrajectoryGenerationVelocityMaxSetting>
						}
						ACK1Return(uart);
 8003596:	6838      	ldr	r0, [r7, #0]
 8003598:	f7ff fdf8 	bl	800318c <ACK1Return>
						break;
 800359c:	e22f      	b.n	80039fe <Munmunbot_Protocol+0x826>
					case 5:   //Set Angular pos ##Complete##
						if (Munmunbot_State == STATE_Idle)
 800359e:	4b63      	ldr	r3, [pc, #396]	; (800372c <Munmunbot_Protocol+0x554>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d106      	bne.n	80035b4 <Munmunbot_Protocol+0x3dc>
						{
							Angularpos_InputNumber = Data_HAck;
 80035a6:	4b62      	ldr	r3, [pc, #392]	; (8003730 <Munmunbot_Protocol+0x558>)
 80035a8:	881a      	ldrh	r2, [r3, #0]
 80035aa:	4b65      	ldr	r3, [pc, #404]	; (8003740 <Munmunbot_Protocol+0x568>)
 80035ac:	801a      	strh	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Pos_Directly;
 80035ae:	4b65      	ldr	r3, [pc, #404]	; (8003744 <Munmunbot_Protocol+0x56c>)
 80035b0:	2201      	movs	r2, #1
 80035b2:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80035b4:	6838      	ldr	r0, [r7, #0]
 80035b6:	f7ff fde9 	bl	800318c <ACK1Return>
						break;
 80035ba:	e220      	b.n	80039fe <Munmunbot_Protocol+0x826>
					case 6:  /// Set 1 Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80035bc:	4b5b      	ldr	r3, [pc, #364]	; (800372c <Munmunbot_Protocol+0x554>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d109      	bne.n	80035d8 <Munmunbot_Protocol+0x400>
						{
//							Angularpos_InputArray[0] = parameter[0];
							Angularpos_InputArray[0] = parameter[2];    //150 0x00 0x0A Checksum
 80035c4:	4b58      	ldr	r3, [pc, #352]	; (8003728 <Munmunbot_Protocol+0x550>)
 80035c6:	789a      	ldrb	r2, [r3, #2]
 80035c8:	4b5f      	ldr	r3, [pc, #380]	; (8003748 <Munmunbot_Protocol+0x570>)
 80035ca:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Goal_1_Station;
 80035cc:	4b5d      	ldr	r3, [pc, #372]	; (8003744 <Munmunbot_Protocol+0x56c>)
 80035ce:	2202      	movs	r2, #2
 80035d0:	701a      	strb	r2, [r3, #0]
							NumberOfStationToGo = 1;
 80035d2:	4b5e      	ldr	r3, [pc, #376]	; (800374c <Munmunbot_Protocol+0x574>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80035d8:	6838      	ldr	r0, [r7, #0]
 80035da:	f7ff fdd7 	bl	800318c <ACK1Return>
						break;
 80035de:	e20e      	b.n	80039fe <Munmunbot_Protocol+0x826>
					case 7:  /// Set n Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80035e0:	4b52      	ldr	r3, [pc, #328]	; (800372c <Munmunbot_Protocol+0x554>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d11c      	bne.n	8003622 <Munmunbot_Protocol+0x44a>
						{
							MovingLinkMode = LMM_Set_Goal_n_Station;
 80035e8:	4b56      	ldr	r3, [pc, #344]	; (8003744 <Munmunbot_Protocol+0x56c>)
 80035ea:	2203      	movs	r2, #3
 80035ec:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 80035ee:	2300      	movs	r3, #0
 80035f0:	637b      	str	r3, [r7, #52]	; 0x34
 80035f2:	e00b      	b.n	800360c <Munmunbot_Protocol+0x434>
							{
								Angularpos_InputArray[i] = parameter[i];
 80035f4:	4a4c      	ldr	r2, [pc, #304]	; (8003728 <Munmunbot_Protocol+0x550>)
 80035f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f8:	4413      	add	r3, r2
 80035fa:	7819      	ldrb	r1, [r3, #0]
 80035fc:	4a52      	ldr	r2, [pc, #328]	; (8003748 <Munmunbot_Protocol+0x570>)
 80035fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003600:	4413      	add	r3, r2
 8003602:	460a      	mov	r2, r1
 8003604:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8003606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003608:	3301      	adds	r3, #1
 800360a:	637b      	str	r3, [r7, #52]	; 0x34
 800360c:	4b50      	ldr	r3, [pc, #320]	; (8003750 <Munmunbot_Protocol+0x578>)
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003614:	4293      	cmp	r3, r2
 8003616:	dbed      	blt.n	80035f4 <Munmunbot_Protocol+0x41c>
							}
							NumberOfStationToGo = n_station_mem;
 8003618:	4b4d      	ldr	r3, [pc, #308]	; (8003750 <Munmunbot_Protocol+0x578>)
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4b4b      	ldr	r3, [pc, #300]	; (800374c <Munmunbot_Protocol+0x574>)
 8003620:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003622:	6838      	ldr	r0, [r7, #0]
 8003624:	f7ff fdb2 	bl	800318c <ACK1Return>
						break;
 8003628:	e1e9      	b.n	80039fe <Munmunbot_Protocol+0x826>
					case 8:  /// Go go ##Complete##  ///But must implement return ACK after it's done
						if (Munmunbot_State == STATE_Idle)
 800362a:	4b40      	ldr	r3, [pc, #256]	; (800372c <Munmunbot_Protocol+0x554>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d108      	bne.n	8003644 <Munmunbot_Protocol+0x46c>
						{
							Munmunbot_State = STATE_PrepareDATA;
 8003632:	4b3e      	ldr	r3, [pc, #248]	; (800372c <Munmunbot_Protocol+0x554>)
 8003634:	2202      	movs	r2, #2
 8003636:	701a      	strb	r2, [r3, #0]
							PID_Reset();
 8003638:	f000 fa2c 	bl	8003a94 <PID_Reset>
							ACK1Return(uart);
 800363c:	6838      	ldr	r0, [r7, #0]
 800363e:	f7ff fda5 	bl	800318c <ACK1Return>
								{0x58 ,  0x75 ,
										70,  110};  ///ACK1 + ACK2
								UARTTxWrite(uart, temp, 4);
							}
						}
						break;
 8003642:	e1dc      	b.n	80039fe <Munmunbot_Protocol+0x826>
								uint8_t temp[] =
 8003644:	4b43      	ldr	r3, [pc, #268]	; (8003754 <Munmunbot_Protocol+0x57c>)
 8003646:	623b      	str	r3, [r7, #32]
								UARTTxWrite(uart, temp, 4);
 8003648:	f107 0320 	add.w	r3, r7, #32
 800364c:	2204      	movs	r2, #4
 800364e:	4619      	mov	r1, r3
 8003650:	6838      	ldr	r0, [r7, #0]
 8003652:	f7ff fd53 	bl	80030fc <UARTTxWrite>
						break;
 8003656:	e1d2      	b.n	80039fe <Munmunbot_Protocol+0x826>

					case 9:  /// Return Current Station   ##Complete##

						{
							uint8_t temp[] =
 8003658:	4a3f      	ldr	r2, [pc, #252]	; (8003758 <Munmunbot_Protocol+0x580>)
 800365a:	f107 0318 	add.w	r3, r7, #24
 800365e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003662:	6018      	str	r0, [r3, #0]
 8003664:	3304      	adds	r3, #4
 8003666:	8019      	strh	r1, [r3, #0]
							{0x58 ,  0x75 ,
									153,  0b0,  0b0, 0b0}; ///ACK1 + Mode 9
							uint8_t Shift = 2;
 8003668:	2302      	movs	r3, #2
 800366a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
							DataForReturn = Current_Station&(0xff);
 800366e:	4b3b      	ldr	r3, [pc, #236]	; (800375c <Munmunbot_Protocol+0x584>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	b29a      	uxth	r2, r3
 8003674:	4b3a      	ldr	r3, [pc, #232]	; (8003760 <Munmunbot_Protocol+0x588>)
 8003676:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8003678:	4b39      	ldr	r3, [pc, #228]	; (8003760 <Munmunbot_Protocol+0x588>)
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	0a1b      	lsrs	r3, r3, #8
 800367e:	b29a      	uxth	r2, r3
 8003680:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003684:	3301      	adds	r3, #1
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800368c:	440b      	add	r3, r1
 800368e:	f803 2c20 	strb.w	r2, [r3, #-32]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8003692:	4b33      	ldr	r3, [pc, #204]	; (8003760 <Munmunbot_Protocol+0x588>)
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800369a:	3302      	adds	r3, #2
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80036a2:	440b      	add	r3, r1
 80036a4:	f803 2c20 	strb.w	r2, [r3, #-32]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 80036a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80036ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80036b0:	4413      	add	r3, r2
 80036b2:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 80036b6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80036ba:	3301      	adds	r3, #1
 80036bc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80036c0:	440b      	add	r3, r1
 80036c2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80036c6:	4413      	add	r3, r2
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80036ce:	3302      	adds	r3, #2
 80036d0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80036d4:	440b      	add	r3, r1
 80036d6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80036da:	4413      	add	r3, r2
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80036e2:	3303      	adds	r3, #3
 80036e4:	43d2      	mvns	r2, r2
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80036ec:	440b      	add	r3, r1
 80036ee:	f803 2c20 	strb.w	r2, [r3, #-32]
							UARTTxWrite(uart, temp, 4+Shift);
 80036f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3304      	adds	r3, #4
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	f107 0318 	add.w	r3, r7, #24
 8003700:	4619      	mov	r1, r3
 8003702:	6838      	ldr	r0, [r7, #0]
 8003704:	f7ff fcfa 	bl	80030fc <UARTTxWrite>
						}

						break;
 8003708:	e179      	b.n	80039fe <Munmunbot_Protocol+0x826>
 800370a:	bf00      	nop
 800370c:	f3af 8000 	nop.w
 8003710:	9999999a 	.word	0x9999999a
 8003714:	3fed9999 	.word	0x3fed9999
 8003718:	00000000 	.word	0x00000000
 800371c:	406fe000 	.word	0x406fe000
 8003720:	2000037c 	.word	0x2000037c
 8003724:	20000380 	.word	0x20000380
 8003728:	20000384 	.word	0x20000384
 800372c:	200000d9 	.word	0x200000d9
 8003730:	20000382 	.word	0x20000382
 8003734:	40240000 	.word	0x40240000
 8003738:	20000350 	.word	0x20000350
 800373c:	200002c0 	.word	0x200002c0
 8003740:	200001dc 	.word	0x200001dc
 8003744:	200001de 	.word	0x200001de
 8003748:	200000dc 	.word	0x200000dc
 800374c:	200001e0 	.word	0x200001e0
 8003750:	20000486 	.word	0x20000486
 8003754:	6e467558 	.word	0x6e467558
 8003758:	0800a364 	.word	0x0800a364
 800375c:	200001df 	.word	0x200001df
 8003760:	2000048a 	.word	0x2000048a

					case 10: /// Return Angular Position  ##Complete##
						{
							uint8_t temp[] =
 8003764:	4aba      	ldr	r2, [pc, #744]	; (8003a50 <Munmunbot_Protocol+0x878>)
 8003766:	f107 0310 	add.w	r3, r7, #16
 800376a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800376e:	6018      	str	r0, [r3, #0]
 8003770:	3304      	adds	r3, #4
 8003772:	8019      	strh	r1, [r3, #0]
							{0x58 , 0x75 ,154, 0b0,  0b0, 0b0};
							uint8_t Shift = 2;
 8003774:	2302      	movs	r3, #2
 8003776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
							DataForReturn = ((((int) htim1.Instance->CNT) % (CUSSStruc.PPRxQEI))*2*3.141*10000)/(CUSSStruc.PPRxQEI);  ///pulse to (radian*10000)
 800377a:	4bb6      	ldr	r3, [pc, #728]	; (8003a54 <Munmunbot_Protocol+0x87c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	4ab5      	ldr	r2, [pc, #724]	; (8003a58 <Munmunbot_Protocol+0x880>)
 8003782:	6852      	ldr	r2, [r2, #4]
 8003784:	fbb3 f1f2 	udiv	r1, r3, r2
 8003788:	fb02 f201 	mul.w	r2, r2, r1
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	4618      	mov	r0, r3
 8003792:	f7fc fe63 	bl	800045c <__aeabi_ui2d>
 8003796:	a3a8      	add	r3, pc, #672	; (adr r3, 8003a38 <Munmunbot_Protocol+0x860>)
 8003798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379c:	f7fc fed8 	bl	8000550 <__aeabi_dmul>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4610      	mov	r0, r2
 80037a6:	4619      	mov	r1, r3
 80037a8:	a3a5      	add	r3, pc, #660	; (adr r3, 8003a40 <Munmunbot_Protocol+0x868>)
 80037aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ae:	f7fc fecf 	bl	8000550 <__aeabi_dmul>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4614      	mov	r4, r2
 80037b8:	461d      	mov	r5, r3
 80037ba:	4ba7      	ldr	r3, [pc, #668]	; (8003a58 <Munmunbot_Protocol+0x880>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fc fe4c 	bl	800045c <__aeabi_ui2d>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4620      	mov	r0, r4
 80037ca:	4629      	mov	r1, r5
 80037cc:	f7fc ffea 	bl	80007a4 <__aeabi_ddiv>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	f7fd f96a 	bl	8000ab0 <__aeabi_d2uiz>
 80037dc:	4603      	mov	r3, r0
 80037de:	b29a      	uxth	r2, r3
 80037e0:	4b9e      	ldr	r3, [pc, #632]	; (8003a5c <Munmunbot_Protocol+0x884>)
 80037e2:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 80037e4:	4b9d      	ldr	r3, [pc, #628]	; (8003a5c <Munmunbot_Protocol+0x884>)
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037f0:	3301      	adds	r3, #1
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80037f8:	440b      	add	r3, r1
 80037fa:	f803 2c28 	strb.w	r2, [r3, #-40]
							temp[2+Shift] = (DataForReturn)&(0xff);
 80037fe:	4b97      	ldr	r3, [pc, #604]	; (8003a5c <Munmunbot_Protocol+0x884>)
 8003800:	881a      	ldrh	r2, [r3, #0]
 8003802:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003806:	3302      	adds	r3, #2
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800380e:	440b      	add	r3, r1
 8003810:	f803 2c28 	strb.w	r2, [r3, #-40]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8003814:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003818:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800381c:	4413      	add	r3, r2
 800381e:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 8003822:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003826:	3301      	adds	r3, #1
 8003828:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800382c:	440b      	add	r3, r1
 800382e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003832:	4413      	add	r3, r2
 8003834:	b2da      	uxtb	r2, r3
 8003836:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800383a:	3302      	adds	r3, #2
 800383c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003840:	440b      	add	r3, r1
 8003842:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003846:	4413      	add	r3, r2
 8003848:	b2da      	uxtb	r2, r3
 800384a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800384e:	3303      	adds	r3, #3
 8003850:	43d2      	mvns	r2, r2
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003858:	440b      	add	r3, r1
 800385a:	f803 2c28 	strb.w	r2, [r3, #-40]
							UARTTxWrite(uart, temp, 4+Shift);
 800385e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003862:	b29b      	uxth	r3, r3
 8003864:	3304      	adds	r3, #4
 8003866:	b29a      	uxth	r2, r3
 8003868:	f107 0310 	add.w	r3, r7, #16
 800386c:	4619      	mov	r1, r3
 800386e:	6838      	ldr	r0, [r7, #0]
 8003870:	f7ff fc44 	bl	80030fc <UARTTxWrite>
						}
						break;
 8003874:	e0c3      	b.n	80039fe <Munmunbot_Protocol+0x826>

					case 11: /// Return Angular Velocity Max  ##Complete##
						{
							uint8_t temp[] =
 8003876:	4a7a      	ldr	r2, [pc, #488]	; (8003a60 <Munmunbot_Protocol+0x888>)
 8003878:	f107 0308 	add.w	r3, r7, #8
 800387c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003880:	6018      	str	r0, [r3, #0]
 8003882:	3304      	adds	r3, #4
 8003884:	8019      	strh	r1, [r3, #0]
							{ 0x58, 0x75, 155, 0b0,  0b0, 0b0 };
							uint8_t Shift = 2;
 8003886:	2302      	movs	r3, #2
 8003888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							float temp3 = ( abs( VelocityPIDController.OutputFeedback )*60.0 )/( ( float ) CUSSStruc.PPRxQEI );
 800388c:	4b75      	ldr	r3, [pc, #468]	; (8003a64 <Munmunbot_Protocol+0x88c>)
 800388e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003896:	ee17 3a90 	vmov	r3, s15
 800389a:	2b00      	cmp	r3, #0
 800389c:	bfb8      	it	lt
 800389e:	425b      	neglt	r3, r3
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fc fdeb 	bl	800047c <__aeabi_i2d>
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	4b6f      	ldr	r3, [pc, #444]	; (8003a68 <Munmunbot_Protocol+0x890>)
 80038ac:	f7fc fe50 	bl	8000550 <__aeabi_dmul>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4614      	mov	r4, r2
 80038b6:	461d      	mov	r5, r3
 80038b8:	4b67      	ldr	r3, [pc, #412]	; (8003a58 <Munmunbot_Protocol+0x880>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	ee07 3a90 	vmov	s15, r3
 80038c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c4:	ee17 0a90 	vmov	r0, s15
 80038c8:	f7fc fdea 	bl	80004a0 <__aeabi_f2d>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4620      	mov	r0, r4
 80038d2:	4629      	mov	r1, r5
 80038d4:	f7fc ff66 	bl	80007a4 <__aeabi_ddiv>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4610      	mov	r0, r2
 80038de:	4619      	mov	r1, r3
 80038e0:	f7fd f906 	bl	8000af0 <__aeabi_d2f>
 80038e4:	4603      	mov	r3, r0
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
							DataForReturn = ( temp3 * 255.0 )/10.0;
 80038e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038ea:	f7fc fdd9 	bl	80004a0 <__aeabi_f2d>
 80038ee:	a356      	add	r3, pc, #344	; (adr r3, 8003a48 <Munmunbot_Protocol+0x870>)
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	f7fc fe2c 	bl	8000550 <__aeabi_dmul>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	4b59      	ldr	r3, [pc, #356]	; (8003a6c <Munmunbot_Protocol+0x894>)
 8003906:	f7fc ff4d 	bl	80007a4 <__aeabi_ddiv>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4610      	mov	r0, r2
 8003910:	4619      	mov	r1, r3
 8003912:	f7fd f8cd 	bl	8000ab0 <__aeabi_d2uiz>
 8003916:	4603      	mov	r3, r0
 8003918:	b29a      	uxth	r2, r3
 800391a:	4b50      	ldr	r3, [pc, #320]	; (8003a5c <Munmunbot_Protocol+0x884>)
 800391c:	801a      	strh	r2, [r3, #0]
							temp[ 1+Shift ] = ( DataForReturn>>8 )&( 0xff );
 800391e:	4b4f      	ldr	r3, [pc, #316]	; (8003a5c <Munmunbot_Protocol+0x884>)
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	0a1b      	lsrs	r3, r3, #8
 8003924:	b29a      	uxth	r2, r3
 8003926:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800392a:	3301      	adds	r3, #1
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003932:	440b      	add	r3, r1
 8003934:	f803 2c30 	strb.w	r2, [r3, #-48]
							temp[ 2+Shift ] = ( DataForReturn )&( 0xff );
 8003938:	4b48      	ldr	r3, [pc, #288]	; (8003a5c <Munmunbot_Protocol+0x884>)
 800393a:	881a      	ldrh	r2, [r3, #0]
 800393c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003940:	3302      	adds	r3, #2
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003948:	440b      	add	r3, r1
 800394a:	f803 2c30 	strb.w	r2, [r3, #-48]
							temp[ 3+Shift ] = ~( temp[ 0+Shift ]+temp[ 1+Shift ]+temp[ 2+Shift ] );
 800394e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003952:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003956:	4413      	add	r3, r2
 8003958:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 800395c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003960:	3301      	adds	r3, #1
 8003962:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003966:	440b      	add	r3, r1
 8003968:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800396c:	4413      	add	r3, r2
 800396e:	b2da      	uxtb	r2, r3
 8003970:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003974:	3302      	adds	r3, #2
 8003976:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800397a:	440b      	add	r3, r1
 800397c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8003980:	4413      	add	r3, r2
 8003982:	b2da      	uxtb	r2, r3
 8003984:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003988:	3303      	adds	r3, #3
 800398a:	43d2      	mvns	r2, r2
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003992:	440b      	add	r3, r1
 8003994:	f803 2c30 	strb.w	r2, [r3, #-48]
							UARTTxWrite( uart, temp, 4+Shift );
 8003998:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800399c:	b29b      	uxth	r3, r3
 800399e:	3304      	adds	r3, #4
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	f107 0308 	add.w	r3, r7, #8
 80039a6:	4619      	mov	r1, r3
 80039a8:	6838      	ldr	r0, [r7, #0]
 80039aa:	f7ff fba7 	bl	80030fc <UARTTxWrite>
						}
						break;
 80039ae:	e026      	b.n	80039fe <Munmunbot_Protocol+0x826>

					case 12:  //Enable Gripper
						if (Munmunbot_State == STATE_Idle)
 80039b0:	4b2f      	ldr	r3, [pc, #188]	; (8003a70 <Munmunbot_Protocol+0x898>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d102      	bne.n	80039be <Munmunbot_Protocol+0x7e6>
						{
							GripperEnable = 1;
 80039b8:	4b2e      	ldr	r3, [pc, #184]	; (8003a74 <Munmunbot_Protocol+0x89c>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80039be:	6838      	ldr	r0, [r7, #0]
 80039c0:	f7ff fbe4 	bl	800318c <ACK1Return>
						break;
 80039c4:	e01b      	b.n	80039fe <Munmunbot_Protocol+0x826>
					case 13: //Disable Gripper
						if (Munmunbot_State == STATE_Idle)
 80039c6:	4b2a      	ldr	r3, [pc, #168]	; (8003a70 <Munmunbot_Protocol+0x898>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d102      	bne.n	80039d4 <Munmunbot_Protocol+0x7fc>
						{
							GripperEnable = 0;
 80039ce:	4b29      	ldr	r3, [pc, #164]	; (8003a74 <Munmunbot_Protocol+0x89c>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80039d4:	6838      	ldr	r0, [r7, #0]
 80039d6:	f7ff fbd9 	bl	800318c <ACK1Return>
						break;
 80039da:	e010      	b.n	80039fe <Munmunbot_Protocol+0x826>

					case 14: /// Sethome  ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80039dc:	4b24      	ldr	r3, [pc, #144]	; (8003a70 <Munmunbot_Protocol+0x898>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d107      	bne.n	80039f4 <Munmunbot_Protocol+0x81c>
						{
							Munmunbot_State = STATE_SetHome;
 80039e4:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <Munmunbot_Protocol+0x898>)
 80039e6:	2207      	movs	r2, #7
 80039e8:	701a      	strb	r2, [r3, #0]
							SethomeMode = SetHomeState_0;
 80039ea:	4b23      	ldr	r3, [pc, #140]	; (8003a78 <Munmunbot_Protocol+0x8a0>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
							PID_Reset();
 80039f0:	f000 f850 	bl	8003a94 <PID_Reset>
						}
						ACK1Return(uart);
 80039f4:	6838      	ldr	r0, [r7, #0]
 80039f6:	f7ff fbc9 	bl	800318c <ACK1Return>
						break;
 80039fa:	e000      	b.n	80039fe <Munmunbot_Protocol+0x826>
				    }
			   }
 80039fc:	bf00      	nop
			n_station = 0;
 80039fe:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <Munmunbot_Protocol+0x8a4>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	801a      	strh	r2, [r3, #0]
			ProtocolMode = 0;
 8003a04:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <Munmunbot_Protocol+0x8a8>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
			parameter_ptr = 0;
 8003a0a:	4b1e      	ldr	r3, [pc, #120]	; (8003a84 <Munmunbot_Protocol+0x8ac>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
			Data_HAck = 0;
 8003a10:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <Munmunbot_Protocol+0x8b0>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	801a      	strh	r2, [r3, #0]
			CheckSum = 0;
 8003a16:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <Munmunbot_Protocol+0x8b4>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
			Munmunbot_Protocol_State = PP_STARTandMode;
 8003a1c:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <Munmunbot_Protocol+0x8b8>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	701a      	strb	r2, [r3, #0]
			break;
 8003a22:	e002      	b.n	8003a2a <Munmunbot_Protocol+0x852>
			break;
 8003a24:	bf00      	nop
 8003a26:	e000      	b.n	8003a2a <Munmunbot_Protocol+0x852>
				break;
 8003a28:	bf00      	nop
			}
	}
}
 8003a2a:	bf00      	nop
 8003a2c:	3738      	adds	r7, #56	; 0x38
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bdb0      	pop	{r4, r5, r7, pc}
 8003a32:	bf00      	nop
 8003a34:	f3af 8000 	nop.w
 8003a38:	9ba5e354 	.word	0x9ba5e354
 8003a3c:	400920c4 	.word	0x400920c4
 8003a40:	00000000 	.word	0x00000000
 8003a44:	40c38800 	.word	0x40c38800
 8003a48:	00000000 	.word	0x00000000
 8003a4c:	406fe000 	.word	0x406fe000
 8003a50:	0800a36c 	.word	0x0800a36c
 8003a54:	200005f4 	.word	0x200005f4
 8003a58:	20000350 	.word	0x20000350
 8003a5c:	2000048a 	.word	0x2000048a
 8003a60:	0800a374 	.word	0x0800a374
 8003a64:	20000240 	.word	0x20000240
 8003a68:	404e0000 	.word	0x404e0000
 8003a6c:	40240000 	.word	0x40240000
 8003a70:	200000d9 	.word	0x200000d9
 8003a74:	200001ea 	.word	0x200001ea
 8003a78:	200000da 	.word	0x200000da
 8003a7c:	20000484 	.word	0x20000484
 8003a80:	20000380 	.word	0x20000380
 8003a84:	20000488 	.word	0x20000488
 8003a88:	20000382 	.word	0x20000382
 8003a8c:	2000037c 	.word	0x2000037c
 8003a90:	200000d8 	.word	0x200000d8

08003a94 <PID_Reset>:

void PID_Reset()
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
	PositionPIDController.PreviousError = 0;
 8003a98:	4b26      	ldr	r3, [pc, #152]	; (8003b34 <PID_Reset+0xa0>)
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	62da      	str	r2, [r3, #44]	; 0x2c
	PositionPIDController.Integral_Value = 0;
 8003aa0:	4b24      	ldr	r3, [pc, #144]	; (8003b34 <PID_Reset+0xa0>)
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	625a      	str	r2, [r3, #36]	; 0x24
	PositionPIDController.ControllerOutput = 0;
 8003aa8:	4b22      	ldr	r3, [pc, #136]	; (8003b34 <PID_Reset+0xa0>)
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	615a      	str	r2, [r3, #20]
	PositionPIDController.NowError = 0;
 8003ab0:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <PID_Reset+0xa0>)
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28
	PositionPIDController.PreviousPreviousError = 0;
 8003ab8:	4b1e      	ldr	r3, [pc, #120]	; (8003b34 <PID_Reset+0xa0>)
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
	PositionPIDController.PreviousControllerOutput = 0;
 8003ac0:	4b1c      	ldr	r3, [pc, #112]	; (8003b34 <PID_Reset+0xa0>)
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	619a      	str	r2, [r3, #24]


	VelocityPIDController.PreviousError = 0;
 8003ac8:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <PID_Reset+0xa4>)
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	62da      	str	r2, [r3, #44]	; 0x2c
	VelocityPIDController.Integral_Value = 0;
 8003ad0:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <PID_Reset+0xa4>)
 8003ad2:	f04f 0200 	mov.w	r2, #0
 8003ad6:	625a      	str	r2, [r3, #36]	; 0x24
	VelocityPIDController.ControllerOutput = 0;
 8003ad8:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <PID_Reset+0xa4>)
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	615a      	str	r2, [r3, #20]
	VelocityPIDController.NowError = 0;
 8003ae0:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <PID_Reset+0xa4>)
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28
	VelocityPIDController.PreviousPreviousError = 0;
 8003ae8:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <PID_Reset+0xa4>)
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
	VelocityPIDController.PreviousControllerOutput = 0;
 8003af0:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <PID_Reset+0xa4>)
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	619a      	str	r2, [r3, #24]

	StabilizerPIDController.PreviousError = 0;
 8003af8:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <PID_Reset+0xa8>)
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	62da      	str	r2, [r3, #44]	; 0x2c
	StabilizerPIDController.Integral_Value = 0;
 8003b00:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <PID_Reset+0xa8>)
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24
	StabilizerPIDController.ControllerOutput = 0;
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <PID_Reset+0xa8>)
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	615a      	str	r2, [r3, #20]
	StabilizerPIDController.NowError = 0;
 8003b10:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <PID_Reset+0xa8>)
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	629a      	str	r2, [r3, #40]	; 0x28
	StabilizerPIDController.PreviousPreviousError = 0;
 8003b18:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <PID_Reset+0xa8>)
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
	StabilizerPIDController.PreviousControllerOutput = 0;
 8003b20:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <PID_Reset+0xa8>)
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	619a      	str	r2, [r3, #24]
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20000200 	.word	0x20000200
 8003b38:	20000240 	.word	0x20000240
 8003b3c:	20000280 	.word	0x20000280

08003b40 <LAMP_ON>:

void LAMP_ON(uint8_t lampnumber)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
	if (lampnumber == 0)
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d110      	bne.n	8003b72 <LAMP_ON+0x32>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003b50:	2201      	movs	r2, #1
 8003b52:	2102      	movs	r1, #2
 8003b54:	4830      	ldr	r0, [pc, #192]	; (8003c18 <LAMP_ON+0xd8>)
 8003b56:	f001 fdc5 	bl	80056e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	2104      	movs	r1, #4
 8003b5e:	482e      	ldr	r0, [pc, #184]	; (8003c18 <LAMP_ON+0xd8>)
 8003b60:	f001 fdc0 	bl	80056e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003b64:	2201      	movs	r2, #1
 8003b66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b6a:	482c      	ldr	r0, [pc, #176]	; (8003c1c <LAMP_ON+0xdc>)
 8003b6c:	f001 fdba 	bl	80056e4 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
	}
}
 8003b70:	e04e      	b.n	8003c10 <LAMP_ON+0xd0>
	else if (lampnumber == 1)
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d110      	bne.n	8003b9a <LAMP_ON+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	4826      	ldr	r0, [pc, #152]	; (8003c18 <LAMP_ON+0xd8>)
 8003b7e:	f001 fdb1 	bl	80056e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003b82:	2201      	movs	r2, #1
 8003b84:	2104      	movs	r1, #4
 8003b86:	4824      	ldr	r0, [pc, #144]	; (8003c18 <LAMP_ON+0xd8>)
 8003b88:	f001 fdac 	bl	80056e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b92:	4822      	ldr	r0, [pc, #136]	; (8003c1c <LAMP_ON+0xdc>)
 8003b94:	f001 fda6 	bl	80056e4 <HAL_GPIO_WritePin>
}
 8003b98:	e03a      	b.n	8003c10 <LAMP_ON+0xd0>
	else if (lampnumber == 2)
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d110      	bne.n	8003bc2 <LAMP_ON+0x82>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	2102      	movs	r1, #2
 8003ba4:	481c      	ldr	r0, [pc, #112]	; (8003c18 <LAMP_ON+0xd8>)
 8003ba6:	f001 fd9d 	bl	80056e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8003baa:	2200      	movs	r2, #0
 8003bac:	2104      	movs	r1, #4
 8003bae:	481a      	ldr	r0, [pc, #104]	; (8003c18 <LAMP_ON+0xd8>)
 8003bb0:	f001 fd98 	bl	80056e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003bba:	4818      	ldr	r0, [pc, #96]	; (8003c1c <LAMP_ON+0xdc>)
 8003bbc:	f001 fd92 	bl	80056e4 <HAL_GPIO_WritePin>
}
 8003bc0:	e026      	b.n	8003c10 <LAMP_ON+0xd0>
	else if (lampnumber == 3)
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d110      	bne.n	8003bea <LAMP_ON+0xaa>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003bc8:	2201      	movs	r2, #1
 8003bca:	2102      	movs	r1, #2
 8003bcc:	4812      	ldr	r0, [pc, #72]	; (8003c18 <LAMP_ON+0xd8>)
 8003bce:	f001 fd89 	bl	80056e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	2104      	movs	r1, #4
 8003bd6:	4810      	ldr	r0, [pc, #64]	; (8003c18 <LAMP_ON+0xd8>)
 8003bd8:	f001 fd84 	bl	80056e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003be2:	480e      	ldr	r0, [pc, #56]	; (8003c1c <LAMP_ON+0xdc>)
 8003be4:	f001 fd7e 	bl	80056e4 <HAL_GPIO_WritePin>
}
 8003be8:	e012      	b.n	8003c10 <LAMP_ON+0xd0>
	else if (lampnumber == 4)
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d10f      	bne.n	8003c10 <LAMP_ON+0xd0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	4808      	ldr	r0, [pc, #32]	; (8003c18 <LAMP_ON+0xd8>)
 8003bf6:	f001 fd75 	bl	80056e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2104      	movs	r1, #4
 8003bfe:	4806      	ldr	r0, [pc, #24]	; (8003c18 <LAMP_ON+0xd8>)
 8003c00:	f001 fd70 	bl	80056e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003c04:	2200      	movs	r2, #0
 8003c06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c0a:	4804      	ldr	r0, [pc, #16]	; (8003c1c <LAMP_ON+0xdc>)
 8003c0c:	f001 fd6a 	bl	80056e4 <HAL_GPIO_WritePin>
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40020400 	.word	0x40020400
 8003c1c:	40020000 	.word	0x40020000

08003c20 <Emergency_switch_trigger>:

void Emergency_switch_trigger()
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1)
 8003c24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c28:	481f      	ldr	r0, [pc, #124]	; (8003ca8 <Emergency_switch_trigger+0x88>)
 8003c2a:	f001 fd43 	bl	80056b4 <HAL_GPIO_ReadPin>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d136      	bne.n	8003ca2 <Emergency_switch_trigger+0x82>
	{
		// Reset State Machine All
		Munmunbot_State = STATE_Disconnected;
 8003c34:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <Emergency_switch_trigger+0x8c>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
		MovingLinkMode = LMM_Not_Set;
 8003c3a:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <Emergency_switch_trigger+0x90>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	701a      	strb	r2, [r3, #0]
		SethomeMode = SetHomeState_0;
 8003c40:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <Emergency_switch_trigger+0x94>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	701a      	strb	r2, [r3, #0]
		TrjStruc.Mode = 0;
 8003c46:	4b1c      	ldr	r3, [pc, #112]	; (8003cb8 <Emergency_switch_trigger+0x98>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		TrjStruc.Submode = 0;
 8003c4e:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <Emergency_switch_trigger+0x98>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

		// Send back ACK to User-interface
		if ((Munmunbot_State == STATE_Calculation) || (Munmunbot_State == STATE_PrepareDATA) ||
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <Emergency_switch_trigger+0x8c>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d00b      	beq.n	8003c76 <Emergency_switch_trigger+0x56>
 8003c5e:	4b13      	ldr	r3, [pc, #76]	; (8003cac <Emergency_switch_trigger+0x8c>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d007      	beq.n	8003c76 <Emergency_switch_trigger+0x56>
				(Munmunbot_State == STATE_Link_Moving) || (Munmunbot_State == STATE_End_Effector_Working))
 8003c66:	4b11      	ldr	r3, [pc, #68]	; (8003cac <Emergency_switch_trigger+0x8c>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
		if ((Munmunbot_State == STATE_Calculation) || (Munmunbot_State == STATE_PrepareDATA) ||
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d003      	beq.n	8003c76 <Emergency_switch_trigger+0x56>
				(Munmunbot_State == STATE_Link_Moving) || (Munmunbot_State == STATE_End_Effector_Working))
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <Emergency_switch_trigger+0x8c>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b06      	cmp	r3, #6
 8003c74:	d102      	bne.n	8003c7c <Emergency_switch_trigger+0x5c>
		{
			ACK2Return(&UART2);
 8003c76:	4811      	ldr	r0, [pc, #68]	; (8003cbc <Emergency_switch_trigger+0x9c>)
 8003c78:	f7ff fa9a 	bl	80031b0 <ACK2Return>
		}

		// Reset variable
		NumberOfStationToGo = 0;
 8003c7c:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <Emergency_switch_trigger+0xa0>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	701a      	strb	r2, [r3, #0]
		NumberOfStationPTR = 0;
 8003c82:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <Emergency_switch_trigger+0xa4>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	701a      	strb	r2, [r3, #0]
		Moving_Link_Task_Flag = 0;
 8003c88:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <Emergency_switch_trigger+0xa8>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	701a      	strb	r2, [r3, #0]

		// Stop the Motor
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003c8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <Emergency_switch_trigger+0xac>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2200      	movs	r2, #0
 8003c94:	635a      	str	r2, [r3, #52]	; 0x34
		TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8003c96:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <Emergency_switch_trigger+0xb0>)
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	4a07      	ldr	r2, [pc, #28]	; (8003cb8 <Emergency_switch_trigger+0x98>)
 8003c9c:	66d3      	str	r3, [r2, #108]	; 0x6c

		PID_Reset();
 8003c9e:	f7ff fef9 	bl	8003a94 <PID_Reset>
	}
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40020400 	.word	0x40020400
 8003cac:	200000d9 	.word	0x200000d9
 8003cb0:	200001de 	.word	0x200001de
 8003cb4:	200000da 	.word	0x200000da
 8003cb8:	200002c0 	.word	0x200002c0
 8003cbc:	200000b8 	.word	0x200000b8
 8003cc0:	200001e0 	.word	0x200001e0
 8003cc4:	200001e1 	.word	0x200001e1
 8003cc8:	200001e8 	.word	0x200001e8
 8003ccc:	2000054c 	.word	0x2000054c
 8003cd0:	20000200 	.word	0x20000200

08003cd4 <Controlling_the_LINK>:

void Controlling_the_LINK()
{
 8003cd4:	b5b0      	push	{r4, r5, r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
	  // GEN Trajectory
	  TrajectoryGenerationProcess();
 8003cd8:	f7fe fb76 	bl	80023c8 <TrajectoryGenerationProcess>
	  EncoderVelocityAndPosition_Update();
 8003cdc:	f7fd fe42 	bl	8001964 <EncoderVelocityAndPosition_Update>
	  PIDController2in1();  ///use only position
 8003ce0:	f7fe ff64 	bl	8002bac <PIDController2in1>
//	  Plant_input = PositionPIDController.ControllerOutput;
	  Plant_input = VelocityPIDController.ControllerOutput;
 8003ce4:	4b29      	ldr	r3, [pc, #164]	; (8003d8c <Controlling_the_LINK+0xb8>)
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	4a29      	ldr	r2, [pc, #164]	; (8003d90 <Controlling_the_LINK+0xbc>)
 8003cea:	6013      	str	r3, [r2, #0]

	  if (Plant_input >= 0) /// Setting DIR
 8003cec:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <Controlling_the_LINK+0xbc>)
 8003cee:	edd3 7a00 	vldr	s15, [r3]
 8003cf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfa:	db0c      	blt.n	8003d16 <Controlling_the_LINK+0x42>
	  {
		  DCMotorStruc.DIR = 1;
 8003cfc:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <Controlling_the_LINK+0xc0>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input);
 8003d02:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <Controlling_the_LINK+0xbc>)
 8003d04:	edd3 7a00 	vldr	s15, [r3]
 8003d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d0c:	ee17 2a90 	vmov	r2, s15
 8003d10:	4b20      	ldr	r3, [pc, #128]	; (8003d94 <Controlling_the_LINK+0xc0>)
 8003d12:	605a      	str	r2, [r3, #4]
 8003d14:	e01b      	b.n	8003d4e <Controlling_the_LINK+0x7a>
	  }
	  else if (Plant_input < 0)
 8003d16:	4b1e      	ldr	r3, [pc, #120]	; (8003d90 <Controlling_the_LINK+0xbc>)
 8003d18:	edd3 7a00 	vldr	s15, [r3]
 8003d1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d24:	d513      	bpl.n	8003d4e <Controlling_the_LINK+0x7a>
	  {
		  DCMotorStruc.DIR = 0;
 8003d26:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <Controlling_the_LINK+0xc0>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input * -1.0);
 8003d2c:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <Controlling_the_LINK+0xbc>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fc fbb5 	bl	80004a0 <__aeabi_f2d>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4614      	mov	r4, r2
 8003d3c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003d40:	4620      	mov	r0, r4
 8003d42:	4629      	mov	r1, r5
 8003d44:	f7fc feb4 	bl	8000ab0 <__aeabi_d2uiz>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	4a12      	ldr	r2, [pc, #72]	; (8003d94 <Controlling_the_LINK+0xc0>)
 8003d4c:	6053      	str	r3, [r2, #4]
	  }

	  if (DCMotorStruc.PWMOut > 10000)   /// Saturation Output
 8003d4e:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <Controlling_the_LINK+0xc0>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d903      	bls.n	8003d62 <Controlling_the_LINK+0x8e>
	  {
		 DCMotorStruc.PWMOut = 10000;
 8003d5a:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <Controlling_the_LINK+0xc0>)
 8003d5c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d60:	605a      	str	r2, [r3, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 8003d62:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <Controlling_the_LINK+0xc0>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	2180      	movs	r1, #128	; 0x80
 8003d6a:	480b      	ldr	r0, [pc, #44]	; (8003d98 <Controlling_the_LINK+0xc4>)
 8003d6c:	f001 fcba 	bl	80056e4 <HAL_GPIO_WritePin>

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut); ///Setting PWM Pin
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <Controlling_the_LINK+0xc8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a07      	ldr	r2, [pc, #28]	; (8003d94 <Controlling_the_LINK+0xc0>)
 8003d76:	6852      	ldr	r2, [r2, #4]
 8003d78:	635a      	str	r2, [r3, #52]	; 0x34
	  TrjStruc.Loop_Timestamp = micros();
 8003d7a:	f7fd ff0f 	bl	8001b9c <micros>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4907      	ldr	r1, [pc, #28]	; (8003da0 <Controlling_the_LINK+0xcc>)
 8003d84:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8003d88:	bf00      	nop
 8003d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003d8c:	20000240 	.word	0x20000240
 8003d90:	200001e4 	.word	0x200001e4
 8003d94:	200000d0 	.word	0x200000d0
 8003d98:	40020800 	.word	0x40020800
 8003d9c:	2000054c 	.word	0x2000054c
 8003da0:	200002c0 	.word	0x200002c0

08003da4 <Stabilizing_the_LINK>:

void Stabilizing_the_LINK( float Position )
{
 8003da4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	ed87 0a01 	vstr	s0, [r7, #4]
	if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8003db0:	f7fd fef4 	bl	8001b9c <micros>
 8003db4:	4b35      	ldr	r3, [pc, #212]	; (8003e8c <Stabilizing_the_LINK+0xe8>)
 8003db6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003dba:	1a84      	subs	r4, r0, r2
 8003dbc:	eb61 0503 	sbc.w	r5, r1, r3
 8003dc0:	4b32      	ldr	r3, [pc, #200]	; (8003e8c <Stabilizing_the_LINK+0xe8>)
 8003dc2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003dc6:	429d      	cmp	r5, r3
 8003dc8:	bf08      	it	eq
 8003dca:	4294      	cmpeq	r4, r2
 8003dcc:	d358      	bcc.n	8003e80 <Stabilizing_the_LINK+0xdc>
	{
		TrjStruc.AngularDisplacementDesire = Position;
 8003dce:	4a2f      	ldr	r2, [pc, #188]	; (8003e8c <Stabilizing_the_LINK+0xe8>)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6213      	str	r3, [r2, #32]
		EncoderVelocityAndPosition_Update();
 8003dd4:	f7fd fdc6 	bl	8001964 <EncoderVelocityAndPosition_Update>
		StabilizerPID();
 8003dd8:	f7fe fff0 	bl	8002dbc <StabilizerPID>
		Plant_input = StabilizerPIDController.ControllerOutput;
 8003ddc:	4b2c      	ldr	r3, [pc, #176]	; (8003e90 <Stabilizing_the_LINK+0xec>)
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	4a2c      	ldr	r2, [pc, #176]	; (8003e94 <Stabilizing_the_LINK+0xf0>)
 8003de2:	6013      	str	r3, [r2, #0]

		if (Plant_input >= 0) /// Setting DIR
 8003de4:	4b2b      	ldr	r3, [pc, #172]	; (8003e94 <Stabilizing_the_LINK+0xf0>)
 8003de6:	edd3 7a00 	vldr	s15, [r3]
 8003dea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df2:	db0c      	blt.n	8003e0e <Stabilizing_the_LINK+0x6a>
		{
		  DCMotorStruc.DIR = 1;
 8003df4:	4b28      	ldr	r3, [pc, #160]	; (8003e98 <Stabilizing_the_LINK+0xf4>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input);
 8003dfa:	4b26      	ldr	r3, [pc, #152]	; (8003e94 <Stabilizing_the_LINK+0xf0>)
 8003dfc:	edd3 7a00 	vldr	s15, [r3]
 8003e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e04:	ee17 2a90 	vmov	r2, s15
 8003e08:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <Stabilizing_the_LINK+0xf4>)
 8003e0a:	605a      	str	r2, [r3, #4]
 8003e0c:	e01b      	b.n	8003e46 <Stabilizing_the_LINK+0xa2>
		}
		else if (Plant_input < 0)
 8003e0e:	4b21      	ldr	r3, [pc, #132]	; (8003e94 <Stabilizing_the_LINK+0xf0>)
 8003e10:	edd3 7a00 	vldr	s15, [r3]
 8003e14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1c:	d513      	bpl.n	8003e46 <Stabilizing_the_LINK+0xa2>
		{
		  DCMotorStruc.DIR = 0;
 8003e1e:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <Stabilizing_the_LINK+0xf4>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input * -1.0);
 8003e24:	4b1b      	ldr	r3, [pc, #108]	; (8003e94 <Stabilizing_the_LINK+0xf0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fc fb39 	bl	80004a0 <__aeabi_f2d>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4690      	mov	r8, r2
 8003e34:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003e38:	4640      	mov	r0, r8
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	f7fc fe38 	bl	8000ab0 <__aeabi_d2uiz>
 8003e40:	4603      	mov	r3, r0
 8003e42:	4a15      	ldr	r2, [pc, #84]	; (8003e98 <Stabilizing_the_LINK+0xf4>)
 8003e44:	6053      	str	r3, [r2, #4]
		}

		if (DCMotorStruc.PWMOut > 10000)   /// Saturation Output
 8003e46:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <Stabilizing_the_LINK+0xf4>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d903      	bls.n	8003e5a <Stabilizing_the_LINK+0xb6>
		{
		 DCMotorStruc.PWMOut = 10000;
 8003e52:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <Stabilizing_the_LINK+0xf4>)
 8003e54:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e58:	605a      	str	r2, [r3, #4]
		}

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <Stabilizing_the_LINK+0xf4>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	2180      	movs	r1, #128	; 0x80
 8003e62:	480e      	ldr	r0, [pc, #56]	; (8003e9c <Stabilizing_the_LINK+0xf8>)
 8003e64:	f001 fc3e 	bl	80056e4 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut); ///Setting PWM Pin
 8003e68:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <Stabilizing_the_LINK+0xfc>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a0a      	ldr	r2, [pc, #40]	; (8003e98 <Stabilizing_the_LINK+0xf4>)
 8003e6e:	6852      	ldr	r2, [r2, #4]
 8003e70:	635a      	str	r2, [r3, #52]	; 0x34
		TrjStruc.Loop_Timestamp = micros();
 8003e72:	f7fd fe93 	bl	8001b9c <micros>
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4904      	ldr	r1, [pc, #16]	; (8003e8c <Stabilizing_the_LINK+0xe8>)
 8003e7c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	}
}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200002c0 	.word	0x200002c0
 8003e90:	20000280 	.word	0x20000280
 8003e94:	200001e4 	.word	0x200001e4
 8003e98:	200000d0 	.word	0x200000d0
 8003e9c:	40020800 	.word	0x40020800
 8003ea0:	2000054c 	.word	0x2000054c

08003ea4 <HackTheLink>:

void HackTheLink( float Position )
{
 8003ea4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	ed87 0a01 	vstr	s0, [r7, #4]
	if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8003eb0:	f7fd fe74 	bl	8001b9c <micros>
 8003eb4:	4b54      	ldr	r3, [pc, #336]	; (8004008 <HackTheLink+0x164>)
 8003eb6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003eba:	1a84      	subs	r4, r0, r2
 8003ebc:	eb61 0503 	sbc.w	r5, r1, r3
 8003ec0:	4b51      	ldr	r3, [pc, #324]	; (8004008 <HackTheLink+0x164>)
 8003ec2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003ec6:	429d      	cmp	r5, r3
 8003ec8:	bf08      	it	eq
 8003eca:	4294      	cmpeq	r4, r2
 8003ecc:	f0c0 8096 	bcc.w	8003ffc <HackTheLink+0x158>
	{
		TrjStruc.AngularDisplacementDesire = Position;
 8003ed0:	4a4d      	ldr	r2, [pc, #308]	; (8004008 <HackTheLink+0x164>)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6213      	str	r3, [r2, #32]
		EncoderVelocityAndPosition_Update();
 8003ed6:	f7fd fd45 	bl	8001964 <EncoderVelocityAndPosition_Update>

		if ((PositionPIDController.OutputFeedback <= Position + AcceptableError) &&
 8003eda:	4b4c      	ldr	r3, [pc, #304]	; (800400c <HackTheLink+0x168>)
 8003edc:	ed93 7a08 	vldr	s14, [r3, #32]
 8003ee0:	4b4b      	ldr	r3, [pc, #300]	; (8004010 <HackTheLink+0x16c>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	ee07 3a90 	vmov	s15, r3
 8003ee8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003eec:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ef0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003efc:	d811      	bhi.n	8003f22 <HackTheLink+0x7e>
				(PositionPIDController.OutputFeedback >= Position - AcceptableError))
 8003efe:	4b43      	ldr	r3, [pc, #268]	; (800400c <HackTheLink+0x168>)
 8003f00:	ed93 7a08 	vldr	s14, [r3, #32]
 8003f04:	4b42      	ldr	r3, [pc, #264]	; (8004010 <HackTheLink+0x16c>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	ee07 3a90 	vmov	s15, r3
 8003f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f10:	edd7 6a01 	vldr	s13, [r7, #4]
 8003f14:	ee76 7ae7 	vsub.f32	s15, s13, s15
		if ((PositionPIDController.OutputFeedback <= Position + AcceptableError) &&
 8003f18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f20:	da1e      	bge.n	8003f60 <HackTheLink+0xbc>
		{
//			Plant_input = 1500;
		}
		else if ( Position - PositionPIDController.OutputFeedback >= 0)
 8003f22:	4b3a      	ldr	r3, [pc, #232]	; (800400c <HackTheLink+0x168>)
 8003f24:	edd3 7a08 	vldr	s15, [r3, #32]
 8003f28:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f38:	db03      	blt.n	8003f42 <HackTheLink+0x9e>
		{
			Plant_input = 2300;
 8003f3a:	4b36      	ldr	r3, [pc, #216]	; (8004014 <HackTheLink+0x170>)
 8003f3c:	4a36      	ldr	r2, [pc, #216]	; (8004018 <HackTheLink+0x174>)
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	e00e      	b.n	8003f60 <HackTheLink+0xbc>
		}
		else if ( Position - PositionPIDController.OutputFeedback < 0)
 8003f42:	4b32      	ldr	r3, [pc, #200]	; (800400c <HackTheLink+0x168>)
 8003f44:	edd3 7a08 	vldr	s15, [r3, #32]
 8003f48:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f58:	d502      	bpl.n	8003f60 <HackTheLink+0xbc>
		{
			Plant_input = -2300;
 8003f5a:	4b2e      	ldr	r3, [pc, #184]	; (8004014 <HackTheLink+0x170>)
 8003f5c:	4a2f      	ldr	r2, [pc, #188]	; (800401c <HackTheLink+0x178>)
 8003f5e:	601a      	str	r2, [r3, #0]
		}

		if (Plant_input >= 0) /// Setting DIR
 8003f60:	4b2c      	ldr	r3, [pc, #176]	; (8004014 <HackTheLink+0x170>)
 8003f62:	edd3 7a00 	vldr	s15, [r3]
 8003f66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6e:	db0c      	blt.n	8003f8a <HackTheLink+0xe6>
		{
		  DCMotorStruc.DIR = 1;
 8003f70:	4b2b      	ldr	r3, [pc, #172]	; (8004020 <HackTheLink+0x17c>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input);
 8003f76:	4b27      	ldr	r3, [pc, #156]	; (8004014 <HackTheLink+0x170>)
 8003f78:	edd3 7a00 	vldr	s15, [r3]
 8003f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f80:	ee17 2a90 	vmov	r2, s15
 8003f84:	4b26      	ldr	r3, [pc, #152]	; (8004020 <HackTheLink+0x17c>)
 8003f86:	605a      	str	r2, [r3, #4]
 8003f88:	e01b      	b.n	8003fc2 <HackTheLink+0x11e>
		}
		else if (Plant_input < 0)
 8003f8a:	4b22      	ldr	r3, [pc, #136]	; (8004014 <HackTheLink+0x170>)
 8003f8c:	edd3 7a00 	vldr	s15, [r3]
 8003f90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f98:	d513      	bpl.n	8003fc2 <HackTheLink+0x11e>
		{
		  DCMotorStruc.DIR = 0;
 8003f9a:	4b21      	ldr	r3, [pc, #132]	; (8004020 <HackTheLink+0x17c>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input * -1.0);
 8003fa0:	4b1c      	ldr	r3, [pc, #112]	; (8004014 <HackTheLink+0x170>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fc fa7b 	bl	80004a0 <__aeabi_f2d>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4690      	mov	r8, r2
 8003fb0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003fb4:	4640      	mov	r0, r8
 8003fb6:	4649      	mov	r1, r9
 8003fb8:	f7fc fd7a 	bl	8000ab0 <__aeabi_d2uiz>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	4a18      	ldr	r2, [pc, #96]	; (8004020 <HackTheLink+0x17c>)
 8003fc0:	6053      	str	r3, [r2, #4]
		}

		if (DCMotorStruc.PWMOut > 10000)   /// Saturation Output
 8003fc2:	4b17      	ldr	r3, [pc, #92]	; (8004020 <HackTheLink+0x17c>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d903      	bls.n	8003fd6 <HackTheLink+0x132>
		{
		 DCMotorStruc.PWMOut = 10000;
 8003fce:	4b14      	ldr	r3, [pc, #80]	; (8004020 <HackTheLink+0x17c>)
 8003fd0:	f242 7210 	movw	r2, #10000	; 0x2710
 8003fd4:	605a      	str	r2, [r3, #4]
		}

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 8003fd6:	4b12      	ldr	r3, [pc, #72]	; (8004020 <HackTheLink+0x17c>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2180      	movs	r1, #128	; 0x80
 8003fde:	4811      	ldr	r0, [pc, #68]	; (8004024 <HackTheLink+0x180>)
 8003fe0:	f001 fb80 	bl	80056e4 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut); ///Setting PWM Pin
 8003fe4:	4b10      	ldr	r3, [pc, #64]	; (8004028 <HackTheLink+0x184>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a0d      	ldr	r2, [pc, #52]	; (8004020 <HackTheLink+0x17c>)
 8003fea:	6852      	ldr	r2, [r2, #4]
 8003fec:	635a      	str	r2, [r3, #52]	; 0x34
		TrjStruc.Loop_Timestamp = micros();
 8003fee:	f7fd fdd5 	bl	8001b9c <micros>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4904      	ldr	r1, [pc, #16]	; (8004008 <HackTheLink+0x164>)
 8003ff8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	}
}
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004006:	bf00      	nop
 8004008:	200002c0 	.word	0x200002c0
 800400c:	20000200 	.word	0x20000200
 8004010:	20000014 	.word	0x20000014
 8004014:	200001e4 	.word	0x200001e4
 8004018:	450fc000 	.word	0x450fc000
 800401c:	c50fc000 	.word	0xc50fc000
 8004020:	200000d0 	.word	0x200000d0
 8004024:	40020800 	.word	0x40020800
 8004028:	2000054c 	.word	0x2000054c

0800402c <SETHOME_StateMachine_Function>:

void SETHOME_StateMachine_Function()
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
	switch (SethomeMode)
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <SETHOME_StateMachine_Function+0x74>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d013      	beq.n	8004060 <SETHOME_StateMachine_Function+0x34>
 8004038:	2b02      	cmp	r3, #2
 800403a:	dc2e      	bgt.n	800409a <SETHOME_StateMachine_Function+0x6e>
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <SETHOME_StateMachine_Function+0x18>
 8004040:	2b01      	cmp	r3, #1
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2500);
			SethomeMode = SetHomeState_1;
			break;
		case SetHomeState_1:
			break;
 8004042:	e02a      	b.n	800409a <SETHOME_StateMachine_Function+0x6e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8004044:	2200      	movs	r2, #0
 8004046:	2180      	movs	r1, #128	; 0x80
 8004048:	4816      	ldr	r0, [pc, #88]	; (80040a4 <SETHOME_StateMachine_Function+0x78>)
 800404a:	f001 fb4b 	bl	80056e4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2500);
 800404e:	4b16      	ldr	r3, [pc, #88]	; (80040a8 <SETHOME_StateMachine_Function+0x7c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004056:	635a      	str	r2, [r3, #52]	; 0x34
			SethomeMode = SetHomeState_1;
 8004058:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <SETHOME_StateMachine_Function+0x74>)
 800405a:	2201      	movs	r2, #1
 800405c:	701a      	strb	r2, [r3, #0]
			break;
 800405e:	e01c      	b.n	800409a <SETHOME_StateMachine_Function+0x6e>
		case SetHomeState_2:
			Munmunbot_State = STATE_Idle;
 8004060:	4b12      	ldr	r3, [pc, #72]	; (80040ac <SETHOME_StateMachine_Function+0x80>)
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 8004066:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <SETHOME_StateMachine_Function+0x84>)
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800406c:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <SETHOME_StateMachine_Function+0x7c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2200      	movs	r2, #0
 8004072:	635a      	str	r2, [r3, #52]	; 0x34
			TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
 8004074:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <SETHOME_StateMachine_Function+0x88>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004082:	4b0d      	ldr	r3, [pc, #52]	; (80040b8 <SETHOME_StateMachine_Function+0x8c>)
 8004084:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			Moving_Link_Task_Flag = 0;
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <SETHOME_StateMachine_Function+0x90>)
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
			sethomeTrigger = 1;
 800408e:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <SETHOME_StateMachine_Function+0x94>)
 8004090:	2201      	movs	r2, #1
 8004092:	701a      	strb	r2, [r3, #0]
			PID_Reset();
 8004094:	f7ff fcfe 	bl	8003a94 <PID_Reset>

			break;
 8004098:	bf00      	nop

     }

}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	200000da 	.word	0x200000da
 80040a4:	40020800 	.word	0x40020800
 80040a8:	2000054c 	.word	0x2000054c
 80040ac:	200000d9 	.word	0x200000d9
 80040b0:	200001de 	.word	0x200001de
 80040b4:	200005f4 	.word	0x200005f4
 80040b8:	200002c0 	.word	0x200002c0
 80040bc:	200001e8 	.word	0x200001e8
 80040c0:	200001e9 	.word	0x200001e9

080040c4 <UpdateMunmunBotState>:

void UpdateMunmunBotState()
{
 80040c4:	b5b0      	push	{r4, r5, r7, lr}
 80040c6:	af00      	add	r7, sp, #0
	if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 80040c8:	f7fd fd68 	bl	8001b9c <micros>
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <UpdateMunmunBotState+0x38>)
 80040ce:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80040d2:	1a84      	subs	r4, r0, r2
 80040d4:	eb61 0503 	sbc.w	r5, r1, r3
 80040d8:	4b08      	ldr	r3, [pc, #32]	; (80040fc <UpdateMunmunBotState+0x38>)
 80040da:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80040de:	429d      	cmp	r5, r3
 80040e0:	bf08      	it	eq
 80040e2:	4294      	cmpeq	r4, r2
 80040e4:	d308      	bcc.n	80040f8 <UpdateMunmunBotState+0x34>
	{
		EncoderVelocityAndPosition_Update();
 80040e6:	f7fd fc3d 	bl	8001964 <EncoderVelocityAndPosition_Update>
		TrjStruc.Loop_Timestamp = micros();
 80040ea:	f7fd fd57 	bl	8001b9c <micros>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4902      	ldr	r1, [pc, #8]	; (80040fc <UpdateMunmunBotState+0x38>)
 80040f4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	}
}
 80040f8:	bf00      	nop
 80040fa:	bdb0      	pop	{r4, r5, r7, pc}
 80040fc:	200002c0 	.word	0x200002c0

08004100 <EndEffectorWorkingState>:

void EndEffectorWorkingState()
{
 8004100:	b5b0      	push	{r4, r5, r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
	  if(GripperEnable == 1)
 8004106:	4b62      	ldr	r3, [pc, #392]	; (8004290 <EndEffectorWorkingState+0x190>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b01      	cmp	r3, #1
 800410c:	f040 80b0 	bne.w	8004270 <EndEffectorWorkingState+0x170>
	  {
		if (GripperState == 0)
 8004110:	4b60      	ldr	r3, [pc, #384]	; (8004294 <EndEffectorWorkingState+0x194>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d112      	bne.n	800413e <EndEffectorWorkingState+0x3e>
		{
			{
				uint8_t temp[1] = {0x45};
 8004118:	2345      	movs	r3, #69	; 0x45
 800411a:	713b      	strb	r3, [r7, #4]
				HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
 800411c:	1d3a      	adds	r2, r7, #4
 800411e:	2301      	movs	r3, #1
 8004120:	2146      	movs	r1, #70	; 0x46
 8004122:	485d      	ldr	r0, [pc, #372]	; (8004298 <EndEffectorWorkingState+0x198>)
 8004124:	f001 fc54 	bl	80059d0 <HAL_I2C_Master_Transmit_IT>
			}
			GripperState = 1;
 8004128:	4b5a      	ldr	r3, [pc, #360]	; (8004294 <EndEffectorWorkingState+0x194>)
 800412a:	2201      	movs	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
			Timestamp_Gripper = micros();
 800412e:	f7fd fd35 	bl	8001b9c <micros>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4959      	ldr	r1, [pc, #356]	; (800429c <EndEffectorWorkingState+0x19c>)
 8004138:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  else if(GripperEnable == 0)
	  {
		 Munmunbot_State = STATE_PrepareDATA;
	  }
}
 800413c:	e09f      	b.n	800427e <EndEffectorWorkingState+0x17e>
		else if (GripperState != 0)
 800413e:	4b55      	ldr	r3, [pc, #340]	; (8004294 <EndEffectorWorkingState+0x194>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 809b 	beq.w	800427e <EndEffectorWorkingState+0x17e>
			if ((hi2c1.State == HAL_I2C_STATE_READY) && (GripperState == 1))
 8004148:	4b53      	ldr	r3, [pc, #332]	; (8004298 <EndEffectorWorkingState+0x198>)
 800414a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b20      	cmp	r3, #32
 8004152:	d10f      	bne.n	8004174 <EndEffectorWorkingState+0x74>
 8004154:	4b4f      	ldr	r3, [pc, #316]	; (8004294 <EndEffectorWorkingState+0x194>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d10b      	bne.n	8004174 <EndEffectorWorkingState+0x74>
					uint8_t temp[1] = {0x23};
 800415c:	2323      	movs	r3, #35	; 0x23
 800415e:	703b      	strb	r3, [r7, #0]
					HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
 8004160:	463a      	mov	r2, r7
 8004162:	2301      	movs	r3, #1
 8004164:	2146      	movs	r1, #70	; 0x46
 8004166:	484c      	ldr	r0, [pc, #304]	; (8004298 <EndEffectorWorkingState+0x198>)
 8004168:	f001 fc32 	bl	80059d0 <HAL_I2C_Master_Transmit_IT>
				GripperState = 2;
 800416c:	4b49      	ldr	r3, [pc, #292]	; (8004294 <EndEffectorWorkingState+0x194>)
 800416e:	2202      	movs	r2, #2
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	e012      	b.n	800419a <EndEffectorWorkingState+0x9a>
			else if ((hi2c1.State == HAL_I2C_STATE_READY) && ( GripperState == 2 ))
 8004174:	4b48      	ldr	r3, [pc, #288]	; (8004298 <EndEffectorWorkingState+0x198>)
 8004176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b20      	cmp	r3, #32
 800417e:	d10c      	bne.n	800419a <EndEffectorWorkingState+0x9a>
 8004180:	4b44      	ldr	r3, [pc, #272]	; (8004294 <EndEffectorWorkingState+0x194>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d108      	bne.n	800419a <EndEffectorWorkingState+0x9a>
					HAL_I2C_Master_Receive_IT(&hi2c1, ((0x23 << 1) | 0b1), GripperStatus, 1);
 8004188:	2301      	movs	r3, #1
 800418a:	4a45      	ldr	r2, [pc, #276]	; (80042a0 <EndEffectorWorkingState+0x1a0>)
 800418c:	2147      	movs	r1, #71	; 0x47
 800418e:	4842      	ldr	r0, [pc, #264]	; (8004298 <EndEffectorWorkingState+0x198>)
 8004190:	f001 fcc4 	bl	8005b1c <HAL_I2C_Master_Receive_IT>
				GripperState = 1;
 8004194:	4b3f      	ldr	r3, [pc, #252]	; (8004294 <EndEffectorWorkingState+0x194>)
 8004196:	2201      	movs	r2, #1
 8004198:	701a      	strb	r2, [r3, #0]
			if (GripperStatus[0] == 0x12 )
 800419a:	4b41      	ldr	r3, [pc, #260]	; (80042a0 <EndEffectorWorkingState+0x1a0>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b12      	cmp	r3, #18
 80041a0:	d110      	bne.n	80041c4 <EndEffectorWorkingState+0xc4>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80041a2:	2201      	movs	r2, #1
 80041a4:	2102      	movs	r1, #2
 80041a6:	483f      	ldr	r0, [pc, #252]	; (80042a4 <EndEffectorWorkingState+0x1a4>)
 80041a8:	f001 fa9c 	bl	80056e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80041ac:	2201      	movs	r2, #1
 80041ae:	2104      	movs	r1, #4
 80041b0:	483c      	ldr	r0, [pc, #240]	; (80042a4 <EndEffectorWorkingState+0x1a4>)
 80041b2:	f001 fa97 	bl	80056e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80041b6:	2200      	movs	r2, #0
 80041b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041bc:	483a      	ldr	r0, [pc, #232]	; (80042a8 <EndEffectorWorkingState+0x1a8>)
 80041be:	f001 fa91 	bl	80056e4 <HAL_GPIO_WritePin>
 80041c2:	e03d      	b.n	8004240 <EndEffectorWorkingState+0x140>
			else if (GripperStatus[0] == 0x34)
 80041c4:	4b36      	ldr	r3, [pc, #216]	; (80042a0 <EndEffectorWorkingState+0x1a0>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b34      	cmp	r3, #52	; 0x34
 80041ca:	d110      	bne.n	80041ee <EndEffectorWorkingState+0xee>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80041cc:	2201      	movs	r2, #1
 80041ce:	2102      	movs	r1, #2
 80041d0:	4834      	ldr	r0, [pc, #208]	; (80042a4 <EndEffectorWorkingState+0x1a4>)
 80041d2:	f001 fa87 	bl	80056e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80041d6:	2200      	movs	r2, #0
 80041d8:	2104      	movs	r1, #4
 80041da:	4832      	ldr	r0, [pc, #200]	; (80042a4 <EndEffectorWorkingState+0x1a4>)
 80041dc:	f001 fa82 	bl	80056e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80041e0:	2200      	movs	r2, #0
 80041e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041e6:	4830      	ldr	r0, [pc, #192]	; (80042a8 <EndEffectorWorkingState+0x1a8>)
 80041e8:	f001 fa7c 	bl	80056e4 <HAL_GPIO_WritePin>
 80041ec:	e028      	b.n	8004240 <EndEffectorWorkingState+0x140>
			else if (GripperStatus[0] == 0x56)
 80041ee:	4b2c      	ldr	r3, [pc, #176]	; (80042a0 <EndEffectorWorkingState+0x1a0>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b56      	cmp	r3, #86	; 0x56
 80041f4:	d110      	bne.n	8004218 <EndEffectorWorkingState+0x118>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80041f6:	2200      	movs	r2, #0
 80041f8:	2102      	movs	r1, #2
 80041fa:	482a      	ldr	r0, [pc, #168]	; (80042a4 <EndEffectorWorkingState+0x1a4>)
 80041fc:	f001 fa72 	bl	80056e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8004200:	2200      	movs	r2, #0
 8004202:	2104      	movs	r1, #4
 8004204:	4827      	ldr	r0, [pc, #156]	; (80042a4 <EndEffectorWorkingState+0x1a4>)
 8004206:	f001 fa6d 	bl	80056e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 800420a:	2200      	movs	r2, #0
 800420c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004210:	4825      	ldr	r0, [pc, #148]	; (80042a8 <EndEffectorWorkingState+0x1a8>)
 8004212:	f001 fa67 	bl	80056e4 <HAL_GPIO_WritePin>
 8004216:	e013      	b.n	8004240 <EndEffectorWorkingState+0x140>
			else if (GripperStatus[0] == 0x78)
 8004218:	4b21      	ldr	r3, [pc, #132]	; (80042a0 <EndEffectorWorkingState+0x1a0>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b78      	cmp	r3, #120	; 0x78
 800421e:	d10f      	bne.n	8004240 <EndEffectorWorkingState+0x140>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8004220:	2201      	movs	r2, #1
 8004222:	2102      	movs	r1, #2
 8004224:	481f      	ldr	r0, [pc, #124]	; (80042a4 <EndEffectorWorkingState+0x1a4>)
 8004226:	f001 fa5d 	bl	80056e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 800422a:	2201      	movs	r2, #1
 800422c:	2104      	movs	r1, #4
 800422e:	481d      	ldr	r0, [pc, #116]	; (80042a4 <EndEffectorWorkingState+0x1a4>)
 8004230:	f001 fa58 	bl	80056e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8004234:	2201      	movs	r2, #1
 8004236:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800423a:	481b      	ldr	r0, [pc, #108]	; (80042a8 <EndEffectorWorkingState+0x1a8>)
 800423c:	f001 fa52 	bl	80056e4 <HAL_GPIO_WritePin>
			if (micros() - Timestamp_Gripper >= 5100000)
 8004240:	f7fd fcac 	bl	8001b9c <micros>
 8004244:	4b15      	ldr	r3, [pc, #84]	; (800429c <EndEffectorWorkingState+0x19c>)
 8004246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424a:	1a84      	subs	r4, r0, r2
 800424c:	eb61 0503 	sbc.w	r5, r1, r3
 8004250:	a30d      	add	r3, pc, #52	; (adr r3, 8004288 <EndEffectorWorkingState+0x188>)
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	42ab      	cmp	r3, r5
 8004258:	bf08      	it	eq
 800425a:	42a2      	cmpeq	r2, r4
 800425c:	d20f      	bcs.n	800427e <EndEffectorWorkingState+0x17e>
				GripperState = 0;
 800425e:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <EndEffectorWorkingState+0x194>)
 8004260:	2200      	movs	r2, #0
 8004262:	701a      	strb	r2, [r3, #0]
				Munmunbot_State = STATE_PrepareDATA;
 8004264:	4b11      	ldr	r3, [pc, #68]	; (80042ac <EndEffectorWorkingState+0x1ac>)
 8004266:	2202      	movs	r2, #2
 8004268:	701a      	strb	r2, [r3, #0]
				PID_Reset();
 800426a:	f7ff fc13 	bl	8003a94 <PID_Reset>
}
 800426e:	e006      	b.n	800427e <EndEffectorWorkingState+0x17e>
	  else if(GripperEnable == 0)
 8004270:	4b07      	ldr	r3, [pc, #28]	; (8004290 <EndEffectorWorkingState+0x190>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d102      	bne.n	800427e <EndEffectorWorkingState+0x17e>
		 Munmunbot_State = STATE_PrepareDATA;
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <EndEffectorWorkingState+0x1ac>)
 800427a:	2202      	movs	r2, #2
 800427c:	701a      	strb	r2, [r3, #0]
}
 800427e:	bf00      	nop
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bdb0      	pop	{r4, r5, r7, pc}
 8004286:	bf00      	nop
 8004288:	004dd1df 	.word	0x004dd1df
 800428c:	00000000 	.word	0x00000000
 8004290:	200001ea 	.word	0x200001ea
 8004294:	200001eb 	.word	0x200001eb
 8004298:	200004f8 	.word	0x200004f8
 800429c:	200001f0 	.word	0x200001f0
 80042a0:	200001ec 	.word	0x200001ec
 80042a4:	40020400 	.word	0x40020400
 80042a8:	40020000 	.word	0x40020000
 80042ac:	200000d9 	.word	0x200000d9

080042b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042b4:	b672      	cpsid	i
}
 80042b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042b8:	e7fe      	b.n	80042b8 <Error_Handler+0x8>
	...

080042bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042c2:	2300      	movs	r3, #0
 80042c4:	607b      	str	r3, [r7, #4]
 80042c6:	4b10      	ldr	r3, [pc, #64]	; (8004308 <HAL_MspInit+0x4c>)
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	4a0f      	ldr	r2, [pc, #60]	; (8004308 <HAL_MspInit+0x4c>)
 80042cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042d0:	6453      	str	r3, [r2, #68]	; 0x44
 80042d2:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <HAL_MspInit+0x4c>)
 80042d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042da:	607b      	str	r3, [r7, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042de:	2300      	movs	r3, #0
 80042e0:	603b      	str	r3, [r7, #0]
 80042e2:	4b09      	ldr	r3, [pc, #36]	; (8004308 <HAL_MspInit+0x4c>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	4a08      	ldr	r2, [pc, #32]	; (8004308 <HAL_MspInit+0x4c>)
 80042e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ec:	6413      	str	r3, [r2, #64]	; 0x40
 80042ee:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_MspInit+0x4c>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80042fa:	2007      	movs	r0, #7
 80042fc:	f000 fc04 	bl	8004b08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40023800 	.word	0x40023800

0800430c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08a      	sub	sp, #40	; 0x28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004314:	f107 0314 	add.w	r3, r7, #20
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	609a      	str	r2, [r3, #8]
 8004320:	60da      	str	r2, [r3, #12]
 8004322:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a21      	ldr	r2, [pc, #132]	; (80043b0 <HAL_I2C_MspInit+0xa4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d13c      	bne.n	80043a8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800432e:	2300      	movs	r3, #0
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <HAL_I2C_MspInit+0xa8>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	4a1f      	ldr	r2, [pc, #124]	; (80043b4 <HAL_I2C_MspInit+0xa8>)
 8004338:	f043 0302 	orr.w	r3, r3, #2
 800433c:	6313      	str	r3, [r2, #48]	; 0x30
 800433e:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <HAL_I2C_MspInit+0xa8>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800434a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800434e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004350:	2312      	movs	r3, #18
 8004352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004354:	2301      	movs	r3, #1
 8004356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004358:	2303      	movs	r3, #3
 800435a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800435c:	2304      	movs	r3, #4
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004360:	f107 0314 	add.w	r3, r7, #20
 8004364:	4619      	mov	r1, r3
 8004366:	4814      	ldr	r0, [pc, #80]	; (80043b8 <HAL_I2C_MspInit+0xac>)
 8004368:	f001 f820 	bl	80053ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <HAL_I2C_MspInit+0xa8>)
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	4a0f      	ldr	r2, [pc, #60]	; (80043b4 <HAL_I2C_MspInit+0xa8>)
 8004376:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800437a:	6413      	str	r3, [r2, #64]	; 0x40
 800437c:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <HAL_I2C_MspInit+0xa8>)
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004388:	2200      	movs	r2, #0
 800438a:	2100      	movs	r1, #0
 800438c:	201f      	movs	r0, #31
 800438e:	f000 fbc6 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004392:	201f      	movs	r0, #31
 8004394:	f000 fbdf 	bl	8004b56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004398:	2200      	movs	r2, #0
 800439a:	2100      	movs	r1, #0
 800439c:	2020      	movs	r0, #32
 800439e:	f000 fbbe 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80043a2:	2020      	movs	r0, #32
 80043a4:	f000 fbd7 	bl	8004b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80043a8:	bf00      	nop
 80043aa:	3728      	adds	r7, #40	; 0x28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40005400 	.word	0x40005400
 80043b4:	40023800 	.word	0x40023800
 80043b8:	40020400 	.word	0x40020400

080043bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08a      	sub	sp, #40	; 0x28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c4:	f107 0314 	add.w	r3, r7, #20
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	605a      	str	r2, [r3, #4]
 80043ce:	609a      	str	r2, [r3, #8]
 80043d0:	60da      	str	r2, [r3, #12]
 80043d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a19      	ldr	r2, [pc, #100]	; (8004440 <HAL_TIM_Encoder_MspInit+0x84>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d12c      	bne.n	8004438 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043de:	2300      	movs	r3, #0
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	4b18      	ldr	r3, [pc, #96]	; (8004444 <HAL_TIM_Encoder_MspInit+0x88>)
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	4a17      	ldr	r2, [pc, #92]	; (8004444 <HAL_TIM_Encoder_MspInit+0x88>)
 80043e8:	f043 0301 	orr.w	r3, r3, #1
 80043ec:	6453      	str	r3, [r2, #68]	; 0x44
 80043ee:	4b15      	ldr	r3, [pc, #84]	; (8004444 <HAL_TIM_Encoder_MspInit+0x88>)
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	4b11      	ldr	r3, [pc, #68]	; (8004444 <HAL_TIM_Encoder_MspInit+0x88>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	4a10      	ldr	r2, [pc, #64]	; (8004444 <HAL_TIM_Encoder_MspInit+0x88>)
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	6313      	str	r3, [r2, #48]	; 0x30
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <HAL_TIM_Encoder_MspInit+0x88>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Encoder_A_Pin|Motor_Encoder_B_Pin;
 8004416:	f44f 7340 	mov.w	r3, #768	; 0x300
 800441a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441c:	2302      	movs	r3, #2
 800441e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004420:	2300      	movs	r3, #0
 8004422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004424:	2300      	movs	r3, #0
 8004426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004428:	2301      	movs	r3, #1
 800442a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800442c:	f107 0314 	add.w	r3, r7, #20
 8004430:	4619      	mov	r1, r3
 8004432:	4805      	ldr	r0, [pc, #20]	; (8004448 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004434:	f000 ffba 	bl	80053ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004438:	bf00      	nop
 800443a:	3728      	adds	r7, #40	; 0x28
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40010000 	.word	0x40010000
 8004444:	40023800 	.word	0x40023800
 8004448:	40020000 	.word	0x40020000

0800444c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445c:	d116      	bne.n	800448c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800445e:	2300      	movs	r3, #0
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	4b16      	ldr	r3, [pc, #88]	; (80044bc <HAL_TIM_Base_MspInit+0x70>)
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	4a15      	ldr	r2, [pc, #84]	; (80044bc <HAL_TIM_Base_MspInit+0x70>)
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	6413      	str	r3, [r2, #64]	; 0x40
 800446e:	4b13      	ldr	r3, [pc, #76]	; (80044bc <HAL_TIM_Base_MspInit+0x70>)
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800447a:	2200      	movs	r2, #0
 800447c:	2100      	movs	r1, #0
 800447e:	201c      	movs	r0, #28
 8004480:	f000 fb4d 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004484:	201c      	movs	r0, #28
 8004486:	f000 fb66 	bl	8004b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800448a:	e012      	b.n	80044b2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0b      	ldr	r2, [pc, #44]	; (80044c0 <HAL_TIM_Base_MspInit+0x74>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d10d      	bne.n	80044b2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004496:	2300      	movs	r3, #0
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <HAL_TIM_Base_MspInit+0x70>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	4a07      	ldr	r2, [pc, #28]	; (80044bc <HAL_TIM_Base_MspInit+0x70>)
 80044a0:	f043 0302 	orr.w	r3, r3, #2
 80044a4:	6413      	str	r3, [r2, #64]	; 0x40
 80044a6:	4b05      	ldr	r3, [pc, #20]	; (80044bc <HAL_TIM_Base_MspInit+0x70>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	68bb      	ldr	r3, [r7, #8]
}
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40023800 	.word	0x40023800
 80044c0:	40000400 	.word	0x40000400

080044c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044cc:	f107 030c 	add.w	r3, r7, #12
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	605a      	str	r2, [r3, #4]
 80044d6:	609a      	str	r2, [r3, #8]
 80044d8:	60da      	str	r2, [r3, #12]
 80044da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a12      	ldr	r2, [pc, #72]	; (800452c <HAL_TIM_MspPostInit+0x68>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d11d      	bne.n	8004522 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044e6:	2300      	movs	r3, #0
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	4b11      	ldr	r3, [pc, #68]	; (8004530 <HAL_TIM_MspPostInit+0x6c>)
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	4a10      	ldr	r2, [pc, #64]	; (8004530 <HAL_TIM_MspPostInit+0x6c>)
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	6313      	str	r3, [r2, #48]	; 0x30
 80044f6:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <HAL_TIM_MspPostInit+0x6c>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	60bb      	str	r3, [r7, #8]
 8004500:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_Generation_Pin;
 8004502:	2340      	movs	r3, #64	; 0x40
 8004504:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004506:	2302      	movs	r3, #2
 8004508:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450e:	2300      	movs	r3, #0
 8004510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004512:	2302      	movs	r3, #2
 8004514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Generation_GPIO_Port, &GPIO_InitStruct);
 8004516:	f107 030c 	add.w	r3, r7, #12
 800451a:	4619      	mov	r1, r3
 800451c:	4805      	ldr	r0, [pc, #20]	; (8004534 <HAL_TIM_MspPostInit+0x70>)
 800451e:	f000 ff45 	bl	80053ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004522:	bf00      	nop
 8004524:	3720      	adds	r7, #32
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40000400 	.word	0x40000400
 8004530:	40023800 	.word	0x40023800
 8004534:	40020000 	.word	0x40020000

08004538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b08a      	sub	sp, #40	; 0x28
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004540:	f107 0314 	add.w	r3, r7, #20
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	60da      	str	r2, [r3, #12]
 800454e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a4c      	ldr	r2, [pc, #304]	; (8004688 <HAL_UART_MspInit+0x150>)
 8004556:	4293      	cmp	r3, r2
 8004558:	f040 8091 	bne.w	800467e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800455c:	2300      	movs	r3, #0
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	4b4a      	ldr	r3, [pc, #296]	; (800468c <HAL_UART_MspInit+0x154>)
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	4a49      	ldr	r2, [pc, #292]	; (800468c <HAL_UART_MspInit+0x154>)
 8004566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800456a:	6413      	str	r3, [r2, #64]	; 0x40
 800456c:	4b47      	ldr	r3, [pc, #284]	; (800468c <HAL_UART_MspInit+0x154>)
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	4b43      	ldr	r3, [pc, #268]	; (800468c <HAL_UART_MspInit+0x154>)
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	4a42      	ldr	r2, [pc, #264]	; (800468c <HAL_UART_MspInit+0x154>)
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	6313      	str	r3, [r2, #48]	; 0x30
 8004588:	4b40      	ldr	r3, [pc, #256]	; (800468c <HAL_UART_MspInit+0x154>)
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004594:	230c      	movs	r3, #12
 8004596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004598:	2302      	movs	r3, #2
 800459a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459c:	2300      	movs	r3, #0
 800459e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a0:	2303      	movs	r3, #3
 80045a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80045a4:	2307      	movs	r3, #7
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a8:	f107 0314 	add.w	r3, r7, #20
 80045ac:	4619      	mov	r1, r3
 80045ae:	4838      	ldr	r0, [pc, #224]	; (8004690 <HAL_UART_MspInit+0x158>)
 80045b0:	f000 fefc 	bl	80053ac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80045b4:	4b37      	ldr	r3, [pc, #220]	; (8004694 <HAL_UART_MspInit+0x15c>)
 80045b6:	4a38      	ldr	r2, [pc, #224]	; (8004698 <HAL_UART_MspInit+0x160>)
 80045b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80045ba:	4b36      	ldr	r3, [pc, #216]	; (8004694 <HAL_UART_MspInit+0x15c>)
 80045bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045c0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045c2:	4b34      	ldr	r3, [pc, #208]	; (8004694 <HAL_UART_MspInit+0x15c>)
 80045c4:	2240      	movs	r2, #64	; 0x40
 80045c6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045c8:	4b32      	ldr	r3, [pc, #200]	; (8004694 <HAL_UART_MspInit+0x15c>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80045ce:	4b31      	ldr	r3, [pc, #196]	; (8004694 <HAL_UART_MspInit+0x15c>)
 80045d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045d4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045d6:	4b2f      	ldr	r3, [pc, #188]	; (8004694 <HAL_UART_MspInit+0x15c>)
 80045d8:	2200      	movs	r2, #0
 80045da:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045dc:	4b2d      	ldr	r3, [pc, #180]	; (8004694 <HAL_UART_MspInit+0x15c>)
 80045de:	2200      	movs	r2, #0
 80045e0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80045e2:	4b2c      	ldr	r3, [pc, #176]	; (8004694 <HAL_UART_MspInit+0x15c>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80045e8:	4b2a      	ldr	r3, [pc, #168]	; (8004694 <HAL_UART_MspInit+0x15c>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045ee:	4b29      	ldr	r3, [pc, #164]	; (8004694 <HAL_UART_MspInit+0x15c>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80045f4:	4827      	ldr	r0, [pc, #156]	; (8004694 <HAL_UART_MspInit+0x15c>)
 80045f6:	f000 fac9 	bl	8004b8c <HAL_DMA_Init>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004600:	f7ff fe56 	bl	80042b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a23      	ldr	r2, [pc, #140]	; (8004694 <HAL_UART_MspInit+0x15c>)
 8004608:	635a      	str	r2, [r3, #52]	; 0x34
 800460a:	4a22      	ldr	r2, [pc, #136]	; (8004694 <HAL_UART_MspInit+0x15c>)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004610:	4b22      	ldr	r3, [pc, #136]	; (800469c <HAL_UART_MspInit+0x164>)
 8004612:	4a23      	ldr	r2, [pc, #140]	; (80046a0 <HAL_UART_MspInit+0x168>)
 8004614:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004616:	4b21      	ldr	r3, [pc, #132]	; (800469c <HAL_UART_MspInit+0x164>)
 8004618:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800461c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800461e:	4b1f      	ldr	r3, [pc, #124]	; (800469c <HAL_UART_MspInit+0x164>)
 8004620:	2200      	movs	r2, #0
 8004622:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004624:	4b1d      	ldr	r3, [pc, #116]	; (800469c <HAL_UART_MspInit+0x164>)
 8004626:	2200      	movs	r2, #0
 8004628:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800462a:	4b1c      	ldr	r3, [pc, #112]	; (800469c <HAL_UART_MspInit+0x164>)
 800462c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004630:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004632:	4b1a      	ldr	r3, [pc, #104]	; (800469c <HAL_UART_MspInit+0x164>)
 8004634:	2200      	movs	r2, #0
 8004636:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004638:	4b18      	ldr	r3, [pc, #96]	; (800469c <HAL_UART_MspInit+0x164>)
 800463a:	2200      	movs	r2, #0
 800463c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800463e:	4b17      	ldr	r3, [pc, #92]	; (800469c <HAL_UART_MspInit+0x164>)
 8004640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004644:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004646:	4b15      	ldr	r3, [pc, #84]	; (800469c <HAL_UART_MspInit+0x164>)
 8004648:	2200      	movs	r2, #0
 800464a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800464c:	4b13      	ldr	r3, [pc, #76]	; (800469c <HAL_UART_MspInit+0x164>)
 800464e:	2200      	movs	r2, #0
 8004650:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004652:	4812      	ldr	r0, [pc, #72]	; (800469c <HAL_UART_MspInit+0x164>)
 8004654:	f000 fa9a 	bl	8004b8c <HAL_DMA_Init>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800465e:	f7ff fe27 	bl	80042b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a0d      	ldr	r2, [pc, #52]	; (800469c <HAL_UART_MspInit+0x164>)
 8004666:	639a      	str	r2, [r3, #56]	; 0x38
 8004668:	4a0c      	ldr	r2, [pc, #48]	; (800469c <HAL_UART_MspInit+0x164>)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800466e:	2200      	movs	r2, #0
 8004670:	2100      	movs	r1, #0
 8004672:	2026      	movs	r0, #38	; 0x26
 8004674:	f000 fa53 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004678:	2026      	movs	r0, #38	; 0x26
 800467a:	f000 fa6c 	bl	8004b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800467e:	bf00      	nop
 8004680:	3728      	adds	r7, #40	; 0x28
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40004400 	.word	0x40004400
 800468c:	40023800 	.word	0x40023800
 8004690:	40020000 	.word	0x40020000
 8004694:	20000594 	.word	0x20000594
 8004698:	400260a0 	.word	0x400260a0
 800469c:	20000498 	.word	0x20000498
 80046a0:	40026088 	.word	0x40026088

080046a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80046a8:	e7fe      	b.n	80046a8 <NMI_Handler+0x4>

080046aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046aa:	b480      	push	{r7}
 80046ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046ae:	e7fe      	b.n	80046ae <HardFault_Handler+0x4>

080046b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046b4:	e7fe      	b.n	80046b4 <MemManage_Handler+0x4>

080046b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046b6:	b480      	push	{r7}
 80046b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046ba:	e7fe      	b.n	80046ba <BusFault_Handler+0x4>

080046bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046c0:	e7fe      	b.n	80046c0 <UsageFault_Handler+0x4>

080046c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046c2:	b480      	push	{r7}
 80046c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046c6:	bf00      	nop
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046d4:	bf00      	nop
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046de:	b480      	push	{r7}
 80046e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046e2:	bf00      	nop
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046f0:	f000 f91a 	bl	8004928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046f4:	bf00      	nop
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80046fc:	4802      	ldr	r0, [pc, #8]	; (8004708 <DMA1_Stream5_IRQHandler+0x10>)
 80046fe:	f000 fbdd 	bl	8004ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004702:	bf00      	nop
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000498 	.word	0x20000498

0800470c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004710:	4802      	ldr	r0, [pc, #8]	; (800471c <DMA1_Stream6_IRQHandler+0x10>)
 8004712:	f000 fbd3 	bl	8004ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004716:	bf00      	nop
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000594 	.word	0x20000594

08004720 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004724:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004728:	f000 fff6 	bl	8005718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800472c:	bf00      	nop
 800472e:	bd80      	pop	{r7, pc}

08004730 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004734:	4802      	ldr	r0, [pc, #8]	; (8004740 <TIM2_IRQHandler+0x10>)
 8004736:	f003 ff13 	bl	8008560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800473a:	bf00      	nop
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	2000063c 	.word	0x2000063c

08004744 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004748:	4802      	ldr	r0, [pc, #8]	; (8004754 <I2C1_EV_IRQHandler+0x10>)
 800474a:	f001 fa95 	bl	8005c78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800474e:	bf00      	nop
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	200004f8 	.word	0x200004f8

08004758 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800475c:	4802      	ldr	r0, [pc, #8]	; (8004768 <I2C1_ER_IRQHandler+0x10>)
 800475e:	f001 fbf8 	bl	8005f52 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004762:	bf00      	nop
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	200004f8 	.word	0x200004f8

0800476c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004770:	4802      	ldr	r0, [pc, #8]	; (800477c <USART2_IRQHandler+0x10>)
 8004772:	f004 fddf 	bl	8009334 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004776:	bf00      	nop
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000684 	.word	0x20000684

08004780 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004784:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004788:	f000 ffc6 	bl	8005718 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800478c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004790:	f000 ffc2 	bl	8005718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004794:	bf00      	nop
 8004796:	bd80      	pop	{r7, pc}

08004798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047a0:	4a14      	ldr	r2, [pc, #80]	; (80047f4 <_sbrk+0x5c>)
 80047a2:	4b15      	ldr	r3, [pc, #84]	; (80047f8 <_sbrk+0x60>)
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047ac:	4b13      	ldr	r3, [pc, #76]	; (80047fc <_sbrk+0x64>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d102      	bne.n	80047ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047b4:	4b11      	ldr	r3, [pc, #68]	; (80047fc <_sbrk+0x64>)
 80047b6:	4a12      	ldr	r2, [pc, #72]	; (8004800 <_sbrk+0x68>)
 80047b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047ba:	4b10      	ldr	r3, [pc, #64]	; (80047fc <_sbrk+0x64>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4413      	add	r3, r2
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d207      	bcs.n	80047d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047c8:	f005 fc10 	bl	8009fec <__errno>
 80047cc:	4603      	mov	r3, r0
 80047ce:	220c      	movs	r2, #12
 80047d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047d2:	f04f 33ff 	mov.w	r3, #4294967295
 80047d6:	e009      	b.n	80047ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047d8:	4b08      	ldr	r3, [pc, #32]	; (80047fc <_sbrk+0x64>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047de:	4b07      	ldr	r3, [pc, #28]	; (80047fc <_sbrk+0x64>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4413      	add	r3, r2
 80047e6:	4a05      	ldr	r2, [pc, #20]	; (80047fc <_sbrk+0x64>)
 80047e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047ea:	68fb      	ldr	r3, [r7, #12]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20020000 	.word	0x20020000
 80047f8:	00000400 	.word	0x00000400
 80047fc:	2000048c 	.word	0x2000048c
 8004800:	200006e0 	.word	0x200006e0

08004804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004808:	4b08      	ldr	r3, [pc, #32]	; (800482c <SystemInit+0x28>)
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480e:	4a07      	ldr	r2, [pc, #28]	; (800482c <SystemInit+0x28>)
 8004810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004818:	4b04      	ldr	r3, [pc, #16]	; (800482c <SystemInit+0x28>)
 800481a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800481e:	609a      	str	r2, [r3, #8]
#endif
}
 8004820:	bf00      	nop
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	e000ed00 	.word	0xe000ed00

08004830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004868 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004834:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004836:	e003      	b.n	8004840 <LoopCopyDataInit>

08004838 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004838:	4b0c      	ldr	r3, [pc, #48]	; (800486c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800483a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800483c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800483e:	3104      	adds	r1, #4

08004840 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004840:	480b      	ldr	r0, [pc, #44]	; (8004870 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004842:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004844:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004846:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004848:	d3f6      	bcc.n	8004838 <CopyDataInit>
  ldr  r2, =_sbss
 800484a:	4a0b      	ldr	r2, [pc, #44]	; (8004878 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800484c:	e002      	b.n	8004854 <LoopFillZerobss>

0800484e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800484e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004850:	f842 3b04 	str.w	r3, [r2], #4

08004854 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004854:	4b09      	ldr	r3, [pc, #36]	; (800487c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004856:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004858:	d3f9      	bcc.n	800484e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800485a:	f7ff ffd3 	bl	8004804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800485e:	f005 fbcb 	bl	8009ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004862:	f7fc fc1f 	bl	80010a4 <main>
  bx  lr    
 8004866:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004868:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800486c:	0800a3ac 	.word	0x0800a3ac
  ldr  r0, =_sdata
 8004870:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004874:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8004878:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800487c:	200006dc 	.word	0x200006dc

08004880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004880:	e7fe      	b.n	8004880 <ADC_IRQHandler>
	...

08004884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004888:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <HAL_Init+0x40>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a0d      	ldr	r2, [pc, #52]	; (80048c4 <HAL_Init+0x40>)
 800488e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004892:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004894:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <HAL_Init+0x40>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a0a      	ldr	r2, [pc, #40]	; (80048c4 <HAL_Init+0x40>)
 800489a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800489e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048a0:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <HAL_Init+0x40>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a07      	ldr	r2, [pc, #28]	; (80048c4 <HAL_Init+0x40>)
 80048a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048ac:	2003      	movs	r0, #3
 80048ae:	f000 f92b 	bl	8004b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048b2:	2000      	movs	r0, #0
 80048b4:	f000 f808 	bl	80048c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048b8:	f7ff fd00 	bl	80042bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40023c00 	.word	0x40023c00

080048c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048d0:	4b12      	ldr	r3, [pc, #72]	; (800491c <HAL_InitTick+0x54>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	4b12      	ldr	r3, [pc, #72]	; (8004920 <HAL_InitTick+0x58>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	4619      	mov	r1, r3
 80048da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048de:	fbb3 f3f1 	udiv	r3, r3, r1
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 f943 	bl	8004b72 <HAL_SYSTICK_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e00e      	b.n	8004914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b0f      	cmp	r3, #15
 80048fa:	d80a      	bhi.n	8004912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048fc:	2200      	movs	r2, #0
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	f04f 30ff 	mov.w	r0, #4294967295
 8004904:	f000 f90b 	bl	8004b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004908:	4a06      	ldr	r2, [pc, #24]	; (8004924 <HAL_InitTick+0x5c>)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	e000      	b.n	8004914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
}
 8004914:	4618      	mov	r0, r3
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	20000018 	.word	0x20000018
 8004920:	20000020 	.word	0x20000020
 8004924:	2000001c 	.word	0x2000001c

08004928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_IncTick+0x20>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <HAL_IncTick+0x24>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4413      	add	r3, r2
 8004938:	4a04      	ldr	r2, [pc, #16]	; (800494c <HAL_IncTick+0x24>)
 800493a:	6013      	str	r3, [r2, #0]
}
 800493c:	bf00      	nop
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	20000020 	.word	0x20000020
 800494c:	200006c8 	.word	0x200006c8

08004950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  return uwTick;
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <HAL_GetTick+0x14>)
 8004956:	681b      	ldr	r3, [r3, #0]
}
 8004958:	4618      	mov	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	200006c8 	.word	0x200006c8

08004968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004978:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <__NVIC_SetPriorityGrouping+0x44>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004984:	4013      	ands	r3, r2
 8004986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800499a:	4a04      	ldr	r2, [pc, #16]	; (80049ac <__NVIC_SetPriorityGrouping+0x44>)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	60d3      	str	r3, [r2, #12]
}
 80049a0:	bf00      	nop
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	e000ed00 	.word	0xe000ed00

080049b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049b4:	4b04      	ldr	r3, [pc, #16]	; (80049c8 <__NVIC_GetPriorityGrouping+0x18>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	0a1b      	lsrs	r3, r3, #8
 80049ba:	f003 0307 	and.w	r3, r3, #7
}
 80049be:	4618      	mov	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	e000ed00 	.word	0xe000ed00

080049cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	db0b      	blt.n	80049f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049de:	79fb      	ldrb	r3, [r7, #7]
 80049e0:	f003 021f 	and.w	r2, r3, #31
 80049e4:	4907      	ldr	r1, [pc, #28]	; (8004a04 <__NVIC_EnableIRQ+0x38>)
 80049e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	2001      	movs	r0, #1
 80049ee:	fa00 f202 	lsl.w	r2, r0, r2
 80049f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	e000e100 	.word	0xe000e100

08004a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	6039      	str	r1, [r7, #0]
 8004a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	db0a      	blt.n	8004a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	490c      	ldr	r1, [pc, #48]	; (8004a54 <__NVIC_SetPriority+0x4c>)
 8004a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a26:	0112      	lsls	r2, r2, #4
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a30:	e00a      	b.n	8004a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	4908      	ldr	r1, [pc, #32]	; (8004a58 <__NVIC_SetPriority+0x50>)
 8004a38:	79fb      	ldrb	r3, [r7, #7]
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	3b04      	subs	r3, #4
 8004a40:	0112      	lsls	r2, r2, #4
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	440b      	add	r3, r1
 8004a46:	761a      	strb	r2, [r3, #24]
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	e000e100 	.word	0xe000e100
 8004a58:	e000ed00 	.word	0xe000ed00

08004a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b089      	sub	sp, #36	; 0x24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f1c3 0307 	rsb	r3, r3, #7
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	bf28      	it	cs
 8004a7a:	2304      	movcs	r3, #4
 8004a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	3304      	adds	r3, #4
 8004a82:	2b06      	cmp	r3, #6
 8004a84:	d902      	bls.n	8004a8c <NVIC_EncodePriority+0x30>
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	3b03      	subs	r3, #3
 8004a8a:	e000      	b.n	8004a8e <NVIC_EncodePriority+0x32>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a90:	f04f 32ff 	mov.w	r2, #4294967295
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43da      	mvns	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004aae:	43d9      	mvns	r1, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab4:	4313      	orrs	r3, r2
         );
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3724      	adds	r7, #36	; 0x24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ad4:	d301      	bcc.n	8004ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e00f      	b.n	8004afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ada:	4a0a      	ldr	r2, [pc, #40]	; (8004b04 <SysTick_Config+0x40>)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ae2:	210f      	movs	r1, #15
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae8:	f7ff ff8e 	bl	8004a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004aec:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <SysTick_Config+0x40>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004af2:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <SysTick_Config+0x40>)
 8004af4:	2207      	movs	r2, #7
 8004af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	e000e010 	.word	0xe000e010

08004b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff ff29 	bl	8004968 <__NVIC_SetPriorityGrouping>
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b086      	sub	sp, #24
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	4603      	mov	r3, r0
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	607a      	str	r2, [r7, #4]
 8004b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b30:	f7ff ff3e 	bl	80049b0 <__NVIC_GetPriorityGrouping>
 8004b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	6978      	ldr	r0, [r7, #20]
 8004b3c:	f7ff ff8e 	bl	8004a5c <NVIC_EncodePriority>
 8004b40:	4602      	mov	r2, r0
 8004b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b46:	4611      	mov	r1, r2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff ff5d 	bl	8004a08 <__NVIC_SetPriority>
}
 8004b4e:	bf00      	nop
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b082      	sub	sp, #8
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff ff31 	bl	80049cc <__NVIC_EnableIRQ>
}
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b082      	sub	sp, #8
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7ff ffa2 	bl	8004ac4 <SysTick_Config>
 8004b80:	4603      	mov	r3, r0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b98:	f7ff feda 	bl	8004950 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e099      	b.n	8004cdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0201 	bic.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bc8:	e00f      	b.n	8004bea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bca:	f7ff fec1 	bl	8004950 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b05      	cmp	r3, #5
 8004bd6:	d908      	bls.n	8004bea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2203      	movs	r2, #3
 8004be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e078      	b.n	8004cdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e8      	bne.n	8004bca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	4b38      	ldr	r3, [pc, #224]	; (8004ce4 <HAL_DMA_Init+0x158>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d107      	bne.n	8004c54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f023 0307 	bic.w	r3, r3, #7
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d117      	bne.n	8004cae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00e      	beq.n	8004cae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fb0f 	bl	80052b4 <DMA_CheckFifoParam>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d008      	beq.n	8004cae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2240      	movs	r2, #64	; 0x40
 8004ca0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004caa:	2301      	movs	r3, #1
 8004cac:	e016      	b.n	8004cdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fac6 	bl	8005248 <DMA_CalcBaseAndBitshift>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc4:	223f      	movs	r2, #63	; 0x3f
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	f010803f 	.word	0xf010803f

08004ce8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_DMA_Start_IT+0x26>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e040      	b.n	8004d90 <HAL_DMA_Start_IT+0xa8>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d12f      	bne.n	8004d82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2202      	movs	r2, #2
 8004d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fa58 	bl	80051ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d40:	223f      	movs	r2, #63	; 0x3f
 8004d42:	409a      	lsls	r2, r3
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0216 	orr.w	r2, r2, #22
 8004d56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d007      	beq.n	8004d70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0208 	orr.w	r2, r2, #8
 8004d6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0201 	orr.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	e005      	b.n	8004d8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004da6:	f7ff fdd3 	bl	8004950 <HAL_GetTick>
 8004daa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d008      	beq.n	8004dca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2280      	movs	r2, #128	; 0x80
 8004dbc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e052      	b.n	8004e70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0216 	bic.w	r2, r2, #22
 8004dd8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695a      	ldr	r2, [r3, #20]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004de8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d103      	bne.n	8004dfa <HAL_DMA_Abort+0x62>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d007      	beq.n	8004e0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0208 	bic.w	r2, r2, #8
 8004e08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0201 	bic.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e1a:	e013      	b.n	8004e44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e1c:	f7ff fd98 	bl	8004950 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b05      	cmp	r3, #5
 8004e28:	d90c      	bls.n	8004e44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e015      	b.n	8004e70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e4      	bne.n	8004e1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e56:	223f      	movs	r2, #63	; 0x3f
 8004e58:	409a      	lsls	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d004      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2280      	movs	r2, #128	; 0x80
 8004e90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e00c      	b.n	8004eb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2205      	movs	r2, #5
 8004e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0201 	bic.w	r2, r2, #1
 8004eac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ec8:	4b92      	ldr	r3, [pc, #584]	; (8005114 <HAL_DMA_IRQHandler+0x258>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a92      	ldr	r2, [pc, #584]	; (8005118 <HAL_DMA_IRQHandler+0x25c>)
 8004ece:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed2:	0a9b      	lsrs	r3, r3, #10
 8004ed4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee6:	2208      	movs	r2, #8
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d01a      	beq.n	8004f28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d013      	beq.n	8004f28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0204 	bic.w	r2, r2, #4
 8004f0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f14:	2208      	movs	r2, #8
 8004f16:	409a      	lsls	r2, r3
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f20:	f043 0201 	orr.w	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d012      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	409a      	lsls	r2, r3
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f56:	f043 0202 	orr.w	r2, r3, #2
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f62:	2204      	movs	r2, #4
 8004f64:	409a      	lsls	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d012      	beq.n	8004f94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00b      	beq.n	8004f94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f80:	2204      	movs	r2, #4
 8004f82:	409a      	lsls	r2, r3
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8c:	f043 0204 	orr.w	r2, r3, #4
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f98:	2210      	movs	r2, #16
 8004f9a:	409a      	lsls	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d043      	beq.n	800502c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d03c      	beq.n	800502c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb6:	2210      	movs	r2, #16
 8004fb8:	409a      	lsls	r2, r3
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d018      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d108      	bne.n	8004fec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d024      	beq.n	800502c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	4798      	blx	r3
 8004fea:	e01f      	b.n	800502c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d01b      	beq.n	800502c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	4798      	blx	r3
 8004ffc:	e016      	b.n	800502c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005008:	2b00      	cmp	r3, #0
 800500a:	d107      	bne.n	800501c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0208 	bic.w	r2, r2, #8
 800501a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005030:	2220      	movs	r2, #32
 8005032:	409a      	lsls	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4013      	ands	r3, r2
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 808e 	beq.w	800515a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8086 	beq.w	800515a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005052:	2220      	movs	r2, #32
 8005054:	409a      	lsls	r2, r3
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b05      	cmp	r3, #5
 8005064:	d136      	bne.n	80050d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0216 	bic.w	r2, r2, #22
 8005074:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695a      	ldr	r2, [r3, #20]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005084:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	2b00      	cmp	r3, #0
 800508c:	d103      	bne.n	8005096 <HAL_DMA_IRQHandler+0x1da>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005092:	2b00      	cmp	r3, #0
 8005094:	d007      	beq.n	80050a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0208 	bic.w	r2, r2, #8
 80050a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050aa:	223f      	movs	r2, #63	; 0x3f
 80050ac:	409a      	lsls	r2, r3
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d07d      	beq.n	80051c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	4798      	blx	r3
        }
        return;
 80050d2:	e078      	b.n	80051c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d01c      	beq.n	800511c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d108      	bne.n	8005102 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d030      	beq.n	800515a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	4798      	blx	r3
 8005100:	e02b      	b.n	800515a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005106:	2b00      	cmp	r3, #0
 8005108:	d027      	beq.n	800515a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	4798      	blx	r3
 8005112:	e022      	b.n	800515a <HAL_DMA_IRQHandler+0x29e>
 8005114:	20000018 	.word	0x20000018
 8005118:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10f      	bne.n	800514a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0210 	bic.w	r2, r2, #16
 8005138:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515e:	2b00      	cmp	r3, #0
 8005160:	d032      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d022      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2205      	movs	r2, #5
 8005172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0201 	bic.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	3301      	adds	r3, #1
 800518a:	60bb      	str	r3, [r7, #8]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	429a      	cmp	r2, r3
 8005190:	d307      	bcc.n	80051a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1f2      	bne.n	8005186 <HAL_DMA_IRQHandler+0x2ca>
 80051a0:	e000      	b.n	80051a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80051a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	4798      	blx	r3
 80051c4:	e000      	b.n	80051c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80051c6:	bf00      	nop
    }
  }
}
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop

080051d0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051de:	b2db      	uxtb	r3, r3
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005208:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b40      	cmp	r3, #64	; 0x40
 8005218:	d108      	bne.n	800522c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800522a:	e007      	b.n	800523c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	60da      	str	r2, [r3, #12]
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	3b10      	subs	r3, #16
 8005258:	4a14      	ldr	r2, [pc, #80]	; (80052ac <DMA_CalcBaseAndBitshift+0x64>)
 800525a:	fba2 2303 	umull	r2, r3, r2, r3
 800525e:	091b      	lsrs	r3, r3, #4
 8005260:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005262:	4a13      	ldr	r2, [pc, #76]	; (80052b0 <DMA_CalcBaseAndBitshift+0x68>)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4413      	add	r3, r2
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	461a      	mov	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b03      	cmp	r3, #3
 8005274:	d909      	bls.n	800528a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800527e:	f023 0303 	bic.w	r3, r3, #3
 8005282:	1d1a      	adds	r2, r3, #4
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	659a      	str	r2, [r3, #88]	; 0x58
 8005288:	e007      	b.n	800529a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005292:	f023 0303 	bic.w	r3, r3, #3
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	aaaaaaab 	.word	0xaaaaaaab
 80052b0:	0800a394 	.word	0x0800a394

080052b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d11f      	bne.n	800530e <DMA_CheckFifoParam+0x5a>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d856      	bhi.n	8005382 <DMA_CheckFifoParam+0xce>
 80052d4:	a201      	add	r2, pc, #4	; (adr r2, 80052dc <DMA_CheckFifoParam+0x28>)
 80052d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052da:	bf00      	nop
 80052dc:	080052ed 	.word	0x080052ed
 80052e0:	080052ff 	.word	0x080052ff
 80052e4:	080052ed 	.word	0x080052ed
 80052e8:	08005383 	.word	0x08005383
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d046      	beq.n	8005386 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052fc:	e043      	b.n	8005386 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005302:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005306:	d140      	bne.n	800538a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800530c:	e03d      	b.n	800538a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005316:	d121      	bne.n	800535c <DMA_CheckFifoParam+0xa8>
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b03      	cmp	r3, #3
 800531c:	d837      	bhi.n	800538e <DMA_CheckFifoParam+0xda>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <DMA_CheckFifoParam+0x70>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	08005335 	.word	0x08005335
 8005328:	0800533b 	.word	0x0800533b
 800532c:	08005335 	.word	0x08005335
 8005330:	0800534d 	.word	0x0800534d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
      break;
 8005338:	e030      	b.n	800539c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d025      	beq.n	8005392 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800534a:	e022      	b.n	8005392 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005354:	d11f      	bne.n	8005396 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800535a:	e01c      	b.n	8005396 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b02      	cmp	r3, #2
 8005360:	d903      	bls.n	800536a <DMA_CheckFifoParam+0xb6>
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b03      	cmp	r3, #3
 8005366:	d003      	beq.n	8005370 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005368:	e018      	b.n	800539c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	73fb      	strb	r3, [r7, #15]
      break;
 800536e:	e015      	b.n	800539c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00e      	beq.n	800539a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
      break;
 8005380:	e00b      	b.n	800539a <DMA_CheckFifoParam+0xe6>
      break;
 8005382:	bf00      	nop
 8005384:	e00a      	b.n	800539c <DMA_CheckFifoParam+0xe8>
      break;
 8005386:	bf00      	nop
 8005388:	e008      	b.n	800539c <DMA_CheckFifoParam+0xe8>
      break;
 800538a:	bf00      	nop
 800538c:	e006      	b.n	800539c <DMA_CheckFifoParam+0xe8>
      break;
 800538e:	bf00      	nop
 8005390:	e004      	b.n	800539c <DMA_CheckFifoParam+0xe8>
      break;
 8005392:	bf00      	nop
 8005394:	e002      	b.n	800539c <DMA_CheckFifoParam+0xe8>
      break;   
 8005396:	bf00      	nop
 8005398:	e000      	b.n	800539c <DMA_CheckFifoParam+0xe8>
      break;
 800539a:	bf00      	nop
    }
  } 
  
  return status; 
 800539c:	7bfb      	ldrb	r3, [r7, #15]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop

080053ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b089      	sub	sp, #36	; 0x24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053be:	2300      	movs	r3, #0
 80053c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053c2:	2300      	movs	r3, #0
 80053c4:	61fb      	str	r3, [r7, #28]
 80053c6:	e159      	b.n	800567c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053c8:	2201      	movs	r2, #1
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4013      	ands	r3, r2
 80053da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	f040 8148 	bne.w	8005676 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d005      	beq.n	80053fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d130      	bne.n	8005460 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	2203      	movs	r2, #3
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	43db      	mvns	r3, r3
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	4013      	ands	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	fa02 f303 	lsl.w	r3, r2, r3
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	4313      	orrs	r3, r2
 8005426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005434:	2201      	movs	r2, #1
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	43db      	mvns	r3, r3
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	4013      	ands	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	f003 0201 	and.w	r2, r3, #1
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	4313      	orrs	r3, r2
 8005458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	2b03      	cmp	r3, #3
 800546a:	d017      	beq.n	800549c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	2203      	movs	r2, #3
 8005478:	fa02 f303 	lsl.w	r3, r2, r3
 800547c:	43db      	mvns	r3, r3
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	4013      	ands	r3, r2
 8005482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	fa02 f303 	lsl.w	r3, r2, r3
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	4313      	orrs	r3, r2
 8005494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f003 0303 	and.w	r3, r3, #3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d123      	bne.n	80054f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	08da      	lsrs	r2, r3, #3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3208      	adds	r2, #8
 80054b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	220f      	movs	r2, #15
 80054c0:	fa02 f303 	lsl.w	r3, r2, r3
 80054c4:	43db      	mvns	r3, r3
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	4013      	ands	r3, r2
 80054ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	691a      	ldr	r2, [r3, #16]
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	4313      	orrs	r3, r2
 80054e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	08da      	lsrs	r2, r3, #3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3208      	adds	r2, #8
 80054ea:	69b9      	ldr	r1, [r7, #24]
 80054ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	2203      	movs	r2, #3
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	43db      	mvns	r3, r3
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	4013      	ands	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f003 0203 	and.w	r2, r3, #3
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4313      	orrs	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 80a2 	beq.w	8005676 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	4b57      	ldr	r3, [pc, #348]	; (8005694 <HAL_GPIO_Init+0x2e8>)
 8005538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553a:	4a56      	ldr	r2, [pc, #344]	; (8005694 <HAL_GPIO_Init+0x2e8>)
 800553c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005540:	6453      	str	r3, [r2, #68]	; 0x44
 8005542:	4b54      	ldr	r3, [pc, #336]	; (8005694 <HAL_GPIO_Init+0x2e8>)
 8005544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800554e:	4a52      	ldr	r2, [pc, #328]	; (8005698 <HAL_GPIO_Init+0x2ec>)
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	089b      	lsrs	r3, r3, #2
 8005554:	3302      	adds	r3, #2
 8005556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800555a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	220f      	movs	r2, #15
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	43db      	mvns	r3, r3
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	4013      	ands	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a49      	ldr	r2, [pc, #292]	; (800569c <HAL_GPIO_Init+0x2f0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d019      	beq.n	80055ae <HAL_GPIO_Init+0x202>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a48      	ldr	r2, [pc, #288]	; (80056a0 <HAL_GPIO_Init+0x2f4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <HAL_GPIO_Init+0x1fe>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a47      	ldr	r2, [pc, #284]	; (80056a4 <HAL_GPIO_Init+0x2f8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00d      	beq.n	80055a6 <HAL_GPIO_Init+0x1fa>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a46      	ldr	r2, [pc, #280]	; (80056a8 <HAL_GPIO_Init+0x2fc>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d007      	beq.n	80055a2 <HAL_GPIO_Init+0x1f6>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a45      	ldr	r2, [pc, #276]	; (80056ac <HAL_GPIO_Init+0x300>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d101      	bne.n	800559e <HAL_GPIO_Init+0x1f2>
 800559a:	2304      	movs	r3, #4
 800559c:	e008      	b.n	80055b0 <HAL_GPIO_Init+0x204>
 800559e:	2307      	movs	r3, #7
 80055a0:	e006      	b.n	80055b0 <HAL_GPIO_Init+0x204>
 80055a2:	2303      	movs	r3, #3
 80055a4:	e004      	b.n	80055b0 <HAL_GPIO_Init+0x204>
 80055a6:	2302      	movs	r3, #2
 80055a8:	e002      	b.n	80055b0 <HAL_GPIO_Init+0x204>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <HAL_GPIO_Init+0x204>
 80055ae:	2300      	movs	r3, #0
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	f002 0203 	and.w	r2, r2, #3
 80055b6:	0092      	lsls	r2, r2, #2
 80055b8:	4093      	lsls	r3, r2
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	4313      	orrs	r3, r2
 80055be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055c0:	4935      	ldr	r1, [pc, #212]	; (8005698 <HAL_GPIO_Init+0x2ec>)
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	089b      	lsrs	r3, r3, #2
 80055c6:	3302      	adds	r3, #2
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055ce:	4b38      	ldr	r3, [pc, #224]	; (80056b0 <HAL_GPIO_Init+0x304>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	43db      	mvns	r3, r3
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	4013      	ands	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055f2:	4a2f      	ldr	r2, [pc, #188]	; (80056b0 <HAL_GPIO_Init+0x304>)
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80055f8:	4b2d      	ldr	r3, [pc, #180]	; (80056b0 <HAL_GPIO_Init+0x304>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	43db      	mvns	r3, r3
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	4013      	ands	r3, r2
 8005606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800561c:	4a24      	ldr	r2, [pc, #144]	; (80056b0 <HAL_GPIO_Init+0x304>)
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005622:	4b23      	ldr	r3, [pc, #140]	; (80056b0 <HAL_GPIO_Init+0x304>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	43db      	mvns	r3, r3
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	4013      	ands	r3, r2
 8005630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	4313      	orrs	r3, r2
 8005644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005646:	4a1a      	ldr	r2, [pc, #104]	; (80056b0 <HAL_GPIO_Init+0x304>)
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800564c:	4b18      	ldr	r3, [pc, #96]	; (80056b0 <HAL_GPIO_Init+0x304>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	43db      	mvns	r3, r3
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	4013      	ands	r3, r2
 800565a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005670:	4a0f      	ldr	r2, [pc, #60]	; (80056b0 <HAL_GPIO_Init+0x304>)
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	3301      	adds	r3, #1
 800567a:	61fb      	str	r3, [r7, #28]
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	2b0f      	cmp	r3, #15
 8005680:	f67f aea2 	bls.w	80053c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop
 8005688:	3724      	adds	r7, #36	; 0x24
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40023800 	.word	0x40023800
 8005698:	40013800 	.word	0x40013800
 800569c:	40020000 	.word	0x40020000
 80056a0:	40020400 	.word	0x40020400
 80056a4:	40020800 	.word	0x40020800
 80056a8:	40020c00 	.word	0x40020c00
 80056ac:	40021000 	.word	0x40021000
 80056b0:	40013c00 	.word	0x40013c00

080056b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	887b      	ldrh	r3, [r7, #2]
 80056c6:	4013      	ands	r3, r2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80056cc:	2301      	movs	r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
 80056d0:	e001      	b.n	80056d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	460b      	mov	r3, r1
 80056ee:	807b      	strh	r3, [r7, #2]
 80056f0:	4613      	mov	r3, r2
 80056f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056f4:	787b      	ldrb	r3, [r7, #1]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056fa:	887a      	ldrh	r2, [r7, #2]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005700:	e003      	b.n	800570a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005702:	887b      	ldrh	r3, [r7, #2]
 8005704:	041a      	lsls	r2, r3, #16
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	619a      	str	r2, [r3, #24]
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
	...

08005718 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	4603      	mov	r3, r0
 8005720:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005722:	4b08      	ldr	r3, [pc, #32]	; (8005744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005724:	695a      	ldr	r2, [r3, #20]
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	4013      	ands	r3, r2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d006      	beq.n	800573c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800572e:	4a05      	ldr	r2, [pc, #20]	; (8005744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005730:	88fb      	ldrh	r3, [r7, #6]
 8005732:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005734:	88fb      	ldrh	r3, [r7, #6]
 8005736:	4618      	mov	r0, r3
 8005738:	f7fc fa00 	bl	8001b3c <HAL_GPIO_EXTI_Callback>
  }
}
 800573c:	bf00      	nop
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40013c00 	.word	0x40013c00

08005748 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e12b      	b.n	80059b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7fe fdcc 	bl	800430c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2224      	movs	r2, #36	; 0x24
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0201 	bic.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800579a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80057ac:	f002 fb66 	bl	8007e7c <HAL_RCC_GetPCLK1Freq>
 80057b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	4a81      	ldr	r2, [pc, #516]	; (80059bc <HAL_I2C_Init+0x274>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d807      	bhi.n	80057cc <HAL_I2C_Init+0x84>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4a80      	ldr	r2, [pc, #512]	; (80059c0 <HAL_I2C_Init+0x278>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	bf94      	ite	ls
 80057c4:	2301      	movls	r3, #1
 80057c6:	2300      	movhi	r3, #0
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	e006      	b.n	80057da <HAL_I2C_Init+0x92>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4a7d      	ldr	r2, [pc, #500]	; (80059c4 <HAL_I2C_Init+0x27c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	bf94      	ite	ls
 80057d4:	2301      	movls	r3, #1
 80057d6:	2300      	movhi	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e0e7      	b.n	80059b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4a78      	ldr	r2, [pc, #480]	; (80059c8 <HAL_I2C_Init+0x280>)
 80057e6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ea:	0c9b      	lsrs	r3, r3, #18
 80057ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	430a      	orrs	r2, r1
 8005800:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	4a6a      	ldr	r2, [pc, #424]	; (80059bc <HAL_I2C_Init+0x274>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d802      	bhi.n	800581c <HAL_I2C_Init+0xd4>
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	3301      	adds	r3, #1
 800581a:	e009      	b.n	8005830 <HAL_I2C_Init+0xe8>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005822:	fb02 f303 	mul.w	r3, r2, r3
 8005826:	4a69      	ldr	r2, [pc, #420]	; (80059cc <HAL_I2C_Init+0x284>)
 8005828:	fba2 2303 	umull	r2, r3, r2, r3
 800582c:	099b      	lsrs	r3, r3, #6
 800582e:	3301      	adds	r3, #1
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6812      	ldr	r2, [r2, #0]
 8005834:	430b      	orrs	r3, r1
 8005836:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005842:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	495c      	ldr	r1, [pc, #368]	; (80059bc <HAL_I2C_Init+0x274>)
 800584c:	428b      	cmp	r3, r1
 800584e:	d819      	bhi.n	8005884 <HAL_I2C_Init+0x13c>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	1e59      	subs	r1, r3, #1
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	fbb1 f3f3 	udiv	r3, r1, r3
 800585e:	1c59      	adds	r1, r3, #1
 8005860:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005864:	400b      	ands	r3, r1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <HAL_I2C_Init+0x138>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	1e59      	subs	r1, r3, #1
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	fbb1 f3f3 	udiv	r3, r1, r3
 8005878:	3301      	adds	r3, #1
 800587a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800587e:	e051      	b.n	8005924 <HAL_I2C_Init+0x1dc>
 8005880:	2304      	movs	r3, #4
 8005882:	e04f      	b.n	8005924 <HAL_I2C_Init+0x1dc>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d111      	bne.n	80058b0 <HAL_I2C_Init+0x168>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	1e58      	subs	r0, r3, #1
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6859      	ldr	r1, [r3, #4]
 8005894:	460b      	mov	r3, r1
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	440b      	add	r3, r1
 800589a:	fbb0 f3f3 	udiv	r3, r0, r3
 800589e:	3301      	adds	r3, #1
 80058a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bf0c      	ite	eq
 80058a8:	2301      	moveq	r3, #1
 80058aa:	2300      	movne	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	e012      	b.n	80058d6 <HAL_I2C_Init+0x18e>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	1e58      	subs	r0, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6859      	ldr	r1, [r3, #4]
 80058b8:	460b      	mov	r3, r1
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	0099      	lsls	r1, r3, #2
 80058c0:	440b      	add	r3, r1
 80058c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80058c6:	3301      	adds	r3, #1
 80058c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	bf0c      	ite	eq
 80058d0:	2301      	moveq	r3, #1
 80058d2:	2300      	movne	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <HAL_I2C_Init+0x196>
 80058da:	2301      	movs	r3, #1
 80058dc:	e022      	b.n	8005924 <HAL_I2C_Init+0x1dc>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10e      	bne.n	8005904 <HAL_I2C_Init+0x1bc>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	1e58      	subs	r0, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6859      	ldr	r1, [r3, #4]
 80058ee:	460b      	mov	r3, r1
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	440b      	add	r3, r1
 80058f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80058f8:	3301      	adds	r3, #1
 80058fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005902:	e00f      	b.n	8005924 <HAL_I2C_Init+0x1dc>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	1e58      	subs	r0, r3, #1
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6859      	ldr	r1, [r3, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	0099      	lsls	r1, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	fbb0 f3f3 	udiv	r3, r0, r3
 800591a:	3301      	adds	r3, #1
 800591c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005920:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	6809      	ldr	r1, [r1, #0]
 8005928:	4313      	orrs	r3, r2
 800592a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69da      	ldr	r2, [r3, #28]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005952:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6911      	ldr	r1, [r2, #16]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	68d2      	ldr	r2, [r2, #12]
 800595e:	4311      	orrs	r1, r2
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	430b      	orrs	r3, r1
 8005966:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	695a      	ldr	r2, [r3, #20]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	000186a0 	.word	0x000186a0
 80059c0:	001e847f 	.word	0x001e847f
 80059c4:	003d08ff 	.word	0x003d08ff
 80059c8:	431bde83 	.word	0x431bde83
 80059cc:	10624dd3 	.word	0x10624dd3

080059d0 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	461a      	mov	r2, r3
 80059dc:	460b      	mov	r3, r1
 80059de:	817b      	strh	r3, [r7, #10]
 80059e0:	4613      	mov	r3, r2
 80059e2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b20      	cmp	r3, #32
 80059f2:	f040 8085 	bne.w	8005b00 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80059f6:	4b46      	ldr	r3, [pc, #280]	; (8005b10 <HAL_I2C_Master_Transmit_IT+0x140>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	08db      	lsrs	r3, r3, #3
 80059fc:	4a45      	ldr	r2, [pc, #276]	; (8005b14 <HAL_I2C_Master_Transmit_IT+0x144>)
 80059fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005a02:	0a1a      	lsrs	r2, r3, #8
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	009a      	lsls	r2, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d116      	bne.n	8005a4a <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	f043 0220 	orr.w	r2, r3, #32
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e05b      	b.n	8005b02 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d0db      	beq.n	8005a10 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_I2C_Master_Transmit_IT+0x96>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e04d      	b.n	8005b02 <HAL_I2C_Master_Transmit_IT+0x132>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d007      	beq.n	8005a8c <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2221      	movs	r2, #33	; 0x21
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2210      	movs	r2, #16
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	893a      	ldrh	r2, [r7, #8]
 8005abc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4a13      	ldr	r2, [pc, #76]	; (8005b18 <HAL_I2C_Master_Transmit_IT+0x148>)
 8005acc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005ace:	897a      	ldrh	r2, [r7, #10]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ae2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005afa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e000      	b.n	8005b02 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	20000018 	.word	0x20000018
 8005b14:	14f8b589 	.word	0x14f8b589
 8005b18:	ffff0000 	.word	0xffff0000

08005b1c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	461a      	mov	r2, r3
 8005b28:	460b      	mov	r3, r1
 8005b2a:	817b      	strh	r3, [r7, #10]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	f040 808d 	bne.w	8005c5c <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b42:	4b4a      	ldr	r3, [pc, #296]	; (8005c6c <HAL_I2C_Master_Receive_IT+0x150>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	08db      	lsrs	r3, r3, #3
 8005b48:	4a49      	ldr	r2, [pc, #292]	; (8005c70 <HAL_I2C_Master_Receive_IT+0x154>)
 8005b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4e:	0a1a      	lsrs	r2, r3, #8
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	009a      	lsls	r2, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d116      	bne.n	8005b96 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f043 0220 	orr.w	r2, r3, #32
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e063      	b.n	8005c5e <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d0db      	beq.n	8005b5c <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d101      	bne.n	8005bb2 <HAL_I2C_Master_Receive_IT+0x96>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e055      	b.n	8005c5e <HAL_I2C_Master_Receive_IT+0x142>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d007      	beq.n	8005bd8 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 0201 	orr.w	r2, r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005be6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2222      	movs	r2, #34	; 0x22
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2210      	movs	r2, #16
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	893a      	ldrh	r2, [r7, #8]
 8005c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4a17      	ldr	r2, [pc, #92]	; (8005c74 <HAL_I2C_Master_Receive_IT+0x158>)
 8005c18:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005c1a:	897a      	ldrh	r2, [r7, #10]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c2e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c3e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005c56:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e000      	b.n	8005c5e <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8005c5c:	2302      	movs	r3, #2
  }
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	371c      	adds	r7, #28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	20000018 	.word	0x20000018
 8005c70:	14f8b589 	.word	0x14f8b589
 8005c74:	ffff0000 	.word	0xffff0000

08005c78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
 8005ca4:	2b10      	cmp	r3, #16
 8005ca6:	d003      	beq.n	8005cb0 <HAL_I2C_EV_IRQHandler+0x38>
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
 8005caa:	2b40      	cmp	r3, #64	; 0x40
 8005cac:	f040 80bd 	bne.w	8005e2a <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10d      	bne.n	8005ce6 <HAL_I2C_EV_IRQHandler+0x6e>
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005cd0:	d003      	beq.n	8005cda <HAL_I2C_EV_IRQHandler+0x62>
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005cd8:	d101      	bne.n	8005cde <HAL_I2C_EV_IRQHandler+0x66>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <HAL_I2C_EV_IRQHandler+0x68>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	f000 812e 	beq.w	8005f42 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00c      	beq.n	8005d0a <HAL_I2C_EV_IRQHandler+0x92>
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	0a5b      	lsrs	r3, r3, #9
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d006      	beq.n	8005d0a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f001 fc55 	bl	80075ac <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fd62 	bl	80067cc <I2C_Master_SB>
 8005d08:	e08e      	b.n	8005e28 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	08db      	lsrs	r3, r3, #3
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d009      	beq.n	8005d2a <HAL_I2C_EV_IRQHandler+0xb2>
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	0a5b      	lsrs	r3, r3, #9
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fdd8 	bl	80068d8 <I2C_Master_ADD10>
 8005d28:	e07e      	b.n	8005e28 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	085b      	lsrs	r3, r3, #1
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d009      	beq.n	8005d4a <HAL_I2C_EV_IRQHandler+0xd2>
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	0a5b      	lsrs	r3, r3, #9
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fdf2 	bl	800692c <I2C_Master_ADDR>
 8005d48:	e06e      	b.n	8005e28 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	089b      	lsrs	r3, r3, #2
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d037      	beq.n	8005dc6 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d64:	f000 80ef 	beq.w	8005f46 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	09db      	lsrs	r3, r3, #7
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00f      	beq.n	8005d94 <HAL_I2C_EV_IRQHandler+0x11c>
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	0a9b      	lsrs	r3, r3, #10
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d009      	beq.n	8005d94 <HAL_I2C_EV_IRQHandler+0x11c>
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	089b      	lsrs	r3, r3, #2
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d103      	bne.n	8005d94 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f9ef 	bl	8006170 <I2C_MasterTransmit_TXE>
 8005d92:	e049      	b.n	8005e28 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	089b      	lsrs	r3, r3, #2
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 80d2 	beq.w	8005f46 <HAL_I2C_EV_IRQHandler+0x2ce>
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	0a5b      	lsrs	r3, r3, #9
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 80cb 	beq.w	8005f46 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	2b10      	cmp	r3, #16
 8005db4:	d103      	bne.n	8005dbe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fa76 	bl	80062a8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dbc:	e0c3      	b.n	8005f46 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fada 	bl	8006378 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dc4:	e0bf      	b.n	8005f46 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dd4:	f000 80b7 	beq.w	8005f46 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	099b      	lsrs	r3, r3, #6
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00f      	beq.n	8005e04 <HAL_I2C_EV_IRQHandler+0x18c>
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	0a9b      	lsrs	r3, r3, #10
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d009      	beq.n	8005e04 <HAL_I2C_EV_IRQHandler+0x18c>
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	089b      	lsrs	r3, r3, #2
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d103      	bne.n	8005e04 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fb4a 	bl	8006496 <I2C_MasterReceive_RXNE>
 8005e02:	e011      	b.n	8005e28 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	089b      	lsrs	r3, r3, #2
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 809a 	beq.w	8005f46 <HAL_I2C_EV_IRQHandler+0x2ce>
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	0a5b      	lsrs	r3, r3, #9
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 8093 	beq.w	8005f46 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fbe9 	bl	80065f8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e26:	e08e      	b.n	8005f46 <HAL_I2C_EV_IRQHandler+0x2ce>
 8005e28:	e08d      	b.n	8005f46 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d004      	beq.n	8005e3c <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	61fb      	str	r3, [r7, #28]
 8005e3a:	e007      	b.n	8005e4c <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d012      	beq.n	8005e7e <HAL_I2C_EV_IRQHandler+0x206>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	0a5b      	lsrs	r3, r3, #9
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00c      	beq.n	8005e7e <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005e74:	69b9      	ldr	r1, [r7, #24]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 ffa7 	bl	8006dca <I2C_Slave_ADDR>
 8005e7c:	e066      	b.n	8005f4c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	091b      	lsrs	r3, r3, #4
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d009      	beq.n	8005e9e <HAL_I2C_EV_IRQHandler+0x226>
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	0a5b      	lsrs	r3, r3, #9
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 ffdc 	bl	8006e54 <I2C_Slave_STOPF>
 8005e9c:	e056      	b.n	8005f4c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ea0:	2b21      	cmp	r3, #33	; 0x21
 8005ea2:	d002      	beq.n	8005eaa <HAL_I2C_EV_IRQHandler+0x232>
 8005ea4:	7bbb      	ldrb	r3, [r7, #14]
 8005ea6:	2b29      	cmp	r3, #41	; 0x29
 8005ea8:	d125      	bne.n	8005ef6 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	09db      	lsrs	r3, r3, #7
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00f      	beq.n	8005ed6 <HAL_I2C_EV_IRQHandler+0x25e>
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	0a9b      	lsrs	r3, r3, #10
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d009      	beq.n	8005ed6 <HAL_I2C_EV_IRQHandler+0x25e>
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	089b      	lsrs	r3, r3, #2
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d103      	bne.n	8005ed6 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 febd 	bl	8006c4e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ed4:	e039      	b.n	8005f4a <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	089b      	lsrs	r3, r3, #2
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d033      	beq.n	8005f4a <HAL_I2C_EV_IRQHandler+0x2d2>
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	0a5b      	lsrs	r3, r3, #9
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d02d      	beq.n	8005f4a <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 feea 	bl	8006cc8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ef4:	e029      	b.n	8005f4a <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	099b      	lsrs	r3, r3, #6
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00f      	beq.n	8005f22 <HAL_I2C_EV_IRQHandler+0x2aa>
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	0a9b      	lsrs	r3, r3, #10
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d009      	beq.n	8005f22 <HAL_I2C_EV_IRQHandler+0x2aa>
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	089b      	lsrs	r3, r3, #2
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d103      	bne.n	8005f22 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fef5 	bl	8006d0a <I2C_SlaveReceive_RXNE>
 8005f20:	e014      	b.n	8005f4c <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	089b      	lsrs	r3, r3, #2
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00e      	beq.n	8005f4c <HAL_I2C_EV_IRQHandler+0x2d4>
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	0a5b      	lsrs	r3, r3, #9
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d008      	beq.n	8005f4c <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 ff23 	bl	8006d86 <I2C_SlaveReceive_BTF>
 8005f40:	e004      	b.n	8005f4c <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8005f42:	bf00      	nop
 8005f44:	e002      	b.n	8005f4c <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f46:	bf00      	nop
 8005f48:	e000      	b.n	8005f4c <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f4a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b08a      	sub	sp, #40	; 0x28
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f74:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	0a1b      	lsrs	r3, r3, #8
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00e      	beq.n	8005fa0 <HAL_I2C_ER_IRQHandler+0x4e>
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	0a1b      	lsrs	r3, r3, #8
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d008      	beq.n	8005fa0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	f043 0301 	orr.w	r3, r3, #1
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f9e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	0a5b      	lsrs	r3, r3, #9
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00e      	beq.n	8005fca <HAL_I2C_ER_IRQHandler+0x78>
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	0a1b      	lsrs	r3, r3, #8
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d008      	beq.n	8005fca <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	f043 0302 	orr.w	r3, r3, #2
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005fc8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	0a9b      	lsrs	r3, r3, #10
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d03f      	beq.n	8006056 <HAL_I2C_ER_IRQHandler+0x104>
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	0a1b      	lsrs	r3, r3, #8
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d039      	beq.n	8006056 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005fe2:	7efb      	ldrb	r3, [r7, #27]
 8005fe4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005ffc:	7ebb      	ldrb	r3, [r7, #26]
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	d112      	bne.n	8006028 <HAL_I2C_ER_IRQHandler+0xd6>
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10f      	bne.n	8006028 <HAL_I2C_ER_IRQHandler+0xd6>
 8006008:	7cfb      	ldrb	r3, [r7, #19]
 800600a:	2b21      	cmp	r3, #33	; 0x21
 800600c:	d008      	beq.n	8006020 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800600e:	7cfb      	ldrb	r3, [r7, #19]
 8006010:	2b29      	cmp	r3, #41	; 0x29
 8006012:	d005      	beq.n	8006020 <HAL_I2C_ER_IRQHandler+0xce>
 8006014:	7cfb      	ldrb	r3, [r7, #19]
 8006016:	2b28      	cmp	r3, #40	; 0x28
 8006018:	d106      	bne.n	8006028 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b21      	cmp	r3, #33	; 0x21
 800601e:	d103      	bne.n	8006028 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 f847 	bl	80070b4 <I2C_Slave_AF>
 8006026:	e016      	b.n	8006056 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006030:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	f043 0304 	orr.w	r3, r3, #4
 8006038:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800603a:	7efb      	ldrb	r3, [r7, #27]
 800603c:	2b10      	cmp	r3, #16
 800603e:	d002      	beq.n	8006046 <HAL_I2C_ER_IRQHandler+0xf4>
 8006040:	7efb      	ldrb	r3, [r7, #27]
 8006042:	2b40      	cmp	r3, #64	; 0x40
 8006044:	d107      	bne.n	8006056 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006054:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	0adb      	lsrs	r3, r3, #11
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00e      	beq.n	8006080 <HAL_I2C_ER_IRQHandler+0x12e>
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	0a1b      	lsrs	r3, r3, #8
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d008      	beq.n	8006080 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	f043 0308 	orr.w	r3, r3, #8
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800607e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	2b00      	cmp	r3, #0
 8006084:	d008      	beq.n	8006098 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	431a      	orrs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 f87e 	bl	8007194 <I2C_ITError>
  }
}
 8006098:	bf00      	nop
 800609a:	3728      	adds	r7, #40	; 0x28
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	70fb      	strb	r3, [r7, #3]
 80060fc:	4613      	mov	r3, r2
 80060fe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800617e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006186:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006192:	2b00      	cmp	r3, #0
 8006194:	d150      	bne.n	8006238 <I2C_MasterTransmit_TXE+0xc8>
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	2b21      	cmp	r3, #33	; 0x21
 800619a:	d14d      	bne.n	8006238 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b08      	cmp	r3, #8
 80061a0:	d01d      	beq.n	80061de <I2C_MasterTransmit_TXE+0x6e>
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	d01a      	beq.n	80061de <I2C_MasterTransmit_TXE+0x6e>
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061ae:	d016      	beq.n	80061de <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061be:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2211      	movs	r2, #17
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7ff ff62 	bl	80060a0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80061dc:	e060      	b.n	80062a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061ec:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061fc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b40      	cmp	r3, #64	; 0x40
 8006216:	d107      	bne.n	8006228 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff ff7d 	bl	8006120 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006226:	e03b      	b.n	80062a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff ff35 	bl	80060a0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006236:	e033      	b.n	80062a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	2b21      	cmp	r3, #33	; 0x21
 800623c:	d005      	beq.n	800624a <I2C_MasterTransmit_TXE+0xda>
 800623e:	7bbb      	ldrb	r3, [r7, #14]
 8006240:	2b40      	cmp	r3, #64	; 0x40
 8006242:	d12d      	bne.n	80062a0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	2b22      	cmp	r3, #34	; 0x22
 8006248:	d12a      	bne.n	80062a0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624e:	b29b      	uxth	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d108      	bne.n	8006266 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006262:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006264:	e01c      	b.n	80062a0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b40      	cmp	r3, #64	; 0x40
 8006270:	d103      	bne.n	800627a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f880 	bl	8006378 <I2C_MemoryTransmit_TXE_BTF>
}
 8006278:	e012      	b.n	80062a0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	781a      	ldrb	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800629e:	e7ff      	b.n	80062a0 <I2C_MasterTransmit_TXE+0x130>
 80062a0:	bf00      	nop
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b21      	cmp	r3, #33	; 0x21
 80062c0:	d156      	bne.n	8006370 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d012      	beq.n	80062f2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	781a      	ldrb	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80062f0:	e03e      	b.n	8006370 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d01d      	beq.n	8006334 <I2C_MasterTransmit_BTF+0x8c>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	d01a      	beq.n	8006334 <I2C_MasterTransmit_BTF+0x8c>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006304:	d016      	beq.n	8006334 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006314:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2211      	movs	r2, #17
 800631a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2220      	movs	r2, #32
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7ff feb7 	bl	80060a0 <HAL_I2C_MasterTxCpltCallback>
}
 8006332:	e01d      	b.n	8006370 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006342:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006352:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7ff fe98 	bl	80060a0 <HAL_I2C_MasterTxCpltCallback>
}
 8006370:	bf00      	nop
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006386:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638c:	2b00      	cmp	r3, #0
 800638e:	d11d      	bne.n	80063cc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006394:	2b01      	cmp	r3, #1
 8006396:	d10b      	bne.n	80063b0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800639c:	b2da      	uxtb	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a8:	1c9a      	adds	r2, r3, #2
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80063ae:	e06e      	b.n	800648e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	121b      	asrs	r3, r3, #8
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80063ca:	e060      	b.n	800648e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d10b      	bne.n	80063ec <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e4:	1c5a      	adds	r2, r3, #1
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80063ea:	e050      	b.n	800648e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d14c      	bne.n	800648e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	2b22      	cmp	r3, #34	; 0x22
 80063f8:	d108      	bne.n	800640c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006408:	601a      	str	r2, [r3, #0]
}
 800640a:	e040      	b.n	800648e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006410:	b29b      	uxth	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d015      	beq.n	8006442 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	2b21      	cmp	r3, #33	; 0x21
 800641a:	d112      	bne.n	8006442 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	781a      	ldrb	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006436:	b29b      	uxth	r3, r3
 8006438:	3b01      	subs	r3, #1
 800643a:	b29a      	uxth	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006440:	e025      	b.n	800648e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006446:	b29b      	uxth	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d120      	bne.n	800648e <I2C_MemoryTransmit_TXE_BTF+0x116>
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	2b21      	cmp	r3, #33	; 0x21
 8006450:	d11d      	bne.n	800648e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006460:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006470:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7ff fe49 	bl	8006120 <HAL_I2C_MemTxCpltCallback>
}
 800648e:	bf00      	nop
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b22      	cmp	r3, #34	; 0x22
 80064a8:	f040 80a2 	bne.w	80065f0 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d921      	bls.n	80064fe <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29a      	uxth	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	f040 8082 	bne.w	80065f0 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064fa:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80064fc:	e078      	b.n	80065f0 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006502:	2b02      	cmp	r3, #2
 8006504:	d074      	beq.n	80065f0 <I2C_MasterReceive_RXNE+0x15a>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d002      	beq.n	8006512 <I2C_MasterReceive_RXNE+0x7c>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d16e      	bne.n	80065f0 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f001 f818 	bl	8007548 <I2C_WaitOnSTOPRequestThroughIT>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d142      	bne.n	80065a4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800652c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800653c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691a      	ldr	r2, [r3, #16]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655a:	b29b      	uxth	r3, r3
 800655c:	3b01      	subs	r3, #1
 800655e:	b29a      	uxth	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2220      	movs	r2, #32
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b40      	cmp	r3, #64	; 0x40
 8006576:	d10a      	bne.n	800658e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff fdd4 	bl	8006134 <HAL_I2C_MemRxCpltCallback>
}
 800658c:	e030      	b.n	80065f0 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2212      	movs	r2, #18
 800659a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7ff fd89 	bl	80060b4 <HAL_I2C_MasterRxCpltCallback>
}
 80065a2:	e025      	b.n	80065f0 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065b2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691a      	ldr	r2, [r3, #16]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	b2d2      	uxtb	r2, r2
 80065c0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	3b01      	subs	r3, #1
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2220      	movs	r2, #32
 80065de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff fdac 	bl	8006148 <HAL_I2C_ErrorCallback>
}
 80065f0:	bf00      	nop
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660a:	b29b      	uxth	r3, r3
 800660c:	2b04      	cmp	r3, #4
 800660e:	d11b      	bne.n	8006648 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800661e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691a      	ldr	r2, [r3, #16]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006646:	e0bd      	b.n	80067c4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b03      	cmp	r3, #3
 8006650:	d129      	bne.n	80066a6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006660:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b04      	cmp	r3, #4
 8006666:	d00a      	beq.n	800667e <I2C_MasterReceive_BTF+0x86>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b02      	cmp	r3, #2
 800666c:	d007      	beq.n	800667e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800667c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	691a      	ldr	r2, [r3, #16]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80066a4:	e08e      	b.n	80067c4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d176      	bne.n	800679e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d002      	beq.n	80066bc <I2C_MasterReceive_BTF+0xc4>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b10      	cmp	r3, #16
 80066ba:	d108      	bne.n	80066ce <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	e019      	b.n	8006702 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b04      	cmp	r3, #4
 80066d2:	d002      	beq.n	80066da <I2C_MasterReceive_BTF+0xe2>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d108      	bne.n	80066ec <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	e00a      	b.n	8006702 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b10      	cmp	r3, #16
 80066f0:	d007      	beq.n	8006702 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006700:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	691a      	ldr	r2, [r3, #16]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671e:	b29b      	uxth	r3, r3
 8006720:	3b01      	subs	r3, #1
 8006722:	b29a      	uxth	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	691a      	ldr	r2, [r3, #16]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006744:	b29b      	uxth	r3, r3
 8006746:	3b01      	subs	r3, #1
 8006748:	b29a      	uxth	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800675c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b40      	cmp	r3, #64	; 0x40
 8006770:	d10a      	bne.n	8006788 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff fcd7 	bl	8006134 <HAL_I2C_MemRxCpltCallback>
}
 8006786:	e01d      	b.n	80067c4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2212      	movs	r2, #18
 8006794:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff fc8c 	bl	80060b4 <HAL_I2C_MasterRxCpltCallback>
}
 800679c:	e012      	b.n	80067c4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	3b01      	subs	r3, #1
 80067be:	b29a      	uxth	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80067c4:	bf00      	nop
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b40      	cmp	r3, #64	; 0x40
 80067de:	d117      	bne.n	8006810 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d109      	bne.n	80067fc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	461a      	mov	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067f8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80067fa:	e067      	b.n	80068cc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006800:	b2db      	uxtb	r3, r3
 8006802:	f043 0301 	orr.w	r3, r3, #1
 8006806:	b2da      	uxtb	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	611a      	str	r2, [r3, #16]
}
 800680e:	e05d      	b.n	80068cc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006818:	d133      	bne.n	8006882 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b21      	cmp	r3, #33	; 0x21
 8006824:	d109      	bne.n	800683a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682a:	b2db      	uxtb	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006836:	611a      	str	r2, [r3, #16]
 8006838:	e008      	b.n	800684c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	b2db      	uxtb	r3, r3
 8006840:	f043 0301 	orr.w	r3, r3, #1
 8006844:	b2da      	uxtb	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006850:	2b00      	cmp	r3, #0
 8006852:	d004      	beq.n	800685e <I2C_Master_SB+0x92>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685a:	2b00      	cmp	r3, #0
 800685c:	d108      	bne.n	8006870 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006862:	2b00      	cmp	r3, #0
 8006864:	d032      	beq.n	80068cc <I2C_Master_SB+0x100>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686c:	2b00      	cmp	r3, #0
 800686e:	d02d      	beq.n	80068cc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800687e:	605a      	str	r2, [r3, #4]
}
 8006880:	e024      	b.n	80068cc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10e      	bne.n	80068a8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688e:	b29b      	uxth	r3, r3
 8006890:	11db      	asrs	r3, r3, #7
 8006892:	b2db      	uxtb	r3, r3
 8006894:	f003 0306 	and.w	r3, r3, #6
 8006898:	b2db      	uxtb	r3, r3
 800689a:	f063 030f 	orn	r3, r3, #15
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	611a      	str	r2, [r3, #16]
}
 80068a6:	e011      	b.n	80068cc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d10d      	bne.n	80068cc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	11db      	asrs	r3, r3, #7
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	f003 0306 	and.w	r3, r3, #6
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	f063 030e 	orn	r3, r3, #14
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	611a      	str	r2, [r3, #16]
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d004      	beq.n	80068fe <I2C_Master_ADD10+0x26>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d108      	bne.n	8006910 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00c      	beq.n	8006920 <I2C_Master_ADD10+0x48>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690c:	2b00      	cmp	r3, #0
 800690e:	d007      	beq.n	8006920 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800691e:	605a      	str	r2, [r3, #4]
  }
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800692c:	b480      	push	{r7}
 800692e:	b091      	sub	sp, #68	; 0x44
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800693a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006948:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b22      	cmp	r3, #34	; 0x22
 8006954:	f040 8169 	bne.w	8006c2a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10f      	bne.n	8006980 <I2C_Master_ADDR+0x54>
 8006960:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006964:	2b40      	cmp	r3, #64	; 0x40
 8006966:	d10b      	bne.n	8006980 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006968:	2300      	movs	r3, #0
 800696a:	633b      	str	r3, [r7, #48]	; 0x30
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	633b      	str	r3, [r7, #48]	; 0x30
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	633b      	str	r3, [r7, #48]	; 0x30
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	e160      	b.n	8006c42 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006984:	2b00      	cmp	r3, #0
 8006986:	d11d      	bne.n	80069c4 <I2C_Master_ADDR+0x98>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006990:	d118      	bne.n	80069c4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006992:	2300      	movs	r3, #0
 8006994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069b6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069bc:	1c5a      	adds	r2, r3, #1
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	651a      	str	r2, [r3, #80]	; 0x50
 80069c2:	e13e      	b.n	8006c42 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d113      	bne.n	80069f6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ce:	2300      	movs	r3, #0
 80069d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	e115      	b.n	8006c22 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	f040 808a 	bne.w	8006b16 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a08:	d137      	bne.n	8006a7a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a18:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a28:	d113      	bne.n	8006a52 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a38:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	627b      	str	r3, [r7, #36]	; 0x24
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	e0e7      	b.n	8006c22 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a52:	2300      	movs	r3, #0
 8006a54:	623b      	str	r3, [r7, #32]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	623b      	str	r3, [r7, #32]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	623b      	str	r3, [r7, #32]
 8006a66:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	e0d3      	b.n	8006c22 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d02e      	beq.n	8006ade <I2C_Master_ADDR+0x1b2>
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	d02b      	beq.n	8006ade <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a88:	2b12      	cmp	r3, #18
 8006a8a:	d102      	bne.n	8006a92 <I2C_Master_ADDR+0x166>
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d125      	bne.n	8006ade <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	d00e      	beq.n	8006ab6 <I2C_Master_ADDR+0x18a>
 8006a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d00b      	beq.n	8006ab6 <I2C_Master_ADDR+0x18a>
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa0:	2b10      	cmp	r3, #16
 8006aa2:	d008      	beq.n	8006ab6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	e007      	b.n	8006ac6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ac4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	61fb      	str	r3, [r7, #28]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	61fb      	str	r3, [r7, #28]
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	e0a1      	b.n	8006c22 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aec:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aee:	2300      	movs	r3, #0
 8006af0:	61bb      	str	r3, [r7, #24]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	61bb      	str	r3, [r7, #24]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	61bb      	str	r3, [r7, #24]
 8006b02:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	e085      	b.n	8006c22 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d14d      	bne.n	8006bbc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d016      	beq.n	8006b54 <I2C_Master_ADDR+0x228>
 8006b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d013      	beq.n	8006b54 <I2C_Master_ADDR+0x228>
 8006b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2e:	2b10      	cmp	r3, #16
 8006b30:	d010      	beq.n	8006b54 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b40:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e007      	b.n	8006b64 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b62:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b72:	d117      	bne.n	8006ba4 <I2C_Master_ADDR+0x278>
 8006b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b7a:	d00b      	beq.n	8006b94 <I2C_Master_ADDR+0x268>
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d008      	beq.n	8006b94 <I2C_Master_ADDR+0x268>
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d005      	beq.n	8006b94 <I2C_Master_ADDR+0x268>
 8006b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8a:	2b10      	cmp	r3, #16
 8006b8c:	d002      	beq.n	8006b94 <I2C_Master_ADDR+0x268>
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d107      	bne.n	8006ba4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ba2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	e032      	b.n	8006c22 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bca:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bda:	d117      	bne.n	8006c0c <I2C_Master_ADDR+0x2e0>
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006be2:	d00b      	beq.n	8006bfc <I2C_Master_ADDR+0x2d0>
 8006be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d008      	beq.n	8006bfc <I2C_Master_ADDR+0x2d0>
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d005      	beq.n	8006bfc <I2C_Master_ADDR+0x2d0>
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	2b10      	cmp	r3, #16
 8006bf4:	d002      	beq.n	8006bfc <I2C_Master_ADDR+0x2d0>
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	d107      	bne.n	8006c0c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c0a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	613b      	str	r3, [r7, #16]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	613b      	str	r3, [r7, #16]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	613b      	str	r3, [r7, #16]
 8006c20:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006c28:	e00b      	b.n	8006c42 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60fb      	str	r3, [r7, #12]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	60fb      	str	r3, [r7, #12]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	60fb      	str	r3, [r7, #12]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
}
 8006c40:	e7ff      	b.n	8006c42 <I2C_Master_ADDR+0x316>
 8006c42:	bf00      	nop
 8006c44:	3744      	adds	r7, #68	; 0x44
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c5c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d02b      	beq.n	8006cc0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	781a      	ldrb	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d114      	bne.n	8006cc0 <I2C_SlaveTransmit_TXE+0x72>
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
 8006c98:	2b29      	cmp	r3, #41	; 0x29
 8006c9a:	d111      	bne.n	8006cc0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006caa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2221      	movs	r2, #33	; 0x21
 8006cb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2228      	movs	r2, #40	; 0x28
 8006cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff fa04 	bl	80060c8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006cc0:	bf00      	nop
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d011      	beq.n	8006cfe <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	781a      	ldrb	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b084      	sub	sp, #16
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d18:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d02c      	beq.n	8006d7e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691a      	ldr	r2, [r3, #16]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	3b01      	subs	r3, #1
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d114      	bne.n	8006d7e <I2C_SlaveReceive_RXNE+0x74>
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	2b2a      	cmp	r3, #42	; 0x2a
 8006d58:	d111      	bne.n	8006d7e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d68:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2222      	movs	r2, #34	; 0x22
 8006d6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2228      	movs	r2, #40	; 0x28
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff f9af 	bl	80060dc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006d7e:	bf00      	nop
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d012      	beq.n	8006dbe <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691a      	ldr	r2, [r3, #16]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	3b01      	subs	r3, #1
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006dbe:	bf00      	nop
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006de4:	2b28      	cmp	r3, #40	; 0x28
 8006de6:	d127      	bne.n	8006e38 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006df6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	089b      	lsrs	r3, r3, #2
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006e04:	2301      	movs	r3, #1
 8006e06:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	09db      	lsrs	r3, r3, #7
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d103      	bne.n	8006e1c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	81bb      	strh	r3, [r7, #12]
 8006e1a:	e002      	b.n	8006e22 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006e2a:	89ba      	ldrh	r2, [r7, #12]
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff f95d 	bl	80060f0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006e36:	e008      	b.n	8006e4a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f06f 0202 	mvn.w	r2, #2
 8006e40:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006e4a:	bf00      	nop
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e62:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e72:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006e74:	2300      	movs	r3, #0
 8006e76:	60bb      	str	r3, [r7, #8]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	60bb      	str	r3, [r7, #8]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f042 0201 	orr.w	r2, r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb0:	d172      	bne.n	8006f98 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
 8006eb4:	2b22      	cmp	r3, #34	; 0x22
 8006eb6:	d002      	beq.n	8006ebe <I2C_Slave_STOPF+0x6a>
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	2b2a      	cmp	r3, #42	; 0x2a
 8006ebc:	d135      	bne.n	8006f2a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d005      	beq.n	8006ee2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	f043 0204 	orr.w	r2, r3, #4
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ef0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fe f96a 	bl	80051d0 <HAL_DMA_GetState>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d049      	beq.n	8006f96 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f06:	4a69      	ldr	r2, [pc, #420]	; (80070ac <I2C_Slave_STOPF+0x258>)
 8006f08:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fd ffb2 	bl	8004e78 <HAL_DMA_Abort_IT>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d03d      	beq.n	8006f96 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f24:	4610      	mov	r0, r2
 8006f26:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f28:	e035      	b.n	8006f96 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d005      	beq.n	8006f4e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f46:	f043 0204 	orr.w	r2, r3, #4
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fe f934 	bl	80051d0 <HAL_DMA_GetState>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d014      	beq.n	8006f98 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f72:	4a4e      	ldr	r2, [pc, #312]	; (80070ac <I2C_Slave_STOPF+0x258>)
 8006f74:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fd ff7c 	bl	8004e78 <HAL_DMA_Abort_IT>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d008      	beq.n	8006f98 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f90:	4610      	mov	r0, r2
 8006f92:	4798      	blx	r3
 8006f94:	e000      	b.n	8006f98 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f96:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d03e      	beq.n	8007020 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d112      	bne.n	8006fd6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691a      	ldr	r2, [r3, #16]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe0:	2b40      	cmp	r3, #64	; 0x40
 8006fe2:	d112      	bne.n	800700a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691a      	ldr	r2, [r3, #16]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	b2d2      	uxtb	r2, r2
 8006ff0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007000:	b29b      	uxth	r3, r3
 8007002:	3b01      	subs	r3, #1
 8007004:	b29a      	uxth	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800700e:	b29b      	uxth	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007018:	f043 0204 	orr.w	r2, r3, #4
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007024:	2b00      	cmp	r3, #0
 8007026:	d003      	beq.n	8007030 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f8b3 	bl	8007194 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800702e:	e039      	b.n	80070a4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	2b2a      	cmp	r3, #42	; 0x2a
 8007034:	d109      	bne.n	800704a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2228      	movs	r2, #40	; 0x28
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff f849 	bl	80060dc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b28      	cmp	r3, #40	; 0x28
 8007054:	d111      	bne.n	800707a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a15      	ldr	r2, [pc, #84]	; (80070b0 <I2C_Slave_STOPF+0x25c>)
 800705a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff f84a 	bl	800610c <HAL_I2C_ListenCpltCallback>
}
 8007078:	e014      	b.n	80070a4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707e:	2b22      	cmp	r3, #34	; 0x22
 8007080:	d002      	beq.n	8007088 <I2C_Slave_STOPF+0x234>
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	2b22      	cmp	r3, #34	; 0x22
 8007086:	d10d      	bne.n	80070a4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2220      	movs	r2, #32
 8007092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7ff f81c 	bl	80060dc <HAL_I2C_SlaveRxCpltCallback>
}
 80070a4:	bf00      	nop
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	080073f9 	.word	0x080073f9
 80070b0:	ffff0000 	.word	0xffff0000

080070b4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	d002      	beq.n	80070d6 <I2C_Slave_AF+0x22>
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	d129      	bne.n	800712a <I2C_Slave_AF+0x76>
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	2b28      	cmp	r3, #40	; 0x28
 80070da:	d126      	bne.n	800712a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a2c      	ldr	r2, [pc, #176]	; (8007190 <I2C_Slave_AF+0xdc>)
 80070e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070f0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070fa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800710a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2220      	movs	r2, #32
 8007116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7fe fff2 	bl	800610c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007128:	e02e      	b.n	8007188 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	2b21      	cmp	r3, #33	; 0x21
 800712e:	d126      	bne.n	800717e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a17      	ldr	r2, [pc, #92]	; (8007190 <I2C_Slave_AF+0xdc>)
 8007134:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2221      	movs	r2, #33	; 0x21
 800713a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800715a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007164:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007174:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7fe ffa6 	bl	80060c8 <HAL_I2C_SlaveTxCpltCallback>
}
 800717c:	e004      	b.n	8007188 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007186:	615a      	str	r2, [r3, #20]
}
 8007188:	bf00      	nop
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	ffff0000 	.word	0xffff0000

08007194 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80071ac:	7bbb      	ldrb	r3, [r7, #14]
 80071ae:	2b10      	cmp	r3, #16
 80071b0:	d002      	beq.n	80071b8 <I2C_ITError+0x24>
 80071b2:	7bbb      	ldrb	r3, [r7, #14]
 80071b4:	2b40      	cmp	r3, #64	; 0x40
 80071b6:	d10a      	bne.n	80071ce <I2C_ITError+0x3a>
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	2b22      	cmp	r3, #34	; 0x22
 80071bc:	d107      	bne.n	80071ce <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071cc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
 80071d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071d4:	2b28      	cmp	r3, #40	; 0x28
 80071d6:	d107      	bne.n	80071e8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2228      	movs	r2, #40	; 0x28
 80071e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80071e6:	e015      	b.n	8007214 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071f6:	d00a      	beq.n	800720e <I2C_ITError+0x7a>
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	2b60      	cmp	r3, #96	; 0x60
 80071fc:	d007      	beq.n	800720e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2220      	movs	r2, #32
 8007202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800721e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007222:	d162      	bne.n	80072ea <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007232:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b01      	cmp	r3, #1
 8007240:	d020      	beq.n	8007284 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007246:	4a6a      	ldr	r2, [pc, #424]	; (80073f0 <I2C_ITError+0x25c>)
 8007248:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800724e:	4618      	mov	r0, r3
 8007250:	f7fd fe12 	bl	8004e78 <HAL_DMA_Abort_IT>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 8089 	beq.w	800736e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 0201 	bic.w	r2, r2, #1
 800726a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2220      	movs	r2, #32
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800727e:	4610      	mov	r0, r2
 8007280:	4798      	blx	r3
 8007282:	e074      	b.n	800736e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007288:	4a59      	ldr	r2, [pc, #356]	; (80073f0 <I2C_ITError+0x25c>)
 800728a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007290:	4618      	mov	r0, r3
 8007292:	f7fd fdf1 	bl	8004e78 <HAL_DMA_Abort_IT>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d068      	beq.n	800736e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a6:	2b40      	cmp	r3, #64	; 0x40
 80072a8:	d10b      	bne.n	80072c2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	691a      	ldr	r2, [r3, #16]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b4:	b2d2      	uxtb	r2, r2
 80072b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0201 	bic.w	r2, r2, #1
 80072d0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072e4:	4610      	mov	r0, r2
 80072e6:	4798      	blx	r3
 80072e8:	e041      	b.n	800736e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b60      	cmp	r3, #96	; 0x60
 80072f4:	d125      	bne.n	8007342 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730e:	2b40      	cmp	r3, #64	; 0x40
 8007310:	d10b      	bne.n	800732a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	691a      	ldr	r2, [r3, #16]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 0201 	bic.w	r2, r2, #1
 8007338:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7fe ff0e 	bl	800615c <HAL_I2C_AbortCpltCallback>
 8007340:	e015      	b.n	800736e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734c:	2b40      	cmp	r3, #64	; 0x40
 800734e:	d10b      	bne.n	8007368 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	691a      	ldr	r2, [r3, #16]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7fe feed 	bl	8006148 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10e      	bne.n	800739c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007384:	2b00      	cmp	r3, #0
 8007386:	d109      	bne.n	800739c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800738e:	2b00      	cmp	r3, #0
 8007390:	d104      	bne.n	800739c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007398:	2b00      	cmp	r3, #0
 800739a:	d007      	beq.n	80073ac <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685a      	ldr	r2, [r3, #4]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073aa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b8:	f003 0304 	and.w	r3, r3, #4
 80073bc:	2b04      	cmp	r3, #4
 80073be:	d113      	bne.n	80073e8 <I2C_ITError+0x254>
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	2b28      	cmp	r3, #40	; 0x28
 80073c4:	d110      	bne.n	80073e8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a0a      	ldr	r2, [pc, #40]	; (80073f4 <I2C_ITError+0x260>)
 80073ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2220      	movs	r2, #32
 80073d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7fe fe92 	bl	800610c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80073e8:	bf00      	nop
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	080073f9 	.word	0x080073f9
 80073f4:	ffff0000 	.word	0xffff0000

080073f8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007408:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007410:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007412:	4b4b      	ldr	r3, [pc, #300]	; (8007540 <I2C_DMAAbort+0x148>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	08db      	lsrs	r3, r3, #3
 8007418:	4a4a      	ldr	r2, [pc, #296]	; (8007544 <I2C_DMAAbort+0x14c>)
 800741a:	fba2 2303 	umull	r2, r3, r2, r3
 800741e:	0a1a      	lsrs	r2, r3, #8
 8007420:	4613      	mov	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	00da      	lsls	r2, r3, #3
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d106      	bne.n	8007440 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	f043 0220 	orr.w	r2, r3, #32
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800743e:	e00a      	b.n	8007456 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	3b01      	subs	r3, #1
 8007444:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007454:	d0ea      	beq.n	800742c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007462:	2200      	movs	r2, #0
 8007464:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	2200      	movs	r2, #0
 8007474:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007484:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	2200      	movs	r2, #0
 800748a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007498:	2200      	movs	r2, #0
 800749a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d003      	beq.n	80074ac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a8:	2200      	movs	r2, #0
 80074aa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 0201 	bic.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b60      	cmp	r3, #96	; 0x60
 80074c6:	d10e      	bne.n	80074e6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2220      	movs	r2, #32
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2200      	movs	r2, #0
 80074dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80074de:	6978      	ldr	r0, [r7, #20]
 80074e0:	f7fe fe3c 	bl	800615c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80074e4:	e027      	b.n	8007536 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80074e6:	7cfb      	ldrb	r3, [r7, #19]
 80074e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80074ec:	2b28      	cmp	r3, #40	; 0x28
 80074ee:	d117      	bne.n	8007520 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0201 	orr.w	r2, r2, #1
 80074fe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800750e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	2200      	movs	r2, #0
 8007514:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2228      	movs	r2, #40	; 0x28
 800751a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800751e:	e007      	b.n	8007530 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	2220      	movs	r2, #32
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007530:	6978      	ldr	r0, [r7, #20]
 8007532:	f7fe fe09 	bl	8006148 <HAL_I2C_ErrorCallback>
}
 8007536:	bf00      	nop
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	20000018 	.word	0x20000018
 8007544:	14f8b589 	.word	0x14f8b589

08007548 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007554:	4b13      	ldr	r3, [pc, #76]	; (80075a4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	08db      	lsrs	r3, r3, #3
 800755a:	4a13      	ldr	r2, [pc, #76]	; (80075a8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800755c:	fba2 2303 	umull	r2, r3, r2, r3
 8007560:	0a1a      	lsrs	r2, r3, #8
 8007562:	4613      	mov	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3b01      	subs	r3, #1
 800756e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d107      	bne.n	8007586 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	f043 0220 	orr.w	r2, r3, #32
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e008      	b.n	8007598 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007594:	d0e9      	beq.n	800756a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	20000018 	.word	0x20000018
 80075a8:	14f8b589 	.word	0x14f8b589

080075ac <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80075bc:	d103      	bne.n	80075c6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80075c4:	e007      	b.n	80075d6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ca:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80075ce:	d102      	bne.n	80075d6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2208      	movs	r2, #8
 80075d4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80075d6:	bf00      	nop
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
	...

080075e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e264      	b.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d075      	beq.n	80076ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007602:	4ba3      	ldr	r3, [pc, #652]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f003 030c 	and.w	r3, r3, #12
 800760a:	2b04      	cmp	r3, #4
 800760c:	d00c      	beq.n	8007628 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800760e:	4ba0      	ldr	r3, [pc, #640]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007616:	2b08      	cmp	r3, #8
 8007618:	d112      	bne.n	8007640 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800761a:	4b9d      	ldr	r3, [pc, #628]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007626:	d10b      	bne.n	8007640 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007628:	4b99      	ldr	r3, [pc, #612]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d05b      	beq.n	80076ec <HAL_RCC_OscConfig+0x108>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d157      	bne.n	80076ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e23f      	b.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007648:	d106      	bne.n	8007658 <HAL_RCC_OscConfig+0x74>
 800764a:	4b91      	ldr	r3, [pc, #580]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a90      	ldr	r2, [pc, #576]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	e01d      	b.n	8007694 <HAL_RCC_OscConfig+0xb0>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007660:	d10c      	bne.n	800767c <HAL_RCC_OscConfig+0x98>
 8007662:	4b8b      	ldr	r3, [pc, #556]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a8a      	ldr	r2, [pc, #552]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800766c:	6013      	str	r3, [r2, #0]
 800766e:	4b88      	ldr	r3, [pc, #544]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a87      	ldr	r2, [pc, #540]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	e00b      	b.n	8007694 <HAL_RCC_OscConfig+0xb0>
 800767c:	4b84      	ldr	r3, [pc, #528]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a83      	ldr	r2, [pc, #524]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007686:	6013      	str	r3, [r2, #0]
 8007688:	4b81      	ldr	r3, [pc, #516]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a80      	ldr	r2, [pc, #512]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 800768e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d013      	beq.n	80076c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800769c:	f7fd f958 	bl	8004950 <HAL_GetTick>
 80076a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076a2:	e008      	b.n	80076b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076a4:	f7fd f954 	bl	8004950 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	2b64      	cmp	r3, #100	; 0x64
 80076b0:	d901      	bls.n	80076b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e204      	b.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076b6:	4b76      	ldr	r3, [pc, #472]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0f0      	beq.n	80076a4 <HAL_RCC_OscConfig+0xc0>
 80076c2:	e014      	b.n	80076ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076c4:	f7fd f944 	bl	8004950 <HAL_GetTick>
 80076c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076ca:	e008      	b.n	80076de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076cc:	f7fd f940 	bl	8004950 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2b64      	cmp	r3, #100	; 0x64
 80076d8:	d901      	bls.n	80076de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e1f0      	b.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076de:	4b6c      	ldr	r3, [pc, #432]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1f0      	bne.n	80076cc <HAL_RCC_OscConfig+0xe8>
 80076ea:	e000      	b.n	80076ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d063      	beq.n	80077c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076fa:	4b65      	ldr	r3, [pc, #404]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f003 030c 	and.w	r3, r3, #12
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00b      	beq.n	800771e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007706:	4b62      	ldr	r3, [pc, #392]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800770e:	2b08      	cmp	r3, #8
 8007710:	d11c      	bne.n	800774c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007712:	4b5f      	ldr	r3, [pc, #380]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d116      	bne.n	800774c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800771e:	4b5c      	ldr	r3, [pc, #368]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b00      	cmp	r3, #0
 8007728:	d005      	beq.n	8007736 <HAL_RCC_OscConfig+0x152>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d001      	beq.n	8007736 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e1c4      	b.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007736:	4b56      	ldr	r3, [pc, #344]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	4952      	ldr	r1, [pc, #328]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007746:	4313      	orrs	r3, r2
 8007748:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800774a:	e03a      	b.n	80077c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d020      	beq.n	8007796 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007754:	4b4f      	ldr	r3, [pc, #316]	; (8007894 <HAL_RCC_OscConfig+0x2b0>)
 8007756:	2201      	movs	r2, #1
 8007758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775a:	f7fd f8f9 	bl	8004950 <HAL_GetTick>
 800775e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007760:	e008      	b.n	8007774 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007762:	f7fd f8f5 	bl	8004950 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	2b02      	cmp	r3, #2
 800776e:	d901      	bls.n	8007774 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e1a5      	b.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007774:	4b46      	ldr	r3, [pc, #280]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d0f0      	beq.n	8007762 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007780:	4b43      	ldr	r3, [pc, #268]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	4940      	ldr	r1, [pc, #256]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007790:	4313      	orrs	r3, r2
 8007792:	600b      	str	r3, [r1, #0]
 8007794:	e015      	b.n	80077c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007796:	4b3f      	ldr	r3, [pc, #252]	; (8007894 <HAL_RCC_OscConfig+0x2b0>)
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800779c:	f7fd f8d8 	bl	8004950 <HAL_GetTick>
 80077a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077a2:	e008      	b.n	80077b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077a4:	f7fd f8d4 	bl	8004950 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e184      	b.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077b6:	4b36      	ldr	r3, [pc, #216]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0302 	and.w	r3, r3, #2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f0      	bne.n	80077a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d030      	beq.n	8007830 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d016      	beq.n	8007804 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077d6:	4b30      	ldr	r3, [pc, #192]	; (8007898 <HAL_RCC_OscConfig+0x2b4>)
 80077d8:	2201      	movs	r2, #1
 80077da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077dc:	f7fd f8b8 	bl	8004950 <HAL_GetTick>
 80077e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077e2:	e008      	b.n	80077f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077e4:	f7fd f8b4 	bl	8004950 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d901      	bls.n	80077f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e164      	b.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077f6:	4b26      	ldr	r3, [pc, #152]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 80077f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0f0      	beq.n	80077e4 <HAL_RCC_OscConfig+0x200>
 8007802:	e015      	b.n	8007830 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007804:	4b24      	ldr	r3, [pc, #144]	; (8007898 <HAL_RCC_OscConfig+0x2b4>)
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800780a:	f7fd f8a1 	bl	8004950 <HAL_GetTick>
 800780e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007810:	e008      	b.n	8007824 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007812:	f7fd f89d 	bl	8004950 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	2b02      	cmp	r3, #2
 800781e:	d901      	bls.n	8007824 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e14d      	b.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007824:	4b1a      	ldr	r3, [pc, #104]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1f0      	bne.n	8007812 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 80a0 	beq.w	800797e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800783e:	2300      	movs	r3, #0
 8007840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007842:	4b13      	ldr	r3, [pc, #76]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10f      	bne.n	800786e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800784e:	2300      	movs	r3, #0
 8007850:	60bb      	str	r3, [r7, #8]
 8007852:	4b0f      	ldr	r3, [pc, #60]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007856:	4a0e      	ldr	r2, [pc, #56]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800785c:	6413      	str	r3, [r2, #64]	; 0x40
 800785e:	4b0c      	ldr	r3, [pc, #48]	; (8007890 <HAL_RCC_OscConfig+0x2ac>)
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007866:	60bb      	str	r3, [r7, #8]
 8007868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800786a:	2301      	movs	r3, #1
 800786c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800786e:	4b0b      	ldr	r3, [pc, #44]	; (800789c <HAL_RCC_OscConfig+0x2b8>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007876:	2b00      	cmp	r3, #0
 8007878:	d121      	bne.n	80078be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800787a:	4b08      	ldr	r3, [pc, #32]	; (800789c <HAL_RCC_OscConfig+0x2b8>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a07      	ldr	r2, [pc, #28]	; (800789c <HAL_RCC_OscConfig+0x2b8>)
 8007880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007886:	f7fd f863 	bl	8004950 <HAL_GetTick>
 800788a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800788c:	e011      	b.n	80078b2 <HAL_RCC_OscConfig+0x2ce>
 800788e:	bf00      	nop
 8007890:	40023800 	.word	0x40023800
 8007894:	42470000 	.word	0x42470000
 8007898:	42470e80 	.word	0x42470e80
 800789c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078a0:	f7fd f856 	bl	8004950 <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d901      	bls.n	80078b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e106      	b.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078b2:	4b85      	ldr	r3, [pc, #532]	; (8007ac8 <HAL_RCC_OscConfig+0x4e4>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d0f0      	beq.n	80078a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d106      	bne.n	80078d4 <HAL_RCC_OscConfig+0x2f0>
 80078c6:	4b81      	ldr	r3, [pc, #516]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 80078c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ca:	4a80      	ldr	r2, [pc, #512]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 80078cc:	f043 0301 	orr.w	r3, r3, #1
 80078d0:	6713      	str	r3, [r2, #112]	; 0x70
 80078d2:	e01c      	b.n	800790e <HAL_RCC_OscConfig+0x32a>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	2b05      	cmp	r3, #5
 80078da:	d10c      	bne.n	80078f6 <HAL_RCC_OscConfig+0x312>
 80078dc:	4b7b      	ldr	r3, [pc, #492]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 80078de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e0:	4a7a      	ldr	r2, [pc, #488]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 80078e2:	f043 0304 	orr.w	r3, r3, #4
 80078e6:	6713      	str	r3, [r2, #112]	; 0x70
 80078e8:	4b78      	ldr	r3, [pc, #480]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 80078ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ec:	4a77      	ldr	r2, [pc, #476]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 80078ee:	f043 0301 	orr.w	r3, r3, #1
 80078f2:	6713      	str	r3, [r2, #112]	; 0x70
 80078f4:	e00b      	b.n	800790e <HAL_RCC_OscConfig+0x32a>
 80078f6:	4b75      	ldr	r3, [pc, #468]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 80078f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fa:	4a74      	ldr	r2, [pc, #464]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 80078fc:	f023 0301 	bic.w	r3, r3, #1
 8007900:	6713      	str	r3, [r2, #112]	; 0x70
 8007902:	4b72      	ldr	r3, [pc, #456]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 8007904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007906:	4a71      	ldr	r2, [pc, #452]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 8007908:	f023 0304 	bic.w	r3, r3, #4
 800790c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d015      	beq.n	8007942 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007916:	f7fd f81b 	bl	8004950 <HAL_GetTick>
 800791a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800791c:	e00a      	b.n	8007934 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800791e:	f7fd f817 	bl	8004950 <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	f241 3288 	movw	r2, #5000	; 0x1388
 800792c:	4293      	cmp	r3, r2
 800792e:	d901      	bls.n	8007934 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e0c5      	b.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007934:	4b65      	ldr	r3, [pc, #404]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 8007936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007938:	f003 0302 	and.w	r3, r3, #2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d0ee      	beq.n	800791e <HAL_RCC_OscConfig+0x33a>
 8007940:	e014      	b.n	800796c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007942:	f7fd f805 	bl	8004950 <HAL_GetTick>
 8007946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007948:	e00a      	b.n	8007960 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800794a:	f7fd f801 	bl	8004950 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	f241 3288 	movw	r2, #5000	; 0x1388
 8007958:	4293      	cmp	r3, r2
 800795a:	d901      	bls.n	8007960 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800795c:	2303      	movs	r3, #3
 800795e:	e0af      	b.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007960:	4b5a      	ldr	r3, [pc, #360]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 8007962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1ee      	bne.n	800794a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800796c:	7dfb      	ldrb	r3, [r7, #23]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d105      	bne.n	800797e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007972:	4b56      	ldr	r3, [pc, #344]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	4a55      	ldr	r2, [pc, #340]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 8007978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800797c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 809b 	beq.w	8007abe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007988:	4b50      	ldr	r3, [pc, #320]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f003 030c 	and.w	r3, r3, #12
 8007990:	2b08      	cmp	r3, #8
 8007992:	d05c      	beq.n	8007a4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	2b02      	cmp	r3, #2
 800799a:	d141      	bne.n	8007a20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800799c:	4b4c      	ldr	r3, [pc, #304]	; (8007ad0 <HAL_RCC_OscConfig+0x4ec>)
 800799e:	2200      	movs	r2, #0
 80079a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079a2:	f7fc ffd5 	bl	8004950 <HAL_GetTick>
 80079a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079a8:	e008      	b.n	80079bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079aa:	f7fc ffd1 	bl	8004950 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d901      	bls.n	80079bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e081      	b.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079bc:	4b43      	ldr	r3, [pc, #268]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1f0      	bne.n	80079aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	69da      	ldr	r2, [r3, #28]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	431a      	orrs	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	019b      	lsls	r3, r3, #6
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079de:	085b      	lsrs	r3, r3, #1
 80079e0:	3b01      	subs	r3, #1
 80079e2:	041b      	lsls	r3, r3, #16
 80079e4:	431a      	orrs	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ea:	061b      	lsls	r3, r3, #24
 80079ec:	4937      	ldr	r1, [pc, #220]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079f2:	4b37      	ldr	r3, [pc, #220]	; (8007ad0 <HAL_RCC_OscConfig+0x4ec>)
 80079f4:	2201      	movs	r2, #1
 80079f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079f8:	f7fc ffaa 	bl	8004950 <HAL_GetTick>
 80079fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079fe:	e008      	b.n	8007a12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a00:	f7fc ffa6 	bl	8004950 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e056      	b.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a12:	4b2e      	ldr	r3, [pc, #184]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0f0      	beq.n	8007a00 <HAL_RCC_OscConfig+0x41c>
 8007a1e:	e04e      	b.n	8007abe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a20:	4b2b      	ldr	r3, [pc, #172]	; (8007ad0 <HAL_RCC_OscConfig+0x4ec>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a26:	f7fc ff93 	bl	8004950 <HAL_GetTick>
 8007a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a2c:	e008      	b.n	8007a40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a2e:	f7fc ff8f 	bl	8004950 <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d901      	bls.n	8007a40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e03f      	b.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a40:	4b22      	ldr	r3, [pc, #136]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1f0      	bne.n	8007a2e <HAL_RCC_OscConfig+0x44a>
 8007a4c:	e037      	b.n	8007abe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d101      	bne.n	8007a5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e032      	b.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a5a:	4b1c      	ldr	r3, [pc, #112]	; (8007acc <HAL_RCC_OscConfig+0x4e8>)
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d028      	beq.n	8007aba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d121      	bne.n	8007aba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d11a      	bne.n	8007aba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a90:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d111      	bne.n	8007aba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa0:	085b      	lsrs	r3, r3, #1
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d107      	bne.n	8007aba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d001      	beq.n	8007abe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e000      	b.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	40007000 	.word	0x40007000
 8007acc:	40023800 	.word	0x40023800
 8007ad0:	42470060 	.word	0x42470060

08007ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e0cc      	b.n	8007c82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ae8:	4b68      	ldr	r3, [pc, #416]	; (8007c8c <HAL_RCC_ClockConfig+0x1b8>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0307 	and.w	r3, r3, #7
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d90c      	bls.n	8007b10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007af6:	4b65      	ldr	r3, [pc, #404]	; (8007c8c <HAL_RCC_ClockConfig+0x1b8>)
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	b2d2      	uxtb	r2, r2
 8007afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007afe:	4b63      	ldr	r3, [pc, #396]	; (8007c8c <HAL_RCC_ClockConfig+0x1b8>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0307 	and.w	r3, r3, #7
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d001      	beq.n	8007b10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e0b8      	b.n	8007c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0302 	and.w	r3, r3, #2
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d020      	beq.n	8007b5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0304 	and.w	r3, r3, #4
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d005      	beq.n	8007b34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b28:	4b59      	ldr	r3, [pc, #356]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	4a58      	ldr	r2, [pc, #352]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0308 	and.w	r3, r3, #8
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d005      	beq.n	8007b4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b40:	4b53      	ldr	r3, [pc, #332]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	4a52      	ldr	r2, [pc, #328]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b4c:	4b50      	ldr	r3, [pc, #320]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	494d      	ldr	r1, [pc, #308]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d044      	beq.n	8007bf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d107      	bne.n	8007b82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b72:	4b47      	ldr	r3, [pc, #284]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d119      	bne.n	8007bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e07f      	b.n	8007c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d003      	beq.n	8007b92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d107      	bne.n	8007ba2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b92:	4b3f      	ldr	r3, [pc, #252]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d109      	bne.n	8007bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e06f      	b.n	8007c82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ba2:	4b3b      	ldr	r3, [pc, #236]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e067      	b.n	8007c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bb2:	4b37      	ldr	r3, [pc, #220]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f023 0203 	bic.w	r2, r3, #3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	4934      	ldr	r1, [pc, #208]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bc4:	f7fc fec4 	bl	8004950 <HAL_GetTick>
 8007bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bca:	e00a      	b.n	8007be2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bcc:	f7fc fec0 	bl	8004950 <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d901      	bls.n	8007be2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e04f      	b.n	8007c82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007be2:	4b2b      	ldr	r3, [pc, #172]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f003 020c 	and.w	r2, r3, #12
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d1eb      	bne.n	8007bcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007bf4:	4b25      	ldr	r3, [pc, #148]	; (8007c8c <HAL_RCC_ClockConfig+0x1b8>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0307 	and.w	r3, r3, #7
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d20c      	bcs.n	8007c1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c02:	4b22      	ldr	r3, [pc, #136]	; (8007c8c <HAL_RCC_ClockConfig+0x1b8>)
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	b2d2      	uxtb	r2, r2
 8007c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c0a:	4b20      	ldr	r3, [pc, #128]	; (8007c8c <HAL_RCC_ClockConfig+0x1b8>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0307 	and.w	r3, r3, #7
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d001      	beq.n	8007c1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e032      	b.n	8007c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d008      	beq.n	8007c3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c28:	4b19      	ldr	r3, [pc, #100]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	4916      	ldr	r1, [pc, #88]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0308 	and.w	r3, r3, #8
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d009      	beq.n	8007c5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c46:	4b12      	ldr	r3, [pc, #72]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	490e      	ldr	r1, [pc, #56]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c5a:	f000 f821 	bl	8007ca0 <HAL_RCC_GetSysClockFreq>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	091b      	lsrs	r3, r3, #4
 8007c66:	f003 030f 	and.w	r3, r3, #15
 8007c6a:	490a      	ldr	r1, [pc, #40]	; (8007c94 <HAL_RCC_ClockConfig+0x1c0>)
 8007c6c:	5ccb      	ldrb	r3, [r1, r3]
 8007c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c72:	4a09      	ldr	r2, [pc, #36]	; (8007c98 <HAL_RCC_ClockConfig+0x1c4>)
 8007c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c76:	4b09      	ldr	r3, [pc, #36]	; (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fc fe24 	bl	80048c8 <HAL_InitTick>

  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	40023c00 	.word	0x40023c00
 8007c90:	40023800 	.word	0x40023800
 8007c94:	0800a37c 	.word	0x0800a37c
 8007c98:	20000018 	.word	0x20000018
 8007c9c:	2000001c 	.word	0x2000001c

08007ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ca0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	607b      	str	r3, [r7, #4]
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cb8:	4b67      	ldr	r3, [pc, #412]	; (8007e58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f003 030c 	and.w	r3, r3, #12
 8007cc0:	2b08      	cmp	r3, #8
 8007cc2:	d00d      	beq.n	8007ce0 <HAL_RCC_GetSysClockFreq+0x40>
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	f200 80bd 	bhi.w	8007e44 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d003      	beq.n	8007cda <HAL_RCC_GetSysClockFreq+0x3a>
 8007cd2:	e0b7      	b.n	8007e44 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007cd4:	4b61      	ldr	r3, [pc, #388]	; (8007e5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007cd6:	60bb      	str	r3, [r7, #8]
       break;
 8007cd8:	e0b7      	b.n	8007e4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007cda:	4b61      	ldr	r3, [pc, #388]	; (8007e60 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007cdc:	60bb      	str	r3, [r7, #8]
      break;
 8007cde:	e0b4      	b.n	8007e4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ce0:	4b5d      	ldr	r3, [pc, #372]	; (8007e58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ce8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007cea:	4b5b      	ldr	r3, [pc, #364]	; (8007e58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d04d      	beq.n	8007d92 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cf6:	4b58      	ldr	r3, [pc, #352]	; (8007e58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	099b      	lsrs	r3, r3, #6
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	f04f 0300 	mov.w	r3, #0
 8007d02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d06:	f04f 0100 	mov.w	r1, #0
 8007d0a:	ea02 0800 	and.w	r8, r2, r0
 8007d0e:	ea03 0901 	and.w	r9, r3, r1
 8007d12:	4640      	mov	r0, r8
 8007d14:	4649      	mov	r1, r9
 8007d16:	f04f 0200 	mov.w	r2, #0
 8007d1a:	f04f 0300 	mov.w	r3, #0
 8007d1e:	014b      	lsls	r3, r1, #5
 8007d20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d24:	0142      	lsls	r2, r0, #5
 8007d26:	4610      	mov	r0, r2
 8007d28:	4619      	mov	r1, r3
 8007d2a:	ebb0 0008 	subs.w	r0, r0, r8
 8007d2e:	eb61 0109 	sbc.w	r1, r1, r9
 8007d32:	f04f 0200 	mov.w	r2, #0
 8007d36:	f04f 0300 	mov.w	r3, #0
 8007d3a:	018b      	lsls	r3, r1, #6
 8007d3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007d40:	0182      	lsls	r2, r0, #6
 8007d42:	1a12      	subs	r2, r2, r0
 8007d44:	eb63 0301 	sbc.w	r3, r3, r1
 8007d48:	f04f 0000 	mov.w	r0, #0
 8007d4c:	f04f 0100 	mov.w	r1, #0
 8007d50:	00d9      	lsls	r1, r3, #3
 8007d52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d56:	00d0      	lsls	r0, r2, #3
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	eb12 0208 	adds.w	r2, r2, r8
 8007d60:	eb43 0309 	adc.w	r3, r3, r9
 8007d64:	f04f 0000 	mov.w	r0, #0
 8007d68:	f04f 0100 	mov.w	r1, #0
 8007d6c:	0259      	lsls	r1, r3, #9
 8007d6e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007d72:	0250      	lsls	r0, r2, #9
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	f04f 0300 	mov.w	r3, #0
 8007d84:	f7f9 f812 	bl	8000dac <__aeabi_uldivmod>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	60fb      	str	r3, [r7, #12]
 8007d90:	e04a      	b.n	8007e28 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d92:	4b31      	ldr	r3, [pc, #196]	; (8007e58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	099b      	lsrs	r3, r3, #6
 8007d98:	461a      	mov	r2, r3
 8007d9a:	f04f 0300 	mov.w	r3, #0
 8007d9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007da2:	f04f 0100 	mov.w	r1, #0
 8007da6:	ea02 0400 	and.w	r4, r2, r0
 8007daa:	ea03 0501 	and.w	r5, r3, r1
 8007dae:	4620      	mov	r0, r4
 8007db0:	4629      	mov	r1, r5
 8007db2:	f04f 0200 	mov.w	r2, #0
 8007db6:	f04f 0300 	mov.w	r3, #0
 8007dba:	014b      	lsls	r3, r1, #5
 8007dbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007dc0:	0142      	lsls	r2, r0, #5
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	1b00      	subs	r0, r0, r4
 8007dc8:	eb61 0105 	sbc.w	r1, r1, r5
 8007dcc:	f04f 0200 	mov.w	r2, #0
 8007dd0:	f04f 0300 	mov.w	r3, #0
 8007dd4:	018b      	lsls	r3, r1, #6
 8007dd6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007dda:	0182      	lsls	r2, r0, #6
 8007ddc:	1a12      	subs	r2, r2, r0
 8007dde:	eb63 0301 	sbc.w	r3, r3, r1
 8007de2:	f04f 0000 	mov.w	r0, #0
 8007de6:	f04f 0100 	mov.w	r1, #0
 8007dea:	00d9      	lsls	r1, r3, #3
 8007dec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007df0:	00d0      	lsls	r0, r2, #3
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	1912      	adds	r2, r2, r4
 8007df8:	eb45 0303 	adc.w	r3, r5, r3
 8007dfc:	f04f 0000 	mov.w	r0, #0
 8007e00:	f04f 0100 	mov.w	r1, #0
 8007e04:	0299      	lsls	r1, r3, #10
 8007e06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007e0a:	0290      	lsls	r0, r2, #10
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4610      	mov	r0, r2
 8007e12:	4619      	mov	r1, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	461a      	mov	r2, r3
 8007e18:	f04f 0300 	mov.w	r3, #0
 8007e1c:	f7f8 ffc6 	bl	8000dac <__aeabi_uldivmod>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	4613      	mov	r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e28:	4b0b      	ldr	r3, [pc, #44]	; (8007e58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	0c1b      	lsrs	r3, r3, #16
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	3301      	adds	r3, #1
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e40:	60bb      	str	r3, [r7, #8]
      break;
 8007e42:	e002      	b.n	8007e4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e44:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007e46:	60bb      	str	r3, [r7, #8]
      break;
 8007e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007e56:	bf00      	nop
 8007e58:	40023800 	.word	0x40023800
 8007e5c:	00f42400 	.word	0x00f42400
 8007e60:	007a1200 	.word	0x007a1200

08007e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e68:	4b03      	ldr	r3, [pc, #12]	; (8007e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	20000018 	.word	0x20000018

08007e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e80:	f7ff fff0 	bl	8007e64 <HAL_RCC_GetHCLKFreq>
 8007e84:	4602      	mov	r2, r0
 8007e86:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	0a9b      	lsrs	r3, r3, #10
 8007e8c:	f003 0307 	and.w	r3, r3, #7
 8007e90:	4903      	ldr	r1, [pc, #12]	; (8007ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e92:	5ccb      	ldrb	r3, [r1, r3]
 8007e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	40023800 	.word	0x40023800
 8007ea0:	0800a38c 	.word	0x0800a38c

08007ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ea8:	f7ff ffdc 	bl	8007e64 <HAL_RCC_GetHCLKFreq>
 8007eac:	4602      	mov	r2, r0
 8007eae:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	0b5b      	lsrs	r3, r3, #13
 8007eb4:	f003 0307 	and.w	r3, r3, #7
 8007eb8:	4903      	ldr	r1, [pc, #12]	; (8007ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007eba:	5ccb      	ldrb	r3, [r1, r3]
 8007ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	40023800 	.word	0x40023800
 8007ec8:	0800a38c 	.word	0x0800a38c

08007ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e041      	b.n	8007f62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d106      	bne.n	8007ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7fc faaa 	bl	800444c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3304      	adds	r3, #4
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	f000 fdda 	bl	8008ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
	...

08007f6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d001      	beq.n	8007f84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e03c      	b.n	8007ffe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2202      	movs	r2, #2
 8007f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a1e      	ldr	r2, [pc, #120]	; (800800c <HAL_TIM_Base_Start+0xa0>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d018      	beq.n	8007fc8 <HAL_TIM_Base_Start+0x5c>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f9e:	d013      	beq.n	8007fc8 <HAL_TIM_Base_Start+0x5c>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a1a      	ldr	r2, [pc, #104]	; (8008010 <HAL_TIM_Base_Start+0xa4>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00e      	beq.n	8007fc8 <HAL_TIM_Base_Start+0x5c>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a19      	ldr	r2, [pc, #100]	; (8008014 <HAL_TIM_Base_Start+0xa8>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d009      	beq.n	8007fc8 <HAL_TIM_Base_Start+0x5c>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a17      	ldr	r2, [pc, #92]	; (8008018 <HAL_TIM_Base_Start+0xac>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d004      	beq.n	8007fc8 <HAL_TIM_Base_Start+0x5c>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a16      	ldr	r2, [pc, #88]	; (800801c <HAL_TIM_Base_Start+0xb0>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d111      	bne.n	8007fec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f003 0307 	and.w	r3, r3, #7
 8007fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b06      	cmp	r3, #6
 8007fd8:	d010      	beq.n	8007ffc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f042 0201 	orr.w	r2, r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fea:	e007      	b.n	8007ffc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f042 0201 	orr.w	r2, r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	40010000 	.word	0x40010000
 8008010:	40000400 	.word	0x40000400
 8008014:	40000800 	.word	0x40000800
 8008018:	40000c00 	.word	0x40000c00
 800801c:	40014000 	.word	0x40014000

08008020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b01      	cmp	r3, #1
 8008032:	d001      	beq.n	8008038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e044      	b.n	80080c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2202      	movs	r2, #2
 800803c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68da      	ldr	r2, [r3, #12]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0201 	orr.w	r2, r2, #1
 800804e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a1e      	ldr	r2, [pc, #120]	; (80080d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d018      	beq.n	800808c <HAL_TIM_Base_Start_IT+0x6c>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008062:	d013      	beq.n	800808c <HAL_TIM_Base_Start_IT+0x6c>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a1a      	ldr	r2, [pc, #104]	; (80080d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d00e      	beq.n	800808c <HAL_TIM_Base_Start_IT+0x6c>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a19      	ldr	r2, [pc, #100]	; (80080d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d009      	beq.n	800808c <HAL_TIM_Base_Start_IT+0x6c>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a17      	ldr	r2, [pc, #92]	; (80080dc <HAL_TIM_Base_Start_IT+0xbc>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d004      	beq.n	800808c <HAL_TIM_Base_Start_IT+0x6c>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a16      	ldr	r2, [pc, #88]	; (80080e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d111      	bne.n	80080b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f003 0307 	and.w	r3, r3, #7
 8008096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b06      	cmp	r3, #6
 800809c:	d010      	beq.n	80080c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f042 0201 	orr.w	r2, r2, #1
 80080ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ae:	e007      	b.n	80080c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0201 	orr.w	r2, r2, #1
 80080be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	40010000 	.word	0x40010000
 80080d4:	40000400 	.word	0x40000400
 80080d8:	40000800 	.word	0x40000800
 80080dc:	40000c00 	.word	0x40000c00
 80080e0:	40014000 	.word	0x40014000

080080e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e041      	b.n	800817a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d106      	bne.n	8008110 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f839 	bl	8008182 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2202      	movs	r2, #2
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	3304      	adds	r3, #4
 8008120:	4619      	mov	r1, r3
 8008122:	4610      	mov	r0, r2
 8008124:	f000 fcce 	bl	8008ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800818a:	bf00      	nop
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
	...

08008198 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d109      	bne.n	80081bc <HAL_TIM_PWM_Start+0x24>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	bf14      	ite	ne
 80081b4:	2301      	movne	r3, #1
 80081b6:	2300      	moveq	r3, #0
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	e022      	b.n	8008202 <HAL_TIM_PWM_Start+0x6a>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2b04      	cmp	r3, #4
 80081c0:	d109      	bne.n	80081d6 <HAL_TIM_PWM_Start+0x3e>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	bf14      	ite	ne
 80081ce:	2301      	movne	r3, #1
 80081d0:	2300      	moveq	r3, #0
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	e015      	b.n	8008202 <HAL_TIM_PWM_Start+0x6a>
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b08      	cmp	r3, #8
 80081da:	d109      	bne.n	80081f0 <HAL_TIM_PWM_Start+0x58>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	bf14      	ite	ne
 80081e8:	2301      	movne	r3, #1
 80081ea:	2300      	moveq	r3, #0
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	e008      	b.n	8008202 <HAL_TIM_PWM_Start+0x6a>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	bf14      	ite	ne
 80081fc:	2301      	movne	r3, #1
 80081fe:	2300      	moveq	r3, #0
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e068      	b.n	80082dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d104      	bne.n	800821a <HAL_TIM_PWM_Start+0x82>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008218:	e013      	b.n	8008242 <HAL_TIM_PWM_Start+0xaa>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b04      	cmp	r3, #4
 800821e:	d104      	bne.n	800822a <HAL_TIM_PWM_Start+0x92>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2202      	movs	r2, #2
 8008224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008228:	e00b      	b.n	8008242 <HAL_TIM_PWM_Start+0xaa>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b08      	cmp	r3, #8
 800822e:	d104      	bne.n	800823a <HAL_TIM_PWM_Start+0xa2>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2202      	movs	r2, #2
 8008234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008238:	e003      	b.n	8008242 <HAL_TIM_PWM_Start+0xaa>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2202      	movs	r2, #2
 800823e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2201      	movs	r2, #1
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	4618      	mov	r0, r3
 800824c:	f000 fee0 	bl	8009010 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a23      	ldr	r2, [pc, #140]	; (80082e4 <HAL_TIM_PWM_Start+0x14c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d107      	bne.n	800826a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008268:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a1d      	ldr	r2, [pc, #116]	; (80082e4 <HAL_TIM_PWM_Start+0x14c>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d018      	beq.n	80082a6 <HAL_TIM_PWM_Start+0x10e>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800827c:	d013      	beq.n	80082a6 <HAL_TIM_PWM_Start+0x10e>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a19      	ldr	r2, [pc, #100]	; (80082e8 <HAL_TIM_PWM_Start+0x150>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d00e      	beq.n	80082a6 <HAL_TIM_PWM_Start+0x10e>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a17      	ldr	r2, [pc, #92]	; (80082ec <HAL_TIM_PWM_Start+0x154>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d009      	beq.n	80082a6 <HAL_TIM_PWM_Start+0x10e>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a16      	ldr	r2, [pc, #88]	; (80082f0 <HAL_TIM_PWM_Start+0x158>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d004      	beq.n	80082a6 <HAL_TIM_PWM_Start+0x10e>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a14      	ldr	r2, [pc, #80]	; (80082f4 <HAL_TIM_PWM_Start+0x15c>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d111      	bne.n	80082ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f003 0307 	and.w	r3, r3, #7
 80082b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b06      	cmp	r3, #6
 80082b6:	d010      	beq.n	80082da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f042 0201 	orr.w	r2, r2, #1
 80082c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082c8:	e007      	b.n	80082da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f042 0201 	orr.w	r2, r2, #1
 80082d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	40010000 	.word	0x40010000
 80082e8:	40000400 	.word	0x40000400
 80082ec:	40000800 	.word	0x40000800
 80082f0:	40000c00 	.word	0x40000c00
 80082f4:	40014000 	.word	0x40014000

080082f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e097      	b.n	800843c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	d106      	bne.n	8008326 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7fc f84b 	bl	80043bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2202      	movs	r2, #2
 800832a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	6812      	ldr	r2, [r2, #0]
 8008338:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800833c:	f023 0307 	bic.w	r3, r3, #7
 8008340:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3304      	adds	r3, #4
 800834a:	4619      	mov	r1, r3
 800834c:	4610      	mov	r0, r2
 800834e:	f000 fbb9 	bl	8008ac4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6a1b      	ldr	r3, [r3, #32]
 8008368:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	4313      	orrs	r3, r2
 8008372:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800837a:	f023 0303 	bic.w	r3, r3, #3
 800837e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	689a      	ldr	r2, [r3, #8]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	021b      	lsls	r3, r3, #8
 800838a:	4313      	orrs	r3, r2
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	4313      	orrs	r3, r2
 8008390:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008398:	f023 030c 	bic.w	r3, r3, #12
 800839c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	021b      	lsls	r3, r3, #8
 80083b4:	4313      	orrs	r3, r2
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	011a      	lsls	r2, r3, #4
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	031b      	lsls	r3, r3, #12
 80083c8:	4313      	orrs	r3, r2
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80083d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80083de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	011b      	lsls	r3, r3, #4
 80083ea:	4313      	orrs	r3, r2
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3718      	adds	r7, #24
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008454:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800845c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008464:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800846c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d110      	bne.n	8008496 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008474:	7bfb      	ldrb	r3, [r7, #15]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d102      	bne.n	8008480 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800847a:	7b7b      	ldrb	r3, [r7, #13]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d001      	beq.n	8008484 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e069      	b.n	8008558 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2202      	movs	r2, #2
 8008488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008494:	e031      	b.n	80084fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2b04      	cmp	r3, #4
 800849a:	d110      	bne.n	80084be <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800849c:	7bbb      	ldrb	r3, [r7, #14]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d102      	bne.n	80084a8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80084a2:	7b3b      	ldrb	r3, [r7, #12]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d001      	beq.n	80084ac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e055      	b.n	8008558 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2202      	movs	r2, #2
 80084b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084bc:	e01d      	b.n	80084fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084be:	7bfb      	ldrb	r3, [r7, #15]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d108      	bne.n	80084d6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d105      	bne.n	80084d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084ca:	7b7b      	ldrb	r3, [r7, #13]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d102      	bne.n	80084d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80084d0:	7b3b      	ldrb	r3, [r7, #12]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d001      	beq.n	80084da <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e03e      	b.n	8008558 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2202      	movs	r2, #2
 80084de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2202      	movs	r2, #2
 80084e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2202      	movs	r2, #2
 80084ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2202      	movs	r2, #2
 80084f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d003      	beq.n	8008508 <HAL_TIM_Encoder_Start+0xc4>
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2b04      	cmp	r3, #4
 8008504:	d008      	beq.n	8008518 <HAL_TIM_Encoder_Start+0xd4>
 8008506:	e00f      	b.n	8008528 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2201      	movs	r2, #1
 800850e:	2100      	movs	r1, #0
 8008510:	4618      	mov	r0, r3
 8008512:	f000 fd7d 	bl	8009010 <TIM_CCxChannelCmd>
      break;
 8008516:	e016      	b.n	8008546 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2201      	movs	r2, #1
 800851e:	2104      	movs	r1, #4
 8008520:	4618      	mov	r0, r3
 8008522:	f000 fd75 	bl	8009010 <TIM_CCxChannelCmd>
      break;
 8008526:	e00e      	b.n	8008546 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2201      	movs	r2, #1
 800852e:	2100      	movs	r1, #0
 8008530:	4618      	mov	r0, r3
 8008532:	f000 fd6d 	bl	8009010 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2201      	movs	r2, #1
 800853c:	2104      	movs	r1, #4
 800853e:	4618      	mov	r0, r3
 8008540:	f000 fd66 	bl	8009010 <TIM_CCxChannelCmd>
      break;
 8008544:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f042 0201 	orr.w	r2, r2, #1
 8008554:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	f003 0302 	and.w	r3, r3, #2
 8008572:	2b02      	cmp	r3, #2
 8008574:	d122      	bne.n	80085bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	f003 0302 	and.w	r3, r3, #2
 8008580:	2b02      	cmp	r3, #2
 8008582:	d11b      	bne.n	80085bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f06f 0202 	mvn.w	r2, #2
 800858c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	f003 0303 	and.w	r3, r3, #3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fa70 	bl	8008a88 <HAL_TIM_IC_CaptureCallback>
 80085a8:	e005      	b.n	80085b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fa62 	bl	8008a74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fa73 	bl	8008a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	f003 0304 	and.w	r3, r3, #4
 80085c6:	2b04      	cmp	r3, #4
 80085c8:	d122      	bne.n	8008610 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	f003 0304 	and.w	r3, r3, #4
 80085d4:	2b04      	cmp	r3, #4
 80085d6:	d11b      	bne.n	8008610 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f06f 0204 	mvn.w	r2, #4
 80085e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2202      	movs	r2, #2
 80085e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d003      	beq.n	80085fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fa46 	bl	8008a88 <HAL_TIM_IC_CaptureCallback>
 80085fc:	e005      	b.n	800860a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fa38 	bl	8008a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fa49 	bl	8008a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	f003 0308 	and.w	r3, r3, #8
 800861a:	2b08      	cmp	r3, #8
 800861c:	d122      	bne.n	8008664 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	f003 0308 	and.w	r3, r3, #8
 8008628:	2b08      	cmp	r3, #8
 800862a:	d11b      	bne.n	8008664 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f06f 0208 	mvn.w	r2, #8
 8008634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2204      	movs	r2, #4
 800863a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	f003 0303 	and.w	r3, r3, #3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d003      	beq.n	8008652 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fa1c 	bl	8008a88 <HAL_TIM_IC_CaptureCallback>
 8008650:	e005      	b.n	800865e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fa0e 	bl	8008a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fa1f 	bl	8008a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	f003 0310 	and.w	r3, r3, #16
 800866e:	2b10      	cmp	r3, #16
 8008670:	d122      	bne.n	80086b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	f003 0310 	and.w	r3, r3, #16
 800867c:	2b10      	cmp	r3, #16
 800867e:	d11b      	bne.n	80086b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f06f 0210 	mvn.w	r2, #16
 8008688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2208      	movs	r2, #8
 800868e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	69db      	ldr	r3, [r3, #28]
 8008696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f9f2 	bl	8008a88 <HAL_TIM_IC_CaptureCallback>
 80086a4:	e005      	b.n	80086b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f9e4 	bl	8008a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f9f5 	bl	8008a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d10e      	bne.n	80086e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d107      	bne.n	80086e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f06f 0201 	mvn.w	r2, #1
 80086dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7f9 fa10 	bl	8001b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ee:	2b80      	cmp	r3, #128	; 0x80
 80086f0:	d10e      	bne.n	8008710 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086fc:	2b80      	cmp	r3, #128	; 0x80
 80086fe:	d107      	bne.n	8008710 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fd1e 	bl	800914c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871a:	2b40      	cmp	r3, #64	; 0x40
 800871c:	d10e      	bne.n	800873c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008728:	2b40      	cmp	r3, #64	; 0x40
 800872a:	d107      	bne.n	800873c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f9ba 	bl	8008ab0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	f003 0320 	and.w	r3, r3, #32
 8008746:	2b20      	cmp	r3, #32
 8008748:	d10e      	bne.n	8008768 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	f003 0320 	and.w	r3, r3, #32
 8008754:	2b20      	cmp	r3, #32
 8008756:	d107      	bne.n	8008768 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f06f 0220 	mvn.w	r2, #32
 8008760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fce8 	bl	8009138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008768:	bf00      	nop
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008782:	2b01      	cmp	r3, #1
 8008784:	d101      	bne.n	800878a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008786:	2302      	movs	r3, #2
 8008788:	e0ac      	b.n	80088e4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b0c      	cmp	r3, #12
 8008796:	f200 809f 	bhi.w	80088d8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800879a:	a201      	add	r2, pc, #4	; (adr r2, 80087a0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800879c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a0:	080087d5 	.word	0x080087d5
 80087a4:	080088d9 	.word	0x080088d9
 80087a8:	080088d9 	.word	0x080088d9
 80087ac:	080088d9 	.word	0x080088d9
 80087b0:	08008815 	.word	0x08008815
 80087b4:	080088d9 	.word	0x080088d9
 80087b8:	080088d9 	.word	0x080088d9
 80087bc:	080088d9 	.word	0x080088d9
 80087c0:	08008857 	.word	0x08008857
 80087c4:	080088d9 	.word	0x080088d9
 80087c8:	080088d9 	.word	0x080088d9
 80087cc:	080088d9 	.word	0x080088d9
 80087d0:	08008897 	.word	0x08008897
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68b9      	ldr	r1, [r7, #8]
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 f9f2 	bl	8008bc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	699a      	ldr	r2, [r3, #24]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f042 0208 	orr.w	r2, r2, #8
 80087ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	699a      	ldr	r2, [r3, #24]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f022 0204 	bic.w	r2, r2, #4
 80087fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6999      	ldr	r1, [r3, #24]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	691a      	ldr	r2, [r3, #16]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	619a      	str	r2, [r3, #24]
      break;
 8008812:	e062      	b.n	80088da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68b9      	ldr	r1, [r7, #8]
 800881a:	4618      	mov	r0, r3
 800881c:	f000 fa38 	bl	8008c90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	699a      	ldr	r2, [r3, #24]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800882e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	699a      	ldr	r2, [r3, #24]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800883e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6999      	ldr	r1, [r3, #24]
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	021a      	lsls	r2, r3, #8
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	430a      	orrs	r2, r1
 8008852:	619a      	str	r2, [r3, #24]
      break;
 8008854:	e041      	b.n	80088da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	4618      	mov	r0, r3
 800885e:	f000 fa83 	bl	8008d68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	69da      	ldr	r2, [r3, #28]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f042 0208 	orr.w	r2, r2, #8
 8008870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	69da      	ldr	r2, [r3, #28]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f022 0204 	bic.w	r2, r2, #4
 8008880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	69d9      	ldr	r1, [r3, #28]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	691a      	ldr	r2, [r3, #16]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	61da      	str	r2, [r3, #28]
      break;
 8008894:	e021      	b.n	80088da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68b9      	ldr	r1, [r7, #8]
 800889c:	4618      	mov	r0, r3
 800889e:	f000 facd 	bl	8008e3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	69da      	ldr	r2, [r3, #28]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	69da      	ldr	r2, [r3, #28]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	69d9      	ldr	r1, [r3, #28]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	021a      	lsls	r2, r3, #8
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	61da      	str	r2, [r3, #28]
      break;
 80088d6:	e000      	b.n	80088da <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80088d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d101      	bne.n	8008904 <HAL_TIM_ConfigClockSource+0x18>
 8008900:	2302      	movs	r3, #2
 8008902:	e0b3      	b.n	8008a6c <HAL_TIM_ConfigClockSource+0x180>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2202      	movs	r2, #2
 8008910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008922:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800892a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800893c:	d03e      	beq.n	80089bc <HAL_TIM_ConfigClockSource+0xd0>
 800893e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008942:	f200 8087 	bhi.w	8008a54 <HAL_TIM_ConfigClockSource+0x168>
 8008946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800894a:	f000 8085 	beq.w	8008a58 <HAL_TIM_ConfigClockSource+0x16c>
 800894e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008952:	d87f      	bhi.n	8008a54 <HAL_TIM_ConfigClockSource+0x168>
 8008954:	2b70      	cmp	r3, #112	; 0x70
 8008956:	d01a      	beq.n	800898e <HAL_TIM_ConfigClockSource+0xa2>
 8008958:	2b70      	cmp	r3, #112	; 0x70
 800895a:	d87b      	bhi.n	8008a54 <HAL_TIM_ConfigClockSource+0x168>
 800895c:	2b60      	cmp	r3, #96	; 0x60
 800895e:	d050      	beq.n	8008a02 <HAL_TIM_ConfigClockSource+0x116>
 8008960:	2b60      	cmp	r3, #96	; 0x60
 8008962:	d877      	bhi.n	8008a54 <HAL_TIM_ConfigClockSource+0x168>
 8008964:	2b50      	cmp	r3, #80	; 0x50
 8008966:	d03c      	beq.n	80089e2 <HAL_TIM_ConfigClockSource+0xf6>
 8008968:	2b50      	cmp	r3, #80	; 0x50
 800896a:	d873      	bhi.n	8008a54 <HAL_TIM_ConfigClockSource+0x168>
 800896c:	2b40      	cmp	r3, #64	; 0x40
 800896e:	d058      	beq.n	8008a22 <HAL_TIM_ConfigClockSource+0x136>
 8008970:	2b40      	cmp	r3, #64	; 0x40
 8008972:	d86f      	bhi.n	8008a54 <HAL_TIM_ConfigClockSource+0x168>
 8008974:	2b30      	cmp	r3, #48	; 0x30
 8008976:	d064      	beq.n	8008a42 <HAL_TIM_ConfigClockSource+0x156>
 8008978:	2b30      	cmp	r3, #48	; 0x30
 800897a:	d86b      	bhi.n	8008a54 <HAL_TIM_ConfigClockSource+0x168>
 800897c:	2b20      	cmp	r3, #32
 800897e:	d060      	beq.n	8008a42 <HAL_TIM_ConfigClockSource+0x156>
 8008980:	2b20      	cmp	r3, #32
 8008982:	d867      	bhi.n	8008a54 <HAL_TIM_ConfigClockSource+0x168>
 8008984:	2b00      	cmp	r3, #0
 8008986:	d05c      	beq.n	8008a42 <HAL_TIM_ConfigClockSource+0x156>
 8008988:	2b10      	cmp	r3, #16
 800898a:	d05a      	beq.n	8008a42 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800898c:	e062      	b.n	8008a54 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6818      	ldr	r0, [r3, #0]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	6899      	ldr	r1, [r3, #8]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	685a      	ldr	r2, [r3, #4]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	f000 fb17 	bl	8008fd0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80089b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	609a      	str	r2, [r3, #8]
      break;
 80089ba:	e04e      	b.n	8008a5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	6899      	ldr	r1, [r3, #8]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f000 fb00 	bl	8008fd0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	689a      	ldr	r2, [r3, #8]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089de:	609a      	str	r2, [r3, #8]
      break;
 80089e0:	e03b      	b.n	8008a5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	6859      	ldr	r1, [r3, #4]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	461a      	mov	r2, r3
 80089f0:	f000 fa74 	bl	8008edc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2150      	movs	r1, #80	; 0x50
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 facd 	bl	8008f9a <TIM_ITRx_SetConfig>
      break;
 8008a00:	e02b      	b.n	8008a5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6818      	ldr	r0, [r3, #0]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	6859      	ldr	r1, [r3, #4]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	f000 fa93 	bl	8008f3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2160      	movs	r1, #96	; 0x60
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 fabd 	bl	8008f9a <TIM_ITRx_SetConfig>
      break;
 8008a20:	e01b      	b.n	8008a5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6818      	ldr	r0, [r3, #0]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	6859      	ldr	r1, [r3, #4]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	f000 fa54 	bl	8008edc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2140      	movs	r1, #64	; 0x40
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 faad 	bl	8008f9a <TIM_ITRx_SetConfig>
      break;
 8008a40:	e00b      	b.n	8008a5a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	f000 faa4 	bl	8008f9a <TIM_ITRx_SetConfig>
        break;
 8008a52:	e002      	b.n	8008a5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008a54:	bf00      	nop
 8008a56:	e000      	b.n	8008a5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008a58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a90:	bf00      	nop
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a34      	ldr	r2, [pc, #208]	; (8008ba8 <TIM_Base_SetConfig+0xe4>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d00f      	beq.n	8008afc <TIM_Base_SetConfig+0x38>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ae2:	d00b      	beq.n	8008afc <TIM_Base_SetConfig+0x38>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a31      	ldr	r2, [pc, #196]	; (8008bac <TIM_Base_SetConfig+0xe8>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d007      	beq.n	8008afc <TIM_Base_SetConfig+0x38>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a30      	ldr	r2, [pc, #192]	; (8008bb0 <TIM_Base_SetConfig+0xec>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d003      	beq.n	8008afc <TIM_Base_SetConfig+0x38>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a2f      	ldr	r2, [pc, #188]	; (8008bb4 <TIM_Base_SetConfig+0xf0>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d108      	bne.n	8008b0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a25      	ldr	r2, [pc, #148]	; (8008ba8 <TIM_Base_SetConfig+0xe4>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d01b      	beq.n	8008b4e <TIM_Base_SetConfig+0x8a>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b1c:	d017      	beq.n	8008b4e <TIM_Base_SetConfig+0x8a>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a22      	ldr	r2, [pc, #136]	; (8008bac <TIM_Base_SetConfig+0xe8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d013      	beq.n	8008b4e <TIM_Base_SetConfig+0x8a>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a21      	ldr	r2, [pc, #132]	; (8008bb0 <TIM_Base_SetConfig+0xec>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d00f      	beq.n	8008b4e <TIM_Base_SetConfig+0x8a>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a20      	ldr	r2, [pc, #128]	; (8008bb4 <TIM_Base_SetConfig+0xf0>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d00b      	beq.n	8008b4e <TIM_Base_SetConfig+0x8a>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a1f      	ldr	r2, [pc, #124]	; (8008bb8 <TIM_Base_SetConfig+0xf4>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d007      	beq.n	8008b4e <TIM_Base_SetConfig+0x8a>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a1e      	ldr	r2, [pc, #120]	; (8008bbc <TIM_Base_SetConfig+0xf8>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d003      	beq.n	8008b4e <TIM_Base_SetConfig+0x8a>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a1d      	ldr	r2, [pc, #116]	; (8008bc0 <TIM_Base_SetConfig+0xfc>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d108      	bne.n	8008b60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	689a      	ldr	r2, [r3, #8]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a08      	ldr	r2, [pc, #32]	; (8008ba8 <TIM_Base_SetConfig+0xe4>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d103      	bne.n	8008b94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	691a      	ldr	r2, [r3, #16]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	615a      	str	r2, [r3, #20]
}
 8008b9a:	bf00      	nop
 8008b9c:	3714      	adds	r7, #20
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	40010000 	.word	0x40010000
 8008bac:	40000400 	.word	0x40000400
 8008bb0:	40000800 	.word	0x40000800
 8008bb4:	40000c00 	.word	0x40000c00
 8008bb8:	40014000 	.word	0x40014000
 8008bbc:	40014400 	.word	0x40014400
 8008bc0:	40014800 	.word	0x40014800

08008bc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	f023 0201 	bic.w	r2, r3, #1
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f023 0303 	bic.w	r3, r3, #3
 8008bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f023 0302 	bic.w	r3, r3, #2
 8008c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a1c      	ldr	r2, [pc, #112]	; (8008c8c <TIM_OC1_SetConfig+0xc8>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d10c      	bne.n	8008c3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	f023 0308 	bic.w	r3, r3, #8
 8008c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	f023 0304 	bic.w	r3, r3, #4
 8008c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a13      	ldr	r2, [pc, #76]	; (8008c8c <TIM_OC1_SetConfig+0xc8>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d111      	bne.n	8008c66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	697a      	ldr	r2, [r7, #20]
 8008c7e:	621a      	str	r2, [r3, #32]
}
 8008c80:	bf00      	nop
 8008c82:	371c      	adds	r7, #28
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	40010000 	.word	0x40010000

08008c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	f023 0210 	bic.w	r2, r3, #16
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f023 0320 	bic.w	r3, r3, #32
 8008cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	011b      	lsls	r3, r3, #4
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a1e      	ldr	r2, [pc, #120]	; (8008d64 <TIM_OC2_SetConfig+0xd4>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d10d      	bne.n	8008d0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	011b      	lsls	r3, r3, #4
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a15      	ldr	r2, [pc, #84]	; (8008d64 <TIM_OC2_SetConfig+0xd4>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d113      	bne.n	8008d3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	621a      	str	r2, [r3, #32]
}
 8008d56:	bf00      	nop
 8008d58:	371c      	adds	r7, #28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	40010000 	.word	0x40010000

08008d68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b087      	sub	sp, #28
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f023 0303 	bic.w	r3, r3, #3
 8008d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	021b      	lsls	r3, r3, #8
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a1d      	ldr	r2, [pc, #116]	; (8008e38 <TIM_OC3_SetConfig+0xd0>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d10d      	bne.n	8008de2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	021b      	lsls	r3, r3, #8
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a14      	ldr	r2, [pc, #80]	; (8008e38 <TIM_OC3_SetConfig+0xd0>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d113      	bne.n	8008e12 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	011b      	lsls	r3, r3, #4
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	011b      	lsls	r3, r3, #4
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	621a      	str	r2, [r3, #32]
}
 8008e2c:	bf00      	nop
 8008e2e:	371c      	adds	r7, #28
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	40010000 	.word	0x40010000

08008e3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b087      	sub	sp, #28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a1b      	ldr	r3, [r3, #32]
 8008e4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	69db      	ldr	r3, [r3, #28]
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	021b      	lsls	r3, r3, #8
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	031b      	lsls	r3, r3, #12
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a10      	ldr	r2, [pc, #64]	; (8008ed8 <TIM_OC4_SetConfig+0x9c>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d109      	bne.n	8008eb0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ea2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	695b      	ldr	r3, [r3, #20]
 8008ea8:	019b      	lsls	r3, r3, #6
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	621a      	str	r2, [r3, #32]
}
 8008eca:	bf00      	nop
 8008ecc:	371c      	adds	r7, #28
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	40010000 	.word	0x40010000

08008edc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b087      	sub	sp, #28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6a1b      	ldr	r3, [r3, #32]
 8008eec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	f023 0201 	bic.w	r2, r3, #1
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	699b      	ldr	r3, [r3, #24]
 8008efe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	011b      	lsls	r3, r3, #4
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f023 030a 	bic.w	r3, r3, #10
 8008f18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	621a      	str	r2, [r3, #32]
}
 8008f2e:	bf00      	nop
 8008f30:	371c      	adds	r7, #28
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b087      	sub	sp, #28
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	60f8      	str	r0, [r7, #12]
 8008f42:	60b9      	str	r1, [r7, #8]
 8008f44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	f023 0210 	bic.w	r2, r3, #16
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6a1b      	ldr	r3, [r3, #32]
 8008f5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	031b      	lsls	r3, r3, #12
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	011b      	lsls	r3, r3, #4
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	697a      	ldr	r2, [r7, #20]
 8008f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	693a      	ldr	r2, [r7, #16]
 8008f8c:	621a      	str	r2, [r3, #32]
}
 8008f8e:	bf00      	nop
 8008f90:	371c      	adds	r7, #28
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr

08008f9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	b085      	sub	sp, #20
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	f043 0307 	orr.w	r3, r3, #7
 8008fbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	609a      	str	r2, [r3, #8]
}
 8008fc4:	bf00      	nop
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
 8008fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	021a      	lsls	r2, r3, #8
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	609a      	str	r2, [r3, #8]
}
 8009004:	bf00      	nop
 8009006:	371c      	adds	r7, #28
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009010:	b480      	push	{r7}
 8009012:	b087      	sub	sp, #28
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	f003 031f 	and.w	r3, r3, #31
 8009022:	2201      	movs	r2, #1
 8009024:	fa02 f303 	lsl.w	r3, r2, r3
 8009028:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6a1a      	ldr	r2, [r3, #32]
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	43db      	mvns	r3, r3
 8009032:	401a      	ands	r2, r3
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6a1a      	ldr	r2, [r3, #32]
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	f003 031f 	and.w	r3, r3, #31
 8009042:	6879      	ldr	r1, [r7, #4]
 8009044:	fa01 f303 	lsl.w	r3, r1, r3
 8009048:	431a      	orrs	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	621a      	str	r2, [r3, #32]
}
 800904e:	bf00      	nop
 8009050:	371c      	adds	r7, #28
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
	...

0800905c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800906c:	2b01      	cmp	r3, #1
 800906e:	d101      	bne.n	8009074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009070:	2302      	movs	r3, #2
 8009072:	e050      	b.n	8009116 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2202      	movs	r2, #2
 8009080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800909a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a1c      	ldr	r2, [pc, #112]	; (8009124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d018      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c0:	d013      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a18      	ldr	r2, [pc, #96]	; (8009128 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d00e      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a16      	ldr	r2, [pc, #88]	; (800912c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d009      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a15      	ldr	r2, [pc, #84]	; (8009130 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d004      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a13      	ldr	r2, [pc, #76]	; (8009134 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d10c      	bne.n	8009104 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	40010000 	.word	0x40010000
 8009128:	40000400 	.word	0x40000400
 800912c:	40000800 	.word	0x40000800
 8009130:	40000c00 	.word	0x40000c00
 8009134:	40014000 	.word	0x40014000

08009138 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d101      	bne.n	8009172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e03f      	b.n	80091f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009178:	b2db      	uxtb	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	d106      	bne.n	800918c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7fb f9d6 	bl	8004538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2224      	movs	r2, #36	; 0x24
 8009190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68da      	ldr	r2, [r3, #12]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fd51 	bl	8009c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	691a      	ldr	r2, [r3, #16]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	695a      	ldr	r2, [r3, #20]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68da      	ldr	r2, [r3, #12]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2220      	movs	r2, #32
 80091e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2220      	movs	r2, #32
 80091ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	4613      	mov	r3, r2
 8009208:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009210:	b2db      	uxtb	r3, r3
 8009212:	2b20      	cmp	r3, #32
 8009214:	d153      	bne.n	80092be <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d002      	beq.n	8009222 <HAL_UART_Transmit_DMA+0x26>
 800921c:	88fb      	ldrh	r3, [r7, #6]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e04c      	b.n	80092c0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800922c:	2b01      	cmp	r3, #1
 800922e:	d101      	bne.n	8009234 <HAL_UART_Transmit_DMA+0x38>
 8009230:	2302      	movs	r3, #2
 8009232:	e045      	b.n	80092c0 <HAL_UART_Transmit_DMA+0xc4>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	88fa      	ldrh	r2, [r7, #6]
 8009246:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	88fa      	ldrh	r2, [r7, #6]
 800924c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2221      	movs	r2, #33	; 0x21
 8009258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009260:	4a19      	ldr	r2, [pc, #100]	; (80092c8 <HAL_UART_Transmit_DMA+0xcc>)
 8009262:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009268:	4a18      	ldr	r2, [pc, #96]	; (80092cc <HAL_UART_Transmit_DMA+0xd0>)
 800926a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009270:	4a17      	ldr	r2, [pc, #92]	; (80092d0 <HAL_UART_Transmit_DMA+0xd4>)
 8009272:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009278:	2200      	movs	r2, #0
 800927a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800927c:	f107 0308 	add.w	r3, r7, #8
 8009280:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	6819      	ldr	r1, [r3, #0]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	3304      	adds	r3, #4
 8009290:	461a      	mov	r2, r3
 8009292:	88fb      	ldrh	r3, [r7, #6]
 8009294:	f7fb fd28 	bl	8004ce8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092a0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	695a      	ldr	r2, [r3, #20]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80092b8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	e000      	b.n	80092c0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80092be:	2302      	movs	r3, #2
  }
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	08009709 	.word	0x08009709
 80092cc:	0800975b 	.word	0x0800975b
 80092d0:	08009843 	.word	0x08009843

080092d4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	4613      	mov	r3, r2
 80092e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b20      	cmp	r3, #32
 80092ec:	d11d      	bne.n	800932a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <HAL_UART_Receive_DMA+0x26>
 80092f4:	88fb      	ldrh	r3, [r7, #6]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e016      	b.n	800932c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009304:	2b01      	cmp	r3, #1
 8009306:	d101      	bne.n	800930c <HAL_UART_Receive_DMA+0x38>
 8009308:	2302      	movs	r3, #2
 800930a:	e00f      	b.n	800932c <HAL_UART_Receive_DMA+0x58>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800931a:	88fb      	ldrh	r3, [r7, #6]
 800931c:	461a      	mov	r2, r3
 800931e:	68b9      	ldr	r1, [r7, #8]
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f000 fad9 	bl	80098d8 <UART_Start_Receive_DMA>
 8009326:	4603      	mov	r3, r0
 8009328:	e000      	b.n	800932c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800932a:	2302      	movs	r3, #2
  }
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b08a      	sub	sp, #40	; 0x28
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009354:	2300      	movs	r3, #0
 8009356:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009358:	2300      	movs	r3, #0
 800935a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935e:	f003 030f 	and.w	r3, r3, #15
 8009362:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10d      	bne.n	8009386 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800936a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936c:	f003 0320 	and.w	r3, r3, #32
 8009370:	2b00      	cmp	r3, #0
 8009372:	d008      	beq.n	8009386 <HAL_UART_IRQHandler+0x52>
 8009374:	6a3b      	ldr	r3, [r7, #32]
 8009376:	f003 0320 	and.w	r3, r3, #32
 800937a:	2b00      	cmp	r3, #0
 800937c:	d003      	beq.n	8009386 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fbcd 	bl	8009b1e <UART_Receive_IT>
      return;
 8009384:	e17c      	b.n	8009680 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 80b1 	beq.w	80094f0 <HAL_UART_IRQHandler+0x1bc>
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	2b00      	cmp	r3, #0
 8009396:	d105      	bne.n	80093a4 <HAL_UART_IRQHandler+0x70>
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f000 80a6 	beq.w	80094f0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00a      	beq.n	80093c4 <HAL_UART_IRQHandler+0x90>
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d005      	beq.n	80093c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093bc:	f043 0201 	orr.w	r2, r3, #1
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	f003 0304 	and.w	r3, r3, #4
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00a      	beq.n	80093e4 <HAL_UART_IRQHandler+0xb0>
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d005      	beq.n	80093e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093dc:	f043 0202 	orr.w	r2, r3, #2
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	f003 0302 	and.w	r3, r3, #2
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00a      	beq.n	8009404 <HAL_UART_IRQHandler+0xd0>
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d005      	beq.n	8009404 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fc:	f043 0204 	orr.w	r2, r3, #4
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009406:	f003 0308 	and.w	r3, r3, #8
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00f      	beq.n	800942e <HAL_UART_IRQHandler+0xfa>
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	f003 0320 	and.w	r3, r3, #32
 8009414:	2b00      	cmp	r3, #0
 8009416:	d104      	bne.n	8009422 <HAL_UART_IRQHandler+0xee>
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	2b00      	cmp	r3, #0
 8009420:	d005      	beq.n	800942e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	f043 0208 	orr.w	r2, r3, #8
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009432:	2b00      	cmp	r3, #0
 8009434:	f000 811f 	beq.w	8009676 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943a:	f003 0320 	and.w	r3, r3, #32
 800943e:	2b00      	cmp	r3, #0
 8009440:	d007      	beq.n	8009452 <HAL_UART_IRQHandler+0x11e>
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	f003 0320 	and.w	r3, r3, #32
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fb66 	bl	8009b1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	695b      	ldr	r3, [r3, #20]
 8009458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800945c:	2b40      	cmp	r3, #64	; 0x40
 800945e:	bf0c      	ite	eq
 8009460:	2301      	moveq	r3, #1
 8009462:	2300      	movne	r3, #0
 8009464:	b2db      	uxtb	r3, r3
 8009466:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946c:	f003 0308 	and.w	r3, r3, #8
 8009470:	2b00      	cmp	r3, #0
 8009472:	d102      	bne.n	800947a <HAL_UART_IRQHandler+0x146>
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d031      	beq.n	80094de <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 faa6 	bl	80099cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	695b      	ldr	r3, [r3, #20]
 8009486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800948a:	2b40      	cmp	r3, #64	; 0x40
 800948c:	d123      	bne.n	80094d6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	695a      	ldr	r2, [r3, #20]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800949c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d013      	beq.n	80094ce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094aa:	4a77      	ldr	r2, [pc, #476]	; (8009688 <HAL_UART_IRQHandler+0x354>)
 80094ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fb fce0 	bl	8004e78 <HAL_DMA_Abort_IT>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d016      	beq.n	80094ec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80094c8:	4610      	mov	r0, r2
 80094ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094cc:	e00e      	b.n	80094ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f904 	bl	80096dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094d4:	e00a      	b.n	80094ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f900 	bl	80096dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094dc:	e006      	b.n	80094ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f8fc 	bl	80096dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80094ea:	e0c4      	b.n	8009676 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ec:	bf00      	nop
    return;
 80094ee:	e0c2      	b.n	8009676 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	f040 80a2 	bne.w	800963e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	f003 0310 	and.w	r3, r3, #16
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 809c 	beq.w	800963e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009506:	6a3b      	ldr	r3, [r7, #32]
 8009508:	f003 0310 	and.w	r3, r3, #16
 800950c:	2b00      	cmp	r3, #0
 800950e:	f000 8096 	beq.w	800963e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	60fb      	str	r3, [r7, #12]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	60fb      	str	r3, [r7, #12]
 8009526:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009532:	2b40      	cmp	r3, #64	; 0x40
 8009534:	d14f      	bne.n	80095d6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009540:	8a3b      	ldrh	r3, [r7, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 8099 	beq.w	800967a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800954c:	8a3a      	ldrh	r2, [r7, #16]
 800954e:	429a      	cmp	r2, r3
 8009550:	f080 8093 	bcs.w	800967a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	8a3a      	ldrh	r2, [r7, #16]
 8009558:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955e:	69db      	ldr	r3, [r3, #28]
 8009560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009564:	d02b      	beq.n	80095be <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68da      	ldr	r2, [r3, #12]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009574:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	695a      	ldr	r2, [r3, #20]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f022 0201 	bic.w	r2, r2, #1
 8009584:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	695a      	ldr	r2, [r3, #20]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009594:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2220      	movs	r2, #32
 800959a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68da      	ldr	r2, [r3, #12]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f022 0210 	bic.w	r2, r2, #16
 80095b2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fb fbed 	bl	8004d98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f88e 	bl	80096f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80095d4:	e051      	b.n	800967a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095de:	b29b      	uxth	r3, r3
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d047      	beq.n	800967e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80095ee:	8a7b      	ldrh	r3, [r7, #18]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d044      	beq.n	800967e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68da      	ldr	r2, [r3, #12]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009602:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	695a      	ldr	r2, [r3, #20]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f022 0201 	bic.w	r2, r2, #1
 8009612:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2220      	movs	r2, #32
 8009618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68da      	ldr	r2, [r3, #12]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f022 0210 	bic.w	r2, r2, #16
 8009630:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009632:	8a7b      	ldrh	r3, [r7, #18]
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f85a 	bl	80096f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800963c:	e01f      	b.n	800967e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009644:	2b00      	cmp	r3, #0
 8009646:	d008      	beq.n	800965a <HAL_UART_IRQHandler+0x326>
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800964e:	2b00      	cmp	r3, #0
 8009650:	d003      	beq.n	800965a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f9fb 	bl	8009a4e <UART_Transmit_IT>
    return;
 8009658:	e012      	b.n	8009680 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00d      	beq.n	8009680 <HAL_UART_IRQHandler+0x34c>
 8009664:	6a3b      	ldr	r3, [r7, #32]
 8009666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800966a:	2b00      	cmp	r3, #0
 800966c:	d008      	beq.n	8009680 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fa3d 	bl	8009aee <UART_EndTransmit_IT>
    return;
 8009674:	e004      	b.n	8009680 <HAL_UART_IRQHandler+0x34c>
    return;
 8009676:	bf00      	nop
 8009678:	e002      	b.n	8009680 <HAL_UART_IRQHandler+0x34c>
      return;
 800967a:	bf00      	nop
 800967c:	e000      	b.n	8009680 <HAL_UART_IRQHandler+0x34c>
      return;
 800967e:	bf00      	nop
  }
}
 8009680:	3728      	adds	r7, #40	; 0x28
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	08009a27 	.word	0x08009a27

0800968c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009694:	bf00      	nop
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	460b      	mov	r3, r1
 80096fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009714:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009720:	2b00      	cmp	r3, #0
 8009722:	d113      	bne.n	800974c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2200      	movs	r2, #0
 8009728:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	695a      	ldr	r2, [r3, #20]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009738:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68da      	ldr	r2, [r3, #12]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009748:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800974a:	e002      	b.n	8009752 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f7ff ff9d 	bl	800968c <HAL_UART_TxCpltCallback>
}
 8009752:	bf00      	nop
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b084      	sub	sp, #16
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009766:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f7ff ff99 	bl	80096a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800976e:	bf00      	nop
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009782:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800978e:	2b00      	cmp	r3, #0
 8009790:	d12a      	bne.n	80097e8 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2200      	movs	r2, #0
 8009796:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68da      	ldr	r2, [r3, #12]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097a6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	695a      	ldr	r2, [r3, #20]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f022 0201 	bic.w	r2, r2, #1
 80097b6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	695a      	ldr	r2, [r3, #20]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097c6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2220      	movs	r2, #32
 80097cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d107      	bne.n	80097e8 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68da      	ldr	r2, [r3, #12]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f022 0210 	bic.w	r2, r2, #16
 80097e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d106      	bne.n	80097fe <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80097f4:	4619      	mov	r1, r3
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f7ff ff7a 	bl	80096f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80097fc:	e002      	b.n	8009804 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f7ff ff58 	bl	80096b4 <HAL_UART_RxCpltCallback>
}
 8009804:	bf00      	nop
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009818:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981e:	2b01      	cmp	r3, #1
 8009820:	d108      	bne.n	8009834 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009826:	085b      	lsrs	r3, r3, #1
 8009828:	b29b      	uxth	r3, r3
 800982a:	4619      	mov	r1, r3
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f7ff ff5f 	bl	80096f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009832:	e002      	b.n	800983a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f7ff ff47 	bl	80096c8 <HAL_UART_RxHalfCpltCallback>
}
 800983a:	bf00      	nop
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800984a:	2300      	movs	r3, #0
 800984c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009852:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	695b      	ldr	r3, [r3, #20]
 800985a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800985e:	2b80      	cmp	r3, #128	; 0x80
 8009860:	bf0c      	ite	eq
 8009862:	2301      	moveq	r3, #1
 8009864:	2300      	movne	r3, #0
 8009866:	b2db      	uxtb	r3, r3
 8009868:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b21      	cmp	r3, #33	; 0x21
 8009874:	d108      	bne.n	8009888 <UART_DMAError+0x46>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d005      	beq.n	8009888 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	2200      	movs	r2, #0
 8009880:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009882:	68b8      	ldr	r0, [r7, #8]
 8009884:	f000 f88c 	bl	80099a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	695b      	ldr	r3, [r3, #20]
 800988e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009892:	2b40      	cmp	r3, #64	; 0x40
 8009894:	bf0c      	ite	eq
 8009896:	2301      	moveq	r3, #1
 8009898:	2300      	movne	r3, #0
 800989a:	b2db      	uxtb	r3, r3
 800989c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	2b22      	cmp	r3, #34	; 0x22
 80098a8:	d108      	bne.n	80098bc <UART_DMAError+0x7a>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d005      	beq.n	80098bc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	2200      	movs	r2, #0
 80098b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80098b6:	68b8      	ldr	r0, [r7, #8]
 80098b8:	f000 f888 	bl	80099cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c0:	f043 0210 	orr.w	r2, r3, #16
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098c8:	68b8      	ldr	r0, [r7, #8]
 80098ca:	f7ff ff07 	bl	80096dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098ce:	bf00      	nop
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	4613      	mov	r3, r2
 80098e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	88fa      	ldrh	r2, [r7, #6]
 80098f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2222      	movs	r2, #34	; 0x22
 80098fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009904:	4a23      	ldr	r2, [pc, #140]	; (8009994 <UART_Start_Receive_DMA+0xbc>)
 8009906:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990c:	4a22      	ldr	r2, [pc, #136]	; (8009998 <UART_Start_Receive_DMA+0xc0>)
 800990e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009914:	4a21      	ldr	r2, [pc, #132]	; (800999c <UART_Start_Receive_DMA+0xc4>)
 8009916:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991c:	2200      	movs	r2, #0
 800991e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009920:	f107 0308 	add.w	r3, r7, #8
 8009924:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	3304      	adds	r3, #4
 8009930:	4619      	mov	r1, r3
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	88fb      	ldrh	r3, [r7, #6]
 8009938:	f7fb f9d6 	bl	8004ce8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800993c:	2300      	movs	r3, #0
 800993e:	613b      	str	r3, [r7, #16]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	613b      	str	r3, [r7, #16]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	613b      	str	r3, [r7, #16]
 8009950:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68da      	ldr	r2, [r3, #12]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009968:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	695a      	ldr	r2, [r3, #20]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f042 0201 	orr.w	r2, r2, #1
 8009978:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	695a      	ldr	r2, [r3, #20]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009988:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3718      	adds	r7, #24
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	08009777 	.word	0x08009777
 8009998:	0800980d 	.word	0x0800980d
 800999c:	08009843 	.word	0x08009843

080099a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68da      	ldr	r2, [r3, #12]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80099b6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2220      	movs	r2, #32
 80099bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68da      	ldr	r2, [r3, #12]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80099e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	695a      	ldr	r2, [r3, #20]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f022 0201 	bic.w	r2, r2, #1
 80099f2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d107      	bne.n	8009a0c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68da      	ldr	r2, [r3, #12]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f022 0210 	bic.w	r2, r2, #16
 8009a0a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2220      	movs	r2, #32
 8009a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009a1a:	bf00      	nop
 8009a1c:	370c      	adds	r7, #12
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr

08009a26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b084      	sub	sp, #16
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2200      	movs	r2, #0
 8009a38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f7ff fe4b 	bl	80096dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a46:	bf00      	nop
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b085      	sub	sp, #20
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	2b21      	cmp	r3, #33	; 0x21
 8009a60:	d13e      	bne.n	8009ae0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a6a:	d114      	bne.n	8009a96 <UART_Transmit_IT+0x48>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d110      	bne.n	8009a96 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
 8009a78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	1c9a      	adds	r2, r3, #2
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	621a      	str	r2, [r3, #32]
 8009a94:	e008      	b.n	8009aa8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	1c59      	adds	r1, r3, #1
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	6211      	str	r1, [r2, #32]
 8009aa0:	781a      	ldrb	r2, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10f      	bne.n	8009adc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68da      	ldr	r2, [r3, #12]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009aca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68da      	ldr	r2, [r3, #12]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ada:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	e000      	b.n	8009ae2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009ae0:	2302      	movs	r3, #2
  }
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3714      	adds	r7, #20
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b082      	sub	sp, #8
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68da      	ldr	r2, [r3, #12]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2220      	movs	r2, #32
 8009b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7ff fdbc 	bl	800968c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b084      	sub	sp, #16
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	2b22      	cmp	r3, #34	; 0x22
 8009b30:	f040 8087 	bne.w	8009c42 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b3c:	d117      	bne.n	8009b6e <UART_Receive_IT+0x50>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d113      	bne.n	8009b6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b46:	2300      	movs	r3, #0
 8009b48:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b66:	1c9a      	adds	r2, r3, #2
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	629a      	str	r2, [r3, #40]	; 0x28
 8009b6c:	e026      	b.n	8009bbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b72:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009b74:	2300      	movs	r3, #0
 8009b76:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b80:	d007      	beq.n	8009b92 <UART_Receive_IT+0x74>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10a      	bne.n	8009ba0 <UART_Receive_IT+0x82>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d106      	bne.n	8009ba0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	701a      	strb	r2, [r3, #0]
 8009b9e:	e008      	b.n	8009bb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bac:	b2da      	uxtb	r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	4619      	mov	r1, r3
 8009bca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d136      	bne.n	8009c3e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68da      	ldr	r2, [r3, #12]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f022 0220 	bic.w	r2, r2, #32
 8009bde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68da      	ldr	r2, [r3, #12]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	695a      	ldr	r2, [r3, #20]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f022 0201 	bic.w	r2, r2, #1
 8009bfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2220      	movs	r2, #32
 8009c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d10e      	bne.n	8009c2e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68da      	ldr	r2, [r3, #12]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f022 0210 	bic.w	r2, r2, #16
 8009c1e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c24:	4619      	mov	r1, r3
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff fd62 	bl	80096f0 <HAL_UARTEx_RxEventCallback>
 8009c2c:	e002      	b.n	8009c34 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7ff fd40 	bl	80096b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	e002      	b.n	8009c44 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	e000      	b.n	8009c44 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009c42:	2302      	movs	r3, #2
  }
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c50:	b09f      	sub	sp, #124	; 0x7c
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c62:	68d9      	ldr	r1, [r3, #12]
 8009c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	ea40 0301 	orr.w	r3, r0, r1
 8009c6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c70:	689a      	ldr	r2, [r3, #8]
 8009c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	431a      	orrs	r2, r3
 8009c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c7a:	695b      	ldr	r3, [r3, #20]
 8009c7c:	431a      	orrs	r2, r3
 8009c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009c90:	f021 010c 	bic.w	r1, r1, #12
 8009c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c9a:	430b      	orrs	r3, r1
 8009c9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	695b      	ldr	r3, [r3, #20]
 8009ca4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009caa:	6999      	ldr	r1, [r3, #24]
 8009cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	ea40 0301 	orr.w	r3, r0, r1
 8009cb4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	4bc5      	ldr	r3, [pc, #788]	; (8009fd0 <UART_SetConfig+0x384>)
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d004      	beq.n	8009cca <UART_SetConfig+0x7e>
 8009cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	4bc3      	ldr	r3, [pc, #780]	; (8009fd4 <UART_SetConfig+0x388>)
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d103      	bne.n	8009cd2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009cca:	f7fe f8eb 	bl	8007ea4 <HAL_RCC_GetPCLK2Freq>
 8009cce:	6778      	str	r0, [r7, #116]	; 0x74
 8009cd0:	e002      	b.n	8009cd8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009cd2:	f7fe f8d3 	bl	8007e7c <HAL_RCC_GetPCLK1Freq>
 8009cd6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cda:	69db      	ldr	r3, [r3, #28]
 8009cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ce0:	f040 80b6 	bne.w	8009e50 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ce4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ce6:	461c      	mov	r4, r3
 8009ce8:	f04f 0500 	mov.w	r5, #0
 8009cec:	4622      	mov	r2, r4
 8009cee:	462b      	mov	r3, r5
 8009cf0:	1891      	adds	r1, r2, r2
 8009cf2:	6439      	str	r1, [r7, #64]	; 0x40
 8009cf4:	415b      	adcs	r3, r3
 8009cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8009cf8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009cfc:	1912      	adds	r2, r2, r4
 8009cfe:	eb45 0303 	adc.w	r3, r5, r3
 8009d02:	f04f 0000 	mov.w	r0, #0
 8009d06:	f04f 0100 	mov.w	r1, #0
 8009d0a:	00d9      	lsls	r1, r3, #3
 8009d0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d10:	00d0      	lsls	r0, r2, #3
 8009d12:	4602      	mov	r2, r0
 8009d14:	460b      	mov	r3, r1
 8009d16:	1911      	adds	r1, r2, r4
 8009d18:	6639      	str	r1, [r7, #96]	; 0x60
 8009d1a:	416b      	adcs	r3, r5
 8009d1c:	667b      	str	r3, [r7, #100]	; 0x64
 8009d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	461a      	mov	r2, r3
 8009d24:	f04f 0300 	mov.w	r3, #0
 8009d28:	1891      	adds	r1, r2, r2
 8009d2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009d2c:	415b      	adcs	r3, r3
 8009d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d34:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009d38:	f7f7 f838 	bl	8000dac <__aeabi_uldivmod>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4ba5      	ldr	r3, [pc, #660]	; (8009fd8 <UART_SetConfig+0x38c>)
 8009d42:	fba3 2302 	umull	r2, r3, r3, r2
 8009d46:	095b      	lsrs	r3, r3, #5
 8009d48:	011e      	lsls	r6, r3, #4
 8009d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d4c:	461c      	mov	r4, r3
 8009d4e:	f04f 0500 	mov.w	r5, #0
 8009d52:	4622      	mov	r2, r4
 8009d54:	462b      	mov	r3, r5
 8009d56:	1891      	adds	r1, r2, r2
 8009d58:	6339      	str	r1, [r7, #48]	; 0x30
 8009d5a:	415b      	adcs	r3, r3
 8009d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009d62:	1912      	adds	r2, r2, r4
 8009d64:	eb45 0303 	adc.w	r3, r5, r3
 8009d68:	f04f 0000 	mov.w	r0, #0
 8009d6c:	f04f 0100 	mov.w	r1, #0
 8009d70:	00d9      	lsls	r1, r3, #3
 8009d72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d76:	00d0      	lsls	r0, r2, #3
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	1911      	adds	r1, r2, r4
 8009d7e:	65b9      	str	r1, [r7, #88]	; 0x58
 8009d80:	416b      	adcs	r3, r5
 8009d82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	461a      	mov	r2, r3
 8009d8a:	f04f 0300 	mov.w	r3, #0
 8009d8e:	1891      	adds	r1, r2, r2
 8009d90:	62b9      	str	r1, [r7, #40]	; 0x28
 8009d92:	415b      	adcs	r3, r3
 8009d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d9a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009d9e:	f7f7 f805 	bl	8000dac <__aeabi_uldivmod>
 8009da2:	4602      	mov	r2, r0
 8009da4:	460b      	mov	r3, r1
 8009da6:	4b8c      	ldr	r3, [pc, #560]	; (8009fd8 <UART_SetConfig+0x38c>)
 8009da8:	fba3 1302 	umull	r1, r3, r3, r2
 8009dac:	095b      	lsrs	r3, r3, #5
 8009dae:	2164      	movs	r1, #100	; 0x64
 8009db0:	fb01 f303 	mul.w	r3, r1, r3
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	00db      	lsls	r3, r3, #3
 8009db8:	3332      	adds	r3, #50	; 0x32
 8009dba:	4a87      	ldr	r2, [pc, #540]	; (8009fd8 <UART_SetConfig+0x38c>)
 8009dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc0:	095b      	lsrs	r3, r3, #5
 8009dc2:	005b      	lsls	r3, r3, #1
 8009dc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009dc8:	441e      	add	r6, r3
 8009dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f04f 0100 	mov.w	r1, #0
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	1894      	adds	r4, r2, r2
 8009dd8:	623c      	str	r4, [r7, #32]
 8009dda:	415b      	adcs	r3, r3
 8009ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8009dde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009de2:	1812      	adds	r2, r2, r0
 8009de4:	eb41 0303 	adc.w	r3, r1, r3
 8009de8:	f04f 0400 	mov.w	r4, #0
 8009dec:	f04f 0500 	mov.w	r5, #0
 8009df0:	00dd      	lsls	r5, r3, #3
 8009df2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009df6:	00d4      	lsls	r4, r2, #3
 8009df8:	4622      	mov	r2, r4
 8009dfa:	462b      	mov	r3, r5
 8009dfc:	1814      	adds	r4, r2, r0
 8009dfe:	653c      	str	r4, [r7, #80]	; 0x50
 8009e00:	414b      	adcs	r3, r1
 8009e02:	657b      	str	r3, [r7, #84]	; 0x54
 8009e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	f04f 0300 	mov.w	r3, #0
 8009e0e:	1891      	adds	r1, r2, r2
 8009e10:	61b9      	str	r1, [r7, #24]
 8009e12:	415b      	adcs	r3, r3
 8009e14:	61fb      	str	r3, [r7, #28]
 8009e16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e1a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009e1e:	f7f6 ffc5 	bl	8000dac <__aeabi_uldivmod>
 8009e22:	4602      	mov	r2, r0
 8009e24:	460b      	mov	r3, r1
 8009e26:	4b6c      	ldr	r3, [pc, #432]	; (8009fd8 <UART_SetConfig+0x38c>)
 8009e28:	fba3 1302 	umull	r1, r3, r3, r2
 8009e2c:	095b      	lsrs	r3, r3, #5
 8009e2e:	2164      	movs	r1, #100	; 0x64
 8009e30:	fb01 f303 	mul.w	r3, r1, r3
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	00db      	lsls	r3, r3, #3
 8009e38:	3332      	adds	r3, #50	; 0x32
 8009e3a:	4a67      	ldr	r2, [pc, #412]	; (8009fd8 <UART_SetConfig+0x38c>)
 8009e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e40:	095b      	lsrs	r3, r3, #5
 8009e42:	f003 0207 	and.w	r2, r3, #7
 8009e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4432      	add	r2, r6
 8009e4c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e4e:	e0b9      	b.n	8009fc4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e52:	461c      	mov	r4, r3
 8009e54:	f04f 0500 	mov.w	r5, #0
 8009e58:	4622      	mov	r2, r4
 8009e5a:	462b      	mov	r3, r5
 8009e5c:	1891      	adds	r1, r2, r2
 8009e5e:	6139      	str	r1, [r7, #16]
 8009e60:	415b      	adcs	r3, r3
 8009e62:	617b      	str	r3, [r7, #20]
 8009e64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009e68:	1912      	adds	r2, r2, r4
 8009e6a:	eb45 0303 	adc.w	r3, r5, r3
 8009e6e:	f04f 0000 	mov.w	r0, #0
 8009e72:	f04f 0100 	mov.w	r1, #0
 8009e76:	00d9      	lsls	r1, r3, #3
 8009e78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009e7c:	00d0      	lsls	r0, r2, #3
 8009e7e:	4602      	mov	r2, r0
 8009e80:	460b      	mov	r3, r1
 8009e82:	eb12 0804 	adds.w	r8, r2, r4
 8009e86:	eb43 0905 	adc.w	r9, r3, r5
 8009e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f04f 0100 	mov.w	r1, #0
 8009e94:	f04f 0200 	mov.w	r2, #0
 8009e98:	f04f 0300 	mov.w	r3, #0
 8009e9c:	008b      	lsls	r3, r1, #2
 8009e9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009ea2:	0082      	lsls	r2, r0, #2
 8009ea4:	4640      	mov	r0, r8
 8009ea6:	4649      	mov	r1, r9
 8009ea8:	f7f6 ff80 	bl	8000dac <__aeabi_uldivmod>
 8009eac:	4602      	mov	r2, r0
 8009eae:	460b      	mov	r3, r1
 8009eb0:	4b49      	ldr	r3, [pc, #292]	; (8009fd8 <UART_SetConfig+0x38c>)
 8009eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8009eb6:	095b      	lsrs	r3, r3, #5
 8009eb8:	011e      	lsls	r6, r3, #4
 8009eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f04f 0100 	mov.w	r1, #0
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	1894      	adds	r4, r2, r2
 8009ec8:	60bc      	str	r4, [r7, #8]
 8009eca:	415b      	adcs	r3, r3
 8009ecc:	60fb      	str	r3, [r7, #12]
 8009ece:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ed2:	1812      	adds	r2, r2, r0
 8009ed4:	eb41 0303 	adc.w	r3, r1, r3
 8009ed8:	f04f 0400 	mov.w	r4, #0
 8009edc:	f04f 0500 	mov.w	r5, #0
 8009ee0:	00dd      	lsls	r5, r3, #3
 8009ee2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009ee6:	00d4      	lsls	r4, r2, #3
 8009ee8:	4622      	mov	r2, r4
 8009eea:	462b      	mov	r3, r5
 8009eec:	1814      	adds	r4, r2, r0
 8009eee:	64bc      	str	r4, [r7, #72]	; 0x48
 8009ef0:	414b      	adcs	r3, r1
 8009ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f04f 0100 	mov.w	r1, #0
 8009efe:	f04f 0200 	mov.w	r2, #0
 8009f02:	f04f 0300 	mov.w	r3, #0
 8009f06:	008b      	lsls	r3, r1, #2
 8009f08:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f0c:	0082      	lsls	r2, r0, #2
 8009f0e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009f12:	f7f6 ff4b 	bl	8000dac <__aeabi_uldivmod>
 8009f16:	4602      	mov	r2, r0
 8009f18:	460b      	mov	r3, r1
 8009f1a:	4b2f      	ldr	r3, [pc, #188]	; (8009fd8 <UART_SetConfig+0x38c>)
 8009f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8009f20:	095b      	lsrs	r3, r3, #5
 8009f22:	2164      	movs	r1, #100	; 0x64
 8009f24:	fb01 f303 	mul.w	r3, r1, r3
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	011b      	lsls	r3, r3, #4
 8009f2c:	3332      	adds	r3, #50	; 0x32
 8009f2e:	4a2a      	ldr	r2, [pc, #168]	; (8009fd8 <UART_SetConfig+0x38c>)
 8009f30:	fba2 2303 	umull	r2, r3, r2, r3
 8009f34:	095b      	lsrs	r3, r3, #5
 8009f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f3a:	441e      	add	r6, r3
 8009f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f04f 0100 	mov.w	r1, #0
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	1894      	adds	r4, r2, r2
 8009f4a:	603c      	str	r4, [r7, #0]
 8009f4c:	415b      	adcs	r3, r3
 8009f4e:	607b      	str	r3, [r7, #4]
 8009f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f54:	1812      	adds	r2, r2, r0
 8009f56:	eb41 0303 	adc.w	r3, r1, r3
 8009f5a:	f04f 0400 	mov.w	r4, #0
 8009f5e:	f04f 0500 	mov.w	r5, #0
 8009f62:	00dd      	lsls	r5, r3, #3
 8009f64:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009f68:	00d4      	lsls	r4, r2, #3
 8009f6a:	4622      	mov	r2, r4
 8009f6c:	462b      	mov	r3, r5
 8009f6e:	eb12 0a00 	adds.w	sl, r2, r0
 8009f72:	eb43 0b01 	adc.w	fp, r3, r1
 8009f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f04f 0100 	mov.w	r1, #0
 8009f80:	f04f 0200 	mov.w	r2, #0
 8009f84:	f04f 0300 	mov.w	r3, #0
 8009f88:	008b      	lsls	r3, r1, #2
 8009f8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f8e:	0082      	lsls	r2, r0, #2
 8009f90:	4650      	mov	r0, sl
 8009f92:	4659      	mov	r1, fp
 8009f94:	f7f6 ff0a 	bl	8000dac <__aeabi_uldivmod>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	4b0e      	ldr	r3, [pc, #56]	; (8009fd8 <UART_SetConfig+0x38c>)
 8009f9e:	fba3 1302 	umull	r1, r3, r3, r2
 8009fa2:	095b      	lsrs	r3, r3, #5
 8009fa4:	2164      	movs	r1, #100	; 0x64
 8009fa6:	fb01 f303 	mul.w	r3, r1, r3
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	011b      	lsls	r3, r3, #4
 8009fae:	3332      	adds	r3, #50	; 0x32
 8009fb0:	4a09      	ldr	r2, [pc, #36]	; (8009fd8 <UART_SetConfig+0x38c>)
 8009fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb6:	095b      	lsrs	r3, r3, #5
 8009fb8:	f003 020f 	and.w	r2, r3, #15
 8009fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4432      	add	r2, r6
 8009fc2:	609a      	str	r2, [r3, #8]
}
 8009fc4:	bf00      	nop
 8009fc6:	377c      	adds	r7, #124	; 0x7c
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fce:	bf00      	nop
 8009fd0:	40011000 	.word	0x40011000
 8009fd4:	40011400 	.word	0x40011400
 8009fd8:	51eb851f 	.word	0x51eb851f

08009fdc <calloc>:
 8009fdc:	4b02      	ldr	r3, [pc, #8]	; (8009fe8 <calloc+0xc>)
 8009fde:	460a      	mov	r2, r1
 8009fe0:	4601      	mov	r1, r0
 8009fe2:	6818      	ldr	r0, [r3, #0]
 8009fe4:	f000 b842 	b.w	800a06c <_calloc_r>
 8009fe8:	20000024 	.word	0x20000024

08009fec <__errno>:
 8009fec:	4b01      	ldr	r3, [pc, #4]	; (8009ff4 <__errno+0x8>)
 8009fee:	6818      	ldr	r0, [r3, #0]
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	20000024 	.word	0x20000024

08009ff8 <__libc_init_array>:
 8009ff8:	b570      	push	{r4, r5, r6, lr}
 8009ffa:	4d0d      	ldr	r5, [pc, #52]	; (800a030 <__libc_init_array+0x38>)
 8009ffc:	4c0d      	ldr	r4, [pc, #52]	; (800a034 <__libc_init_array+0x3c>)
 8009ffe:	1b64      	subs	r4, r4, r5
 800a000:	10a4      	asrs	r4, r4, #2
 800a002:	2600      	movs	r6, #0
 800a004:	42a6      	cmp	r6, r4
 800a006:	d109      	bne.n	800a01c <__libc_init_array+0x24>
 800a008:	4d0b      	ldr	r5, [pc, #44]	; (800a038 <__libc_init_array+0x40>)
 800a00a:	4c0c      	ldr	r4, [pc, #48]	; (800a03c <__libc_init_array+0x44>)
 800a00c:	f000 f99e 	bl	800a34c <_init>
 800a010:	1b64      	subs	r4, r4, r5
 800a012:	10a4      	asrs	r4, r4, #2
 800a014:	2600      	movs	r6, #0
 800a016:	42a6      	cmp	r6, r4
 800a018:	d105      	bne.n	800a026 <__libc_init_array+0x2e>
 800a01a:	bd70      	pop	{r4, r5, r6, pc}
 800a01c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a020:	4798      	blx	r3
 800a022:	3601      	adds	r6, #1
 800a024:	e7ee      	b.n	800a004 <__libc_init_array+0xc>
 800a026:	f855 3b04 	ldr.w	r3, [r5], #4
 800a02a:	4798      	blx	r3
 800a02c:	3601      	adds	r6, #1
 800a02e:	e7f2      	b.n	800a016 <__libc_init_array+0x1e>
 800a030:	0800a3a4 	.word	0x0800a3a4
 800a034:	0800a3a4 	.word	0x0800a3a4
 800a038:	0800a3a4 	.word	0x0800a3a4
 800a03c:	0800a3a8 	.word	0x0800a3a8

0800a040 <memcpy>:
 800a040:	440a      	add	r2, r1
 800a042:	4291      	cmp	r1, r2
 800a044:	f100 33ff 	add.w	r3, r0, #4294967295
 800a048:	d100      	bne.n	800a04c <memcpy+0xc>
 800a04a:	4770      	bx	lr
 800a04c:	b510      	push	{r4, lr}
 800a04e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a052:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a056:	4291      	cmp	r1, r2
 800a058:	d1f9      	bne.n	800a04e <memcpy+0xe>
 800a05a:	bd10      	pop	{r4, pc}

0800a05c <memset>:
 800a05c:	4402      	add	r2, r0
 800a05e:	4603      	mov	r3, r0
 800a060:	4293      	cmp	r3, r2
 800a062:	d100      	bne.n	800a066 <memset+0xa>
 800a064:	4770      	bx	lr
 800a066:	f803 1b01 	strb.w	r1, [r3], #1
 800a06a:	e7f9      	b.n	800a060 <memset+0x4>

0800a06c <_calloc_r>:
 800a06c:	b513      	push	{r0, r1, r4, lr}
 800a06e:	434a      	muls	r2, r1
 800a070:	4611      	mov	r1, r2
 800a072:	9201      	str	r2, [sp, #4]
 800a074:	f000 f80a 	bl	800a08c <_malloc_r>
 800a078:	4604      	mov	r4, r0
 800a07a:	b118      	cbz	r0, 800a084 <_calloc_r+0x18>
 800a07c:	9a01      	ldr	r2, [sp, #4]
 800a07e:	2100      	movs	r1, #0
 800a080:	f7ff ffec 	bl	800a05c <memset>
 800a084:	4620      	mov	r0, r4
 800a086:	b002      	add	sp, #8
 800a088:	bd10      	pop	{r4, pc}
	...

0800a08c <_malloc_r>:
 800a08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08e:	1ccd      	adds	r5, r1, #3
 800a090:	f025 0503 	bic.w	r5, r5, #3
 800a094:	3508      	adds	r5, #8
 800a096:	2d0c      	cmp	r5, #12
 800a098:	bf38      	it	cc
 800a09a:	250c      	movcc	r5, #12
 800a09c:	2d00      	cmp	r5, #0
 800a09e:	4606      	mov	r6, r0
 800a0a0:	db01      	blt.n	800a0a6 <_malloc_r+0x1a>
 800a0a2:	42a9      	cmp	r1, r5
 800a0a4:	d903      	bls.n	800a0ae <_malloc_r+0x22>
 800a0a6:	230c      	movs	r3, #12
 800a0a8:	6033      	str	r3, [r6, #0]
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0ae:	f000 f857 	bl	800a160 <__malloc_lock>
 800a0b2:	4921      	ldr	r1, [pc, #132]	; (800a138 <_malloc_r+0xac>)
 800a0b4:	680a      	ldr	r2, [r1, #0]
 800a0b6:	4614      	mov	r4, r2
 800a0b8:	b99c      	cbnz	r4, 800a0e2 <_malloc_r+0x56>
 800a0ba:	4f20      	ldr	r7, [pc, #128]	; (800a13c <_malloc_r+0xb0>)
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	b923      	cbnz	r3, 800a0ca <_malloc_r+0x3e>
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	4630      	mov	r0, r6
 800a0c4:	f000 f83c 	bl	800a140 <_sbrk_r>
 800a0c8:	6038      	str	r0, [r7, #0]
 800a0ca:	4629      	mov	r1, r5
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	f000 f837 	bl	800a140 <_sbrk_r>
 800a0d2:	1c43      	adds	r3, r0, #1
 800a0d4:	d123      	bne.n	800a11e <_malloc_r+0x92>
 800a0d6:	230c      	movs	r3, #12
 800a0d8:	6033      	str	r3, [r6, #0]
 800a0da:	4630      	mov	r0, r6
 800a0dc:	f000 f846 	bl	800a16c <__malloc_unlock>
 800a0e0:	e7e3      	b.n	800a0aa <_malloc_r+0x1e>
 800a0e2:	6823      	ldr	r3, [r4, #0]
 800a0e4:	1b5b      	subs	r3, r3, r5
 800a0e6:	d417      	bmi.n	800a118 <_malloc_r+0x8c>
 800a0e8:	2b0b      	cmp	r3, #11
 800a0ea:	d903      	bls.n	800a0f4 <_malloc_r+0x68>
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	441c      	add	r4, r3
 800a0f0:	6025      	str	r5, [r4, #0]
 800a0f2:	e004      	b.n	800a0fe <_malloc_r+0x72>
 800a0f4:	6863      	ldr	r3, [r4, #4]
 800a0f6:	42a2      	cmp	r2, r4
 800a0f8:	bf0c      	ite	eq
 800a0fa:	600b      	streq	r3, [r1, #0]
 800a0fc:	6053      	strne	r3, [r2, #4]
 800a0fe:	4630      	mov	r0, r6
 800a100:	f000 f834 	bl	800a16c <__malloc_unlock>
 800a104:	f104 000b 	add.w	r0, r4, #11
 800a108:	1d23      	adds	r3, r4, #4
 800a10a:	f020 0007 	bic.w	r0, r0, #7
 800a10e:	1ac2      	subs	r2, r0, r3
 800a110:	d0cc      	beq.n	800a0ac <_malloc_r+0x20>
 800a112:	1a1b      	subs	r3, r3, r0
 800a114:	50a3      	str	r3, [r4, r2]
 800a116:	e7c9      	b.n	800a0ac <_malloc_r+0x20>
 800a118:	4622      	mov	r2, r4
 800a11a:	6864      	ldr	r4, [r4, #4]
 800a11c:	e7cc      	b.n	800a0b8 <_malloc_r+0x2c>
 800a11e:	1cc4      	adds	r4, r0, #3
 800a120:	f024 0403 	bic.w	r4, r4, #3
 800a124:	42a0      	cmp	r0, r4
 800a126:	d0e3      	beq.n	800a0f0 <_malloc_r+0x64>
 800a128:	1a21      	subs	r1, r4, r0
 800a12a:	4630      	mov	r0, r6
 800a12c:	f000 f808 	bl	800a140 <_sbrk_r>
 800a130:	3001      	adds	r0, #1
 800a132:	d1dd      	bne.n	800a0f0 <_malloc_r+0x64>
 800a134:	e7cf      	b.n	800a0d6 <_malloc_r+0x4a>
 800a136:	bf00      	nop
 800a138:	20000490 	.word	0x20000490
 800a13c:	20000494 	.word	0x20000494

0800a140 <_sbrk_r>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	4d06      	ldr	r5, [pc, #24]	; (800a15c <_sbrk_r+0x1c>)
 800a144:	2300      	movs	r3, #0
 800a146:	4604      	mov	r4, r0
 800a148:	4608      	mov	r0, r1
 800a14a:	602b      	str	r3, [r5, #0]
 800a14c:	f7fa fb24 	bl	8004798 <_sbrk>
 800a150:	1c43      	adds	r3, r0, #1
 800a152:	d102      	bne.n	800a15a <_sbrk_r+0x1a>
 800a154:	682b      	ldr	r3, [r5, #0]
 800a156:	b103      	cbz	r3, 800a15a <_sbrk_r+0x1a>
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	bd38      	pop	{r3, r4, r5, pc}
 800a15c:	200006cc 	.word	0x200006cc

0800a160 <__malloc_lock>:
 800a160:	4801      	ldr	r0, [pc, #4]	; (800a168 <__malloc_lock+0x8>)
 800a162:	f000 b809 	b.w	800a178 <__retarget_lock_acquire_recursive>
 800a166:	bf00      	nop
 800a168:	200006d4 	.word	0x200006d4

0800a16c <__malloc_unlock>:
 800a16c:	4801      	ldr	r0, [pc, #4]	; (800a174 <__malloc_unlock+0x8>)
 800a16e:	f000 b804 	b.w	800a17a <__retarget_lock_release_recursive>
 800a172:	bf00      	nop
 800a174:	200006d4 	.word	0x200006d4

0800a178 <__retarget_lock_acquire_recursive>:
 800a178:	4770      	bx	lr

0800a17a <__retarget_lock_release_recursive>:
 800a17a:	4770      	bx	lr

0800a17c <sqrt>:
 800a17c:	b538      	push	{r3, r4, r5, lr}
 800a17e:	ed2d 8b02 	vpush	{d8}
 800a182:	ec55 4b10 	vmov	r4, r5, d0
 800a186:	f000 f82d 	bl	800a1e4 <__ieee754_sqrt>
 800a18a:	4b15      	ldr	r3, [pc, #84]	; (800a1e0 <sqrt+0x64>)
 800a18c:	eeb0 8a40 	vmov.f32	s16, s0
 800a190:	eef0 8a60 	vmov.f32	s17, s1
 800a194:	f993 3000 	ldrsb.w	r3, [r3]
 800a198:	3301      	adds	r3, #1
 800a19a:	d019      	beq.n	800a1d0 <sqrt+0x54>
 800a19c:	4622      	mov	r2, r4
 800a19e:	462b      	mov	r3, r5
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	f7f6 fc6e 	bl	8000a84 <__aeabi_dcmpun>
 800a1a8:	b990      	cbnz	r0, 800a1d0 <sqrt+0x54>
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	4629      	mov	r1, r5
 800a1b2:	f7f6 fc3f 	bl	8000a34 <__aeabi_dcmplt>
 800a1b6:	b158      	cbz	r0, 800a1d0 <sqrt+0x54>
 800a1b8:	f7ff ff18 	bl	8009fec <__errno>
 800a1bc:	2321      	movs	r3, #33	; 0x21
 800a1be:	6003      	str	r3, [r0, #0]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	4610      	mov	r0, r2
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	f7f6 faec 	bl	80007a4 <__aeabi_ddiv>
 800a1cc:	ec41 0b18 	vmov	d8, r0, r1
 800a1d0:	eeb0 0a48 	vmov.f32	s0, s16
 800a1d4:	eef0 0a68 	vmov.f32	s1, s17
 800a1d8:	ecbd 8b02 	vpop	{d8}
 800a1dc:	bd38      	pop	{r3, r4, r5, pc}
 800a1de:	bf00      	nop
 800a1e0:	20000088 	.word	0x20000088

0800a1e4 <__ieee754_sqrt>:
 800a1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e8:	ec55 4b10 	vmov	r4, r5, d0
 800a1ec:	4e56      	ldr	r6, [pc, #344]	; (800a348 <__ieee754_sqrt+0x164>)
 800a1ee:	43ae      	bics	r6, r5
 800a1f0:	ee10 0a10 	vmov	r0, s0
 800a1f4:	ee10 3a10 	vmov	r3, s0
 800a1f8:	4629      	mov	r1, r5
 800a1fa:	462a      	mov	r2, r5
 800a1fc:	d110      	bne.n	800a220 <__ieee754_sqrt+0x3c>
 800a1fe:	ee10 2a10 	vmov	r2, s0
 800a202:	462b      	mov	r3, r5
 800a204:	f7f6 f9a4 	bl	8000550 <__aeabi_dmul>
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	4620      	mov	r0, r4
 800a20e:	4629      	mov	r1, r5
 800a210:	f7f5 ffe8 	bl	80001e4 <__adddf3>
 800a214:	4604      	mov	r4, r0
 800a216:	460d      	mov	r5, r1
 800a218:	ec45 4b10 	vmov	d0, r4, r5
 800a21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a220:	2d00      	cmp	r5, #0
 800a222:	dc10      	bgt.n	800a246 <__ieee754_sqrt+0x62>
 800a224:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a228:	4330      	orrs	r0, r6
 800a22a:	d0f5      	beq.n	800a218 <__ieee754_sqrt+0x34>
 800a22c:	b15d      	cbz	r5, 800a246 <__ieee754_sqrt+0x62>
 800a22e:	ee10 2a10 	vmov	r2, s0
 800a232:	462b      	mov	r3, r5
 800a234:	ee10 0a10 	vmov	r0, s0
 800a238:	f7f5 ffd2 	bl	80001e0 <__aeabi_dsub>
 800a23c:	4602      	mov	r2, r0
 800a23e:	460b      	mov	r3, r1
 800a240:	f7f6 fab0 	bl	80007a4 <__aeabi_ddiv>
 800a244:	e7e6      	b.n	800a214 <__ieee754_sqrt+0x30>
 800a246:	1509      	asrs	r1, r1, #20
 800a248:	d076      	beq.n	800a338 <__ieee754_sqrt+0x154>
 800a24a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a24e:	07ce      	lsls	r6, r1, #31
 800a250:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a254:	bf5e      	ittt	pl
 800a256:	0fda      	lsrpl	r2, r3, #31
 800a258:	005b      	lslpl	r3, r3, #1
 800a25a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a25e:	0fda      	lsrs	r2, r3, #31
 800a260:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a264:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a268:	2000      	movs	r0, #0
 800a26a:	106d      	asrs	r5, r5, #1
 800a26c:	005b      	lsls	r3, r3, #1
 800a26e:	f04f 0e16 	mov.w	lr, #22
 800a272:	4684      	mov	ip, r0
 800a274:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a278:	eb0c 0401 	add.w	r4, ip, r1
 800a27c:	4294      	cmp	r4, r2
 800a27e:	bfde      	ittt	le
 800a280:	1b12      	suble	r2, r2, r4
 800a282:	eb04 0c01 	addle.w	ip, r4, r1
 800a286:	1840      	addle	r0, r0, r1
 800a288:	0052      	lsls	r2, r2, #1
 800a28a:	f1be 0e01 	subs.w	lr, lr, #1
 800a28e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a292:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a296:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a29a:	d1ed      	bne.n	800a278 <__ieee754_sqrt+0x94>
 800a29c:	4671      	mov	r1, lr
 800a29e:	2720      	movs	r7, #32
 800a2a0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a2a4:	4562      	cmp	r2, ip
 800a2a6:	eb04 060e 	add.w	r6, r4, lr
 800a2aa:	dc02      	bgt.n	800a2b2 <__ieee754_sqrt+0xce>
 800a2ac:	d113      	bne.n	800a2d6 <__ieee754_sqrt+0xf2>
 800a2ae:	429e      	cmp	r6, r3
 800a2b0:	d811      	bhi.n	800a2d6 <__ieee754_sqrt+0xf2>
 800a2b2:	2e00      	cmp	r6, #0
 800a2b4:	eb06 0e04 	add.w	lr, r6, r4
 800a2b8:	da43      	bge.n	800a342 <__ieee754_sqrt+0x15e>
 800a2ba:	f1be 0f00 	cmp.w	lr, #0
 800a2be:	db40      	blt.n	800a342 <__ieee754_sqrt+0x15e>
 800a2c0:	f10c 0801 	add.w	r8, ip, #1
 800a2c4:	eba2 020c 	sub.w	r2, r2, ip
 800a2c8:	429e      	cmp	r6, r3
 800a2ca:	bf88      	it	hi
 800a2cc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a2d0:	1b9b      	subs	r3, r3, r6
 800a2d2:	4421      	add	r1, r4
 800a2d4:	46c4      	mov	ip, r8
 800a2d6:	0052      	lsls	r2, r2, #1
 800a2d8:	3f01      	subs	r7, #1
 800a2da:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a2de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a2e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a2e6:	d1dd      	bne.n	800a2a4 <__ieee754_sqrt+0xc0>
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	d006      	beq.n	800a2fa <__ieee754_sqrt+0x116>
 800a2ec:	1c4c      	adds	r4, r1, #1
 800a2ee:	bf13      	iteet	ne
 800a2f0:	3101      	addne	r1, #1
 800a2f2:	3001      	addeq	r0, #1
 800a2f4:	4639      	moveq	r1, r7
 800a2f6:	f021 0101 	bicne.w	r1, r1, #1
 800a2fa:	1043      	asrs	r3, r0, #1
 800a2fc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a300:	0849      	lsrs	r1, r1, #1
 800a302:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a306:	07c2      	lsls	r2, r0, #31
 800a308:	bf48      	it	mi
 800a30a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a30e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a312:	460c      	mov	r4, r1
 800a314:	463d      	mov	r5, r7
 800a316:	e77f      	b.n	800a218 <__ieee754_sqrt+0x34>
 800a318:	0ada      	lsrs	r2, r3, #11
 800a31a:	3815      	subs	r0, #21
 800a31c:	055b      	lsls	r3, r3, #21
 800a31e:	2a00      	cmp	r2, #0
 800a320:	d0fa      	beq.n	800a318 <__ieee754_sqrt+0x134>
 800a322:	02d7      	lsls	r7, r2, #11
 800a324:	d50a      	bpl.n	800a33c <__ieee754_sqrt+0x158>
 800a326:	f1c1 0420 	rsb	r4, r1, #32
 800a32a:	fa23 f404 	lsr.w	r4, r3, r4
 800a32e:	1e4d      	subs	r5, r1, #1
 800a330:	408b      	lsls	r3, r1
 800a332:	4322      	orrs	r2, r4
 800a334:	1b41      	subs	r1, r0, r5
 800a336:	e788      	b.n	800a24a <__ieee754_sqrt+0x66>
 800a338:	4608      	mov	r0, r1
 800a33a:	e7f0      	b.n	800a31e <__ieee754_sqrt+0x13a>
 800a33c:	0052      	lsls	r2, r2, #1
 800a33e:	3101      	adds	r1, #1
 800a340:	e7ef      	b.n	800a322 <__ieee754_sqrt+0x13e>
 800a342:	46e0      	mov	r8, ip
 800a344:	e7be      	b.n	800a2c4 <__ieee754_sqrt+0xe0>
 800a346:	bf00      	nop
 800a348:	7ff00000 	.word	0x7ff00000

0800a34c <_init>:
 800a34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34e:	bf00      	nop
 800a350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a352:	bc08      	pop	{r3}
 800a354:	469e      	mov	lr, r3
 800a356:	4770      	bx	lr

0800a358 <_fini>:
 800a358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35a:	bf00      	nop
 800a35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a35e:	bc08      	pop	{r3}
 800a360:	469e      	mov	lr, r3
 800a362:	4770      	bx	lr
