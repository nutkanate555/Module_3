
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f3c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800a0d4  0800a0d4  0001a0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a10c  0800a10c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a10c  0800a10c  0001a10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a114  0800a114  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a114  0800a114  0001a114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a118  0800a118  0001a118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800a11c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  20000090  0800a1a8  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  0800a1a8  000206dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fe7  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201f  00000000  00000000  000310a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  000330c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00034100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f71  00000000  00000000  000350a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d4a  00000000  00000000  0004c019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091e4e  00000000  00000000  0005dd63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efbb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004acc  00000000  00000000  000efc04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a0bc 	.word	0x0800a0bc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800a0bc 	.word	0x0800a0bc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b96e 	b.w	80010a0 <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f806 	bl	8000ddc <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	4604      	mov	r4, r0
 8000de4:	468c      	mov	ip, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 8083 	bne.w	8000ef2 <__udivmoddi4+0x116>
 8000dec:	428a      	cmp	r2, r1
 8000dee:	4617      	mov	r7, r2
 8000df0:	d947      	bls.n	8000e82 <__udivmoddi4+0xa6>
 8000df2:	fab2 f282 	clz	r2, r2
 8000df6:	b142      	cbz	r2, 8000e0a <__udivmoddi4+0x2e>
 8000df8:	f1c2 0020 	rsb	r0, r2, #32
 8000dfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4097      	lsls	r7, r2
 8000e04:	ea40 0c01 	orr.w	ip, r0, r1
 8000e08:	4094      	lsls	r4, r2
 8000e0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e0e:	0c23      	lsrs	r3, r4, #16
 8000e10:	fbbc f6f8 	udiv	r6, ip, r8
 8000e14:	fa1f fe87 	uxth.w	lr, r7
 8000e18:	fb08 c116 	mls	r1, r8, r6, ip
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f10e 	mul.w	r1, r6, lr
 8000e24:	4299      	cmp	r1, r3
 8000e26:	d909      	bls.n	8000e3c <__udivmoddi4+0x60>
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 8119 	bcs.w	8001064 <__udivmoddi4+0x288>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 8116 	bls.w	8001064 <__udivmoddi4+0x288>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	443b      	add	r3, r7
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x8c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	f080 8105 	bcs.w	8001068 <__udivmoddi4+0x28c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8102 	bls.w	8001068 <__udivmoddi4+0x28c>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6c:	eba4 040e 	sub.w	r4, r4, lr
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa0>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	b902      	cbnz	r2, 8000e86 <__udivmoddi4+0xaa>
 8000e84:	deff      	udf	#255	; 0xff
 8000e86:	fab2 f282 	clz	r2, r2
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d150      	bne.n	8000f30 <__udivmoddi4+0x154>
 8000e8e:	1bcb      	subs	r3, r1, r7
 8000e90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	2601      	movs	r6, #1
 8000e9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e9e:	0c21      	lsrs	r1, r4, #16
 8000ea0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb08 f30c 	mul.w	r3, r8, ip
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d907      	bls.n	8000ec0 <__udivmoddi4+0xe4>
 8000eb0:	1879      	adds	r1, r7, r1
 8000eb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0xe2>
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	f200 80e9 	bhi.w	8001090 <__udivmoddi4+0x2b4>
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	1ac9      	subs	r1, r1, r3
 8000ec2:	b2a3      	uxth	r3, r4
 8000ec4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ecc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed0:	fb08 f800 	mul.w	r8, r8, r0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x10c>
 8000ed8:	193c      	adds	r4, r7, r4
 8000eda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x10a>
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	f200 80d9 	bhi.w	8001098 <__udivmoddi4+0x2bc>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	eba4 0408 	sub.w	r4, r4, r8
 8000eec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef0:	e7bf      	b.n	8000e72 <__udivmoddi4+0x96>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d909      	bls.n	8000f0a <__udivmoddi4+0x12e>
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	f000 80b1 	beq.w	800105e <__udivmoddi4+0x282>
 8000efc:	2600      	movs	r6, #0
 8000efe:	e9c5 0100 	strd	r0, r1, [r5]
 8000f02:	4630      	mov	r0, r6
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	fab3 f683 	clz	r6, r3
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d14a      	bne.n	8000fa8 <__udivmoddi4+0x1cc>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d302      	bcc.n	8000f1c <__udivmoddi4+0x140>
 8000f16:	4282      	cmp	r2, r0
 8000f18:	f200 80b8 	bhi.w	800108c <__udivmoddi4+0x2b0>
 8000f1c:	1a84      	subs	r4, r0, r2
 8000f1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000f22:	2001      	movs	r0, #1
 8000f24:	468c      	mov	ip, r1
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d0a8      	beq.n	8000e7c <__udivmoddi4+0xa0>
 8000f2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f2e:	e7a5      	b.n	8000e7c <__udivmoddi4+0xa0>
 8000f30:	f1c2 0320 	rsb	r3, r2, #32
 8000f34:	fa20 f603 	lsr.w	r6, r0, r3
 8000f38:	4097      	lsls	r7, r2
 8000f3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000f3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f42:	40d9      	lsrs	r1, r3
 8000f44:	4330      	orrs	r0, r6
 8000f46:	0c03      	lsrs	r3, r0, #16
 8000f48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f4c:	fa1f f887 	uxth.w	r8, r7
 8000f50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f58:	fb06 f108 	mul.w	r1, r6, r8
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f62:	d909      	bls.n	8000f78 <__udivmoddi4+0x19c>
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f6a:	f080 808d 	bcs.w	8001088 <__udivmoddi4+0x2ac>
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	f240 808a 	bls.w	8001088 <__udivmoddi4+0x2ac>
 8000f74:	3e02      	subs	r6, #2
 8000f76:	443b      	add	r3, r7
 8000f78:	1a5b      	subs	r3, r3, r1
 8000f7a:	b281      	uxth	r1, r0
 8000f7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f88:	fb00 f308 	mul.w	r3, r0, r8
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d907      	bls.n	8000fa0 <__udivmoddi4+0x1c4>
 8000f90:	1879      	adds	r1, r7, r1
 8000f92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f96:	d273      	bcs.n	8001080 <__udivmoddi4+0x2a4>
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d971      	bls.n	8001080 <__udivmoddi4+0x2a4>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4439      	add	r1, r7
 8000fa0:	1acb      	subs	r3, r1, r3
 8000fa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fa6:	e778      	b.n	8000e9a <__udivmoddi4+0xbe>
 8000fa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000fac:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fb4:	431c      	orrs	r4, r3
 8000fb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fba:	fa01 f306 	lsl.w	r3, r1, r6
 8000fbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fc6:	431f      	orrs	r7, r3
 8000fc8:	0c3b      	lsrs	r3, r7, #16
 8000fca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fce:	fa1f f884 	uxth.w	r8, r4
 8000fd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fda:	fb09 fa08 	mul.w	sl, r9, r8
 8000fde:	458a      	cmp	sl, r1
 8000fe0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fe4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0x220>
 8000fea:	1861      	adds	r1, r4, r1
 8000fec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff0:	d248      	bcs.n	8001084 <__udivmoddi4+0x2a8>
 8000ff2:	458a      	cmp	sl, r1
 8000ff4:	d946      	bls.n	8001084 <__udivmoddi4+0x2a8>
 8000ff6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ffa:	4421      	add	r1, r4
 8000ffc:	eba1 010a 	sub.w	r1, r1, sl
 8001000:	b2bf      	uxth	r7, r7
 8001002:	fbb1 f0fe 	udiv	r0, r1, lr
 8001006:	fb0e 1110 	mls	r1, lr, r0, r1
 800100a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800100e:	fb00 f808 	mul.w	r8, r0, r8
 8001012:	45b8      	cmp	r8, r7
 8001014:	d907      	bls.n	8001026 <__udivmoddi4+0x24a>
 8001016:	19e7      	adds	r7, r4, r7
 8001018:	f100 31ff 	add.w	r1, r0, #4294967295
 800101c:	d22e      	bcs.n	800107c <__udivmoddi4+0x2a0>
 800101e:	45b8      	cmp	r8, r7
 8001020:	d92c      	bls.n	800107c <__udivmoddi4+0x2a0>
 8001022:	3802      	subs	r0, #2
 8001024:	4427      	add	r7, r4
 8001026:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800102a:	eba7 0708 	sub.w	r7, r7, r8
 800102e:	fba0 8902 	umull	r8, r9, r0, r2
 8001032:	454f      	cmp	r7, r9
 8001034:	46c6      	mov	lr, r8
 8001036:	4649      	mov	r1, r9
 8001038:	d31a      	bcc.n	8001070 <__udivmoddi4+0x294>
 800103a:	d017      	beq.n	800106c <__udivmoddi4+0x290>
 800103c:	b15d      	cbz	r5, 8001056 <__udivmoddi4+0x27a>
 800103e:	ebb3 020e 	subs.w	r2, r3, lr
 8001042:	eb67 0701 	sbc.w	r7, r7, r1
 8001046:	fa07 fc0c 	lsl.w	ip, r7, ip
 800104a:	40f2      	lsrs	r2, r6
 800104c:	ea4c 0202 	orr.w	r2, ip, r2
 8001050:	40f7      	lsrs	r7, r6
 8001052:	e9c5 2700 	strd	r2, r7, [r5]
 8001056:	2600      	movs	r6, #0
 8001058:	4631      	mov	r1, r6
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105e:	462e      	mov	r6, r5
 8001060:	4628      	mov	r0, r5
 8001062:	e70b      	b.n	8000e7c <__udivmoddi4+0xa0>
 8001064:	4606      	mov	r6, r0
 8001066:	e6e9      	b.n	8000e3c <__udivmoddi4+0x60>
 8001068:	4618      	mov	r0, r3
 800106a:	e6fd      	b.n	8000e68 <__udivmoddi4+0x8c>
 800106c:	4543      	cmp	r3, r8
 800106e:	d2e5      	bcs.n	800103c <__udivmoddi4+0x260>
 8001070:	ebb8 0e02 	subs.w	lr, r8, r2
 8001074:	eb69 0104 	sbc.w	r1, r9, r4
 8001078:	3801      	subs	r0, #1
 800107a:	e7df      	b.n	800103c <__udivmoddi4+0x260>
 800107c:	4608      	mov	r0, r1
 800107e:	e7d2      	b.n	8001026 <__udivmoddi4+0x24a>
 8001080:	4660      	mov	r0, ip
 8001082:	e78d      	b.n	8000fa0 <__udivmoddi4+0x1c4>
 8001084:	4681      	mov	r9, r0
 8001086:	e7b9      	b.n	8000ffc <__udivmoddi4+0x220>
 8001088:	4666      	mov	r6, ip
 800108a:	e775      	b.n	8000f78 <__udivmoddi4+0x19c>
 800108c:	4630      	mov	r0, r6
 800108e:	e74a      	b.n	8000f26 <__udivmoddi4+0x14a>
 8001090:	f1ac 0c02 	sub.w	ip, ip, #2
 8001094:	4439      	add	r1, r7
 8001096:	e713      	b.n	8000ec0 <__udivmoddi4+0xe4>
 8001098:	3802      	subs	r0, #2
 800109a:	443c      	add	r4, r7
 800109c:	e724      	b.n	8000ee8 <__udivmoddi4+0x10c>
 800109e:	bf00      	nop

080010a0 <__aeabi_idiv0>:
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b5b0      	push	{r4, r5, r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010aa:	f003 faa3 	bl	80045f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ae:	f000 f95f 	bl	8001370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b2:	f000 fb61 	bl	8001778 <MX_GPIO_Init>
  MX_DMA_Init();
 80010b6:	f000 fb37 	bl	8001728 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010ba:	f000 fb09 	bl	80016d0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010be:	f000 f9ed 	bl	800149c <MX_TIM1_Init>
  MX_TIM2_Init();
 80010c2:	f000 fa43 	bl	800154c <MX_TIM2_Init>
  MX_TIM3_Init();
 80010c6:	f000 fa8d 	bl	80015e4 <MX_TIM3_Init>
  MX_I2C1_Init();
 80010ca:	f000 f9b9 	bl	8001440 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80010ce:	4897      	ldr	r0, [pc, #604]	; (800132c <main+0x288>)
 80010d0:	f006 fe5e 	bl	8007d90 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010d4:	213c      	movs	r1, #60	; 0x3c
 80010d6:	4896      	ldr	r0, [pc, #600]	; (8001330 <main+0x28c>)
 80010d8:	f007 f86c 	bl	80081b4 <HAL_TIM_Encoder_Start>

	// start PWM
  HAL_TIM_Base_Start(&htim3);
 80010dc:	4895      	ldr	r0, [pc, #596]	; (8001334 <main+0x290>)
 80010de:	f006 fdfd 	bl	8007cdc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010e2:	2100      	movs	r1, #0
 80010e4:	4893      	ldr	r0, [pc, #588]	; (8001334 <main+0x290>)
 80010e6:	f006 ff0f 	bl	8007f08 <HAL_TIM_PWM_Start>

  ///Init Data
  ConverterUnitSystemStructureInit(&CUSSStruc);
 80010ea:	4893      	ldr	r0, [pc, #588]	; (8001338 <main+0x294>)
 80010ec:	f000 fd48 	bl	8001b80 <ConverterUnitSystemStructureInit>
  TrajectoryGenerationStructureInit(&TrjStruc, &CUSSStruc);
 80010f0:	4991      	ldr	r1, [pc, #580]	; (8001338 <main+0x294>)
 80010f2:	4892      	ldr	r0, [pc, #584]	; (800133c <main+0x298>)
 80010f4:	f000 fd5c 	bl	8001bb0 <TrajectoryGenerationStructureInit>

  StabilizerPIDLoad();
 80010f8:	f000 fe56 	bl	8001da8 <StabilizerPIDLoad>


  Encoder_SetHome_Position();
 80010fc:	f000 fcbe 	bl	8001a7c <Encoder_SetHome_Position>

  ///UART init
  UART2.huart = &huart2;
 8001100:	4b8f      	ldr	r3, [pc, #572]	; (8001340 <main+0x29c>)
 8001102:	4a90      	ldr	r2, [pc, #576]	; (8001344 <main+0x2a0>)
 8001104:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 8001106:	4b8e      	ldr	r3, [pc, #568]	; (8001340 <main+0x29c>)
 8001108:	22ff      	movs	r2, #255	; 0xff
 800110a:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 800110c:	4b8c      	ldr	r3, [pc, #560]	; (8001340 <main+0x29c>)
 800110e:	22ff      	movs	r2, #255	; 0xff
 8001110:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 8001112:	488b      	ldr	r0, [pc, #556]	; (8001340 <main+0x29c>)
 8001114:	f001 fea2 	bl	8002e5c <UARTInit>
  UARTResetStart(&UART2);
 8001118:	4889      	ldr	r0, [pc, #548]	; (8001340 <main+0x29c>)
 800111a:	f001 fec7 	bl	8002eac <UARTResetStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int16_t inputChar = UARTReadChar(&UART2);
 800111e:	4888      	ldr	r0, [pc, #544]	; (8001340 <main+0x29c>)
 8001120:	f001 fee8 	bl	8002ef4 <UARTReadChar>
 8001124:	4603      	mov	r3, r0
 8001126:	80fb      	strh	r3, [r7, #6]
	  if (inputChar != -1)
 8001128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	d005      	beq.n	800113e <main+0x9a>
	  {
		  Munmunbot_Protocol(inputChar, &UART2);
 8001132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001136:	4982      	ldr	r1, [pc, #520]	; (8001340 <main+0x29c>)
 8001138:	4618      	mov	r0, r3
 800113a:	f001 ffc1 	bl	80030c0 <Munmunbot_Protocol>

	  }

	  switch (Munmunbot_State)
 800113e:	4b82      	ldr	r3, [pc, #520]	; (8001348 <main+0x2a4>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b06      	cmp	r3, #6
 8001144:	f200 80d9 	bhi.w	80012fa <main+0x256>
 8001148:	a201      	add	r2, pc, #4	; (adr r2, 8001150 <main+0xac>)
 800114a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114e:	bf00      	nop
 8001150:	0800116d 	.word	0x0800116d
 8001154:	0800119b 	.word	0x0800119b
 8001158:	080011c1 	.word	0x080011c1
 800115c:	080011db 	.word	0x080011db
 8001160:	080011f5 	.word	0x080011f5
 8001164:	080012c9 	.word	0x080012c9
 8001168:	080012e1 	.word	0x080012e1
	  {
	  	  case STATE_Disconnected:
	  		  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0)
 800116c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001170:	4876      	ldr	r0, [pc, #472]	; (800134c <main+0x2a8>)
 8001172:	f004 f957 	bl	8005424 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d103      	bne.n	8001184 <main+0xe0>
	  		  {
	  			  LAMP_ON(0);
 800117c:	2000      	movs	r0, #0
 800117e:	f002 fc53 	bl	8003a28 <LAMP_ON>
 8001182:	e002      	b.n	800118a <main+0xe6>
	  		  }
	  		  else
	  		  {
	  			  LAMP_ON(4);
 8001184:	2004      	movs	r0, #4
 8001186:	f002 fc4f 	bl	8003a28 <LAMP_ON>
	  		  }
	  		  UpdateMunmunBotState();
 800118a:	f002 fe51 	bl	8003e30 <UpdateMunmunBotState>
	  		  sethomeTrigger = 0;
 800118e:	4b70      	ldr	r3, [pc, #448]	; (8001350 <main+0x2ac>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
	  		  Emergency_switch_trigger();
 8001194:	f002 fcb8 	bl	8003b08 <Emergency_switch_trigger>
	  		  break;
 8001198:	e0af      	b.n	80012fa <main+0x256>

	  	  case STATE_Idle:
	  		  LAMP_ON(1);
 800119a:	2001      	movs	r0, #1
 800119c:	f002 fc44 	bl	8003a28 <LAMP_ON>
	  		  Stabilizing_the_LINK( StabilizePosition );
 80011a0:	4b6c      	ldr	r3, [pc, #432]	; (8001354 <main+0x2b0>)
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	eeb0 0a67 	vmov.f32	s0, s15
 80011aa:	f002 fd71 	bl	8003c90 <Stabilizing_the_LINK>
	  		  if ( sethomeTrigger == 1 )
 80011ae:	4b68      	ldr	r3, [pc, #416]	; (8001350 <main+0x2ac>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d101      	bne.n	80011ba <main+0x116>
	  		  {
	  			  Encoder_SetHome_Position();
 80011b6:	f000 fc61 	bl	8001a7c <Encoder_SetHome_Position>
	  		  }
	  		  Emergency_switch_trigger();
 80011ba:	f002 fca5 	bl	8003b08 <Emergency_switch_trigger>
		  	  break;
 80011be:	e09c      	b.n	80012fa <main+0x256>

	  	  case STATE_PrepareDATA:
	  		  sethomeTrigger = 0;
 80011c0:	4b63      	ldr	r3, [pc, #396]	; (8001350 <main+0x2ac>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
	  		  UpdateMunmunBotState();
 80011c6:	f002 fe33 	bl	8003e30 <UpdateMunmunBotState>
	  		  LAMP_ON(2);
 80011ca:	2002      	movs	r0, #2
 80011cc:	f002 fc2c 	bl	8003a28 <LAMP_ON>
	  		  TrajectoryGenerationPrepareDATA();
 80011d0:	f000 fe52 	bl	8001e78 <TrajectoryGenerationPrepareDATA>
	  		  Emergency_switch_trigger();
 80011d4:	f002 fc98 	bl	8003b08 <Emergency_switch_trigger>
		  	  break;
 80011d8:	e08f      	b.n	80012fa <main+0x256>

	  	  case STATE_Calculation:
	  		  LAMP_ON(2);
 80011da:	2002      	movs	r0, #2
 80011dc:	f002 fc24 	bl	8003a28 <LAMP_ON>
	  		  UpdateMunmunBotState();
 80011e0:	f002 fe26 	bl	8003e30 <UpdateMunmunBotState>
	  		  TrajectoryGenerationCalculation();
 80011e4:	f000 ffa4 	bl	8002130 <TrajectoryGenerationCalculation>
	  		  Munmunbot_State = STATE_Link_Moving;
 80011e8:	4b57      	ldr	r3, [pc, #348]	; (8001348 <main+0x2a4>)
 80011ea:	2204      	movs	r2, #4
 80011ec:	701a      	strb	r2, [r3, #0]
	  		  Emergency_switch_trigger();
 80011ee:	f002 fc8b 	bl	8003b08 <Emergency_switch_trigger>
	  		  break;
 80011f2:	e082      	b.n	80012fa <main+0x256>

	   	  case STATE_Link_Moving:
	   		  LAMP_ON(2);
 80011f4:	2002      	movs	r0, #2
 80011f6:	f002 fc17 	bl	8003a28 <LAMP_ON>
	   		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 80011fa:	f000 fca7 	bl	8001b4c <micros>
 80011fe:	4b4f      	ldr	r3, [pc, #316]	; (800133c <main+0x298>)
 8001200:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001204:	1a84      	subs	r4, r0, r2
 8001206:	eb61 0503 	sbc.w	r5, r1, r3
 800120a:	4b4c      	ldr	r3, [pc, #304]	; (800133c <main+0x298>)
 800120c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001210:	429d      	cmp	r5, r3
 8001212:	bf08      	it	eq
 8001214:	4294      	cmpeq	r4, r2
 8001216:	d354      	bcc.n	80012c2 <main+0x21e>
	   		  {
	   			  Controlling_the_LINK();
 8001218:	f002 fcd0 	bl	8003bbc <Controlling_the_LINK>


				  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 800121c:	4b4e      	ldr	r3, [pc, #312]	; (8001358 <main+0x2b4>)
 800121e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001222:	4b46      	ldr	r3, [pc, #280]	; (800133c <main+0x298>)
 8001224:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8001228:	4b4c      	ldr	r3, [pc, #304]	; (800135c <main+0x2b8>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001238:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001240:	d83f      	bhi.n	80012c2 <main+0x21e>
						  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8001242:	4b45      	ldr	r3, [pc, #276]	; (8001358 <main+0x2b4>)
 8001244:	ed93 7a08 	vldr	s14, [r3, #32]
 8001248:	4b3c      	ldr	r3, [pc, #240]	; (800133c <main+0x298>)
 800124a:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800124e:	4b43      	ldr	r3, [pc, #268]	; (800135c <main+0x2b8>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125a:	ee76 7ae7 	vsub.f32	s15, s13, s15
				  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 800125e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	db2c      	blt.n	80012c2 <main+0x21e>
						  (Moving_Link_Task_Flag == 1))
 8001268:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <main+0x2bc>)
 800126a:	781b      	ldrb	r3, [r3, #0]
						  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 800126c:	2b01      	cmp	r3, #1
 800126e:	d128      	bne.n	80012c2 <main+0x21e>
				  {
					  if(MovingLinkMode == LMM_Set_Pos_Directly)
 8001270:	4b3c      	ldr	r3, [pc, #240]	; (8001364 <main+0x2c0>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d10d      	bne.n	8001294 <main+0x1f0>
					  {
						Munmunbot_State = STATE_Idle;
 8001278:	4b33      	ldr	r3, [pc, #204]	; (8001348 <main+0x2a4>)
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
						MovingLinkMode = LMM_Not_Set;
 800127e:	4b39      	ldr	r3, [pc, #228]	; (8001364 <main+0x2c0>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
						StabilizePosition = TrjStruc.Desire_Theta;
 8001284:	4b2d      	ldr	r3, [pc, #180]	; (800133c <main+0x298>)
 8001286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001288:	4a32      	ldr	r2, [pc, #200]	; (8001354 <main+0x2b0>)
 800128a:	6013      	str	r3, [r2, #0]
						ACK2Return(&UART2);
 800128c:	482c      	ldr	r0, [pc, #176]	; (8001340 <main+0x29c>)
 800128e:	f001 ff05 	bl	800309c <ACK2Return>
 8001292:	e011      	b.n	80012b8 <main+0x214>
					  }

					  else if ((MovingLinkMode == LMM_Set_Goal_1_Station) || (MovingLinkMode == LMM_Set_Goal_n_Station))
 8001294:	4b33      	ldr	r3, [pc, #204]	; (8001364 <main+0x2c0>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d003      	beq.n	80012a4 <main+0x200>
 800129c:	4b31      	ldr	r3, [pc, #196]	; (8001364 <main+0x2c0>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d109      	bne.n	80012b8 <main+0x214>
					  {
						Munmunbot_State = STATE_End_Effector_Working;
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <main+0x2a4>)
 80012a6:	2205      	movs	r2, #5
 80012a8:	701a      	strb	r2, [r3, #0]
						GripperState = 0;
 80012aa:	4b2f      	ldr	r3, [pc, #188]	; (8001368 <main+0x2c4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
						StabilizePosition = TrjStruc.Desire_Theta;
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <main+0x298>)
 80012b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012b4:	4a27      	ldr	r2, [pc, #156]	; (8001354 <main+0x2b0>)
 80012b6:	6013      	str	r3, [r2, #0]
					  }
					 Moving_Link_Task_Flag = 0;
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <main+0x2bc>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
					 PID_Reset();
 80012be:	f002 fb5d 	bl	800397c <PID_Reset>
				  }


	   		  }
	  		  Emergency_switch_trigger();
 80012c2:	f002 fc21 	bl	8003b08 <Emergency_switch_trigger>
	  		  break;
 80012c6:	e018      	b.n	80012fa <main+0x256>

	  	  case STATE_End_Effector_Working:
	  		  Stabilizing_the_LINK( StabilizePosition );
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <main+0x2b0>)
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	eeb0 0a67 	vmov.f32	s0, s15
 80012d2:	f002 fcdd 	bl	8003c90 <Stabilizing_the_LINK>
	  		  EndEffectorWorkingState();
 80012d6:	f002 fdcb 	bl	8003e70 <EndEffectorWorkingState>
	  		  Emergency_switch_trigger();
 80012da:	f002 fc15 	bl	8003b08 <Emergency_switch_trigger>
	  		  break;
 80012de:	e00c      	b.n	80012fa <main+0x256>

	  	  case STATE_SetHome:
	  		  sethomeTrigger = 0;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <main+0x2ac>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
	  		  LAMP_ON(2);
 80012e6:	2002      	movs	r0, #2
 80012e8:	f002 fb9e 	bl	8003a28 <LAMP_ON>
	  		  UpdateMunmunBotState();
 80012ec:	f002 fda0 	bl	8003e30 <UpdateMunmunBotState>
	  		  SETHOME_StateMachine_Function();
 80012f0:	f002 fd50 	bl	8003d94 <SETHOME_StateMachine_Function>
	  		  Emergency_switch_trigger();
 80012f4:	f002 fc08 	bl	8003b08 <Emergency_switch_trigger>
	  		  break;
 80012f8:	bf00      	nop

	  }

	  if ( pidSetZeroFlag != 0 )
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <main+0x2c8>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d010      	beq.n	8001324 <main+0x280>
	  {
		  pidSetZeroFlag = 0;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <main+0x2c8>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <main+0x290>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2200      	movs	r2, #0
 800130e:	635a      	str	r2, [r3, #52]	; 0x34
		  TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <main+0x2b4>)
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	4a09      	ldr	r2, [pc, #36]	; (800133c <main+0x298>)
 8001316:	66d3      	str	r3, [r2, #108]	; 0x6c
		  TrjStruc.AngularVelocityDesire = 0;
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <main+0x298>)
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	625a      	str	r2, [r3, #36]	; 0x24
		  PID_Reset();
 8001320:	f002 fb2c 	bl	800397c <PID_Reset>
	  }



	  UARTTxDumpBuffer(&UART2);
 8001324:	4806      	ldr	r0, [pc, #24]	; (8001340 <main+0x29c>)
 8001326:	f001 fe0f 	bl	8002f48 <UARTTxDumpBuffer>
  {
 800132a:	e6f8      	b.n	800111e <main+0x7a>
 800132c:	2000063c 	.word	0x2000063c
 8001330:	200005f4 	.word	0x200005f4
 8001334:	2000054c 	.word	0x2000054c
 8001338:	20000350 	.word	0x20000350
 800133c:	200002c0 	.word	0x200002c0
 8001340:	200000b8 	.word	0x200000b8
 8001344:	20000684 	.word	0x20000684
 8001348:	200000d9 	.word	0x200000d9
 800134c:	40020400 	.word	0x40020400
 8001350:	200001e9 	.word	0x200001e9
 8001354:	200001f8 	.word	0x200001f8
 8001358:	20000200 	.word	0x20000200
 800135c:	20000014 	.word	0x20000014
 8001360:	200001e8 	.word	0x200001e8
 8001364:	200001de 	.word	0x200001de
 8001368:	200001eb 	.word	0x200001eb
 800136c:	200000ac 	.word	0x200000ac

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b094      	sub	sp, #80	; 0x50
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	f107 0320 	add.w	r3, r7, #32
 800137a:	2230      	movs	r2, #48	; 0x30
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f008 fd24 	bl	8009dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	4b27      	ldr	r3, [pc, #156]	; (8001438 <SystemClock_Config+0xc8>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	4a26      	ldr	r2, [pc, #152]	; (8001438 <SystemClock_Config+0xc8>)
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a2:	6413      	str	r3, [r2, #64]	; 0x40
 80013a4:	4b24      	ldr	r3, [pc, #144]	; (8001438 <SystemClock_Config+0xc8>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	4b21      	ldr	r3, [pc, #132]	; (800143c <SystemClock_Config+0xcc>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a20      	ldr	r2, [pc, #128]	; (800143c <SystemClock_Config+0xcc>)
 80013ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b1e      	ldr	r3, [pc, #120]	; (800143c <SystemClock_Config+0xcc>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013cc:	2302      	movs	r3, #2
 80013ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d0:	2301      	movs	r3, #1
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d4:	2310      	movs	r3, #16
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d8:	2302      	movs	r3, #2
 80013da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013dc:	2300      	movs	r3, #0
 80013de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013e0:	2308      	movs	r3, #8
 80013e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80013e4:	2364      	movs	r3, #100	; 0x64
 80013e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e8:	2302      	movs	r3, #2
 80013ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013ec:	2304      	movs	r3, #4
 80013ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f0:	f107 0320 	add.w	r3, r7, #32
 80013f4:	4618      	mov	r0, r3
 80013f6:	f005 ffad 	bl	8007354 <HAL_RCC_OscConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001400:	f002 fe0e 	bl	8004020 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001404:	230f      	movs	r3, #15
 8001406:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001408:	2302      	movs	r3, #2
 800140a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001414:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2103      	movs	r1, #3
 8001420:	4618      	mov	r0, r3
 8001422:	f006 fa0f 	bl	8007844 <HAL_RCC_ClockConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800142c:	f002 fdf8 	bl	8004020 <Error_Handler>
  }
}
 8001430:	bf00      	nop
 8001432:	3750      	adds	r7, #80	; 0x50
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40007000 	.word	0x40007000

08001440 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_I2C1_Init+0x54>)
 8001446:	4a14      	ldr	r2, [pc, #80]	; (8001498 <MX_I2C1_Init+0x58>)
 8001448:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_I2C1_Init+0x54>)
 800144c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001450:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <MX_I2C1_Init+0x54>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_I2C1_Init+0x54>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <MX_I2C1_Init+0x54>)
 8001460:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001464:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_I2C1_Init+0x54>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_I2C1_Init+0x54>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_I2C1_Init+0x54>)
 8001474:	2200      	movs	r2, #0
 8001476:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_I2C1_Init+0x54>)
 800147a:	2200      	movs	r2, #0
 800147c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_I2C1_Init+0x54>)
 8001480:	f004 f81a 	bl	80054b8 <HAL_I2C_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800148a:	f002 fdc9 	bl	8004020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200004f8 	.word	0x200004f8
 8001498:	40005400 	.word	0x40005400

0800149c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08c      	sub	sp, #48	; 0x30
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	2224      	movs	r2, #36	; 0x24
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f008 fc8e 	bl	8009dcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014b8:	4b22      	ldr	r3, [pc, #136]	; (8001544 <MX_TIM1_Init+0xa8>)
 80014ba:	4a23      	ldr	r2, [pc, #140]	; (8001548 <MX_TIM1_Init+0xac>)
 80014bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <MX_TIM1_Init+0xa8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c4:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <MX_TIM1_Init+0xa8>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24575;
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <MX_TIM1_Init+0xa8>)
 80014cc:	f645 72ff 	movw	r2, #24575	; 0x5fff
 80014d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <MX_TIM1_Init+0xa8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_TIM1_Init+0xa8>)
 80014da:	2200      	movs	r2, #0
 80014dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <MX_TIM1_Init+0xa8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014e4:	2303      	movs	r3, #3
 80014e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014ec:	2301      	movs	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014fc:	2301      	movs	r3, #1
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	4619      	mov	r1, r3
 800150e:	480d      	ldr	r0, [pc, #52]	; (8001544 <MX_TIM1_Init+0xa8>)
 8001510:	f006 fdaa 	bl	8008068 <HAL_TIM_Encoder_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800151a:	f002 fd81 	bl	8004020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	4619      	mov	r1, r3
 800152a:	4806      	ldr	r0, [pc, #24]	; (8001544 <MX_TIM1_Init+0xa8>)
 800152c:	f007 fc4e 	bl	8008dcc <HAL_TIMEx_MasterConfigSynchronization>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001536:	f002 fd73 	bl	8004020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	3730      	adds	r7, #48	; 0x30
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200005f4 	.word	0x200005f4
 8001548:	40010000 	.word	0x40010000

0800154c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001560:	463b      	mov	r3, r7
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001568:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <MX_TIM2_Init+0x94>)
 800156a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800156e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MX_TIM2_Init+0x94>)
 8001572:	2263      	movs	r2, #99	; 0x63
 8001574:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_TIM2_Init+0x94>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800157c:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <MX_TIM2_Init+0x94>)
 800157e:	f04f 32ff 	mov.w	r2, #4294967295
 8001582:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_TIM2_Init+0x94>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <MX_TIM2_Init+0x94>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001590:	4813      	ldr	r0, [pc, #76]	; (80015e0 <MX_TIM2_Init+0x94>)
 8001592:	f006 fb53 	bl	8007c3c <HAL_TIM_Base_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800159c:	f002 fd40 	bl	8004020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	4619      	mov	r1, r3
 80015ac:	480c      	ldr	r0, [pc, #48]	; (80015e0 <MX_TIM2_Init+0x94>)
 80015ae:	f007 f855 	bl	800865c <HAL_TIM_ConfigClockSource>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015b8:	f002 fd32 	bl	8004020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_TIM2_Init+0x94>)
 80015ca:	f007 fbff 	bl	8008dcc <HAL_TIMEx_MasterConfigSynchronization>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015d4:	f002 fd24 	bl	8004020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000063c 	.word	0x2000063c

080015e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08e      	sub	sp, #56	; 0x38
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f8:	f107 0320 	add.w	r3, r7, #32
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	615a      	str	r2, [r3, #20]
 8001612:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001614:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <MX_TIM3_Init+0xe4>)
 8001616:	4a2d      	ldr	r2, [pc, #180]	; (80016cc <MX_TIM3_Init+0xe8>)
 8001618:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800161a:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <MX_TIM3_Init+0xe4>)
 800161c:	2200      	movs	r2, #0
 800161e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001620:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <MX_TIM3_Init+0xe4>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001626:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <MX_TIM3_Init+0xe4>)
 8001628:	f242 7210 	movw	r2, #10000	; 0x2710
 800162c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162e:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <MX_TIM3_Init+0xe4>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001634:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <MX_TIM3_Init+0xe4>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800163a:	4823      	ldr	r0, [pc, #140]	; (80016c8 <MX_TIM3_Init+0xe4>)
 800163c:	f006 fafe 	bl	8007c3c <HAL_TIM_Base_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001646:	f002 fceb 	bl	8004020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001650:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001654:	4619      	mov	r1, r3
 8001656:	481c      	ldr	r0, [pc, #112]	; (80016c8 <MX_TIM3_Init+0xe4>)
 8001658:	f007 f800 	bl	800865c <HAL_TIM_ConfigClockSource>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001662:	f002 fcdd 	bl	8004020 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001666:	4818      	ldr	r0, [pc, #96]	; (80016c8 <MX_TIM3_Init+0xe4>)
 8001668:	f006 fbf4 	bl	8007e54 <HAL_TIM_PWM_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001672:	f002 fcd5 	bl	8004020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	4619      	mov	r1, r3
 8001684:	4810      	ldr	r0, [pc, #64]	; (80016c8 <MX_TIM3_Init+0xe4>)
 8001686:	f007 fba1 	bl	8008dcc <HAL_TIMEx_MasterConfigSynchronization>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001690:	f002 fcc6 	bl	8004020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001694:	2360      	movs	r3, #96	; 0x60
 8001696:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2200      	movs	r2, #0
 80016a8:	4619      	mov	r1, r3
 80016aa:	4807      	ldr	r0, [pc, #28]	; (80016c8 <MX_TIM3_Init+0xe4>)
 80016ac:	f006 ff18 	bl	80084e0 <HAL_TIM_PWM_ConfigChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016b6:	f002 fcb3 	bl	8004020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016ba:	4803      	ldr	r0, [pc, #12]	; (80016c8 <MX_TIM3_Init+0xe4>)
 80016bc:	f002 fdba 	bl	8004234 <HAL_TIM_MspPostInit>

}
 80016c0:	bf00      	nop
 80016c2:	3738      	adds	r7, #56	; 0x38
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	2000054c 	.word	0x2000054c
 80016cc:	40000400 	.word	0x40000400

080016d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <MX_USART2_UART_Init+0x50>)
 80016d6:	4a13      	ldr	r2, [pc, #76]	; (8001724 <MX_USART2_UART_Init+0x54>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_USART2_UART_Init+0x50>)
 80016dc:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80016e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MX_USART2_UART_Init+0x50>)
 80016e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016e8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <MX_USART2_UART_Init+0x50>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MX_USART2_UART_Init+0x50>)
 80016f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_USART2_UART_Init+0x50>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <MX_USART2_UART_Init+0x50>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_USART2_UART_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_USART2_UART_Init+0x50>)
 800170c:	f007 fbe0 	bl	8008ed0 <HAL_UART_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001716:	f002 fc83 	bl	8004020 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000684 	.word	0x20000684
 8001724:	40004400 	.word	0x40004400

08001728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <MX_DMA_Init+0x4c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a0f      	ldr	r2, [pc, #60]	; (8001774 <MX_DMA_Init+0x4c>)
 8001738:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <MX_DMA_Init+0x4c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	2010      	movs	r0, #16
 8001750:	f003 f89d 	bl	800488e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001754:	2010      	movs	r0, #16
 8001756:	f003 f8b6 	bl	80048c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	2011      	movs	r0, #17
 8001760:	f003 f895 	bl	800488e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001764:	2011      	movs	r0, #17
 8001766:	f003 f8ae 	bl	80048c6 <HAL_NVIC_EnableIRQ>

}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b5f      	ldr	r3, [pc, #380]	; (8001910 <MX_GPIO_Init+0x198>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a5e      	ldr	r2, [pc, #376]	; (8001910 <MX_GPIO_Init+0x198>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b5c      	ldr	r3, [pc, #368]	; (8001910 <MX_GPIO_Init+0x198>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b58      	ldr	r3, [pc, #352]	; (8001910 <MX_GPIO_Init+0x198>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a57      	ldr	r2, [pc, #348]	; (8001910 <MX_GPIO_Init+0x198>)
 80017b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b55      	ldr	r3, [pc, #340]	; (8001910 <MX_GPIO_Init+0x198>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	4b51      	ldr	r3, [pc, #324]	; (8001910 <MX_GPIO_Init+0x198>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a50      	ldr	r2, [pc, #320]	; (8001910 <MX_GPIO_Init+0x198>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b4e      	ldr	r3, [pc, #312]	; (8001910 <MX_GPIO_Init+0x198>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	4b4a      	ldr	r3, [pc, #296]	; (8001910 <MX_GPIO_Init+0x198>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a49      	ldr	r2, [pc, #292]	; (8001910 <MX_GPIO_Init+0x198>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b47      	ldr	r3, [pc, #284]	; (8001910 <MX_GPIO_Init+0x198>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	2120      	movs	r1, #32
 8001802:	4844      	ldr	r0, [pc, #272]	; (8001914 <MX_GPIO_Init+0x19c>)
 8001804:	f003 fe26 	bl	8005454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Lamp1_Pin|Lamp2_Pin, GPIO_PIN_SET);
 8001808:	2201      	movs	r2, #1
 800180a:	2106      	movs	r1, #6
 800180c:	4842      	ldr	r0, [pc, #264]	; (8001918 <MX_GPIO_Init+0x1a0>)
 800180e:	f003 fe21 	bl	8005454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	4841      	ldr	r0, [pc, #260]	; (800191c <MX_GPIO_Init+0x1a4>)
 8001818:	f003 fe1c 	bl	8005454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Lamp3_GPIO_Port, Lamp3_Pin, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001822:	483c      	ldr	r0, [pc, #240]	; (8001914 <MX_GPIO_Init+0x19c>)
 8001824:	f003 fe16 	bl	8005454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800182e:	4b3c      	ldr	r3, [pc, #240]	; (8001920 <MX_GPIO_Init+0x1a8>)
 8001830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	4837      	ldr	r0, [pc, #220]	; (800191c <MX_GPIO_Init+0x1a4>)
 800183e:	f003 fc6d 	bl	800511c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Lamp3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Lamp3_Pin;
 8001842:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	482e      	ldr	r0, [pc, #184]	; (8001914 <MX_GPIO_Init+0x19c>)
 800185c:	f003 fc5e 	bl	800511c <HAL_GPIO_Init>

  /*Configure GPIO pins : Lamp1_Pin Lamp2_Pin */
  GPIO_InitStruct.Pin = Lamp1_Pin|Lamp2_Pin;
 8001860:	2306      	movs	r3, #6
 8001862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	4828      	ldr	r0, [pc, #160]	; (8001918 <MX_GPIO_Init+0x1a0>)
 8001878:	f003 fc50 	bl	800511c <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Switch_Signal_Pin */
  GPIO_InitStruct.Pin = Emergency_Switch_Signal_Pin;
 800187c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001886:	2302      	movs	r3, #2
 8001888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Switch_Signal_GPIO_Port, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	4821      	ldr	r0, [pc, #132]	; (8001918 <MX_GPIO_Init+0x1a0>)
 8001892:	f003 fc43 	bl	800511c <HAL_GPIO_Init>

  /*Configure GPIO pin : Index_Signal_Pin */
  GPIO_InitStruct.Pin = Index_Signal_Pin;
 8001896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800189a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <MX_GPIO_Init+0x1ac>)
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Index_Signal_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	481b      	ldr	r0, [pc, #108]	; (8001918 <MX_GPIO_Init+0x1a0>)
 80018ac:	f003 fc36 	bl	800511c <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	4815      	ldr	r0, [pc, #84]	; (800191c <MX_GPIO_Init+0x1a4>)
 80018c8:	f003 fc28 	bl	800511c <HAL_GPIO_Init>

  /*Configure GPIO pin : LimitSwitchSignal_Pin */
  GPIO_InitStruct.Pin = LimitSwitchSignal_Pin;
 80018cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <MX_GPIO_Init+0x1ac>)
 80018d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LimitSwitchSignal_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	480e      	ldr	r0, [pc, #56]	; (800191c <MX_GPIO_Init+0x1a4>)
 80018e2:	f003 fc1b 	bl	800511c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	2017      	movs	r0, #23
 80018ec:	f002 ffcf 	bl	800488e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018f0:	2017      	movs	r0, #23
 80018f2:	f002 ffe8 	bl	80048c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2028      	movs	r0, #40	; 0x28
 80018fc:	f002 ffc7 	bl	800488e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001900:	2028      	movs	r0, #40	; 0x28
 8001902:	f002 ffe0 	bl	80048c6 <HAL_NVIC_EnableIRQ>

}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000
 8001918:	40020400 	.word	0x40020400
 800191c:	40020800 	.word	0x40020800
 8001920:	10210000 	.word	0x10210000
 8001924:	10110000 	.word	0x10110000

08001928 <EncoderVelocityAndPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 12288
#define  MAX_ENCODER_PERIOD 24576

void EncoderVelocityAndPosition_Update()
{
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	ed2d 8b02 	vpush	{d8}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0

	static float EncoderLastVelocity = 0;
	static float Velocity_Output = 0;
	static float Acceration_Output = 0;
	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8001932:	4b45      	ldr	r3, [pc, #276]	; (8001a48 <EncoderVelocityAndPosition_Update+0x120>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
	uint64_t EncoderNowTimestamp = micros();
 800193a:	f000 f907 	bl	8001b4c <micros>
 800193e:	e9c7 0106 	strd	r0, r1, [r7, #24]

	int32_t EncoderPositionDiff;
	float EncoderVelocityDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8001942:	4b42      	ldr	r3, [pc, #264]	; (8001a4c <EncoderVelocityAndPosition_Update+0x124>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800194c:	1a84      	subs	r4, r0, r2
 800194e:	eb61 0503 	sbc.w	r5, r1, r3
 8001952:	e9c7 4504 	strd	r4, r5, [r7, #16]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8001956:	4b3e      	ldr	r3, [pc, #248]	; (8001a50 <EncoderVelocityAndPosition_Update+0x128>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	60fb      	str	r3, [r7, #12]

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8001960:	4a3b      	ldr	r2, [pc, #236]	; (8001a50 <EncoderVelocityAndPosition_Update+0x128>)
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8001966:	4939      	ldr	r1, [pc, #228]	; (8001a4c <EncoderVelocityAndPosition_Update+0x124>)
 8001968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800196c:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity and Encoder Pos
	PositionPIDController.OutputFeedback = EncoderNowPosition;
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	ee07 3a90 	vmov	s15, r3
 8001976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800197a:	4b36      	ldr	r3, [pc, #216]	; (8001a54 <EncoderVelocityAndPosition_Update+0x12c>)
 800197c:	edc3 7a08 	vstr	s15, [r3, #32]

	// LPF
	Velocity_Output = (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;  /// Pulse per second
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4a35      	ldr	r2, [pc, #212]	; (8001a58 <EncoderVelocityAndPosition_Update+0x130>)
 8001984:	fb02 f303 	mul.w	r3, r2, r3
 8001988:	ee07 3a90 	vmov	s15, r3
 800198c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001990:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001994:	f7ff f9c4 	bl	8000d20 <__aeabi_ul2f>
 8001998:	ee07 0a10 	vmov	s14, r0
 800199c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80019a0:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <EncoderVelocityAndPosition_Update+0x134>)
 80019a2:	edc3 7a00 	vstr	s15, [r3]
	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*299))/300.0;
 80019a6:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <EncoderVelocityAndPosition_Update+0x138>)
 80019a8:	edd3 7a08 	vldr	s15, [r3, #32]
 80019ac:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001a64 <EncoderVelocityAndPosition_Update+0x13c>
 80019b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <EncoderVelocityAndPosition_Update+0x134>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019be:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001a68 <EncoderVelocityAndPosition_Update+0x140>
 80019c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <EncoderVelocityAndPosition_Update+0x138>)
 80019c8:	edc3 7a08 	vstr	s15, [r3, #32]
//	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*49))/50.0;

	float EncoderNowVelocity = VelocityPIDController.OutputFeedback;
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <EncoderVelocityAndPosition_Update+0x138>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	60bb      	str	r3, [r7, #8]

	EncoderVelocityDiff = EncoderNowVelocity - EncoderLastVelocity;
 80019d2:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <EncoderVelocityAndPosition_Update+0x144>)
 80019d4:	edd3 7a00 	vldr	s15, [r3]
 80019d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80019dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e0:	edc7 7a01 	vstr	s15, [r7, #4]
	EncoderLastVelocity = VelocityPIDController.OutputFeedback;
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <EncoderVelocityAndPosition_Update+0x138>)
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4a20      	ldr	r2, [pc, #128]	; (8001a6c <EncoderVelocityAndPosition_Update+0x144>)
 80019ea:	6013      	str	r3, [r2, #0]

	Acceration_Output = ( EncoderVelocityDiff * 1000000)  / (float) EncoderTimeDiff;
 80019ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001a70 <EncoderVelocityAndPosition_Update+0x148>
 80019f4:	ee27 8a87 	vmul.f32	s16, s15, s14
 80019f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019fc:	f7ff f990 	bl	8000d20 <__aeabi_ul2f>
 8001a00:	ee07 0a10 	vmov	s14, r0
 8001a04:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <EncoderVelocityAndPosition_Update+0x14c>)
 8001a0a:	edc3 7a00 	vstr	s15, [r3]
	Acceration_Output = (Acceration_Output + (EstimatedAngularAcceration*299))/300.0;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <EncoderVelocityAndPosition_Update+0x150>)
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001a64 <EncoderVelocityAndPosition_Update+0x13c>
 8001a18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <EncoderVelocityAndPosition_Update+0x14c>)
 8001a1e:	edd3 7a00 	vldr	s15, [r3]
 8001a22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a26:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001a68 <EncoderVelocityAndPosition_Update+0x140>
 8001a2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <EncoderVelocityAndPosition_Update+0x14c>)
 8001a30:	edc3 7a00 	vstr	s15, [r3]
//	Acceration_Output = (Acceration_Output + (EstimatedAngularAcceration*49))/50.0;
	EstimatedAngularAcceration = ( Acceration_Output );
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <EncoderVelocityAndPosition_Update+0x14c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0f      	ldr	r2, [pc, #60]	; (8001a78 <EncoderVelocityAndPosition_Update+0x150>)
 8001a3a:	6013      	str	r3, [r2, #0]

}
 8001a3c:	bf00      	nop
 8001a3e:	3728      	adds	r7, #40	; 0x28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	ecbd 8b02 	vpop	{d8}
 8001a46:	bdb0      	pop	{r4, r5, r7, pc}
 8001a48:	200005f4 	.word	0x200005f4
 8001a4c:	20000360 	.word	0x20000360
 8001a50:	20000368 	.word	0x20000368
 8001a54:	20000200 	.word	0x20000200
 8001a58:	000f4240 	.word	0x000f4240
 8001a5c:	2000036c 	.word	0x2000036c
 8001a60:	20000240 	.word	0x20000240
 8001a64:	43958000 	.word	0x43958000
 8001a68:	43960000 	.word	0x43960000
 8001a6c:	20000370 	.word	0x20000370
 8001a70:	49742400 	.word	0x49742400
 8001a74:	20000374 	.word	0x20000374
 8001a78:	2000035c 	.word	0x2000035c

08001a7c <Encoder_SetHome_Position>:


void Encoder_SetHome_Position()
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
	HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <Encoder_SetHome_Position+0x2c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a09      	ldr	r2, [pc, #36]	; (8001aac <Encoder_SetHome_Position+0x30>)
 8001a86:	6852      	ldr	r2, [r2, #4]
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24
	StabilizePosition = CUSSStruc.PPRxQEI;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <Encoder_SetHome_Position+0x30>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	ee07 3a90 	vmov	s15, r3
 8001a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <Encoder_SetHome_Position+0x34>)
 8001a98:	edc3 7a00 	vstr	s15, [r3]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	200005f4 	.word	0x200005f4
 8001aac:	20000350 	.word	0x20000350
 8001ab0:	200001f8 	.word	0x200001f8

08001ab4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ab4:	b4b0      	push	{r4, r5, r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d109      	bne.n	8001ad8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	f112 34ff 	adds.w	r4, r2, #4294967295
 8001ace:	f143 0500 	adc.w	r5, r3, #0
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ad4:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bcb0      	pop	{r4, r5, r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	2000063c 	.word	0x2000063c
 8001ae8:	200000b0 	.word	0x200000b0

08001aec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	80fb      	strh	r3, [r7, #6]
    if ((GPIO_Pin == GPIO_PIN_13) || (GPIO_Pin == GPIO_PIN_8))  //13 -> BlueButton, 8 -> Limitswitch
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_EXTI_Callback+0x1a>
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b04:	d115      	bne.n	8001b32 <HAL_GPIO_EXTI_Callback+0x46>
	{
    	if (Munmunbot_State == STATE_SetHome)
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x50>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d111      	bne.n	8001b32 <HAL_GPIO_EXTI_Callback+0x46>
    	{
    		if (SethomeMode == SetHomeState_1)
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d10d      	bne.n	8001b32 <HAL_GPIO_EXTI_Callback+0x46>
    		{
    			Encoder_SetHome_Position();
 8001b16:	f7ff ffb1 	bl	8001a7c <Encoder_SetHome_Position>
    			SethomeMode = SetHomeState_2;
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	701a      	strb	r2, [r3, #0]
    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2180      	movs	r1, #128	; 0x80
 8001b24:	4807      	ldr	r0, [pc, #28]	; (8001b44 <HAL_GPIO_EXTI_Callback+0x58>)
 8001b26:	f003 fc95 	bl	8005454 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	635a      	str	r2, [r3, #52]	; 0x34
    		}
    	}
	}

}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200000d9 	.word	0x200000d9
 8001b40:	200000da 	.word	0x200000da
 8001b44:	40020800 	.word	0x40020800
 8001b48:	2000054c 	.word	0x2000054c

08001b4c <micros>:

uint64_t micros()
{
 8001b4c:	b4b0      	push	{r4, r5, r7}
 8001b4e:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <micros+0x2c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	4618      	mov	r0, r3
 8001b58:	f04f 0100 	mov.w	r1, #0
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <micros+0x30>)
 8001b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b62:	1884      	adds	r4, r0, r2
 8001b64:	eb41 0503 	adc.w	r5, r1, r3
 8001b68:	4622      	mov	r2, r4
 8001b6a:	462b      	mov	r3, r5
}
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bcb0      	pop	{r4, r5, r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	2000063c 	.word	0x2000063c
 8001b7c:	200000b0 	.word	0x200000b0

08001b80 <ConverterUnitSystemStructureInit>:

void ConverterUnitSystemStructureInit(ConverterUnitSystemStructure *CUSSvar)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	CUSSvar->PPR = 2048;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b8e:	601a      	str	r2, [r3, #0]
	CUSSvar->PPRxQEI = CUSSvar->PPR * 4;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	009a      	lsls	r2, r3, #2
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	605a      	str	r2, [r3, #4]
	CUSSvar->RPMp = 10;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a03      	ldr	r2, [pc, #12]	; (8001bac <ConverterUnitSystemStructureInit+0x2c>)
 8001b9e:	609a      	str	r2, [r3, #8]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	41200000 	.word	0x41200000

08001bb0 <TrajectoryGenerationStructureInit>:

void TrajectoryGenerationStructureInit(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
	TGSvar->AngularAccerationMax_Setting = (0.4*(CUSSvar->PPRxQEI))/(3.1416*2.0);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fc4c 	bl	800045c <__aeabi_ui2d>
 8001bc4:	a347      	add	r3, pc, #284	; (adr r3, 8001ce4 <TrajectoryGenerationStructureInit+0x134>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe fcc1 	bl	8000550 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	a345      	add	r3, pc, #276	; (adr r3, 8001cec <TrajectoryGenerationStructureInit+0x13c>)
 8001bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bdc:	f7fe fde2 	bl	80007a4 <__aeabi_ddiv>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7fe ff82 	bl	8000af0 <__aeabi_d2f>
 8001bec:	4602      	mov	r2, r0
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	615a      	str	r2, [r3, #20]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*10)/(60.0);  //pps
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fc2c 	bl	800045c <__aeabi_ui2d>
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <TrajectoryGenerationStructureInit+0x128>)
 8001c0a:	f7fe fdcb 	bl	80007a4 <__aeabi_ddiv>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4610      	mov	r0, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	f7fe ff6b 	bl	8000af0 <__aeabi_d2f>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	611a      	str	r2, [r3, #16]
	TGSvar->Start_Theta = CUSSStruc.PPRxQEI;  /// PPRxQEI == 0 degree
 8001c20:	4b2e      	ldr	r3, [pc, #184]	; (8001cdc <TrajectoryGenerationStructureInit+0x12c>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	ee07 3a90 	vmov	s15, r3
 8001c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	TGSvar->Mode = 0;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	TGSvar->Submode = 0;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	TGSvar->Loop_Freq = 1000;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c48:	659a      	str	r2, [r3, #88]	; 0x58
	TGSvar->Loop_Period = 1000000/(TGSvar->Loop_Freq);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	4a24      	ldr	r2, [pc, #144]	; (8001ce0 <TrajectoryGenerationStructureInit+0x130>)
 8001c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	edc3 7a03 	vstr	s15, [r3, #12]
	TGSvar->AngularVelocityFinalMin = 0*1.8*(CUSSvar->PPRxQEI)/60.0;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fbe3 	bl	800045c <__aeabi_ui2d>
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	f7fe fc57 	bl	8000550 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <TrajectoryGenerationStructureInit+0x128>)
 8001cb0:	f7fe fd78 	bl	80007a4 <__aeabi_ddiv>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7fe ff18 	bl	8000af0 <__aeabi_d2f>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	679a      	str	r2, [r3, #120]	; 0x78
	TGSvar->Alpha = 1;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ccc:	67da      	str	r2, [r3, #124]	; 0x7c

}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	404e0000 	.word	0x404e0000
 8001cdc:	20000350 	.word	0x20000350
 8001ce0:	000f4240 	.word	0x000f4240
 8001ce4:	9999999a 	.word	0x9999999a
 8001ce8:	3fd99999 	.word	0x3fd99999
 8001cec:	2e48e8a7 	.word	0x2e48e8a7
 8001cf0:	401921ff 	.word	0x401921ff
 8001cf4:	00000000 	.word	0x00000000

08001cf8 <LinkMovingPIDLoad>:

void LinkMovingPIDLoad()
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
	PositionPIDController.Kp = 0.5;
 8001cfc:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <LinkMovingPIDLoad+0x88>)
 8001cfe:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001d02:	601a      	str	r2, [r3, #0]
	PositionPIDController.Ki = 1.1;
 8001d04:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <LinkMovingPIDLoad+0x88>)
 8001d06:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <LinkMovingPIDLoad+0x8c>)
 8001d08:	605a      	str	r2, [r3, #4]
	PositionPIDController.Kd = 0.01;
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <LinkMovingPIDLoad+0x88>)
 8001d0c:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <LinkMovingPIDLoad+0x90>)
 8001d0e:	609a      	str	r2, [r3, #8]
	PositionPIDController.offSet = 0;
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <LinkMovingPIDLoad+0x88>)
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
	PositionPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001d18:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <LinkMovingPIDLoad+0x94>)
 8001d1a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	f7fe fbdf 	bl	80004e4 <__aeabi_ul2d>
 8001d26:	a314      	add	r3, pc, #80	; (adr r3, 8001d78 <LinkMovingPIDLoad+0x80>)
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	f7fe fd3a 	bl	80007a4 <__aeabi_ddiv>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4912      	ldr	r1, [pc, #72]	; (8001d80 <LinkMovingPIDLoad+0x88>)
 8001d36:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	VelocityPIDController.Kp = 5.3;
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <LinkMovingPIDLoad+0x98>)
 8001d3c:	4a15      	ldr	r2, [pc, #84]	; (8001d94 <LinkMovingPIDLoad+0x9c>)
 8001d3e:	601a      	str	r2, [r3, #0]
	VelocityPIDController.Ki = 15;
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <LinkMovingPIDLoad+0x98>)
 8001d42:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <LinkMovingPIDLoad+0xa0>)
 8001d44:	605a      	str	r2, [r3, #4]
	VelocityPIDController.Kd = 0.06;
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <LinkMovingPIDLoad+0x98>)
 8001d48:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <LinkMovingPIDLoad+0xa4>)
 8001d4a:	609a      	str	r2, [r3, #8]
	VelocityPIDController.offSet = 1500;
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <LinkMovingPIDLoad+0x98>)
 8001d4e:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <LinkMovingPIDLoad+0xa8>)
 8001d50:	611a      	str	r2, [r3, #16]
	VelocityPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <LinkMovingPIDLoad+0x94>)
 8001d54:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f7fe fbc2 	bl	80004e4 <__aeabi_ul2d>
 8001d60:	a305      	add	r3, pc, #20	; (adr r3, 8001d78 <LinkMovingPIDLoad+0x80>)
 8001d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d66:	f7fe fd1d 	bl	80007a4 <__aeabi_ddiv>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <LinkMovingPIDLoad+0x98>)
 8001d70:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	00000000 	.word	0x00000000
 8001d7c:	412e8480 	.word	0x412e8480
 8001d80:	20000200 	.word	0x20000200
 8001d84:	3f8ccccd 	.word	0x3f8ccccd
 8001d88:	3c23d70a 	.word	0x3c23d70a
 8001d8c:	200002c0 	.word	0x200002c0
 8001d90:	20000240 	.word	0x20000240
 8001d94:	40a9999a 	.word	0x40a9999a
 8001d98:	41700000 	.word	0x41700000
 8001d9c:	3d75c28f 	.word	0x3d75c28f
 8001da0:	44bb8000 	.word	0x44bb8000
 8001da4:	00000000 	.word	0x00000000

08001da8 <StabilizerPIDLoad>:


void StabilizerPIDLoad()
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
	StabilizerPIDController.Kp = 0.5;
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <StabilizerPIDLoad+0x50>)
 8001dae:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001db2:	601a      	str	r2, [r3, #0]
	StabilizerPIDController.Ki = 1.1;
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <StabilizerPIDLoad+0x50>)
 8001db6:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <StabilizerPIDLoad+0x54>)
 8001db8:	605a      	str	r2, [r3, #4]
	StabilizerPIDController.Kd = 0.01;
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <StabilizerPIDLoad+0x50>)
 8001dbc:	4a10      	ldr	r2, [pc, #64]	; (8001e00 <StabilizerPIDLoad+0x58>)
 8001dbe:	609a      	str	r2, [r3, #8]
	StabilizerPIDController.offSet = 0;
 8001dc0:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <StabilizerPIDLoad+0x50>)
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
	StabilizerPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <StabilizerPIDLoad+0x5c>)
 8001dca:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f7fe fb87 	bl	80004e4 <__aeabi_ul2d>
 8001dd6:	a306      	add	r3, pc, #24	; (adr r3, 8001df0 <StabilizerPIDLoad+0x48>)
 8001dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ddc:	f7fe fce2 	bl	80007a4 <__aeabi_ddiv>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4904      	ldr	r1, [pc, #16]	; (8001df8 <StabilizerPIDLoad+0x50>)
 8001de6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	00000000 	.word	0x00000000
 8001df4:	412e8480 	.word	0x412e8480
 8001df8:	20000280 	.word	0x20000280
 8001dfc:	3f8ccccd 	.word	0x3f8ccccd
 8001e00:	3c23d70a 	.word	0x3c23d70a
 8001e04:	200002c0 	.word	0x200002c0

08001e08 <TrajectoryGenerationVelocityMaxSetting>:



void TrajectoryGenerationVelocityMaxSetting(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*(CUSSvar->RPMp))/(60.0);   ///RPM to pps
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e28:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001e70 <TrajectoryGenerationVelocityMaxSetting+0x68>
 8001e2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	edc3 7a04 	vstr	s15, [r3, #16]
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	edd3 6a04 	vldr	s13, [r3, #16]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	edd3 7a00 	vldr	s15, [r3]
 8001e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	42700000 	.word	0x42700000
 8001e74:	00000000 	.word	0x00000000

08001e78 <TrajectoryGenerationPrepareDATA>:

void TrajectoryGenerationPrepareDATA()
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	// fix start position base on Encoder
	TrjStruc.Start_Theta = htim1.Instance->CNT;
 8001e7c:	4b9e      	ldr	r3, [pc, #632]	; (80020f8 <TrajectoryGenerationPrepareDATA+0x280>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e8a:	4b9c      	ldr	r3, [pc, #624]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 8001e8c:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

	if (MovingLinkMode == LMM_Set_Pos_Directly)
 8001e90:	4b9b      	ldr	r3, [pc, #620]	; (8002100 <TrajectoryGenerationPrepareDATA+0x288>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d165      	bne.n	8001f64 <TrajectoryGenerationPrepareDATA+0xec>
	  {
		  TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(10000.0*2.0*3.14159));  //pulse
 8001e98:	4b9a      	ldr	r3, [pc, #616]	; (8002104 <TrajectoryGenerationPrepareDATA+0x28c>)
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b9a      	ldr	r3, [pc, #616]	; (8002108 <TrajectoryGenerationPrepareDATA+0x290>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	fb03 f302 	mul.w	r3, r3, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fad8 	bl	800045c <__aeabi_ui2d>
 8001eac:	a390      	add	r3, pc, #576	; (adr r3, 80020f0 <TrajectoryGenerationPrepareDATA+0x278>)
 8001eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb2:	f7fe fc77 	bl	80007a4 <__aeabi_ddiv>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f7fe fe17 	bl	8000af0 <__aeabi_d2f>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4a8d      	ldr	r2, [pc, #564]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 8001ec6:	6693      	str	r3, [r2, #104]	; 0x68
		  if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)   ///wrap input into 1 revolute.
 8001ec8:	4b8c      	ldr	r3, [pc, #560]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 8001eca:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001ece:	4b8e      	ldr	r3, [pc, #568]	; (8002108 <TrajectoryGenerationPrepareDATA+0x290>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	db0d      	blt.n	8001f00 <TrajectoryGenerationPrepareDATA+0x88>
		  {
			 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001ee4:	4b85      	ldr	r3, [pc, #532]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 8001ee6:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001eea:	4b87      	ldr	r3, [pc, #540]	; (8002108 <TrajectoryGenerationPrepareDATA+0x290>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	ee07 3a90 	vmov	s15, r3
 8001ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001efa:	4b80      	ldr	r3, [pc, #512]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 8001efc:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		  }
		  TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8001f00:	4b7e      	ldr	r3, [pc, #504]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 8001f02:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001f06:	4b80      	ldr	r3, [pc, #512]	; (8002108 <TrajectoryGenerationPrepareDATA+0x290>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	ee07 3a90 	vmov	s15, r3
 8001f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f16:	4b79      	ldr	r3, [pc, #484]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 8001f18:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

		  if (TrjStruc.Desire_Theta != TrjStruc.Start_Theta)
 8001f1c:	4b77      	ldr	r3, [pc, #476]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 8001f1e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001f22:	4b76      	ldr	r3, [pc, #472]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 8001f24:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001f28:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f30:	d00e      	beq.n	8001f50 <TrajectoryGenerationPrepareDATA+0xd8>
		  {
			  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 8001f32:	4b72      	ldr	r3, [pc, #456]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 8001f34:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001f38:	4b70      	ldr	r3, [pc, #448]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 8001f3a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f42:	4b6e      	ldr	r3, [pc, #440]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 8001f44:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
			  Munmunbot_State = STATE_Calculation;
 8001f48:	4b70      	ldr	r3, [pc, #448]	; (800210c <TrajectoryGenerationPrepareDATA+0x294>)
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	701a      	strb	r2, [r3, #0]
	  {
		MovingLinkMode = LMM_Not_Set;
		Munmunbot_State = STATE_Idle;
		ACK2Return(&UART2);
	  }
}
 8001f4e:	e0cd      	b.n	80020ec <TrajectoryGenerationPrepareDATA+0x274>
			Munmunbot_State = STATE_Idle;
 8001f50:	4b6e      	ldr	r3, [pc, #440]	; (800210c <TrajectoryGenerationPrepareDATA+0x294>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 8001f56:	4b6a      	ldr	r3, [pc, #424]	; (8002100 <TrajectoryGenerationPrepareDATA+0x288>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
			ACK2Return(&UART2);
 8001f5c:	486c      	ldr	r0, [pc, #432]	; (8002110 <TrajectoryGenerationPrepareDATA+0x298>)
 8001f5e:	f001 f89d 	bl	800309c <ACK2Return>
}
 8001f62:	e0c3      	b.n	80020ec <TrajectoryGenerationPrepareDATA+0x274>
	else if (MovingLinkMode == LMM_Set_Goal_1_Station || MovingLinkMode == LMM_Set_Goal_n_Station )
 8001f64:	4b66      	ldr	r3, [pc, #408]	; (8002100 <TrajectoryGenerationPrepareDATA+0x288>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d004      	beq.n	8001f76 <TrajectoryGenerationPrepareDATA+0xfe>
 8001f6c:	4b64      	ldr	r3, [pc, #400]	; (8002100 <TrajectoryGenerationPrepareDATA+0x288>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	f040 80b1 	bne.w	80020d8 <TrajectoryGenerationPrepareDATA+0x260>
		  if (NumberOfStationToGo == 0)
 8001f76:	4b67      	ldr	r3, [pc, #412]	; (8002114 <TrajectoryGenerationPrepareDATA+0x29c>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10f      	bne.n	8001f9e <TrajectoryGenerationPrepareDATA+0x126>
				Munmunbot_State = STATE_Idle;
 8001f7e:	4b63      	ldr	r3, [pc, #396]	; (800210c <TrajectoryGenerationPrepareDATA+0x294>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
				NumberOfStationPTR = 0;
 8001f84:	4b64      	ldr	r3, [pc, #400]	; (8002118 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo = 0;
 8001f8a:	4b62      	ldr	r3, [pc, #392]	; (8002114 <TrajectoryGenerationPrepareDATA+0x29c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
				MovingLinkMode = LMM_Not_Set;
 8001f90:	4b5b      	ldr	r3, [pc, #364]	; (8002100 <TrajectoryGenerationPrepareDATA+0x288>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
				ACK2Return(&UART2);
 8001f96:	485e      	ldr	r0, [pc, #376]	; (8002110 <TrajectoryGenerationPrepareDATA+0x298>)
 8001f98:	f001 f880 	bl	800309c <ACK2Return>
		  if (NumberOfStationToGo == 0)
 8001f9c:	e0a6      	b.n	80020ec <TrajectoryGenerationPrepareDATA+0x274>
			Current_Station = Angularpos_InputArray[NumberOfStationPTR];
 8001f9e:	4b5e      	ldr	r3, [pc, #376]	; (8002118 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b5d      	ldr	r3, [pc, #372]	; (800211c <TrajectoryGenerationPrepareDATA+0x2a4>)
 8001fa6:	5c9a      	ldrb	r2, [r3, r2]
 8001fa8:	4b5d      	ldr	r3, [pc, #372]	; (8002120 <TrajectoryGenerationPrepareDATA+0x2a8>)
 8001faa:	701a      	strb	r2, [r3, #0]
			if (Current_Station > 10)   //pass input
 8001fac:	4b5c      	ldr	r3, [pc, #368]	; (8002120 <TrajectoryGenerationPrepareDATA+0x2a8>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b0a      	cmp	r3, #10
 8001fb2:	d90c      	bls.n	8001fce <TrajectoryGenerationPrepareDATA+0x156>
				NumberOfStationPTR += 1;
 8001fb4:	4b58      	ldr	r3, [pc, #352]	; (8002118 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b56      	ldr	r3, [pc, #344]	; (8002118 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8001fbe:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo -= 1;
 8001fc0:	4b54      	ldr	r3, [pc, #336]	; (8002114 <TrajectoryGenerationPrepareDATA+0x29c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	4b52      	ldr	r3, [pc, #328]	; (8002114 <TrajectoryGenerationPrepareDATA+0x29c>)
 8001fca:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8001fcc:	e08e      	b.n	80020ec <TrajectoryGenerationPrepareDATA+0x274>
				TrjStruc.Desire_Theta = (StationPos[Current_Station-1]*CUSSStruc.PPRxQEI/(360.0))*5.0;   ///fix this if change algorithm
 8001fce:	4b54      	ldr	r3, [pc, #336]	; (8002120 <TrajectoryGenerationPrepareDATA+0x2a8>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	4a53      	ldr	r2, [pc, #332]	; (8002124 <TrajectoryGenerationPrepareDATA+0x2ac>)
 8001fd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b4a      	ldr	r3, [pc, #296]	; (8002108 <TrajectoryGenerationPrepareDATA+0x290>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	fb03 f302 	mul.w	r3, r3, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fa39 	bl	800045c <__aeabi_ui2d>
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	4b4e      	ldr	r3, [pc, #312]	; (8002128 <TrajectoryGenerationPrepareDATA+0x2b0>)
 8001ff0:	f7fe fbd8 	bl	80007a4 <__aeabi_ddiv>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	4b4a      	ldr	r3, [pc, #296]	; (800212c <TrajectoryGenerationPrepareDATA+0x2b4>)
 8002002:	f7fe faa5 	bl	8000550 <__aeabi_dmul>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	f7fe fd6f 	bl	8000af0 <__aeabi_d2f>
 8002012:	4603      	mov	r3, r0
 8002014:	4a39      	ldr	r2, [pc, #228]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 8002016:	6693      	str	r3, [r2, #104]	; 0x68
				if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)  ///wrap input into 1 revolute. ///shouldn't happen
 8002018:	4b38      	ldr	r3, [pc, #224]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 800201a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800201e:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <TrajectoryGenerationPrepareDATA+0x290>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	ee07 3a90 	vmov	s15, r3
 8002026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800202e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002032:	db0d      	blt.n	8002050 <TrajectoryGenerationPrepareDATA+0x1d8>
					TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8002034:	4b31      	ldr	r3, [pc, #196]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 8002036:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800203a:	4b33      	ldr	r3, [pc, #204]	; (8002108 <TrajectoryGenerationPrepareDATA+0x290>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800204a:	4b2c      	ldr	r3, [pc, #176]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 800204c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
				TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8002050:	4b2a      	ldr	r3, [pc, #168]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 8002052:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002056:	4b2c      	ldr	r3, [pc, #176]	; (8002108 <TrajectoryGenerationPrepareDATA+0x290>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002066:	4b25      	ldr	r3, [pc, #148]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 8002068:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
				if (TrjStruc.Desire_Theta == TrjStruc.Start_Theta)
 800206c:	4b23      	ldr	r3, [pc, #140]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 800206e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002072:	4b22      	ldr	r3, [pc, #136]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 8002074:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002078:	eeb4 7a67 	vcmp.f32	s14, s15
 800207c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002080:	d10f      	bne.n	80020a2 <TrajectoryGenerationPrepareDATA+0x22a>
					NumberOfStationPTR += 1;
 8002082:	4b25      	ldr	r3, [pc, #148]	; (8002118 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	3301      	adds	r3, #1
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <TrajectoryGenerationPrepareDATA+0x2a0>)
 800208c:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <TrajectoryGenerationPrepareDATA+0x29c>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	3b01      	subs	r3, #1
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <TrajectoryGenerationPrepareDATA+0x29c>)
 8002098:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_End_Effector_Working;
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <TrajectoryGenerationPrepareDATA+0x294>)
 800209c:	2205      	movs	r2, #5
 800209e:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 80020a0:	e024      	b.n	80020ec <TrajectoryGenerationPrepareDATA+0x274>
					TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 80020a2:	4b16      	ldr	r3, [pc, #88]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 80020a4:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 80020aa:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80020ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <TrajectoryGenerationPrepareDATA+0x284>)
 80020b4:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
					Munmunbot_State = STATE_Calculation;
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <TrajectoryGenerationPrepareDATA+0x294>)
 80020ba:	2203      	movs	r2, #3
 80020bc:	701a      	strb	r2, [r3, #0]
					NumberOfStationPTR += 1;
 80020be:	4b16      	ldr	r3, [pc, #88]	; (8002118 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	3301      	adds	r3, #1
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4b14      	ldr	r3, [pc, #80]	; (8002118 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80020c8:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 80020ca:	4b12      	ldr	r3, [pc, #72]	; (8002114 <TrajectoryGenerationPrepareDATA+0x29c>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b10      	ldr	r3, [pc, #64]	; (8002114 <TrajectoryGenerationPrepareDATA+0x29c>)
 80020d4:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 80020d6:	e009      	b.n	80020ec <TrajectoryGenerationPrepareDATA+0x274>
		MovingLinkMode = LMM_Not_Set;
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <TrajectoryGenerationPrepareDATA+0x288>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
		Munmunbot_State = STATE_Idle;
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <TrajectoryGenerationPrepareDATA+0x294>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
		ACK2Return(&UART2);
 80020e4:	480a      	ldr	r0, [pc, #40]	; (8002110 <TrajectoryGenerationPrepareDATA+0x298>)
 80020e6:	f000 ffd9 	bl	800309c <ACK2Return>
}
 80020ea:	e7ff      	b.n	80020ec <TrajectoryGenerationPrepareDATA+0x274>
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	99999999 	.word	0x99999999
 80020f4:	40eeadf9 	.word	0x40eeadf9
 80020f8:	200005f4 	.word	0x200005f4
 80020fc:	200002c0 	.word	0x200002c0
 8002100:	200001de 	.word	0x200001de
 8002104:	200001dc 	.word	0x200001dc
 8002108:	20000350 	.word	0x20000350
 800210c:	200000d9 	.word	0x200000d9
 8002110:	200000b8 	.word	0x200000b8
 8002114:	200001e0 	.word	0x200001e0
 8002118:	200001e1 	.word	0x200001e1
 800211c:	200000dc 	.word	0x200000dc
 8002120:	200001df 	.word	0x200001df
 8002124:	20000000 	.word	0x20000000
 8002128:	40768000 	.word	0x40768000
 800212c:	40140000 	.word	0x40140000

08002130 <TrajectoryGenerationCalculation>:

void TrajectoryGenerationCalculation()
{
 8002130:	b5b0      	push	{r4, r5, r7, lr}
 8002132:	af00      	add	r7, sp, #0
	if (TrjStruc.Delta_Theta < 0)
 8002134:	4b8d      	ldr	r3, [pc, #564]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002136:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800213a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800213e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002142:	d51b      	bpl.n	800217c <TrajectoryGenerationCalculation+0x4c>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting * -1;
 8002144:	4b89      	ldr	r3, [pc, #548]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002146:	edd3 7a05 	vldr	s15, [r3, #20]
 800214a:	eef1 7a67 	vneg.f32	s15, s15
 800214e:	4b87      	ldr	r3, [pc, #540]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002150:	edc3 7a07 	vstr	s15, [r3, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting *-1;
 8002154:	4b85      	ldr	r3, [pc, #532]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002156:	edd3 7a04 	vldr	s15, [r3, #16]
 800215a:	eef1 7a67 	vneg.f32	s15, s15
 800215e:	4b83      	ldr	r3, [pc, #524]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002160:	edc3 7a06 	vstr	s15, [r3, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta * -1;
 8002164:	4b81      	ldr	r3, [pc, #516]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002166:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800216a:	eef1 7a67 	vneg.f32	s15, s15
 800216e:	4b7f      	ldr	r3, [pc, #508]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002170:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
		 TrjStruc.Alpha = -1;
 8002174:	4b7d      	ldr	r3, [pc, #500]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002176:	4a7e      	ldr	r2, [pc, #504]	; (8002370 <TrajectoryGenerationCalculation+0x240>)
 8002178:	67da      	str	r2, [r3, #124]	; 0x7c
 800217a:	e017      	b.n	80021ac <TrajectoryGenerationCalculation+0x7c>
	  }
	  else if (TrjStruc.Delta_Theta > 0)
 800217c:	4b7b      	ldr	r3, [pc, #492]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 800217e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002182:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218a:	dd0f      	ble.n	80021ac <TrajectoryGenerationCalculation+0x7c>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting;
 800218c:	4b77      	ldr	r3, [pc, #476]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	4a76      	ldr	r2, [pc, #472]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002192:	61d3      	str	r3, [r2, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting;
 8002194:	4b75      	ldr	r3, [pc, #468]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	4a74      	ldr	r2, [pc, #464]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 800219a:	6193      	str	r3, [r2, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta;
 800219c:	4b73      	ldr	r3, [pc, #460]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	4a72      	ldr	r2, [pc, #456]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 80021a2:	6753      	str	r3, [r2, #116]	; 0x74
		 TrjStruc.Alpha = 1;
 80021a4:	4b71      	ldr	r3, [pc, #452]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 80021a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021aa:	67da      	str	r2, [r3, #124]	; 0x7c
	  }

	  if (TrjStruc.Abs_Delta_Theta < TrjStruc.Theta_min_for_LSPB)   ///Triangular mode0
 80021ac:	4b6f      	ldr	r3, [pc, #444]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 80021ae:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80021b2:	4b6e      	ldr	r3, [pc, #440]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 80021b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80021b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c0:	d55a      	bpl.n	8002278 <TrajectoryGenerationCalculation+0x148>
	  {
		 TrjStruc.BlendTimeTriangular = sqrt(TrjStruc.Abs_Delta_Theta/TrjStruc.AngularAccerationMax_Setting);
 80021c2:	4b6a      	ldr	r3, [pc, #424]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 80021c4:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80021c8:	4b68      	ldr	r3, [pc, #416]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 80021ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80021ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80021d2:	ee16 0a90 	vmov	r0, s13
 80021d6:	f7fe f963 	bl	80004a0 <__aeabi_f2d>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	ec43 2b10 	vmov	d0, r2, r3
 80021e2:	f007 fe83 	bl	8009eec <sqrt>
 80021e6:	ec53 2b10 	vmov	r2, r3, d0
 80021ea:	4610      	mov	r0, r2
 80021ec:	4619      	mov	r1, r3
 80021ee:	f7fe fc7f 	bl	8000af0 <__aeabi_d2f>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4a5d      	ldr	r2, [pc, #372]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 80021f6:	6053      	str	r3, [r2, #4]
		 TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 80021f8:	4b5c      	ldr	r3, [pc, #368]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 80021fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021fc:	4a5b      	ldr	r2, [pc, #364]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 80021fe:	6293      	str	r3, [r2, #40]	; 0x28
		 TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeTriangular*TrjStruc.BlendTimeTriangular))/2.0) + TrjStruc.Theta_Stamp_0;
 8002200:	4b5a      	ldr	r3, [pc, #360]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002202:	ed93 7a07 	vldr	s14, [r3, #28]
 8002206:	4b59      	ldr	r3, [pc, #356]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002208:	edd3 6a01 	vldr	s13, [r3, #4]
 800220c:	4b57      	ldr	r3, [pc, #348]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 800220e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221a:	ee17 0a90 	vmov	r0, s15
 800221e:	f7fe f93f 	bl	80004a0 <__aeabi_f2d>
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800222a:	f7fe fabb 	bl	80007a4 <__aeabi_ddiv>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4614      	mov	r4, r2
 8002234:	461d      	mov	r5, r3
 8002236:	4b4d      	ldr	r3, [pc, #308]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe f930 	bl	80004a0 <__aeabi_f2d>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4620      	mov	r0, r4
 8002246:	4629      	mov	r1, r5
 8002248:	f7fd ffcc 	bl	80001e4 <__adddf3>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	f7fe fc4c 	bl	8000af0 <__aeabi_d2f>
 8002258:	4603      	mov	r3, r0
 800225a:	4a44      	ldr	r2, [pc, #272]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 800225c:	62d3      	str	r3, [r2, #44]	; 0x2c
		 TrjStruc.Mode = 0;
 800225e:	4b43      	ldr	r3, [pc, #268]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002260:	2200      	movs	r2, #0
 8002262:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		 TrjStruc.Submode = 0;
 8002266:	4b41      	ldr	r3, [pc, #260]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002268:	2200      	movs	r2, #0
 800226a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		 TrjStruc.Subsubmode = 0;
 800226e:	4b3f      	ldr	r3, [pc, #252]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002270:	2200      	movs	r2, #0
 8002272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8002276:	e069      	b.n	800234c <TrajectoryGenerationCalculation+0x21c>
	  }
	  else if (TrjStruc.Abs_Delta_Theta >= TrjStruc.Theta_min_for_LSPB)  ///LSPB mode1
 8002278:	4b3c      	ldr	r3, [pc, #240]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 800227a:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800227e:	4b3b      	ldr	r3, [pc, #236]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002280:	edd3 7a03 	vldr	s15, [r3, #12]
 8002284:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228c:	db5e      	blt.n	800234c <TrajectoryGenerationCalculation+0x21c>
	  {
		  TrjStruc.LinearTimeLSPB = (TrjStruc.Abs_Delta_Theta-TrjStruc.Theta_min_for_LSPB)/TrjStruc.AngularVelocityMax_Setting;
 800228e:	4b37      	ldr	r3, [pc, #220]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002290:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002294:	4b35      	ldr	r3, [pc, #212]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002296:	edd3 7a03 	vldr	s15, [r3, #12]
 800229a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800229e:	4b33      	ldr	r3, [pc, #204]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 80022a0:	ed93 7a04 	vldr	s14, [r3, #16]
 80022a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022a8:	4b30      	ldr	r3, [pc, #192]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 80022aa:	edc3 7a02 	vstr	s15, [r3, #8]
		  TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 80022ae:	4b2f      	ldr	r3, [pc, #188]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 80022b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022b2:	4a2e      	ldr	r2, [pc, #184]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 80022b4:	6293      	str	r3, [r2, #40]	; 0x28
		  TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeLSPB*TrjStruc.BlendTimeLSPB))/2.0) + TrjStruc.Theta_Stamp_0;
 80022b6:	4b2d      	ldr	r3, [pc, #180]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 80022b8:	ed93 7a07 	vldr	s14, [r3, #28]
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 80022be:	edd3 6a00 	vldr	s13, [r3]
 80022c2:	4b2a      	ldr	r3, [pc, #168]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d0:	ee17 0a90 	vmov	r0, s15
 80022d4:	f7fe f8e4 	bl	80004a0 <__aeabi_f2d>
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022e0:	f7fe fa60 	bl	80007a4 <__aeabi_ddiv>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4614      	mov	r4, r2
 80022ea:	461d      	mov	r5, r3
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe f8d5 	bl	80004a0 <__aeabi_f2d>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4620      	mov	r0, r4
 80022fc:	4629      	mov	r1, r5
 80022fe:	f7fd ff71 	bl	80001e4 <__adddf3>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4610      	mov	r0, r2
 8002308:	4619      	mov	r1, r3
 800230a:	f7fe fbf1 	bl	8000af0 <__aeabi_d2f>
 800230e:	4603      	mov	r3, r0
 8002310:	4a16      	ldr	r2, [pc, #88]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002312:	62d3      	str	r3, [r2, #44]	; 0x2c
		  TrjStruc.Theta_Stamp_2 = (TrjStruc.AngularVelocity*TrjStruc.LinearTimeLSPB) + TrjStruc.Theta_Stamp_1;
 8002314:	4b15      	ldr	r3, [pc, #84]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002316:	ed93 7a06 	vldr	s14, [r3, #24]
 800231a:	4b14      	ldr	r3, [pc, #80]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 800231c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002320:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002326:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800232a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002330:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		  TrjStruc.Mode = 1;
 8002334:	4b0d      	ldr	r3, [pc, #52]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002336:	2201      	movs	r2, #1
 8002338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		  TrjStruc.Submode = 0;
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 800233e:	2200      	movs	r2, #0
 8002340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		  TrjStruc.Subsubmode = 0;
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002346:	2200      	movs	r2, #0
 8002348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  }
	 TrjStruc.Equation_Timestamp = micros();
 800234c:	f7ff fbfe 	bl	8001b4c <micros>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4905      	ldr	r1, [pc, #20]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002356:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 TrjStruc.Loop_Timestamp = micros();
 800235a:	f7ff fbf7 	bl	8001b4c <micros>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4902      	ldr	r1, [pc, #8]	; (800236c <TrajectoryGenerationCalculation+0x23c>)
 8002364:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8002368:	bf00      	nop
 800236a:	bdb0      	pop	{r4, r5, r7, pc}
 800236c:	200002c0 	.word	0x200002c0
 8002370:	bf800000 	.word	0xbf800000
 8002374:	00000000 	.word	0x00000000

08002378 <TrajectoryGenerationProcess>:

void TrajectoryGenerationProcess()
{
 8002378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800237c:	ed2d 8b02 	vpush	{d8}
 8002380:	b091      	sub	sp, #68	; 0x44
 8002382:	af00      	add	r7, sp, #0

	TrjStruc.Equation_Realtime_Sec = (micros()-TrjStruc.Equation_Timestamp)/1000000.0;
 8002384:	f7ff fbe2 	bl	8001b4c <micros>
 8002388:	4ba3      	ldr	r3, [pc, #652]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 800238a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800238e:	1a84      	subs	r4, r0, r2
 8002390:	eb61 0503 	sbc.w	r5, r1, r3
 8002394:	4620      	mov	r0, r4
 8002396:	4629      	mov	r1, r5
 8002398:	f7fe f8a4 	bl	80004e4 <__aeabi_ul2d>
 800239c:	a39c      	add	r3, pc, #624	; (adr r3, 8002610 <TrajectoryGenerationProcess+0x298>)
 800239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a2:	f7fe f9ff 	bl	80007a4 <__aeabi_ddiv>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	4b9a      	ldr	r3, [pc, #616]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 80023b0:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38

	 switch (TrjStruc.Mode)
 80023b4:	4b98      	ldr	r3, [pc, #608]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 80023b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	f000 83b0 	beq.w	8002b20 <TrajectoryGenerationProcess+0x7a8>
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	f200 83bc 	bhi.w	8002b3e <TrajectoryGenerationProcess+0x7c6>
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <TrajectoryGenerationProcess+0x5a>
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	f000 81b8 	beq.w	8002740 <TrajectoryGenerationProcess+0x3c8>
			  Moving_Link_Task_Flag = 1;
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
			  TrjStruc.AngularVelocityDesire = 0;
			  break;
		  }
}
 80023d0:	e3b5      	b.n	8002b3e <TrajectoryGenerationProcess+0x7c6>
			  if (TrjStruc.Submode == 0)
 80023d2:	4b91      	ldr	r3, [pc, #580]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 80023d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d16f      	bne.n	80024bc <TrajectoryGenerationProcess+0x144>
						  ((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 80023dc:	4b8e      	ldr	r3, [pc, #568]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe f85d 	bl	80004a0 <__aeabi_f2d>
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	4b8c      	ldr	r3, [pc, #560]	; (800261c <TrajectoryGenerationProcess+0x2a4>)
 80023ec:	f7fe f8b0 	bl	8000550 <__aeabi_dmul>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4614      	mov	r4, r2
 80023f6:	461d      	mov	r5, r3
 80023f8:	4b87      	ldr	r3, [pc, #540]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 80023fa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80023fe:	4b86      	ldr	r3, [pc, #536]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 8002400:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002404:	f7fe f8a4 	bl	8000550 <__aeabi_dmul>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4620      	mov	r0, r4
 800240e:	4629      	mov	r1, r5
 8002410:	f7fe f89e 	bl	8000550 <__aeabi_dmul>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4614      	mov	r4, r2
 800241a:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_0;
 800241c:	4b7e      	ldr	r3, [pc, #504]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f83d 	bl	80004a0 <__aeabi_f2d>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4620      	mov	r0, r4
 800242c:	4629      	mov	r1, r5
 800242e:	f7fd fed9 	bl	80001e4 <__adddf3>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	f7fe fb59 	bl	8000af0 <__aeabi_d2f>
 800243e:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002440:	4a75      	ldr	r2, [pc, #468]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 8002442:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularAcceration * TrjStruc.Equation_Realtime_Sec;
 8002444:	4b74      	ldr	r3, [pc, #464]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe f829 	bl	80004a0 <__aeabi_f2d>
 800244e:	4b72      	ldr	r3, [pc, #456]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 8002450:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002454:	f7fe f87c 	bl	8000550 <__aeabi_dmul>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f7fe fb46 	bl	8000af0 <__aeabi_d2f>
 8002464:	4603      	mov	r3, r0
 8002466:	4a6c      	ldr	r2, [pc, #432]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 8002468:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 800246a:	f7ff fb6f 	bl	8001b4c <micros>
 800246e:	4b6a      	ldr	r3, [pc, #424]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 8002470:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002474:	1a84      	subs	r4, r0, r2
 8002476:	63bc      	str	r4, [r7, #56]	; 0x38
 8002478:	eb61 0303 	sbc.w	r3, r1, r3
 800247c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800247e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002482:	f7fe fc4d 	bl	8000d20 <__aeabi_ul2f>
 8002486:	ee06 0a90 	vmov	s13, r0
 800248a:	4b63      	ldr	r3, [pc, #396]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 800248c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002490:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002620 <TrajectoryGenerationProcess+0x2a8>
 8002494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002498:	eef4 6ae7 	vcmpe.f32	s13, s15
 800249c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a0:	da00      	bge.n	80024a4 <TrajectoryGenerationProcess+0x12c>
			  break;
 80024a2:	e349      	b.n	8002b38 <TrajectoryGenerationProcess+0x7c0>
					  TrjStruc.Equation_Timestamp = micros();
 80024a4:	f7ff fb52 	bl	8001b4c <micros>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	495a      	ldr	r1, [pc, #360]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 80024ae:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 1;
 80024b2:	4b59      	ldr	r3, [pc, #356]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 80024ba:	e33d      	b.n	8002b38 <TrajectoryGenerationProcess+0x7c0>
			  else if (TrjStruc.Submode == 1)
 80024bc:	4b56      	ldr	r3, [pc, #344]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 80024be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	f040 8338 	bne.w	8002b38 <TrajectoryGenerationProcess+0x7c0>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 80024c8:	4b53      	ldr	r3, [pc, #332]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fd ffe7 	bl	80004a0 <__aeabi_f2d>
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	4b53      	ldr	r3, [pc, #332]	; (8002624 <TrajectoryGenerationProcess+0x2ac>)
 80024d8:	f7fe f83a 	bl	8000550 <__aeabi_dmul>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4614      	mov	r4, r2
 80024e2:	461d      	mov	r5, r3
 80024e4:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 80024e6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80024ea:	4b4b      	ldr	r3, [pc, #300]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 80024ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80024f0:	f7fe f82e 	bl	8000550 <__aeabi_dmul>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4620      	mov	r0, r4
 80024fa:	4629      	mov	r1, r5
 80024fc:	f7fe f828 	bl	8000550 <__aeabi_dmul>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4614      	mov	r4, r2
 8002506:	461d      	mov	r5, r3
						  + (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular*(TrjStruc.Equation_Realtime_Sec))
 8002508:	4b43      	ldr	r3, [pc, #268]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 800250a:	ed93 7a07 	vldr	s14, [r3, #28]
 800250e:	4b42      	ldr	r3, [pc, #264]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 8002510:	edd3 7a01 	vldr	s15, [r3, #4]
 8002514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002518:	ee17 0a90 	vmov	r0, s15
 800251c:	f7fd ffc0 	bl	80004a0 <__aeabi_f2d>
 8002520:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 8002522:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002526:	f7fe f813 	bl	8000550 <__aeabi_dmul>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4620      	mov	r0, r4
 8002530:	4629      	mov	r1, r5
 8002532:	f7fd fe57 	bl	80001e4 <__adddf3>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4614      	mov	r4, r2
 800253c:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_1;
 800253e:	4b36      	ldr	r3, [pc, #216]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	4618      	mov	r0, r3
 8002544:	f7fd ffac 	bl	80004a0 <__aeabi_f2d>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4620      	mov	r0, r4
 800254e:	4629      	mov	r1, r5
 8002550:	f7fd fe48 	bl	80001e4 <__adddf3>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	f7fe fac8 	bl	8000af0 <__aeabi_d2f>
 8002560:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002562:	4a2d      	ldr	r2, [pc, #180]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 8002564:	6213      	str	r3, [r2, #32]
				  if ( TrjStruc.Subsubmode == 0 )
 8002566:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 8002568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256c:	2b00      	cmp	r3, #0
 800256e:	d15b      	bne.n	8002628 <TrajectoryGenerationProcess+0x2b0>
					  TrjStruc.AngularVelocityDesire = ( -1.0*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec ) +
 8002570:	4b29      	ldr	r3, [pc, #164]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	4618      	mov	r0, r3
 8002576:	f7fd ff93 	bl	80004a0 <__aeabi_f2d>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	633a      	str	r2, [r7, #48]	; 0x30
 8002580:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
 8002586:	4b24      	ldr	r3, [pc, #144]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 8002588:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800258c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002590:	f7fd ffde 	bl	8000550 <__aeabi_dmul>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4614      	mov	r4, r2
 800259a:	461d      	mov	r5, r3
													   (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular);
 800259c:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 800259e:	ed93 7a07 	vldr	s14, [r3, #28]
 80025a2:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 80025a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80025a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ac:	ee17 0a90 	vmov	r0, s15
 80025b0:	f7fd ff76 	bl	80004a0 <__aeabi_f2d>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
					  TrjStruc.AngularVelocityDesire = ( -1.0*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec ) +
 80025b8:	4620      	mov	r0, r4
 80025ba:	4629      	mov	r1, r5
 80025bc:	f7fd fe12 	bl	80001e4 <__adddf3>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	f7fe fa92 	bl	8000af0 <__aeabi_d2f>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4a12      	ldr	r2, [pc, #72]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 80025d0:	6253      	str	r3, [r2, #36]	; 0x24
					  if ( TrjStruc.Alpha * TrjStruc.AngularVelocityDesire <= TrjStruc.AngularVelocityFinalMin )
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 80025d4:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 80025da:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80025de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e2:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 80025e4:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80025e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f0:	d875      	bhi.n	80026de <TrajectoryGenerationProcess+0x366>
						  TrjStruc.Subsubmode = 1;
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						  TrjStruc.Velocity_Timestamp = micros();
 80025fa:	f7ff faa7 	bl	8001b4c <micros>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4905      	ldr	r1, [pc, #20]	; (8002618 <TrajectoryGenerationProcess+0x2a0>)
 8002604:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8002608:	e069      	b.n	80026de <TrajectoryGenerationProcess+0x366>
 800260a:	bf00      	nop
 800260c:	f3af 8000 	nop.w
 8002610:	00000000 	.word	0x00000000
 8002614:	412e8480 	.word	0x412e8480
 8002618:	200002c0 	.word	0x200002c0
 800261c:	3fe00000 	.word	0x3fe00000
 8002620:	49742400 	.word	0x49742400
 8002624:	bfe00000 	.word	0xbfe00000
				  else if ( TrjStruc.Subsubmode == 1 )
 8002628:	4ba9      	ldr	r3, [pc, #676]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	2b01      	cmp	r3, #1
 8002630:	d14c      	bne.n	80026cc <TrajectoryGenerationProcess+0x354>
					  TrjStruc.AngularVelocityDesire = TrjStruc.Alpha * TrjStruc.AngularVelocityFinalMin;
 8002632:	4ba7      	ldr	r3, [pc, #668]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 8002634:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002638:	4ba5      	ldr	r3, [pc, #660]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 800263a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800263e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002642:	4ba3      	ldr	r3, [pc, #652]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 8002644:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					  if (micros()-TrjStruc.Velocity_Timestamp >= ((TrjStruc.BlendTimeTriangular*1000000)-(TrjStruc.Velocity_Timestamp - TrjStruc.Equation_Timestamp))/2.0)
 8002648:	f7ff fa80 	bl	8001b4c <micros>
 800264c:	4ba0      	ldr	r3, [pc, #640]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 800264e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002652:	1a84      	subs	r4, r0, r2
 8002654:	62bc      	str	r4, [r7, #40]	; 0x28
 8002656:	eb61 0303 	sbc.w	r3, r1, r3
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800265c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002660:	f7fd ff40 	bl	80004e4 <__aeabi_ul2d>
 8002664:	4604      	mov	r4, r0
 8002666:	460d      	mov	r5, r1
 8002668:	4b99      	ldr	r3, [pc, #612]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 800266a:	edd3 7a01 	vldr	s15, [r3, #4]
 800266e:	ed9f 7a99 	vldr	s14, [pc, #612]	; 80028d4 <TrajectoryGenerationProcess+0x55c>
 8002672:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002676:	4b96      	ldr	r3, [pc, #600]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 8002678:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800267c:	4b94      	ldr	r3, [pc, #592]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 800267e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002682:	1a86      	subs	r6, r0, r2
 8002684:	623e      	str	r6, [r7, #32]
 8002686:	eb61 0303 	sbc.w	r3, r1, r3
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
 800268c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002690:	f7fe fb46 	bl	8000d20 <__aeabi_ul2f>
 8002694:	ee07 0a90 	vmov	s15, r0
 8002698:	ee78 7a67 	vsub.f32	s15, s16, s15
 800269c:	ee17 0a90 	vmov	r0, s15
 80026a0:	f7fd fefe 	bl	80004a0 <__aeabi_f2d>
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026ac:	f7fe f87a 	bl	80007a4 <__aeabi_ddiv>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4620      	mov	r0, r4
 80026b6:	4629      	mov	r1, r5
 80026b8:	f7fe f9d0 	bl	8000a5c <__aeabi_dcmpge>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00d      	beq.n	80026de <TrajectoryGenerationProcess+0x366>
						  TrjStruc.Subsubmode = 2;
 80026c2:	4b83      	ldr	r3, [pc, #524]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 80026c4:	2202      	movs	r2, #2
 80026c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80026ca:	e008      	b.n	80026de <TrajectoryGenerationProcess+0x366>
				  else if ( TrjStruc.Subsubmode == 2 )
 80026cc:	4b80      	ldr	r3, [pc, #512]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d103      	bne.n	80026de <TrajectoryGenerationProcess+0x366>
					  TrjStruc.AngularVelocityDesire = 0;
 80026d6:	4b7e      	ldr	r3, [pc, #504]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 80026de:	f7ff fa35 	bl	8001b4c <micros>
 80026e2:	4b7b      	ldr	r3, [pc, #492]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 80026e4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80026e8:	1a84      	subs	r4, r0, r2
 80026ea:	61bc      	str	r4, [r7, #24]
 80026ec:	eb61 0303 	sbc.w	r3, r1, r3
 80026f0:	61fb      	str	r3, [r7, #28]
 80026f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026f6:	f7fe fb13 	bl	8000d20 <__aeabi_ul2f>
 80026fa:	ee06 0a90 	vmov	s13, r0
 80026fe:	4b74      	ldr	r3, [pc, #464]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 8002700:	edd3 7a01 	vldr	s15, [r3, #4]
 8002704:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80028d4 <TrajectoryGenerationProcess+0x55c>
 8002708:	ee67 7a87 	vmul.f32	s15, s15, s14
 800270c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002714:	da00      	bge.n	8002718 <TrajectoryGenerationProcess+0x3a0>
			  break;
 8002716:	e20f      	b.n	8002b38 <TrajectoryGenerationProcess+0x7c0>
					  TrjStruc.Equation_Timestamp = micros();
 8002718:	f7ff fa18 	bl	8001b4c <micros>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	496b      	ldr	r1, [pc, #428]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 8002722:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 0;
 8002726:	4b6a      	ldr	r3, [pc, #424]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 8002728:	2200      	movs	r2, #0
 800272a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					  TrjStruc.Subsubmode = 0;
 800272e:	4b68      	ldr	r3, [pc, #416]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 8002730:	2200      	movs	r2, #0
 8002732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					  TrjStruc.Mode = 2; ///Final Value Mode
 8002736:	4b66      	ldr	r3, [pc, #408]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 8002738:	2202      	movs	r2, #2
 800273a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			  break;
 800273e:	e1fb      	b.n	8002b38 <TrajectoryGenerationProcess+0x7c0>
			  if (TrjStruc.Submode == 0)
 8002740:	4b63      	ldr	r3, [pc, #396]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 8002742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002746:	2b00      	cmp	r3, #0
 8002748:	d16e      	bne.n	8002828 <TrajectoryGenerationProcess+0x4b0>
							((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 800274a:	4b61      	ldr	r3, [pc, #388]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd fea6 	bl	80004a0 <__aeabi_f2d>
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	4b5f      	ldr	r3, [pc, #380]	; (80028d8 <TrajectoryGenerationProcess+0x560>)
 800275a:	f7fd fef9 	bl	8000550 <__aeabi_dmul>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4614      	mov	r4, r2
 8002764:	461d      	mov	r5, r3
 8002766:	4b5a      	ldr	r3, [pc, #360]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 8002768:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800276c:	4b58      	ldr	r3, [pc, #352]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 800276e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002772:	f7fd feed 	bl	8000550 <__aeabi_dmul>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4620      	mov	r0, r4
 800277c:	4629      	mov	r1, r5
 800277e:	f7fd fee7 	bl	8000550 <__aeabi_dmul>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4614      	mov	r4, r2
 8002788:	461d      	mov	r5, r3
							+TrjStruc.Theta_Stamp_0;
 800278a:	4b51      	ldr	r3, [pc, #324]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	4618      	mov	r0, r3
 8002790:	f7fd fe86 	bl	80004a0 <__aeabi_f2d>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4620      	mov	r0, r4
 800279a:	4629      	mov	r1, r5
 800279c:	f7fd fd22 	bl	80001e4 <__adddf3>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	f7fe f9a2 	bl	8000af0 <__aeabi_d2f>
 80027ac:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80027ae:	4a48      	ldr	r2, [pc, #288]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 80027b0:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularAcceration * TrjStruc.Equation_Realtime_Sec;
 80027b2:	4b47      	ldr	r3, [pc, #284]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd fe72 	bl	80004a0 <__aeabi_f2d>
 80027bc:	4b44      	ldr	r3, [pc, #272]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 80027be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80027c2:	f7fd fec5 	bl	8000550 <__aeabi_dmul>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4610      	mov	r0, r2
 80027cc:	4619      	mov	r1, r3
 80027ce:	f7fe f98f 	bl	8000af0 <__aeabi_d2f>
 80027d2:	4603      	mov	r3, r0
 80027d4:	4a3e      	ldr	r2, [pc, #248]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 80027d6:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 80027d8:	f7ff f9b8 	bl	8001b4c <micros>
 80027dc:	4b3c      	ldr	r3, [pc, #240]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 80027de:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80027e2:	ebb0 0a02 	subs.w	sl, r0, r2
 80027e6:	eb61 0b03 	sbc.w	fp, r1, r3
 80027ea:	4650      	mov	r0, sl
 80027ec:	4659      	mov	r1, fp
 80027ee:	f7fe fa97 	bl	8000d20 <__aeabi_ul2f>
 80027f2:	ee06 0a90 	vmov	s13, r0
 80027f6:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80028d4 <TrajectoryGenerationProcess+0x55c>
 8002800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002804:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280c:	da00      	bge.n	8002810 <TrajectoryGenerationProcess+0x498>
			  break;
 800280e:	e195      	b.n	8002b3c <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002810:	f7ff f99c 	bl	8001b4c <micros>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	492d      	ldr	r1, [pc, #180]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 800281a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 1;
 800281e:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 8002820:	2201      	movs	r2, #1
 8002822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 8002826:	e189      	b.n	8002b3c <TrajectoryGenerationProcess+0x7c4>
			  else if (TrjStruc.Submode == 1)
 8002828:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 800282a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800282e:	2b01      	cmp	r3, #1
 8002830:	d154      	bne.n	80028dc <TrajectoryGenerationProcess+0x564>
						  (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8002832:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fd fe32 	bl	80004a0 <__aeabi_f2d>
 800283c:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 800283e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002842:	f7fd fe85 	bl	8000550 <__aeabi_dmul>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4614      	mov	r4, r2
 800284c:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_1;
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fe24 	bl	80004a0 <__aeabi_f2d>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4620      	mov	r0, r4
 800285e:	4629      	mov	r1, r5
 8002860:	f7fd fcc0 	bl	80001e4 <__adddf3>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4610      	mov	r0, r2
 800286a:	4619      	mov	r1, r3
 800286c:	f7fe f940 	bl	8000af0 <__aeabi_d2f>
 8002870:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002872:	4a17      	ldr	r2, [pc, #92]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 8002874:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularVelocity;
 8002876:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 800287c:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.LinearTimeLSPB*1000000)
 800287e:	f7ff f965 	bl	8001b4c <micros>
 8002882:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 8002884:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002888:	ebb0 0802 	subs.w	r8, r0, r2
 800288c:	eb61 0903 	sbc.w	r9, r1, r3
 8002890:	4640      	mov	r0, r8
 8002892:	4649      	mov	r1, r9
 8002894:	f7fe fa44 	bl	8000d20 <__aeabi_ul2f>
 8002898:	ee06 0a90 	vmov	s13, r0
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 800289e:	edd3 7a02 	vldr	s15, [r3, #8]
 80028a2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80028d4 <TrajectoryGenerationProcess+0x55c>
 80028a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028aa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80028ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b2:	da00      	bge.n	80028b6 <TrajectoryGenerationProcess+0x53e>
			  break;
 80028b4:	e142      	b.n	8002b3c <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 80028b6:	f7ff f949 	bl	8001b4c <micros>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4904      	ldr	r1, [pc, #16]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 80028c0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 2;
 80028c4:	4b02      	ldr	r3, [pc, #8]	; (80028d0 <TrajectoryGenerationProcess+0x558>)
 80028c6:	2202      	movs	r2, #2
 80028c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 80028cc:	e136      	b.n	8002b3c <TrajectoryGenerationProcess+0x7c4>
 80028ce:	bf00      	nop
 80028d0:	200002c0 	.word	0x200002c0
 80028d4:	49742400 	.word	0x49742400
 80028d8:	3fe00000 	.word	0x3fe00000
			  else if (TrjStruc.Submode == 2)
 80028dc:	4b9b      	ldr	r3, [pc, #620]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 80028de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	f040 812a 	bne.w	8002b3c <TrajectoryGenerationProcess+0x7c4>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 80028e8:	4b98      	ldr	r3, [pc, #608]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fd fdd7 	bl	80004a0 <__aeabi_f2d>
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	4b96      	ldr	r3, [pc, #600]	; (8002b50 <TrajectoryGenerationProcess+0x7d8>)
 80028f8:	f7fd fe2a 	bl	8000550 <__aeabi_dmul>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4614      	mov	r4, r2
 8002902:	461d      	mov	r5, r3
 8002904:	4b91      	ldr	r3, [pc, #580]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002906:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800290a:	4b90      	ldr	r3, [pc, #576]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 800290c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002910:	f7fd fe1e 	bl	8000550 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4620      	mov	r0, r4
 800291a:	4629      	mov	r1, r5
 800291c:	f7fd fe18 	bl	8000550 <__aeabi_dmul>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4614      	mov	r4, r2
 8002926:	461d      	mov	r5, r3
						  + (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8002928:	4b88      	ldr	r3, [pc, #544]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4618      	mov	r0, r3
 800292e:	f7fd fdb7 	bl	80004a0 <__aeabi_f2d>
 8002932:	4b86      	ldr	r3, [pc, #536]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002934:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002938:	f7fd fe0a 	bl	8000550 <__aeabi_dmul>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4620      	mov	r0, r4
 8002942:	4629      	mov	r1, r5
 8002944:	f7fd fc4e 	bl	80001e4 <__adddf3>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4614      	mov	r4, r2
 800294e:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_2;
 8002950:	4b7e      	ldr	r3, [pc, #504]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	4618      	mov	r0, r3
 8002956:	f7fd fda3 	bl	80004a0 <__aeabi_f2d>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4620      	mov	r0, r4
 8002960:	4629      	mov	r1, r5
 8002962:	f7fd fc3f 	bl	80001e4 <__adddf3>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4610      	mov	r0, r2
 800296c:	4619      	mov	r1, r3
 800296e:	f7fe f8bf 	bl	8000af0 <__aeabi_d2f>
 8002972:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002974:	4a75      	ldr	r2, [pc, #468]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002976:	6213      	str	r3, [r2, #32]
				  if ( TrjStruc.Subsubmode == 0 )
 8002978:	4b74      	ldr	r3, [pc, #464]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	2b00      	cmp	r3, #0
 8002980:	d142      	bne.n	8002a08 <TrajectoryGenerationProcess+0x690>
					  TrjStruc.AngularVelocityDesire = ( -1*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec )
 8002982:	4b72      	ldr	r3, [pc, #456]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002984:	edd3 7a07 	vldr	s15, [r3, #28]
 8002988:	eef1 7a67 	vneg.f32	s15, s15
 800298c:	ee17 3a90 	vmov	r3, s15
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fd85 	bl	80004a0 <__aeabi_f2d>
 8002996:	4b6d      	ldr	r3, [pc, #436]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002998:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800299c:	f7fd fdd8 	bl	8000550 <__aeabi_dmul>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4614      	mov	r4, r2
 80029a6:	461d      	mov	r5, r3
							                           + ( TrjStruc.AngularVelocity );
 80029a8:	4b68      	ldr	r3, [pc, #416]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fd fd77 	bl	80004a0 <__aeabi_f2d>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4620      	mov	r0, r4
 80029b8:	4629      	mov	r1, r5
 80029ba:	f7fd fc13 	bl	80001e4 <__adddf3>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4610      	mov	r0, r2
 80029c4:	4619      	mov	r1, r3
 80029c6:	f7fe f893 	bl	8000af0 <__aeabi_d2f>
 80029ca:	4603      	mov	r3, r0
					  TrjStruc.AngularVelocityDesire = ( -1*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec )
 80029cc:	4a5f      	ldr	r2, [pc, #380]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 80029ce:	6253      	str	r3, [r2, #36]	; 0x24
					  if (  TrjStruc.Alpha * TrjStruc.AngularVelocityDesire <=  TrjStruc.AngularVelocityFinalMin )
 80029d0:	4b5e      	ldr	r3, [pc, #376]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 80029d2:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80029d6:	4b5d      	ldr	r3, [pc, #372]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 80029d8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80029dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e0:	4b5a      	ldr	r3, [pc, #360]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 80029e2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80029e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ee:	d866      	bhi.n	8002abe <TrajectoryGenerationProcess+0x746>
						  TrjStruc.Subsubmode = 1;
 80029f0:	4b56      	ldr	r3, [pc, #344]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						  TrjStruc.Velocity_Timestamp = micros();
 80029f8:	f7ff f8a8 	bl	8001b4c <micros>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4952      	ldr	r1, [pc, #328]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002a02:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8002a06:	e05a      	b.n	8002abe <TrajectoryGenerationProcess+0x746>
				  else if ( TrjStruc.Subsubmode == 1 )
 8002a08:	4b50      	ldr	r3, [pc, #320]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d14c      	bne.n	8002aac <TrajectoryGenerationProcess+0x734>
					  TrjStruc.AngularVelocityDesire = TrjStruc.Alpha * TrjStruc.AngularVelocityFinalMin;
 8002a12:	4b4e      	ldr	r3, [pc, #312]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002a14:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002a18:	4b4c      	ldr	r3, [pc, #304]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002a1a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a22:	4b4a      	ldr	r3, [pc, #296]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002a24:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					  if (micros()-TrjStruc.Velocity_Timestamp >= ((TrjStruc.BlendTimeLSPB*1000000)-(TrjStruc.Velocity_Timestamp - TrjStruc.Equation_Timestamp))/2.0)
 8002a28:	f7ff f890 	bl	8001b4c <micros>
 8002a2c:	4b47      	ldr	r3, [pc, #284]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002a2e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002a32:	1a84      	subs	r4, r0, r2
 8002a34:	613c      	str	r4, [r7, #16]
 8002a36:	eb61 0303 	sbc.w	r3, r1, r3
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a40:	f7fd fd50 	bl	80004e4 <__aeabi_ul2d>
 8002a44:	4604      	mov	r4, r0
 8002a46:	460d      	mov	r5, r1
 8002a48:	4b40      	ldr	r3, [pc, #256]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002b54 <TrajectoryGenerationProcess+0x7dc>
 8002a52:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002a56:	4b3d      	ldr	r3, [pc, #244]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002a58:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002a5c:	4b3b      	ldr	r3, [pc, #236]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002a5e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002a62:	1a86      	subs	r6, r0, r2
 8002a64:	60be      	str	r6, [r7, #8]
 8002a66:	eb61 0303 	sbc.w	r3, r1, r3
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a70:	f7fe f956 	bl	8000d20 <__aeabi_ul2f>
 8002a74:	ee07 0a90 	vmov	s15, r0
 8002a78:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002a7c:	ee17 0a90 	vmov	r0, s15
 8002a80:	f7fd fd0e 	bl	80004a0 <__aeabi_f2d>
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a8c:	f7fd fe8a 	bl	80007a4 <__aeabi_ddiv>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4620      	mov	r0, r4
 8002a96:	4629      	mov	r1, r5
 8002a98:	f7fd ffe0 	bl	8000a5c <__aeabi_dcmpge>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00d      	beq.n	8002abe <TrajectoryGenerationProcess+0x746>
						  TrjStruc.Subsubmode = 2;
 8002aa2:	4b2a      	ldr	r3, [pc, #168]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8002aaa:	e008      	b.n	8002abe <TrajectoryGenerationProcess+0x746>
				  else if ( TrjStruc.Subsubmode == 2 )
 8002aac:	4b27      	ldr	r3, [pc, #156]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d103      	bne.n	8002abe <TrajectoryGenerationProcess+0x746>
					  TrjStruc.AngularVelocityDesire = 0;
 8002ab6:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	625a      	str	r2, [r3, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 8002abe:	f7ff f845 	bl	8001b4c <micros>
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002ac4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002ac8:	1a84      	subs	r4, r0, r2
 8002aca:	603c      	str	r4, [r7, #0]
 8002acc:	eb61 0303 	sbc.w	r3, r1, r3
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ad6:	f7fe f923 	bl	8000d20 <__aeabi_ul2f>
 8002ada:	ee06 0a90 	vmov	s13, r0
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002ae0:	edd3 7a00 	vldr	s15, [r3]
 8002ae4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002b54 <TrajectoryGenerationProcess+0x7dc>
 8002ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aec:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af4:	da00      	bge.n	8002af8 <TrajectoryGenerationProcess+0x780>
			  break;
 8002af6:	e021      	b.n	8002b3c <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002af8:	f7ff f828 	bl	8001b4c <micros>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4912      	ldr	r1, [pc, #72]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002b02:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 0;
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					  TrjStruc.Subsubmode = 0;
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					  TrjStruc.Mode = 2; ///Final Value Mode
 8002b16:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002b18:	2202      	movs	r2, #2
 8002b1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			  break;
 8002b1e:	e00d      	b.n	8002b3c <TrajectoryGenerationProcess+0x7c4>
			  Moving_Link_Task_Flag = 1;
 8002b20:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <TrajectoryGenerationProcess+0x7e0>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	701a      	strb	r2, [r3, #0]
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002b28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b2a:	4a08      	ldr	r2, [pc, #32]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002b2c:	6213      	str	r3, [r2, #32]
			  TrjStruc.AngularVelocityDesire = 0;
 8002b2e:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <TrajectoryGenerationProcess+0x7d4>)
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
			  break;
 8002b36:	e002      	b.n	8002b3e <TrajectoryGenerationProcess+0x7c6>
			  break;
 8002b38:	bf00      	nop
 8002b3a:	e000      	b.n	8002b3e <TrajectoryGenerationProcess+0x7c6>
			  break;
 8002b3c:	bf00      	nop
}
 8002b3e:	bf00      	nop
 8002b40:	3744      	adds	r7, #68	; 0x44
 8002b42:	46bd      	mov	sp, r7
 8002b44:	ecbd 8b02 	vpop	{d8}
 8002b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b4c:	200002c0 	.word	0x200002c0
 8002b50:	bfe00000 	.word	0xbfe00000
 8002b54:	49742400 	.word	0x49742400
 8002b58:	200001e8 	.word	0x200001e8

08002b5c <PIDController2in1>:

void PIDController2in1()
{
 8002b5c:	b5b0      	push	{r4, r5, r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
	PositionPIDController.OutputDesire = TrjStruc.AngularDisplacementDesire;
 8002b60:	4b7f      	ldr	r3, [pc, #508]	; (8002d60 <PIDController2in1+0x204>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4a7f      	ldr	r2, [pc, #508]	; (8002d64 <PIDController2in1+0x208>)
 8002b66:	61d3      	str	r3, [r2, #28]
    PositionPIDController.NowError = PositionPIDController.OutputDesire - PositionPIDController.OutputFeedback;
 8002b68:	4b7e      	ldr	r3, [pc, #504]	; (8002d64 <PIDController2in1+0x208>)
 8002b6a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b6e:	4b7d      	ldr	r3, [pc, #500]	; (8002d64 <PIDController2in1+0x208>)
 8002b70:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b78:	4b7a      	ldr	r3, [pc, #488]	; (8002d64 <PIDController2in1+0x208>)
 8002b7a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    PositionPIDController.Integral_Value += PositionPIDController.NowError*PositionPIDController.SamplingTime;
 8002b7e:	4b79      	ldr	r3, [pc, #484]	; (8002d64 <PIDController2in1+0x208>)
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fc8c 	bl	80004a0 <__aeabi_f2d>
 8002b88:	4604      	mov	r4, r0
 8002b8a:	460d      	mov	r5, r1
 8002b8c:	4b75      	ldr	r3, [pc, #468]	; (8002d64 <PIDController2in1+0x208>)
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fc85 	bl	80004a0 <__aeabi_f2d>
 8002b96:	4b73      	ldr	r3, [pc, #460]	; (8002d64 <PIDController2in1+0x208>)
 8002b98:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002b9c:	f7fd fcd8 	bl	8000550 <__aeabi_dmul>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	f7fd fb1c 	bl	80001e4 <__adddf3>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f7fd ff9c 	bl	8000af0 <__aeabi_d2f>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4a6a      	ldr	r2, [pc, #424]	; (8002d64 <PIDController2in1+0x208>)
 8002bbc:	6253      	str	r3, [r2, #36]	; 0x24
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002bbe:	4b69      	ldr	r3, [pc, #420]	; (8002d64 <PIDController2in1+0x208>)
 8002bc0:	ed93 7a00 	vldr	s14, [r3]
 8002bc4:	4b67      	ldr	r3, [pc, #412]	; (8002d64 <PIDController2in1+0x208>)
 8002bc6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002bca:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(PositionPIDController.Ki * PositionPIDController.Integral_Value)
 8002bce:	4b65      	ldr	r3, [pc, #404]	; (8002d64 <PIDController2in1+0x208>)
 8002bd0:	edd3 6a01 	vldr	s13, [r3, #4]
 8002bd4:	4b63      	ldr	r3, [pc, #396]	; (8002d64 <PIDController2in1+0x208>)
 8002bd6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be2:	ee17 0a90 	vmov	r0, s15
 8002be6:	f7fd fc5b 	bl	80004a0 <__aeabi_f2d>
 8002bea:	4604      	mov	r4, r0
 8002bec:	460d      	mov	r5, r1
					  +(PositionPIDController.Kd * (PositionPIDController.NowError-PositionPIDController.PreviousError)/PositionPIDController.SamplingTime);
 8002bee:	4b5d      	ldr	r3, [pc, #372]	; (8002d64 <PIDController2in1+0x208>)
 8002bf0:	ed93 7a02 	vldr	s14, [r3, #8]
 8002bf4:	4b5b      	ldr	r3, [pc, #364]	; (8002d64 <PIDController2in1+0x208>)
 8002bf6:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002bfa:	4b5a      	ldr	r3, [pc, #360]	; (8002d64 <PIDController2in1+0x208>)
 8002bfc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002c00:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c08:	ee17 0a90 	vmov	r0, s15
 8002c0c:	f7fd fc48 	bl	80004a0 <__aeabi_f2d>
 8002c10:	4b54      	ldr	r3, [pc, #336]	; (8002d64 <PIDController2in1+0x208>)
 8002c12:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002c16:	f7fd fdc5 	bl	80007a4 <__aeabi_ddiv>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4620      	mov	r0, r4
 8002c20:	4629      	mov	r1, r5
 8002c22:	f7fd fadf 	bl	80001e4 <__adddf3>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f7fd ff5f 	bl	8000af0 <__aeabi_d2f>
 8002c32:	4603      	mov	r3, r0
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002c34:	4a4b      	ldr	r2, [pc, #300]	; (8002d64 <PIDController2in1+0x208>)
 8002c36:	6153      	str	r3, [r2, #20]
    PositionPIDController.PreviousError = PositionPIDController.NowError;
 8002c38:	4b4a      	ldr	r3, [pc, #296]	; (8002d64 <PIDController2in1+0x208>)
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	4a49      	ldr	r2, [pc, #292]	; (8002d64 <PIDController2in1+0x208>)
 8002c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

    VelocityPIDController.OutputDesire = PositionPIDController.ControllerOutput + TrjStruc.AngularVelocityDesire;
 8002c40:	4b48      	ldr	r3, [pc, #288]	; (8002d64 <PIDController2in1+0x208>)
 8002c42:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c46:	4b46      	ldr	r3, [pc, #280]	; (8002d60 <PIDController2in1+0x204>)
 8002c48:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c50:	4b45      	ldr	r3, [pc, #276]	; (8002d68 <PIDController2in1+0x20c>)
 8002c52:	edc3 7a07 	vstr	s15, [r3, #28]
    VelocityPIDController.NowError = VelocityPIDController.OutputDesire - VelocityPIDController.OutputFeedback;
 8002c56:	4b44      	ldr	r3, [pc, #272]	; (8002d68 <PIDController2in1+0x20c>)
 8002c58:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c5c:	4b42      	ldr	r3, [pc, #264]	; (8002d68 <PIDController2in1+0x20c>)
 8002c5e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c66:	4b40      	ldr	r3, [pc, #256]	; (8002d68 <PIDController2in1+0x20c>)
 8002c68:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    VelocityPIDController.Integral_Value += VelocityPIDController.NowError*VelocityPIDController.SamplingTime;
 8002c6c:	4b3e      	ldr	r3, [pc, #248]	; (8002d68 <PIDController2in1+0x20c>)
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fd fc15 	bl	80004a0 <__aeabi_f2d>
 8002c76:	4604      	mov	r4, r0
 8002c78:	460d      	mov	r5, r1
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	; (8002d68 <PIDController2in1+0x20c>)
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd fc0e 	bl	80004a0 <__aeabi_f2d>
 8002c84:	4b38      	ldr	r3, [pc, #224]	; (8002d68 <PIDController2in1+0x20c>)
 8002c86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002c8a:	f7fd fc61 	bl	8000550 <__aeabi_dmul>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4620      	mov	r0, r4
 8002c94:	4629      	mov	r1, r5
 8002c96:	f7fd faa5 	bl	80001e4 <__adddf3>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f7fd ff25 	bl	8000af0 <__aeabi_d2f>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4a2f      	ldr	r2, [pc, #188]	; (8002d68 <PIDController2in1+0x20c>)
 8002caa:	6253      	str	r3, [r2, #36]	; 0x24
    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
 8002cac:	4b2e      	ldr	r3, [pc, #184]	; (8002d68 <PIDController2in1+0x20c>)
 8002cae:	ed93 7a00 	vldr	s14, [r3]
 8002cb2:	4b2d      	ldr	r3, [pc, #180]	; (8002d68 <PIDController2in1+0x20c>)
 8002cb4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002cb8:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(VelocityPIDController.Ki * VelocityPIDController.Integral_Value)
 8002cbc:	4b2a      	ldr	r3, [pc, #168]	; (8002d68 <PIDController2in1+0x20c>)
 8002cbe:	edd3 6a01 	vldr	s13, [r3, #4]
 8002cc2:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <PIDController2in1+0x20c>)
 8002cc4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002cc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd0:	ee17 0a90 	vmov	r0, s15
 8002cd4:	f7fd fbe4 	bl	80004a0 <__aeabi_f2d>
 8002cd8:	4604      	mov	r4, r0
 8002cda:	460d      	mov	r5, r1
					  +(VelocityPIDController.Kd * (VelocityPIDController.NowError-VelocityPIDController.PreviousError)/VelocityPIDController.SamplingTime)
 8002cdc:	4b22      	ldr	r3, [pc, #136]	; (8002d68 <PIDController2in1+0x20c>)
 8002cde:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ce2:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <PIDController2in1+0x20c>)
 8002ce4:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002ce8:	4b1f      	ldr	r3, [pc, #124]	; (8002d68 <PIDController2in1+0x20c>)
 8002cea:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002cee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf6:	ee17 0a90 	vmov	r0, s15
 8002cfa:	f7fd fbd1 	bl	80004a0 <__aeabi_f2d>
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <PIDController2in1+0x20c>)
 8002d00:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002d04:	f7fd fd4e 	bl	80007a4 <__aeabi_ddiv>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	4629      	mov	r1, r5
 8002d10:	f7fd fa68 	bl	80001e4 <__adddf3>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4614      	mov	r4, r2
 8002d1a:	461d      	mov	r5, r3
					  +( TrjStruc.Alpha * VelocityPIDController.offSet );
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <PIDController2in1+0x204>)
 8002d1e:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <PIDController2in1+0x20c>)
 8002d24:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2c:	ee17 0a90 	vmov	r0, s15
 8002d30:	f7fd fbb6 	bl	80004a0 <__aeabi_f2d>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4620      	mov	r0, r4
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	f7fd fa52 	bl	80001e4 <__adddf3>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	f7fd fed2 	bl	8000af0 <__aeabi_d2f>
 8002d4c:	4603      	mov	r3, r0
    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
 8002d4e:	4a06      	ldr	r2, [pc, #24]	; (8002d68 <PIDController2in1+0x20c>)
 8002d50:	6153      	str	r3, [r2, #20]
    VelocityPIDController.PreviousError = VelocityPIDController.NowError;
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <PIDController2in1+0x20c>)
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <PIDController2in1+0x20c>)
 8002d58:	62d3      	str	r3, [r2, #44]	; 0x2c

}
 8002d5a:	bf00      	nop
 8002d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	200002c0 	.word	0x200002c0
 8002d64:	20000200 	.word	0x20000200
 8002d68:	20000240 	.word	0x20000240

08002d6c <StabilizerPID>:

void StabilizerPID()
{
 8002d6c:	b5b0      	push	{r4, r5, r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
	StabilizerPIDController.OutputDesire = TrjStruc.AngularDisplacementDesire;
 8002d70:	4b38      	ldr	r3, [pc, #224]	; (8002e54 <StabilizerPID+0xe8>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	4a38      	ldr	r2, [pc, #224]	; (8002e58 <StabilizerPID+0xec>)
 8002d76:	61d3      	str	r3, [r2, #28]
	StabilizerPIDController.NowError = StabilizerPIDController.OutputDesire - StabilizerPIDController.OutputFeedback;
 8002d78:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <StabilizerPID+0xec>)
 8002d7a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d7e:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <StabilizerPID+0xec>)
 8002d80:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d88:	4b33      	ldr	r3, [pc, #204]	; (8002e58 <StabilizerPID+0xec>)
 8002d8a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	StabilizerPIDController.Integral_Value += StabilizerPIDController.NowError*StabilizerPIDController.SamplingTime;
 8002d8e:	4b32      	ldr	r3, [pc, #200]	; (8002e58 <StabilizerPID+0xec>)
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fd fb84 	bl	80004a0 <__aeabi_f2d>
 8002d98:	4604      	mov	r4, r0
 8002d9a:	460d      	mov	r5, r1
 8002d9c:	4b2e      	ldr	r3, [pc, #184]	; (8002e58 <StabilizerPID+0xec>)
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fd fb7d 	bl	80004a0 <__aeabi_f2d>
 8002da6:	4b2c      	ldr	r3, [pc, #176]	; (8002e58 <StabilizerPID+0xec>)
 8002da8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002dac:	f7fd fbd0 	bl	8000550 <__aeabi_dmul>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4620      	mov	r0, r4
 8002db6:	4629      	mov	r1, r5
 8002db8:	f7fd fa14 	bl	80001e4 <__adddf3>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f7fd fe94 	bl	8000af0 <__aeabi_d2f>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	4a23      	ldr	r2, [pc, #140]	; (8002e58 <StabilizerPID+0xec>)
 8002dcc:	6253      	str	r3, [r2, #36]	; 0x24
	StabilizerPIDController.ControllerOutput = (StabilizerPIDController.Kp*StabilizerPIDController.NowError)
 8002dce:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <StabilizerPID+0xec>)
 8002dd0:	ed93 7a00 	vldr	s14, [r3]
 8002dd4:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <StabilizerPID+0xec>)
 8002dd6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002dda:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(StabilizerPIDController.Ki * StabilizerPIDController.Integral_Value)
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <StabilizerPID+0xec>)
 8002de0:	edd3 6a01 	vldr	s13, [r3, #4]
 8002de4:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <StabilizerPID+0xec>)
 8002de6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df2:	ee17 0a90 	vmov	r0, s15
 8002df6:	f7fd fb53 	bl	80004a0 <__aeabi_f2d>
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	460d      	mov	r5, r1
					  +(StabilizerPIDController.Kd * (StabilizerPIDController.NowError-StabilizerPIDController.PreviousError)/StabilizerPIDController.SamplingTime);
 8002dfe:	4b16      	ldr	r3, [pc, #88]	; (8002e58 <StabilizerPID+0xec>)
 8002e00:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e04:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <StabilizerPID+0xec>)
 8002e06:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <StabilizerPID+0xec>)
 8002e0c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002e10:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e18:	ee17 0a90 	vmov	r0, s15
 8002e1c:	f7fd fb40 	bl	80004a0 <__aeabi_f2d>
 8002e20:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <StabilizerPID+0xec>)
 8002e22:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002e26:	f7fd fcbd 	bl	80007a4 <__aeabi_ddiv>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4620      	mov	r0, r4
 8002e30:	4629      	mov	r1, r5
 8002e32:	f7fd f9d7 	bl	80001e4 <__adddf3>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f7fd fe57 	bl	8000af0 <__aeabi_d2f>
 8002e42:	4603      	mov	r3, r0
	StabilizerPIDController.ControllerOutput = (StabilizerPIDController.Kp*StabilizerPIDController.NowError)
 8002e44:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <StabilizerPID+0xec>)
 8002e46:	6153      	str	r3, [r2, #20]

	StabilizerPIDController.PreviousError = StabilizerPIDController.NowError;
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <StabilizerPID+0xec>)
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	4a02      	ldr	r2, [pc, #8]	; (8002e58 <StabilizerPID+0xec>)
 8002e4e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002e50:	bf00      	nop
 8002e52:	bdb0      	pop	{r4, r5, r7, pc}
 8002e54:	200002c0 	.word	0x200002c0
 8002e58:	20000280 	.word	0x20000280

08002e5c <UARTInit>:


///UART ZONE
void UARTInit(UARTStucrture *uart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8002e64:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <UARTInit+0x4c>)
 8002e66:	88db      	ldrh	r3, [r3, #6]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	2001      	movs	r0, #1
 8002e6c:	f006 ff6e 	bl	8009d4c <calloc>
 8002e70:	4603      	mov	r3, r0
 8002e72:	461a      	mov	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <UARTInit+0x4c>)
 8002e7a:	889b      	ldrh	r3, [r3, #4]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	2001      	movs	r0, #1
 8002e80:	f006 ff64 	bl	8009d4c <calloc>
 8002e84:	4603      	mov	r3, r0
 8002e86:	461a      	mov	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	81da      	strh	r2, [r3, #14]
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	200000b8 	.word	0x200000b8

08002eac <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6919      	ldr	r1, [r3, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	88db      	ldrh	r3, [r3, #6]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f006 f8bf 	bl	8009044 <HAL_UART_Receive_DMA>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	88db      	ldrh	r3, [r3, #6]
 8002eda:	461a      	mov	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	1ad3      	subs	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 8002ef4:	b590      	push	{r4, r7, lr}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8002efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f00:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	8a9b      	ldrh	r3, [r3, #20]
 8002f06:	461c      	mov	r4, r3
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ffe0 	bl	8002ece <UARTGetRxHead>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	429c      	cmp	r4, r3
 8002f12:	d013      	beq.n	8002f3c <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	8a92      	ldrh	r2, [r2, #20]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	8a9b      	ldrh	r3, [r3, #20]
 8002f26:	3301      	adds	r3, #1
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	88d2      	ldrh	r2, [r2, #6]
 8002f2c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002f30:	fb02 f201 	mul.w	r2, r2, r1
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8002f3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd90      	pop	{r4, r7, pc}

08002f48 <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	d13d      	bne.n	8002fda <UARTTxDumpBuffer+0x92>
 8002f5e:	4b21      	ldr	r3, [pc, #132]	; (8002fe4 <UARTTxDumpBuffer+0x9c>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d139      	bne.n	8002fda <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 8002f66:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <UARTTxDumpBuffer+0x9c>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	89da      	ldrh	r2, [r3, #14]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	899b      	ldrh	r3, [r3, #12]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d02d      	beq.n	8002fd4 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	89da      	ldrh	r2, [r3, #14]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d906      	bls.n	8002f92 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	89da      	ldrh	r2, [r3, #14]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	e005      	b.n	8002f9e <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	889a      	ldrh	r2, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	8992      	ldrh	r2, [r2, #12]
 8002fac:	4413      	add	r3, r2
 8002fae:	89fa      	ldrh	r2, [r7, #14]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f005 ffdb 	bl	8008f6c <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	899b      	ldrh	r3, [r3, #12]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	89fb      	ldrh	r3, [r7, #14]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	8892      	ldrh	r2, [r2, #4]
 8002fc4:	fb93 f1f2 	sdiv	r1, r3, r2
 8002fc8:	fb02 f201 	mul.w	r2, r2, r1
 8002fcc:	1a9b      	subs	r3, r3, r2
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8002fd4:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <UARTTxDumpBuffer+0x9c>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
	}
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000378 	.word	0x20000378

08002fe8 <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	889b      	ldrh	r3, [r3, #4]
 8002ffa:	88fa      	ldrh	r2, [r7, #6]
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	bf28      	it	cs
 8003000:	4613      	movcs	r3, r2
 8003002:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8003004:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	889b      	ldrh	r3, [r3, #4]
 800300a:	4619      	mov	r1, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	89db      	ldrh	r3, [r3, #14]
 8003010:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8003012:	4293      	cmp	r3, r2
 8003014:	bfa8      	it	ge
 8003016:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8003018:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	89d2      	ldrh	r2, [r2, #14]
 8003022:	4413      	add	r3, r2
 8003024:	8aba      	ldrh	r2, [r7, #20]
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	4618      	mov	r0, r3
 800302a:	f006 fec1 	bl	8009db0 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	89db      	ldrh	r3, [r3, #14]
 8003032:	461a      	mov	r2, r3
 8003034:	8afb      	ldrh	r3, [r7, #22]
 8003036:	4413      	add	r3, r2
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	8892      	ldrh	r2, [r2, #4]
 800303c:	fb93 f1f2 	sdiv	r1, r3, r2
 8003040:	fb02 f201 	mul.w	r2, r2, r1
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 800304c:	8afa      	ldrh	r2, [r7, #22]
 800304e:	8abb      	ldrh	r3, [r7, #20]
 8003050:	429a      	cmp	r2, r3
 8003052:	d00a      	beq.n	800306a <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6898      	ldr	r0, [r3, #8]
 8003058:	8abb      	ldrh	r3, [r7, #20]
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 800305e:	8afa      	ldrh	r2, [r7, #22]
 8003060:	8abb      	ldrh	r3, [r7, #20]
 8003062:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8003064:	461a      	mov	r2, r3
 8003066:	f006 fea3 	bl	8009db0 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f7ff ff6c 	bl	8002f48 <UARTTxDumpBuffer>

}
 8003070:	bf00      	nop
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <ACK1Return>:

void ACK1Return(UARTStucrture *uart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {0x58, 0b01110101};
 8003080:	f247 5358 	movw	r3, #30040	; 0x7558
 8003084:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 8003086:	f107 030c 	add.w	r3, r7, #12
 800308a:	2202      	movs	r2, #2
 800308c:	4619      	mov	r1, r3
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff ffaa 	bl	8002fe8 <UARTTxWrite>
	}
}
 8003094:	bf00      	nop
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <ACK2Return>:

void ACK2Return(UARTStucrture *uart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {70, 110};
 80030a4:	f646 6346 	movw	r3, #28230	; 0x6e46
 80030a8:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 80030aa:	f107 030c 	add.w	r3, r7, #12
 80030ae:	2202      	movs	r2, #2
 80030b0:	4619      	mov	r1, r3
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff ff98 	bl	8002fe8 <UARTTxWrite>
	}
}
 80030b8:	bf00      	nop
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <Munmunbot_Protocol>:
	UARTTxWrite(uart, temp, 2);
	}
}

void Munmunbot_Protocol(int16_t dataIn,UARTStucrture *uart)
{
 80030c0:	b5b0      	push	{r4, r5, r7, lr}
 80030c2:	b08e      	sub	sp, #56	; 0x38
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	6039      	str	r1, [r7, #0]
 80030ca:	80fb      	strh	r3, [r7, #6]
	static uint8_t parameter_ptr = 0;
	static uint16_t Data_HAck = 0;
	static uint32_t CheckSum = 0;
	static uint16_t DataForReturn = 0;

	switch (Munmunbot_Protocol_State)
 80030cc:	4b8b      	ldr	r3, [pc, #556]	; (80032fc <Munmunbot_Protocol+0x23c>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b05      	cmp	r3, #5
 80030d2:	f200 841e 	bhi.w	8003912 <Munmunbot_Protocol+0x852>
 80030d6:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <Munmunbot_Protocol+0x1c>)
 80030d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030dc:	080030f5 	.word	0x080030f5
 80030e0:	080031a9 	.word	0x080031a9
 80030e4:	080031eb 	.word	0x080031eb
 80030e8:	08003239 	.word	0x08003239
 80030ec:	0800325d 	.word	0x0800325d
 80030f0:	0800331d 	.word	0x0800331d
	{
		case PP_STARTandMode:
			if (((dataIn>>4) & 0b1111) == 0b1001)
 80030f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f8:	111b      	asrs	r3, r3, #4
 80030fa:	b21b      	sxth	r3, r3
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	2b09      	cmp	r3, #9
 8003104:	f040 8402 	bne.w	800390c <Munmunbot_Protocol+0x84c>
			{
				CheckSum = dataIn;
 8003108:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800310c:	4a7c      	ldr	r2, [pc, #496]	; (8003300 <Munmunbot_Protocol+0x240>)
 800310e:	6013      	str	r3, [r2, #0]
				ProtocolMode = dataIn & 0b1111;
 8003110:	88fb      	ldrh	r3, [r7, #6]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4b7a      	ldr	r3, [pc, #488]	; (8003304 <Munmunbot_Protocol+0x244>)
 800311c:	701a      	strb	r2, [r3, #0]

				if (ProtocolMode == 7)
 800311e:	4b79      	ldr	r3, [pc, #484]	; (8003304 <Munmunbot_Protocol+0x244>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b07      	cmp	r3, #7
 8003124:	d103      	bne.n	800312e <Munmunbot_Protocol+0x6e>
				{
					Munmunbot_Protocol_State = PP_Frame3_Data_0; ///Frame3
 8003126:	4b75      	ldr	r3, [pc, #468]	; (80032fc <Munmunbot_Protocol+0x23c>)
 8003128:	2203      	movs	r2, #3
 800312a:	701a      	strb	r2, [r3, #0]
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
				{
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
				}
			}
			break;
 800312c:	e3ee      	b.n	800390c <Munmunbot_Protocol+0x84c>
				else if (ProtocolMode == 1 || ProtocolMode == 4 || ProtocolMode == 5 ||ProtocolMode == 6)
 800312e:	4b75      	ldr	r3, [pc, #468]	; (8003304 <Munmunbot_Protocol+0x244>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d00b      	beq.n	800314e <Munmunbot_Protocol+0x8e>
 8003136:	4b73      	ldr	r3, [pc, #460]	; (8003304 <Munmunbot_Protocol+0x244>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b04      	cmp	r3, #4
 800313c:	d007      	beq.n	800314e <Munmunbot_Protocol+0x8e>
 800313e:	4b71      	ldr	r3, [pc, #452]	; (8003304 <Munmunbot_Protocol+0x244>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b05      	cmp	r3, #5
 8003144:	d003      	beq.n	800314e <Munmunbot_Protocol+0x8e>
 8003146:	4b6f      	ldr	r3, [pc, #444]	; (8003304 <Munmunbot_Protocol+0x244>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b06      	cmp	r3, #6
 800314c:	d103      	bne.n	8003156 <Munmunbot_Protocol+0x96>
					Munmunbot_Protocol_State = PP_Frame2_Data_0; //Frame2
 800314e:	4b6b      	ldr	r3, [pc, #428]	; (80032fc <Munmunbot_Protocol+0x23c>)
 8003150:	2201      	movs	r2, #1
 8003152:	701a      	strb	r2, [r3, #0]
			break;
 8003154:	e3da      	b.n	800390c <Munmunbot_Protocol+0x84c>
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 8003156:	4b6b      	ldr	r3, [pc, #428]	; (8003304 <Munmunbot_Protocol+0x244>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d020      	beq.n	80031a0 <Munmunbot_Protocol+0xe0>
 800315e:	4b69      	ldr	r3, [pc, #420]	; (8003304 <Munmunbot_Protocol+0x244>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b03      	cmp	r3, #3
 8003164:	d01c      	beq.n	80031a0 <Munmunbot_Protocol+0xe0>
 8003166:	4b67      	ldr	r3, [pc, #412]	; (8003304 <Munmunbot_Protocol+0x244>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b08      	cmp	r3, #8
 800316c:	d018      	beq.n	80031a0 <Munmunbot_Protocol+0xe0>
 800316e:	4b65      	ldr	r3, [pc, #404]	; (8003304 <Munmunbot_Protocol+0x244>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b09      	cmp	r3, #9
 8003174:	d014      	beq.n	80031a0 <Munmunbot_Protocol+0xe0>
 8003176:	4b63      	ldr	r3, [pc, #396]	; (8003304 <Munmunbot_Protocol+0x244>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b0a      	cmp	r3, #10
 800317c:	d010      	beq.n	80031a0 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 800317e:	4b61      	ldr	r3, [pc, #388]	; (8003304 <Munmunbot_Protocol+0x244>)
 8003180:	781b      	ldrb	r3, [r3, #0]
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 8003182:	2b0b      	cmp	r3, #11
 8003184:	d00c      	beq.n	80031a0 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 8003186:	4b5f      	ldr	r3, [pc, #380]	; (8003304 <Munmunbot_Protocol+0x244>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b0c      	cmp	r3, #12
 800318c:	d008      	beq.n	80031a0 <Munmunbot_Protocol+0xe0>
 800318e:	4b5d      	ldr	r3, [pc, #372]	; (8003304 <Munmunbot_Protocol+0x244>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b0d      	cmp	r3, #13
 8003194:	d004      	beq.n	80031a0 <Munmunbot_Protocol+0xe0>
 8003196:	4b5b      	ldr	r3, [pc, #364]	; (8003304 <Munmunbot_Protocol+0x244>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b0e      	cmp	r3, #14
 800319c:	f040 83b6 	bne.w	800390c <Munmunbot_Protocol+0x84c>
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
 80031a0:	4b56      	ldr	r3, [pc, #344]	; (80032fc <Munmunbot_Protocol+0x23c>)
 80031a2:	2205      	movs	r2, #5
 80031a4:	701a      	strb	r2, [r3, #0]
			break;
 80031a6:	e3b1      	b.n	800390c <Munmunbot_Protocol+0x84c>
		case PP_Frame2_Data_0:
			 CheckSum += dataIn;
 80031a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80031ac:	4b54      	ldr	r3, [pc, #336]	; (8003300 <Munmunbot_Protocol+0x240>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4413      	add	r3, r2
 80031b2:	4a53      	ldr	r2, [pc, #332]	; (8003300 <Munmunbot_Protocol+0x240>)
 80031b4:	6013      	str	r3, [r2, #0]
			 Data_HAck = ((dataIn&0b11111111)<<8)&0b1111111100000000;
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	4b52      	ldr	r3, [pc, #328]	; (8003308 <Munmunbot_Protocol+0x248>)
 80031be:	801a      	strh	r2, [r3, #0]
			 parameter[0] = dataIn&0b1111;
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	4b50      	ldr	r3, [pc, #320]	; (800330c <Munmunbot_Protocol+0x24c>)
 80031cc:	701a      	strb	r2, [r3, #0]
			 parameter[1] = (dataIn>>4)&0b1111;
 80031ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031d2:	111b      	asrs	r3, r3, #4
 80031d4:	b21b      	sxth	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	4b4b      	ldr	r3, [pc, #300]	; (800330c <Munmunbot_Protocol+0x24c>)
 80031e0:	705a      	strb	r2, [r3, #1]
			 Munmunbot_Protocol_State = PP_Frame2_Data_1;
 80031e2:	4b46      	ldr	r3, [pc, #280]	; (80032fc <Munmunbot_Protocol+0x23c>)
 80031e4:	2202      	movs	r2, #2
 80031e6:	701a      	strb	r2, [r3, #0]

			 break;
 80031e8:	e393      	b.n	8003912 <Munmunbot_Protocol+0x852>
		case PP_Frame2_Data_1:
			 CheckSum += dataIn;
 80031ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80031ee:	4b44      	ldr	r3, [pc, #272]	; (8003300 <Munmunbot_Protocol+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4413      	add	r3, r2
 80031f4:	4a42      	ldr	r2, [pc, #264]	; (8003300 <Munmunbot_Protocol+0x240>)
 80031f6:	6013      	str	r3, [r2, #0]
			 Data_HAck = (dataIn&0b11111111) | Data_HAck;
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	b21a      	sxth	r2, r3
 80031fe:	4b42      	ldr	r3, [pc, #264]	; (8003308 <Munmunbot_Protocol+0x248>)
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b21b      	sxth	r3, r3
 8003204:	4313      	orrs	r3, r2
 8003206:	b21b      	sxth	r3, r3
 8003208:	b29a      	uxth	r2, r3
 800320a:	4b3f      	ldr	r3, [pc, #252]	; (8003308 <Munmunbot_Protocol+0x248>)
 800320c:	801a      	strh	r2, [r3, #0]
			 parameter[2] = dataIn&0b1111;
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	b2da      	uxtb	r2, r3
 8003218:	4b3c      	ldr	r3, [pc, #240]	; (800330c <Munmunbot_Protocol+0x24c>)
 800321a:	709a      	strb	r2, [r3, #2]
			 parameter[3] = (dataIn>>4)&0b1111;
 800321c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003220:	111b      	asrs	r3, r3, #4
 8003222:	b21b      	sxth	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	b2da      	uxtb	r2, r3
 800322c:	4b37      	ldr	r3, [pc, #220]	; (800330c <Munmunbot_Protocol+0x24c>)
 800322e:	70da      	strb	r2, [r3, #3]
			 Munmunbot_Protocol_State = PP_CheckSum;
 8003230:	4b32      	ldr	r3, [pc, #200]	; (80032fc <Munmunbot_Protocol+0x23c>)
 8003232:	2205      	movs	r2, #5
 8003234:	701a      	strb	r2, [r3, #0]
			 break;
 8003236:	e36c      	b.n	8003912 <Munmunbot_Protocol+0x852>

		case PP_Frame3_Data_0:
		     CheckSum += dataIn;
 8003238:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800323c:	4b30      	ldr	r3, [pc, #192]	; (8003300 <Munmunbot_Protocol+0x240>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4413      	add	r3, r2
 8003242:	4a2f      	ldr	r2, [pc, #188]	; (8003300 <Munmunbot_Protocol+0x240>)
 8003244:	6013      	str	r3, [r2, #0]
		     n_station = dataIn;
 8003246:	88fa      	ldrh	r2, [r7, #6]
 8003248:	4b31      	ldr	r3, [pc, #196]	; (8003310 <Munmunbot_Protocol+0x250>)
 800324a:	801a      	strh	r2, [r3, #0]
		     n_station_mem = n_station;
 800324c:	4b30      	ldr	r3, [pc, #192]	; (8003310 <Munmunbot_Protocol+0x250>)
 800324e:	881a      	ldrh	r2, [r3, #0]
 8003250:	4b30      	ldr	r3, [pc, #192]	; (8003314 <Munmunbot_Protocol+0x254>)
 8003252:	801a      	strh	r2, [r3, #0]
		     Munmunbot_Protocol_State = PP_Frame3_Data_1;
 8003254:	4b29      	ldr	r3, [pc, #164]	; (80032fc <Munmunbot_Protocol+0x23c>)
 8003256:	2204      	movs	r2, #4
 8003258:	701a      	strb	r2, [r3, #0]

		   break;
 800325a:	e35a      	b.n	8003912 <Munmunbot_Protocol+0x852>

		case PP_Frame3_Data_1:
				CheckSum += dataIn;
 800325c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003260:	4b27      	ldr	r3, [pc, #156]	; (8003300 <Munmunbot_Protocol+0x240>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4413      	add	r3, r2
 8003266:	4a26      	ldr	r2, [pc, #152]	; (8003300 <Munmunbot_Protocol+0x240>)
 8003268:	6013      	str	r3, [r2, #0]
				if (n_station >= 2)
 800326a:	4b29      	ldr	r3, [pc, #164]	; (8003310 <Munmunbot_Protocol+0x250>)
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d927      	bls.n	80032c2 <Munmunbot_Protocol+0x202>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	4a28      	ldr	r2, [pc, #160]	; (8003318 <Munmunbot_Protocol+0x258>)
 8003278:	7812      	ldrb	r2, [r2, #0]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	b2d9      	uxtb	r1, r3
 8003280:	4b22      	ldr	r3, [pc, #136]	; (800330c <Munmunbot_Protocol+0x24c>)
 8003282:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8003284:	4b24      	ldr	r3, [pc, #144]	; (8003318 <Munmunbot_Protocol+0x258>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	3301      	adds	r3, #1
 800328a:	b2da      	uxtb	r2, r3
 800328c:	4b22      	ldr	r3, [pc, #136]	; (8003318 <Munmunbot_Protocol+0x258>)
 800328e:	701a      	strb	r2, [r3, #0]
					parameter[parameter_ptr] = (dataIn>>4)&0b1111;
 8003290:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003294:	111b      	asrs	r3, r3, #4
 8003296:	b21b      	sxth	r3, r3
 8003298:	b2db      	uxtb	r3, r3
 800329a:	4a1f      	ldr	r2, [pc, #124]	; (8003318 <Munmunbot_Protocol+0x258>)
 800329c:	7812      	ldrb	r2, [r2, #0]
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	b2d9      	uxtb	r1, r3
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <Munmunbot_Protocol+0x24c>)
 80032a6:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 80032a8:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <Munmunbot_Protocol+0x258>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	3301      	adds	r3, #1
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	4b19      	ldr	r3, [pc, #100]	; (8003318 <Munmunbot_Protocol+0x258>)
 80032b2:	701a      	strb	r2, [r3, #0]
					n_station -= 2;
 80032b4:	4b16      	ldr	r3, [pc, #88]	; (8003310 <Munmunbot_Protocol+0x250>)
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	3b02      	subs	r3, #2
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	4b14      	ldr	r3, [pc, #80]	; (8003310 <Munmunbot_Protocol+0x250>)
 80032be:	801a      	strh	r2, [r3, #0]
 80032c0:	e012      	b.n	80032e8 <Munmunbot_Protocol+0x228>
				}
				else if (n_station == 1)
 80032c2:	4b13      	ldr	r3, [pc, #76]	; (8003310 <Munmunbot_Protocol+0x250>)
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d10e      	bne.n	80032e8 <Munmunbot_Protocol+0x228>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	4a12      	ldr	r2, [pc, #72]	; (8003318 <Munmunbot_Protocol+0x258>)
 80032d0:	7812      	ldrb	r2, [r2, #0]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	b2d9      	uxtb	r1, r3
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <Munmunbot_Protocol+0x24c>)
 80032da:	5499      	strb	r1, [r3, r2]
					n_station -= 1;
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <Munmunbot_Protocol+0x250>)
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <Munmunbot_Protocol+0x250>)
 80032e6:	801a      	strh	r2, [r3, #0]
				}
				if  (n_station == 0)
 80032e8:	4b09      	ldr	r3, [pc, #36]	; (8003310 <Munmunbot_Protocol+0x250>)
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f040 830f 	bne.w	8003910 <Munmunbot_Protocol+0x850>
				{
					Munmunbot_Protocol_State = PP_CheckSum;
 80032f2:	4b02      	ldr	r3, [pc, #8]	; (80032fc <Munmunbot_Protocol+0x23c>)
 80032f4:	2205      	movs	r2, #5
 80032f6:	701a      	strb	r2, [r3, #0]
				}
				break;
 80032f8:	e30a      	b.n	8003910 <Munmunbot_Protocol+0x850>
 80032fa:	bf00      	nop
 80032fc:	200000d8 	.word	0x200000d8
 8003300:	2000037c 	.word	0x2000037c
 8003304:	20000380 	.word	0x20000380
 8003308:	20000382 	.word	0x20000382
 800330c:	20000384 	.word	0x20000384
 8003310:	20000484 	.word	0x20000484
 8003314:	20000486 	.word	0x20000486
 8003318:	20000488 	.word	0x20000488

			case PP_CheckSum:
			{
				CheckSum = (~CheckSum) & 0xff;
 800331c:	4bba      	ldr	r3, [pc, #744]	; (8003608 <Munmunbot_Protocol+0x548>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	43db      	mvns	r3, r3
 8003322:	b2db      	uxtb	r3, r3
 8003324:	4ab8      	ldr	r2, [pc, #736]	; (8003608 <Munmunbot_Protocol+0x548>)
 8003326:	6013      	str	r3, [r2, #0]
				if (CheckSum == dataIn)
 8003328:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800332c:	4bb6      	ldr	r3, [pc, #728]	; (8003608 <Munmunbot_Protocol+0x548>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	f040 82d7 	bne.w	80038e4 <Munmunbot_Protocol+0x824>
				{

					switch (ProtocolMode)
 8003336:	4bb5      	ldr	r3, [pc, #724]	; (800360c <Munmunbot_Protocol+0x54c>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	3b01      	subs	r3, #1
 800333c:	2b0d      	cmp	r3, #13
 800333e:	f200 82d2 	bhi.w	80038e6 <Munmunbot_Protocol+0x826>
 8003342:	a201      	add	r2, pc, #4	; (adr r2, 8003348 <Munmunbot_Protocol+0x288>)
 8003344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003348:	08003381 	.word	0x08003381
 800334c:	080033f5 	.word	0x080033f5
 8003350:	0800340f 	.word	0x0800340f
 8003354:	08003425 	.word	0x08003425
 8003358:	08003487 	.word	0x08003487
 800335c:	080034a5 	.word	0x080034a5
 8003360:	080034c9 	.word	0x080034c9
 8003364:	08003513 	.word	0x08003513
 8003368:	08003541 	.word	0x08003541
 800336c:	0800364d 	.word	0x0800364d
 8003370:	0800375f 	.word	0x0800375f
 8003374:	08003899 	.word	0x08003899
 8003378:	080038af 	.word	0x080038af
 800337c:	080038c5 	.word	0x080038c5
					{
					case 1: ///Test Command ##Complete##
						{
						uint8_t temp[] =
 8003380:	2391      	movs	r3, #145	; 0x91
 8003382:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						{0b10010001,
						((parameter[1] & 0xff) << 4)  | (parameter[0]& 0xff),
 8003386:	4ba2      	ldr	r3, [pc, #648]	; (8003610 <Munmunbot_Protocol+0x550>)
 8003388:	785b      	ldrb	r3, [r3, #1]
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	b25a      	sxtb	r2, r3
 800338e:	4ba0      	ldr	r3, [pc, #640]	; (8003610 <Munmunbot_Protocol+0x550>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	b25b      	sxtb	r3, r3
 8003394:	4313      	orrs	r3, r2
 8003396:	b25b      	sxtb	r3, r3
 8003398:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 800339a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						((parameter[3] & 0xff) << 4)  | (parameter[2]& 0xff),
 800339e:	4b9c      	ldr	r3, [pc, #624]	; (8003610 <Munmunbot_Protocol+0x550>)
 80033a0:	78db      	ldrb	r3, [r3, #3]
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	b25a      	sxtb	r2, r3
 80033a6:	4b9a      	ldr	r3, [pc, #616]	; (8003610 <Munmunbot_Protocol+0x550>)
 80033a8:	789b      	ldrb	r3, [r3, #2]
 80033aa:	b25b      	sxtb	r3, r3
 80033ac:	4313      	orrs	r3, r2
 80033ae:	b25b      	sxtb	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 80033b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80033b6:	2300      	movs	r3, #0
 80033b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80033bc:	2358      	movs	r3, #88	; 0x58
 80033be:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80033c2:	2375      	movs	r3, #117	; 0x75
 80033c4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						0b0 , 0x58 ,0x75 };
						temp[3] = (~(temp[0]+temp[1]+temp[2]))& 0xff;
 80033c8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80033cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80033d0:	4413      	add	r3, r2
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80033d8:	4413      	add	r3, r2
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						UARTTxWrite(uart, temp, 6);
 80033e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e8:	2206      	movs	r2, #6
 80033ea:	4619      	mov	r1, r3
 80033ec:	6838      	ldr	r0, [r7, #0]
 80033ee:	f7ff fdfb 	bl	8002fe8 <UARTTxWrite>
						}
						break;
 80033f2:	e278      	b.n	80038e6 <Munmunbot_Protocol+0x826>
					case 2: //Connect MCU ##Complete##
						if (Munmunbot_State == STATE_Disconnected)
 80033f4:	4b87      	ldr	r3, [pc, #540]	; (8003614 <Munmunbot_Protocol+0x554>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d104      	bne.n	8003406 <Munmunbot_Protocol+0x346>
						{
							Munmunbot_State = STATE_Idle;
 80033fc:	4b85      	ldr	r3, [pc, #532]	; (8003614 <Munmunbot_Protocol+0x554>)
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
							PID_Reset();
 8003402:	f000 fabb 	bl	800397c <PID_Reset>
						}
						ACK1Return(uart);
 8003406:	6838      	ldr	r0, [r7, #0]
 8003408:	f7ff fe36 	bl	8003078 <ACK1Return>
						break;
 800340c:	e26b      	b.n	80038e6 <Munmunbot_Protocol+0x826>
					case 3: //Disconnect MCU ##Complete##
						if (Munmunbot_State == STATE_Idle)
 800340e:	4b81      	ldr	r3, [pc, #516]	; (8003614 <Munmunbot_Protocol+0x554>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d102      	bne.n	800341c <Munmunbot_Protocol+0x35c>
						{
							Munmunbot_State = STATE_Disconnected;
 8003416:	4b7f      	ldr	r3, [pc, #508]	; (8003614 <Munmunbot_Protocol+0x554>)
 8003418:	2200      	movs	r2, #0
 800341a:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 800341c:	6838      	ldr	r0, [r7, #0]
 800341e:	f7ff fe2b 	bl	8003078 <ACK1Return>
						break;
 8003422:	e260      	b.n	80038e6 <Munmunbot_Protocol+0x826>
					case 4: //Set Angular Velocity ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003424:	4b7b      	ldr	r3, [pc, #492]	; (8003614 <Munmunbot_Protocol+0x554>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d128      	bne.n	800347e <Munmunbot_Protocol+0x3be>
						{
							CUSSStruc.RPMp = 0.925*(Data_HAck*10.0)/255.0;
 800342c:	4b7a      	ldr	r3, [pc, #488]	; (8003618 <Munmunbot_Protocol+0x558>)
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7fd f823 	bl	800047c <__aeabi_i2d>
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	4b78      	ldr	r3, [pc, #480]	; (800361c <Munmunbot_Protocol+0x55c>)
 800343c:	f7fd f888 	bl	8000550 <__aeabi_dmul>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4610      	mov	r0, r2
 8003446:	4619      	mov	r1, r3
 8003448:	a36b      	add	r3, pc, #428	; (adr r3, 80035f8 <Munmunbot_Protocol+0x538>)
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	f7fd f87f 	bl	8000550 <__aeabi_dmul>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	a369      	add	r3, pc, #420	; (adr r3, 8003600 <Munmunbot_Protocol+0x540>)
 800345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003460:	f7fd f9a0 	bl	80007a4 <__aeabi_ddiv>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	f7fd fb40 	bl	8000af0 <__aeabi_d2f>
 8003470:	4603      	mov	r3, r0
 8003472:	4a6b      	ldr	r2, [pc, #428]	; (8003620 <Munmunbot_Protocol+0x560>)
 8003474:	6093      	str	r3, [r2, #8]
							TrajectoryGenerationVelocityMaxSetting(&TrjStruc , &CUSSStruc);
 8003476:	496a      	ldr	r1, [pc, #424]	; (8003620 <Munmunbot_Protocol+0x560>)
 8003478:	486a      	ldr	r0, [pc, #424]	; (8003624 <Munmunbot_Protocol+0x564>)
 800347a:	f7fe fcc5 	bl	8001e08 <TrajectoryGenerationVelocityMaxSetting>
						}
						ACK1Return(uart);
 800347e:	6838      	ldr	r0, [r7, #0]
 8003480:	f7ff fdfa 	bl	8003078 <ACK1Return>
						break;
 8003484:	e22f      	b.n	80038e6 <Munmunbot_Protocol+0x826>
					case 5:   //Set Angular pos ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003486:	4b63      	ldr	r3, [pc, #396]	; (8003614 <Munmunbot_Protocol+0x554>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d106      	bne.n	800349c <Munmunbot_Protocol+0x3dc>
						{
							Angularpos_InputNumber = Data_HAck;
 800348e:	4b62      	ldr	r3, [pc, #392]	; (8003618 <Munmunbot_Protocol+0x558>)
 8003490:	881a      	ldrh	r2, [r3, #0]
 8003492:	4b65      	ldr	r3, [pc, #404]	; (8003628 <Munmunbot_Protocol+0x568>)
 8003494:	801a      	strh	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Pos_Directly;
 8003496:	4b65      	ldr	r3, [pc, #404]	; (800362c <Munmunbot_Protocol+0x56c>)
 8003498:	2201      	movs	r2, #1
 800349a:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 800349c:	6838      	ldr	r0, [r7, #0]
 800349e:	f7ff fdeb 	bl	8003078 <ACK1Return>
						break;
 80034a2:	e220      	b.n	80038e6 <Munmunbot_Protocol+0x826>
					case 6:  /// Set 1 Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80034a4:	4b5b      	ldr	r3, [pc, #364]	; (8003614 <Munmunbot_Protocol+0x554>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d109      	bne.n	80034c0 <Munmunbot_Protocol+0x400>
						{
//							Angularpos_InputArray[0] = parameter[0];
							Angularpos_InputArray[0] = parameter[2];    //150 0x00 0x0A Checksum
 80034ac:	4b58      	ldr	r3, [pc, #352]	; (8003610 <Munmunbot_Protocol+0x550>)
 80034ae:	789a      	ldrb	r2, [r3, #2]
 80034b0:	4b5f      	ldr	r3, [pc, #380]	; (8003630 <Munmunbot_Protocol+0x570>)
 80034b2:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Goal_1_Station;
 80034b4:	4b5d      	ldr	r3, [pc, #372]	; (800362c <Munmunbot_Protocol+0x56c>)
 80034b6:	2202      	movs	r2, #2
 80034b8:	701a      	strb	r2, [r3, #0]
							NumberOfStationToGo = 1;
 80034ba:	4b5e      	ldr	r3, [pc, #376]	; (8003634 <Munmunbot_Protocol+0x574>)
 80034bc:	2201      	movs	r2, #1
 80034be:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	f7ff fdd9 	bl	8003078 <ACK1Return>
						break;
 80034c6:	e20e      	b.n	80038e6 <Munmunbot_Protocol+0x826>
					case 7:  /// Set n Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80034c8:	4b52      	ldr	r3, [pc, #328]	; (8003614 <Munmunbot_Protocol+0x554>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d11c      	bne.n	800350a <Munmunbot_Protocol+0x44a>
						{
							MovingLinkMode = LMM_Set_Goal_n_Station;
 80034d0:	4b56      	ldr	r3, [pc, #344]	; (800362c <Munmunbot_Protocol+0x56c>)
 80034d2:	2203      	movs	r2, #3
 80034d4:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	637b      	str	r3, [r7, #52]	; 0x34
 80034da:	e00b      	b.n	80034f4 <Munmunbot_Protocol+0x434>
							{
								Angularpos_InputArray[i] = parameter[i];
 80034dc:	4a4c      	ldr	r2, [pc, #304]	; (8003610 <Munmunbot_Protocol+0x550>)
 80034de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e0:	4413      	add	r3, r2
 80034e2:	7819      	ldrb	r1, [r3, #0]
 80034e4:	4a52      	ldr	r2, [pc, #328]	; (8003630 <Munmunbot_Protocol+0x570>)
 80034e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e8:	4413      	add	r3, r2
 80034ea:	460a      	mov	r2, r1
 80034ec:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 80034ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f0:	3301      	adds	r3, #1
 80034f2:	637b      	str	r3, [r7, #52]	; 0x34
 80034f4:	4b50      	ldr	r3, [pc, #320]	; (8003638 <Munmunbot_Protocol+0x578>)
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fc:	4293      	cmp	r3, r2
 80034fe:	dbed      	blt.n	80034dc <Munmunbot_Protocol+0x41c>
							}
							NumberOfStationToGo = n_station_mem;
 8003500:	4b4d      	ldr	r3, [pc, #308]	; (8003638 <Munmunbot_Protocol+0x578>)
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	4b4b      	ldr	r3, [pc, #300]	; (8003634 <Munmunbot_Protocol+0x574>)
 8003508:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 800350a:	6838      	ldr	r0, [r7, #0]
 800350c:	f7ff fdb4 	bl	8003078 <ACK1Return>
						break;
 8003510:	e1e9      	b.n	80038e6 <Munmunbot_Protocol+0x826>
					case 8:  /// Go go ##Complete##  ///But must implement return ACK after it's done
						if (Munmunbot_State == STATE_Idle)
 8003512:	4b40      	ldr	r3, [pc, #256]	; (8003614 <Munmunbot_Protocol+0x554>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d108      	bne.n	800352c <Munmunbot_Protocol+0x46c>
						{
							Munmunbot_State = STATE_PrepareDATA;
 800351a:	4b3e      	ldr	r3, [pc, #248]	; (8003614 <Munmunbot_Protocol+0x554>)
 800351c:	2202      	movs	r2, #2
 800351e:	701a      	strb	r2, [r3, #0]
							PID_Reset();
 8003520:	f000 fa2c 	bl	800397c <PID_Reset>
							ACK1Return(uart);
 8003524:	6838      	ldr	r0, [r7, #0]
 8003526:	f7ff fda7 	bl	8003078 <ACK1Return>
								{0x58 ,  0x75 ,
										70,  110};  ///ACK1 + ACK2
								UARTTxWrite(uart, temp, 4);
							}
						}
						break;
 800352a:	e1dc      	b.n	80038e6 <Munmunbot_Protocol+0x826>
								uint8_t temp[] =
 800352c:	4b43      	ldr	r3, [pc, #268]	; (800363c <Munmunbot_Protocol+0x57c>)
 800352e:	623b      	str	r3, [r7, #32]
								UARTTxWrite(uart, temp, 4);
 8003530:	f107 0320 	add.w	r3, r7, #32
 8003534:	2204      	movs	r2, #4
 8003536:	4619      	mov	r1, r3
 8003538:	6838      	ldr	r0, [r7, #0]
 800353a:	f7ff fd55 	bl	8002fe8 <UARTTxWrite>
						break;
 800353e:	e1d2      	b.n	80038e6 <Munmunbot_Protocol+0x826>

					case 9:  /// Return Current Station   ##Complete##

						{
							uint8_t temp[] =
 8003540:	4a3f      	ldr	r2, [pc, #252]	; (8003640 <Munmunbot_Protocol+0x580>)
 8003542:	f107 0318 	add.w	r3, r7, #24
 8003546:	e892 0003 	ldmia.w	r2, {r0, r1}
 800354a:	6018      	str	r0, [r3, #0]
 800354c:	3304      	adds	r3, #4
 800354e:	8019      	strh	r1, [r3, #0]
							{0x58 ,  0x75 ,
									153,  0b0,  0b0, 0b0}; ///ACK1 + Mode 9
							uint8_t Shift = 2;
 8003550:	2302      	movs	r3, #2
 8003552:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
							DataForReturn = Current_Station&(0xff);
 8003556:	4b3b      	ldr	r3, [pc, #236]	; (8003644 <Munmunbot_Protocol+0x584>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	b29a      	uxth	r2, r3
 800355c:	4b3a      	ldr	r3, [pc, #232]	; (8003648 <Munmunbot_Protocol+0x588>)
 800355e:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8003560:	4b39      	ldr	r3, [pc, #228]	; (8003648 <Munmunbot_Protocol+0x588>)
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	b29a      	uxth	r2, r3
 8003568:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800356c:	3301      	adds	r3, #1
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003574:	440b      	add	r3, r1
 8003576:	f803 2c20 	strb.w	r2, [r3, #-32]
							temp[2+Shift] = (DataForReturn)&(0xff);
 800357a:	4b33      	ldr	r3, [pc, #204]	; (8003648 <Munmunbot_Protocol+0x588>)
 800357c:	881a      	ldrh	r2, [r3, #0]
 800357e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003582:	3302      	adds	r3, #2
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800358a:	440b      	add	r3, r1
 800358c:	f803 2c20 	strb.w	r2, [r3, #-32]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8003590:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003594:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003598:	4413      	add	r3, r2
 800359a:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 800359e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80035a2:	3301      	adds	r3, #1
 80035a4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80035a8:	440b      	add	r3, r1
 80035aa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80035ae:	4413      	add	r3, r2
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80035b6:	3302      	adds	r3, #2
 80035b8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80035bc:	440b      	add	r3, r1
 80035be:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80035c2:	4413      	add	r3, r2
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80035ca:	3303      	adds	r3, #3
 80035cc:	43d2      	mvns	r2, r2
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80035d4:	440b      	add	r3, r1
 80035d6:	f803 2c20 	strb.w	r2, [r3, #-32]
							UARTTxWrite(uart, temp, 4+Shift);
 80035da:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3304      	adds	r3, #4
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	f107 0318 	add.w	r3, r7, #24
 80035e8:	4619      	mov	r1, r3
 80035ea:	6838      	ldr	r0, [r7, #0]
 80035ec:	f7ff fcfc 	bl	8002fe8 <UARTTxWrite>
						}

						break;
 80035f0:	e179      	b.n	80038e6 <Munmunbot_Protocol+0x826>
 80035f2:	bf00      	nop
 80035f4:	f3af 8000 	nop.w
 80035f8:	9999999a 	.word	0x9999999a
 80035fc:	3fed9999 	.word	0x3fed9999
 8003600:	00000000 	.word	0x00000000
 8003604:	406fe000 	.word	0x406fe000
 8003608:	2000037c 	.word	0x2000037c
 800360c:	20000380 	.word	0x20000380
 8003610:	20000384 	.word	0x20000384
 8003614:	200000d9 	.word	0x200000d9
 8003618:	20000382 	.word	0x20000382
 800361c:	40240000 	.word	0x40240000
 8003620:	20000350 	.word	0x20000350
 8003624:	200002c0 	.word	0x200002c0
 8003628:	200001dc 	.word	0x200001dc
 800362c:	200001de 	.word	0x200001de
 8003630:	200000dc 	.word	0x200000dc
 8003634:	200001e0 	.word	0x200001e0
 8003638:	20000486 	.word	0x20000486
 800363c:	6e467558 	.word	0x6e467558
 8003640:	0800a0d4 	.word	0x0800a0d4
 8003644:	200001df 	.word	0x200001df
 8003648:	2000048a 	.word	0x2000048a

					case 10: /// Return Angular Position  ##Complete##
						{
							uint8_t temp[] =
 800364c:	4aba      	ldr	r2, [pc, #744]	; (8003938 <Munmunbot_Protocol+0x878>)
 800364e:	f107 0310 	add.w	r3, r7, #16
 8003652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003656:	6018      	str	r0, [r3, #0]
 8003658:	3304      	adds	r3, #4
 800365a:	8019      	strh	r1, [r3, #0]
							{0x58 , 0x75 ,154, 0b0,  0b0, 0b0};
							uint8_t Shift = 2;
 800365c:	2302      	movs	r3, #2
 800365e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
							DataForReturn = ((((int) htim1.Instance->CNT) % (CUSSStruc.PPRxQEI))*2*3.141*10000)/(CUSSStruc.PPRxQEI);  ///pulse to (radian*10000)
 8003662:	4bb6      	ldr	r3, [pc, #728]	; (800393c <Munmunbot_Protocol+0x87c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	4ab5      	ldr	r2, [pc, #724]	; (8003940 <Munmunbot_Protocol+0x880>)
 800366a:	6852      	ldr	r2, [r2, #4]
 800366c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003670:	fb02 f201 	mul.w	r2, r2, r1
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	4618      	mov	r0, r3
 800367a:	f7fc feef 	bl	800045c <__aeabi_ui2d>
 800367e:	a3a8      	add	r3, pc, #672	; (adr r3, 8003920 <Munmunbot_Protocol+0x860>)
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	f7fc ff64 	bl	8000550 <__aeabi_dmul>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	a3a5      	add	r3, pc, #660	; (adr r3, 8003928 <Munmunbot_Protocol+0x868>)
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	f7fc ff5b 	bl	8000550 <__aeabi_dmul>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4614      	mov	r4, r2
 80036a0:	461d      	mov	r5, r3
 80036a2:	4ba7      	ldr	r3, [pc, #668]	; (8003940 <Munmunbot_Protocol+0x880>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fc fed8 	bl	800045c <__aeabi_ui2d>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4620      	mov	r0, r4
 80036b2:	4629      	mov	r1, r5
 80036b4:	f7fd f876 	bl	80007a4 <__aeabi_ddiv>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4610      	mov	r0, r2
 80036be:	4619      	mov	r1, r3
 80036c0:	f7fd f9f6 	bl	8000ab0 <__aeabi_d2uiz>
 80036c4:	4603      	mov	r3, r0
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	4b9e      	ldr	r3, [pc, #632]	; (8003944 <Munmunbot_Protocol+0x884>)
 80036ca:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 80036cc:	4b9d      	ldr	r3, [pc, #628]	; (8003944 <Munmunbot_Protocol+0x884>)
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	0a1b      	lsrs	r3, r3, #8
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036d8:	3301      	adds	r3, #1
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80036e0:	440b      	add	r3, r1
 80036e2:	f803 2c28 	strb.w	r2, [r3, #-40]
							temp[2+Shift] = (DataForReturn)&(0xff);
 80036e6:	4b97      	ldr	r3, [pc, #604]	; (8003944 <Munmunbot_Protocol+0x884>)
 80036e8:	881a      	ldrh	r2, [r3, #0]
 80036ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036ee:	3302      	adds	r3, #2
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80036f6:	440b      	add	r3, r1
 80036f8:	f803 2c28 	strb.w	r2, [r3, #-40]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 80036fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003700:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003704:	4413      	add	r3, r2
 8003706:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 800370a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800370e:	3301      	adds	r3, #1
 8003710:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003714:	440b      	add	r3, r1
 8003716:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800371a:	4413      	add	r3, r2
 800371c:	b2da      	uxtb	r2, r3
 800371e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003722:	3302      	adds	r3, #2
 8003724:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003728:	440b      	add	r3, r1
 800372a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800372e:	4413      	add	r3, r2
 8003730:	b2da      	uxtb	r2, r3
 8003732:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003736:	3303      	adds	r3, #3
 8003738:	43d2      	mvns	r2, r2
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003740:	440b      	add	r3, r1
 8003742:	f803 2c28 	strb.w	r2, [r3, #-40]
							UARTTxWrite(uart, temp, 4+Shift);
 8003746:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800374a:	b29b      	uxth	r3, r3
 800374c:	3304      	adds	r3, #4
 800374e:	b29a      	uxth	r2, r3
 8003750:	f107 0310 	add.w	r3, r7, #16
 8003754:	4619      	mov	r1, r3
 8003756:	6838      	ldr	r0, [r7, #0]
 8003758:	f7ff fc46 	bl	8002fe8 <UARTTxWrite>
						}
						break;
 800375c:	e0c3      	b.n	80038e6 <Munmunbot_Protocol+0x826>

					case 11: /// Return Angular Velocity Max  ##Complete##
						{
							uint8_t temp[] =
 800375e:	4a7a      	ldr	r2, [pc, #488]	; (8003948 <Munmunbot_Protocol+0x888>)
 8003760:	f107 0308 	add.w	r3, r7, #8
 8003764:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003768:	6018      	str	r0, [r3, #0]
 800376a:	3304      	adds	r3, #4
 800376c:	8019      	strh	r1, [r3, #0]
							{ 0x58, 0x75, 155, 0b0,  0b0, 0b0 };
							uint8_t Shift = 2;
 800376e:	2302      	movs	r3, #2
 8003770:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							float temp3 = ( abs( VelocityPIDController.OutputFeedback )*60.0 )/( ( float ) CUSSStruc.PPRxQEI );
 8003774:	4b75      	ldr	r3, [pc, #468]	; (800394c <Munmunbot_Protocol+0x88c>)
 8003776:	edd3 7a08 	vldr	s15, [r3, #32]
 800377a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800377e:	ee17 3a90 	vmov	r3, s15
 8003782:	2b00      	cmp	r3, #0
 8003784:	bfb8      	it	lt
 8003786:	425b      	neglt	r3, r3
 8003788:	4618      	mov	r0, r3
 800378a:	f7fc fe77 	bl	800047c <__aeabi_i2d>
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	4b6f      	ldr	r3, [pc, #444]	; (8003950 <Munmunbot_Protocol+0x890>)
 8003794:	f7fc fedc 	bl	8000550 <__aeabi_dmul>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4614      	mov	r4, r2
 800379e:	461d      	mov	r5, r3
 80037a0:	4b67      	ldr	r3, [pc, #412]	; (8003940 <Munmunbot_Protocol+0x880>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	ee07 3a90 	vmov	s15, r3
 80037a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ac:	ee17 0a90 	vmov	r0, s15
 80037b0:	f7fc fe76 	bl	80004a0 <__aeabi_f2d>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4620      	mov	r0, r4
 80037ba:	4629      	mov	r1, r5
 80037bc:	f7fc fff2 	bl	80007a4 <__aeabi_ddiv>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4610      	mov	r0, r2
 80037c6:	4619      	mov	r1, r3
 80037c8:	f7fd f992 	bl	8000af0 <__aeabi_d2f>
 80037cc:	4603      	mov	r3, r0
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
							DataForReturn = ( temp3 * 255.0 )/10.0;
 80037d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037d2:	f7fc fe65 	bl	80004a0 <__aeabi_f2d>
 80037d6:	a356      	add	r3, pc, #344	; (adr r3, 8003930 <Munmunbot_Protocol+0x870>)
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	f7fc feb8 	bl	8000550 <__aeabi_dmul>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	4b59      	ldr	r3, [pc, #356]	; (8003954 <Munmunbot_Protocol+0x894>)
 80037ee:	f7fc ffd9 	bl	80007a4 <__aeabi_ddiv>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4610      	mov	r0, r2
 80037f8:	4619      	mov	r1, r3
 80037fa:	f7fd f959 	bl	8000ab0 <__aeabi_d2uiz>
 80037fe:	4603      	mov	r3, r0
 8003800:	b29a      	uxth	r2, r3
 8003802:	4b50      	ldr	r3, [pc, #320]	; (8003944 <Munmunbot_Protocol+0x884>)
 8003804:	801a      	strh	r2, [r3, #0]
							temp[ 1+Shift ] = ( DataForReturn>>8 )&( 0xff );
 8003806:	4b4f      	ldr	r3, [pc, #316]	; (8003944 <Munmunbot_Protocol+0x884>)
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	0a1b      	lsrs	r3, r3, #8
 800380c:	b29a      	uxth	r2, r3
 800380e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003812:	3301      	adds	r3, #1
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800381a:	440b      	add	r3, r1
 800381c:	f803 2c30 	strb.w	r2, [r3, #-48]
							temp[ 2+Shift ] = ( DataForReturn )&( 0xff );
 8003820:	4b48      	ldr	r3, [pc, #288]	; (8003944 <Munmunbot_Protocol+0x884>)
 8003822:	881a      	ldrh	r2, [r3, #0]
 8003824:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003828:	3302      	adds	r3, #2
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003830:	440b      	add	r3, r1
 8003832:	f803 2c30 	strb.w	r2, [r3, #-48]
							temp[ 3+Shift ] = ~( temp[ 0+Shift ]+temp[ 1+Shift ]+temp[ 2+Shift ] );
 8003836:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800383a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800383e:	4413      	add	r3, r2
 8003840:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 8003844:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003848:	3301      	adds	r3, #1
 800384a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800384e:	440b      	add	r3, r1
 8003850:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8003854:	4413      	add	r3, r2
 8003856:	b2da      	uxtb	r2, r3
 8003858:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800385c:	3302      	adds	r3, #2
 800385e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003862:	440b      	add	r3, r1
 8003864:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8003868:	4413      	add	r3, r2
 800386a:	b2da      	uxtb	r2, r3
 800386c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003870:	3303      	adds	r3, #3
 8003872:	43d2      	mvns	r2, r2
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800387a:	440b      	add	r3, r1
 800387c:	f803 2c30 	strb.w	r2, [r3, #-48]
							UARTTxWrite( uart, temp, 4+Shift );
 8003880:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003884:	b29b      	uxth	r3, r3
 8003886:	3304      	adds	r3, #4
 8003888:	b29a      	uxth	r2, r3
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	4619      	mov	r1, r3
 8003890:	6838      	ldr	r0, [r7, #0]
 8003892:	f7ff fba9 	bl	8002fe8 <UARTTxWrite>
						}
						break;
 8003896:	e026      	b.n	80038e6 <Munmunbot_Protocol+0x826>

					case 12:  //Enable Gripper
						if (Munmunbot_State == STATE_Idle)
 8003898:	4b2f      	ldr	r3, [pc, #188]	; (8003958 <Munmunbot_Protocol+0x898>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d102      	bne.n	80038a6 <Munmunbot_Protocol+0x7e6>
						{
							GripperEnable = 1;
 80038a0:	4b2e      	ldr	r3, [pc, #184]	; (800395c <Munmunbot_Protocol+0x89c>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80038a6:	6838      	ldr	r0, [r7, #0]
 80038a8:	f7ff fbe6 	bl	8003078 <ACK1Return>
						break;
 80038ac:	e01b      	b.n	80038e6 <Munmunbot_Protocol+0x826>
					case 13: //Disable Gripper
						if (Munmunbot_State == STATE_Idle)
 80038ae:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <Munmunbot_Protocol+0x898>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d102      	bne.n	80038bc <Munmunbot_Protocol+0x7fc>
						{
							GripperEnable = 0;
 80038b6:	4b29      	ldr	r3, [pc, #164]	; (800395c <Munmunbot_Protocol+0x89c>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80038bc:	6838      	ldr	r0, [r7, #0]
 80038be:	f7ff fbdb 	bl	8003078 <ACK1Return>
						break;
 80038c2:	e010      	b.n	80038e6 <Munmunbot_Protocol+0x826>

					case 14: /// Sethome  ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80038c4:	4b24      	ldr	r3, [pc, #144]	; (8003958 <Munmunbot_Protocol+0x898>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d107      	bne.n	80038dc <Munmunbot_Protocol+0x81c>
						{
							Munmunbot_State = STATE_SetHome;
 80038cc:	4b22      	ldr	r3, [pc, #136]	; (8003958 <Munmunbot_Protocol+0x898>)
 80038ce:	2206      	movs	r2, #6
 80038d0:	701a      	strb	r2, [r3, #0]
							SethomeMode = SetHomeState_0;
 80038d2:	4b23      	ldr	r3, [pc, #140]	; (8003960 <Munmunbot_Protocol+0x8a0>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
							PID_Reset();
 80038d8:	f000 f850 	bl	800397c <PID_Reset>
						}
						ACK1Return(uart);
 80038dc:	6838      	ldr	r0, [r7, #0]
 80038de:	f7ff fbcb 	bl	8003078 <ACK1Return>
						break;
 80038e2:	e000      	b.n	80038e6 <Munmunbot_Protocol+0x826>
				    }
			   }
 80038e4:	bf00      	nop
			n_station = 0;
 80038e6:	4b1f      	ldr	r3, [pc, #124]	; (8003964 <Munmunbot_Protocol+0x8a4>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	801a      	strh	r2, [r3, #0]
			ProtocolMode = 0;
 80038ec:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <Munmunbot_Protocol+0x8a8>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	701a      	strb	r2, [r3, #0]
			parameter_ptr = 0;
 80038f2:	4b1e      	ldr	r3, [pc, #120]	; (800396c <Munmunbot_Protocol+0x8ac>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
			Data_HAck = 0;
 80038f8:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <Munmunbot_Protocol+0x8b0>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	801a      	strh	r2, [r3, #0]
			CheckSum = 0;
 80038fe:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <Munmunbot_Protocol+0x8b4>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
			Munmunbot_Protocol_State = PP_STARTandMode;
 8003904:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <Munmunbot_Protocol+0x8b8>)
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
			break;
 800390a:	e002      	b.n	8003912 <Munmunbot_Protocol+0x852>
			break;
 800390c:	bf00      	nop
 800390e:	e000      	b.n	8003912 <Munmunbot_Protocol+0x852>
				break;
 8003910:	bf00      	nop
			}
	}
}
 8003912:	bf00      	nop
 8003914:	3738      	adds	r7, #56	; 0x38
 8003916:	46bd      	mov	sp, r7
 8003918:	bdb0      	pop	{r4, r5, r7, pc}
 800391a:	bf00      	nop
 800391c:	f3af 8000 	nop.w
 8003920:	9ba5e354 	.word	0x9ba5e354
 8003924:	400920c4 	.word	0x400920c4
 8003928:	00000000 	.word	0x00000000
 800392c:	40c38800 	.word	0x40c38800
 8003930:	00000000 	.word	0x00000000
 8003934:	406fe000 	.word	0x406fe000
 8003938:	0800a0dc 	.word	0x0800a0dc
 800393c:	200005f4 	.word	0x200005f4
 8003940:	20000350 	.word	0x20000350
 8003944:	2000048a 	.word	0x2000048a
 8003948:	0800a0e4 	.word	0x0800a0e4
 800394c:	20000240 	.word	0x20000240
 8003950:	404e0000 	.word	0x404e0000
 8003954:	40240000 	.word	0x40240000
 8003958:	200000d9 	.word	0x200000d9
 800395c:	200001ea 	.word	0x200001ea
 8003960:	200000da 	.word	0x200000da
 8003964:	20000484 	.word	0x20000484
 8003968:	20000380 	.word	0x20000380
 800396c:	20000488 	.word	0x20000488
 8003970:	20000382 	.word	0x20000382
 8003974:	2000037c 	.word	0x2000037c
 8003978:	200000d8 	.word	0x200000d8

0800397c <PID_Reset>:

void PID_Reset()
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
	PositionPIDController.PreviousError = 0;
 8003980:	4b26      	ldr	r3, [pc, #152]	; (8003a1c <PID_Reset+0xa0>)
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	62da      	str	r2, [r3, #44]	; 0x2c
	PositionPIDController.Integral_Value = 0;
 8003988:	4b24      	ldr	r3, [pc, #144]	; (8003a1c <PID_Reset+0xa0>)
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	625a      	str	r2, [r3, #36]	; 0x24
	PositionPIDController.ControllerOutput = 0;
 8003990:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <PID_Reset+0xa0>)
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	615a      	str	r2, [r3, #20]
	PositionPIDController.NowError = 0;
 8003998:	4b20      	ldr	r3, [pc, #128]	; (8003a1c <PID_Reset+0xa0>)
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	629a      	str	r2, [r3, #40]	; 0x28
	PositionPIDController.PreviousPreviousError = 0;
 80039a0:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <PID_Reset+0xa0>)
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
	PositionPIDController.PreviousControllerOutput = 0;
 80039a8:	4b1c      	ldr	r3, [pc, #112]	; (8003a1c <PID_Reset+0xa0>)
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	619a      	str	r2, [r3, #24]


	VelocityPIDController.PreviousError = 0;
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <PID_Reset+0xa4>)
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	62da      	str	r2, [r3, #44]	; 0x2c
	VelocityPIDController.Integral_Value = 0;
 80039b8:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <PID_Reset+0xa4>)
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	625a      	str	r2, [r3, #36]	; 0x24
	VelocityPIDController.ControllerOutput = 0;
 80039c0:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <PID_Reset+0xa4>)
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	615a      	str	r2, [r3, #20]
	VelocityPIDController.NowError = 0;
 80039c8:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <PID_Reset+0xa4>)
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28
	VelocityPIDController.PreviousPreviousError = 0;
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <PID_Reset+0xa4>)
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
	VelocityPIDController.PreviousControllerOutput = 0;
 80039d8:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <PID_Reset+0xa4>)
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	619a      	str	r2, [r3, #24]

	StabilizerPIDController.PreviousError = 0;
 80039e0:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <PID_Reset+0xa8>)
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	62da      	str	r2, [r3, #44]	; 0x2c
	StabilizerPIDController.Integral_Value = 0;
 80039e8:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <PID_Reset+0xa8>)
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	625a      	str	r2, [r3, #36]	; 0x24
	StabilizerPIDController.ControllerOutput = 0;
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <PID_Reset+0xa8>)
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	615a      	str	r2, [r3, #20]
	StabilizerPIDController.NowError = 0;
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <PID_Reset+0xa8>)
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
	StabilizerPIDController.PreviousPreviousError = 0;
 8003a00:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <PID_Reset+0xa8>)
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30
	StabilizerPIDController.PreviousControllerOutput = 0;
 8003a08:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <PID_Reset+0xa8>)
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	619a      	str	r2, [r3, #24]
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000200 	.word	0x20000200
 8003a20:	20000240 	.word	0x20000240
 8003a24:	20000280 	.word	0x20000280

08003a28 <LAMP_ON>:

void LAMP_ON(uint8_t lampnumber)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	71fb      	strb	r3, [r7, #7]
	if (lampnumber == 0)
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d110      	bne.n	8003a5a <LAMP_ON+0x32>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003a38:	2201      	movs	r2, #1
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	4830      	ldr	r0, [pc, #192]	; (8003b00 <LAMP_ON+0xd8>)
 8003a3e:	f001 fd09 	bl	8005454 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003a42:	2201      	movs	r2, #1
 8003a44:	2104      	movs	r1, #4
 8003a46:	482e      	ldr	r0, [pc, #184]	; (8003b00 <LAMP_ON+0xd8>)
 8003a48:	f001 fd04 	bl	8005454 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a52:	482c      	ldr	r0, [pc, #176]	; (8003b04 <LAMP_ON+0xdc>)
 8003a54:	f001 fcfe 	bl	8005454 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
	}
}
 8003a58:	e04e      	b.n	8003af8 <LAMP_ON+0xd0>
	else if (lampnumber == 1)
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d110      	bne.n	8003a82 <LAMP_ON+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8003a60:	2200      	movs	r2, #0
 8003a62:	2102      	movs	r1, #2
 8003a64:	4826      	ldr	r0, [pc, #152]	; (8003b00 <LAMP_ON+0xd8>)
 8003a66:	f001 fcf5 	bl	8005454 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	2104      	movs	r1, #4
 8003a6e:	4824      	ldr	r0, [pc, #144]	; (8003b00 <LAMP_ON+0xd8>)
 8003a70:	f001 fcf0 	bl	8005454 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003a74:	2201      	movs	r2, #1
 8003a76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a7a:	4822      	ldr	r0, [pc, #136]	; (8003b04 <LAMP_ON+0xdc>)
 8003a7c:	f001 fcea 	bl	8005454 <HAL_GPIO_WritePin>
}
 8003a80:	e03a      	b.n	8003af8 <LAMP_ON+0xd0>
	else if (lampnumber == 2)
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d110      	bne.n	8003aaa <LAMP_ON+0x82>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003a88:	2201      	movs	r2, #1
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	481c      	ldr	r0, [pc, #112]	; (8003b00 <LAMP_ON+0xd8>)
 8003a8e:	f001 fce1 	bl	8005454 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8003a92:	2200      	movs	r2, #0
 8003a94:	2104      	movs	r1, #4
 8003a96:	481a      	ldr	r0, [pc, #104]	; (8003b00 <LAMP_ON+0xd8>)
 8003a98:	f001 fcdc 	bl	8005454 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003aa2:	4818      	ldr	r0, [pc, #96]	; (8003b04 <LAMP_ON+0xdc>)
 8003aa4:	f001 fcd6 	bl	8005454 <HAL_GPIO_WritePin>
}
 8003aa8:	e026      	b.n	8003af8 <LAMP_ON+0xd0>
	else if (lampnumber == 3)
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d110      	bne.n	8003ad2 <LAMP_ON+0xaa>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	4812      	ldr	r0, [pc, #72]	; (8003b00 <LAMP_ON+0xd8>)
 8003ab6:	f001 fccd 	bl	8005454 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003aba:	2201      	movs	r2, #1
 8003abc:	2104      	movs	r1, #4
 8003abe:	4810      	ldr	r0, [pc, #64]	; (8003b00 <LAMP_ON+0xd8>)
 8003ac0:	f001 fcc8 	bl	8005454 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003aca:	480e      	ldr	r0, [pc, #56]	; (8003b04 <LAMP_ON+0xdc>)
 8003acc:	f001 fcc2 	bl	8005454 <HAL_GPIO_WritePin>
}
 8003ad0:	e012      	b.n	8003af8 <LAMP_ON+0xd0>
	else if (lampnumber == 4)
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d10f      	bne.n	8003af8 <LAMP_ON+0xd0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2102      	movs	r1, #2
 8003adc:	4808      	ldr	r0, [pc, #32]	; (8003b00 <LAMP_ON+0xd8>)
 8003ade:	f001 fcb9 	bl	8005454 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2104      	movs	r1, #4
 8003ae6:	4806      	ldr	r0, [pc, #24]	; (8003b00 <LAMP_ON+0xd8>)
 8003ae8:	f001 fcb4 	bl	8005454 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003aec:	2200      	movs	r2, #0
 8003aee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003af2:	4804      	ldr	r0, [pc, #16]	; (8003b04 <LAMP_ON+0xdc>)
 8003af4:	f001 fcae 	bl	8005454 <HAL_GPIO_WritePin>
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40020400 	.word	0x40020400
 8003b04:	40020000 	.word	0x40020000

08003b08 <Emergency_switch_trigger>:

void Emergency_switch_trigger()
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1)
 8003b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b10:	481f      	ldr	r0, [pc, #124]	; (8003b90 <Emergency_switch_trigger+0x88>)
 8003b12:	f001 fc87 	bl	8005424 <HAL_GPIO_ReadPin>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d136      	bne.n	8003b8a <Emergency_switch_trigger+0x82>
	{
		// Reset State Machine All
		Munmunbot_State = STATE_Disconnected;
 8003b1c:	4b1d      	ldr	r3, [pc, #116]	; (8003b94 <Emergency_switch_trigger+0x8c>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	701a      	strb	r2, [r3, #0]
		MovingLinkMode = LMM_Not_Set;
 8003b22:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <Emergency_switch_trigger+0x90>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
		SethomeMode = SetHomeState_0;
 8003b28:	4b1c      	ldr	r3, [pc, #112]	; (8003b9c <Emergency_switch_trigger+0x94>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
		TrjStruc.Mode = 0;
 8003b2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ba0 <Emergency_switch_trigger+0x98>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		TrjStruc.Submode = 0;
 8003b36:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <Emergency_switch_trigger+0x98>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

		// Send back ACK to User-interface
		if ((Munmunbot_State == STATE_Calculation) || (Munmunbot_State == STATE_PrepareDATA) ||
 8003b3e:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <Emergency_switch_trigger+0x8c>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d00b      	beq.n	8003b5e <Emergency_switch_trigger+0x56>
 8003b46:	4b13      	ldr	r3, [pc, #76]	; (8003b94 <Emergency_switch_trigger+0x8c>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d007      	beq.n	8003b5e <Emergency_switch_trigger+0x56>
				(Munmunbot_State == STATE_Link_Moving) || (Munmunbot_State == STATE_End_Effector_Working))
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <Emergency_switch_trigger+0x8c>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
		if ((Munmunbot_State == STATE_Calculation) || (Munmunbot_State == STATE_PrepareDATA) ||
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d003      	beq.n	8003b5e <Emergency_switch_trigger+0x56>
				(Munmunbot_State == STATE_Link_Moving) || (Munmunbot_State == STATE_End_Effector_Working))
 8003b56:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <Emergency_switch_trigger+0x8c>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b05      	cmp	r3, #5
 8003b5c:	d102      	bne.n	8003b64 <Emergency_switch_trigger+0x5c>
		{
			ACK2Return(&UART2);
 8003b5e:	4811      	ldr	r0, [pc, #68]	; (8003ba4 <Emergency_switch_trigger+0x9c>)
 8003b60:	f7ff fa9c 	bl	800309c <ACK2Return>
		}

		// Reset variable
		NumberOfStationToGo = 0;
 8003b64:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <Emergency_switch_trigger+0xa0>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	701a      	strb	r2, [r3, #0]
		NumberOfStationPTR = 0;
 8003b6a:	4b10      	ldr	r3, [pc, #64]	; (8003bac <Emergency_switch_trigger+0xa4>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
		Moving_Link_Task_Flag = 0;
 8003b70:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <Emergency_switch_trigger+0xa8>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	701a      	strb	r2, [r3, #0]

		// Stop the Motor
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003b76:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <Emergency_switch_trigger+0xac>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	635a      	str	r2, [r3, #52]	; 0x34
		TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8003b7e:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <Emergency_switch_trigger+0xb0>)
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	4a07      	ldr	r2, [pc, #28]	; (8003ba0 <Emergency_switch_trigger+0x98>)
 8003b84:	66d3      	str	r3, [r2, #108]	; 0x6c

		PID_Reset();
 8003b86:	f7ff fef9 	bl	800397c <PID_Reset>
	}
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40020400 	.word	0x40020400
 8003b94:	200000d9 	.word	0x200000d9
 8003b98:	200001de 	.word	0x200001de
 8003b9c:	200000da 	.word	0x200000da
 8003ba0:	200002c0 	.word	0x200002c0
 8003ba4:	200000b8 	.word	0x200000b8
 8003ba8:	200001e0 	.word	0x200001e0
 8003bac:	200001e1 	.word	0x200001e1
 8003bb0:	200001e8 	.word	0x200001e8
 8003bb4:	2000054c 	.word	0x2000054c
 8003bb8:	20000200 	.word	0x20000200

08003bbc <Controlling_the_LINK>:

void Controlling_the_LINK()
{
 8003bbc:	b5b0      	push	{r4, r5, r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
	  // GEN Trajectory
	  TrajectoryGenerationProcess();
 8003bc0:	f7fe fbda 	bl	8002378 <TrajectoryGenerationProcess>
	  EncoderVelocityAndPosition_Update();
 8003bc4:	f7fd feb0 	bl	8001928 <EncoderVelocityAndPosition_Update>
	  LinkMovingPIDLoad();
 8003bc8:	f7fe f896 	bl	8001cf8 <LinkMovingPIDLoad>
	  PIDController2in1();  ///use only position
 8003bcc:	f7fe ffc6 	bl	8002b5c <PIDController2in1>
//	  Plant_input = PositionPIDController.ControllerOutput;
	  Plant_input = VelocityPIDController.ControllerOutput;
 8003bd0:	4b29      	ldr	r3, [pc, #164]	; (8003c78 <Controlling_the_LINK+0xbc>)
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	4a29      	ldr	r2, [pc, #164]	; (8003c7c <Controlling_the_LINK+0xc0>)
 8003bd6:	6013      	str	r3, [r2, #0]

	  if (Plant_input >= 0) /// Setting DIR
 8003bd8:	4b28      	ldr	r3, [pc, #160]	; (8003c7c <Controlling_the_LINK+0xc0>)
 8003bda:	edd3 7a00 	vldr	s15, [r3]
 8003bde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be6:	db0c      	blt.n	8003c02 <Controlling_the_LINK+0x46>
	  {
		  DCMotorStruc.DIR = 1;
 8003be8:	4b25      	ldr	r3, [pc, #148]	; (8003c80 <Controlling_the_LINK+0xc4>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input);
 8003bee:	4b23      	ldr	r3, [pc, #140]	; (8003c7c <Controlling_the_LINK+0xc0>)
 8003bf0:	edd3 7a00 	vldr	s15, [r3]
 8003bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bf8:	ee17 2a90 	vmov	r2, s15
 8003bfc:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <Controlling_the_LINK+0xc4>)
 8003bfe:	605a      	str	r2, [r3, #4]
 8003c00:	e01b      	b.n	8003c3a <Controlling_the_LINK+0x7e>
	  }
	  else if (Plant_input < 0)
 8003c02:	4b1e      	ldr	r3, [pc, #120]	; (8003c7c <Controlling_the_LINK+0xc0>)
 8003c04:	edd3 7a00 	vldr	s15, [r3]
 8003c08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c10:	d513      	bpl.n	8003c3a <Controlling_the_LINK+0x7e>
	  {
		  DCMotorStruc.DIR = 0;
 8003c12:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <Controlling_the_LINK+0xc4>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input * -1.0);
 8003c18:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <Controlling_the_LINK+0xc0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fc fc3f 	bl	80004a0 <__aeabi_f2d>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4614      	mov	r4, r2
 8003c28:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	4629      	mov	r1, r5
 8003c30:	f7fc ff3e 	bl	8000ab0 <__aeabi_d2uiz>
 8003c34:	4603      	mov	r3, r0
 8003c36:	4a12      	ldr	r2, [pc, #72]	; (8003c80 <Controlling_the_LINK+0xc4>)
 8003c38:	6053      	str	r3, [r2, #4]
	  }

	  if (DCMotorStruc.PWMOut > 10000)   /// Saturation Output
 8003c3a:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <Controlling_the_LINK+0xc4>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d903      	bls.n	8003c4e <Controlling_the_LINK+0x92>
	  {
		 DCMotorStruc.PWMOut = 10000;
 8003c46:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <Controlling_the_LINK+0xc4>)
 8003c48:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c4c:	605a      	str	r2, [r3, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 8003c4e:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <Controlling_the_LINK+0xc4>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	2180      	movs	r1, #128	; 0x80
 8003c56:	480b      	ldr	r0, [pc, #44]	; (8003c84 <Controlling_the_LINK+0xc8>)
 8003c58:	f001 fbfc 	bl	8005454 <HAL_GPIO_WritePin>

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut); ///Setting PWM Pin
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <Controlling_the_LINK+0xcc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a07      	ldr	r2, [pc, #28]	; (8003c80 <Controlling_the_LINK+0xc4>)
 8003c62:	6852      	ldr	r2, [r2, #4]
 8003c64:	635a      	str	r2, [r3, #52]	; 0x34
	  TrjStruc.Loop_Timestamp = micros();
 8003c66:	f7fd ff71 	bl	8001b4c <micros>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4907      	ldr	r1, [pc, #28]	; (8003c8c <Controlling_the_LINK+0xd0>)
 8003c70:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8003c74:	bf00      	nop
 8003c76:	bdb0      	pop	{r4, r5, r7, pc}
 8003c78:	20000240 	.word	0x20000240
 8003c7c:	200001e4 	.word	0x200001e4
 8003c80:	200000d0 	.word	0x200000d0
 8003c84:	40020800 	.word	0x40020800
 8003c88:	2000054c 	.word	0x2000054c
 8003c8c:	200002c0 	.word	0x200002c0

08003c90 <Stabilizing_the_LINK>:

void Stabilizing_the_LINK( float Position )
{
 8003c90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	ed87 0a01 	vstr	s0, [r7, #4]
	if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8003c9c:	f7fd ff56 	bl	8001b4c <micros>
 8003ca0:	4b36      	ldr	r3, [pc, #216]	; (8003d7c <Stabilizing_the_LINK+0xec>)
 8003ca2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003ca6:	1a84      	subs	r4, r0, r2
 8003ca8:	eb61 0503 	sbc.w	r5, r1, r3
 8003cac:	4b33      	ldr	r3, [pc, #204]	; (8003d7c <Stabilizing_the_LINK+0xec>)
 8003cae:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003cb2:	429d      	cmp	r5, r3
 8003cb4:	bf08      	it	eq
 8003cb6:	4294      	cmpeq	r4, r2
 8003cb8:	d35a      	bcc.n	8003d70 <Stabilizing_the_LINK+0xe0>
	{
		TrjStruc.AngularDisplacementDesire = Position;
 8003cba:	4a30      	ldr	r2, [pc, #192]	; (8003d7c <Stabilizing_the_LINK+0xec>)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6213      	str	r3, [r2, #32]
		EncoderVelocityAndPosition_Update();
 8003cc0:	f7fd fe32 	bl	8001928 <EncoderVelocityAndPosition_Update>
		StabilizerPIDLoad();
 8003cc4:	f7fe f870 	bl	8001da8 <StabilizerPIDLoad>
		StabilizerPID();
 8003cc8:	f7ff f850 	bl	8002d6c <StabilizerPID>
		Plant_input = StabilizerPIDController.ControllerOutput;
 8003ccc:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <Stabilizing_the_LINK+0xf0>)
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	4a2c      	ldr	r2, [pc, #176]	; (8003d84 <Stabilizing_the_LINK+0xf4>)
 8003cd2:	6013      	str	r3, [r2, #0]

		if (Plant_input >= 0) /// Setting DIR
 8003cd4:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <Stabilizing_the_LINK+0xf4>)
 8003cd6:	edd3 7a00 	vldr	s15, [r3]
 8003cda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce2:	db0c      	blt.n	8003cfe <Stabilizing_the_LINK+0x6e>
		{
		  DCMotorStruc.DIR = 1;
 8003ce4:	4b28      	ldr	r3, [pc, #160]	; (8003d88 <Stabilizing_the_LINK+0xf8>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input);
 8003cea:	4b26      	ldr	r3, [pc, #152]	; (8003d84 <Stabilizing_the_LINK+0xf4>)
 8003cec:	edd3 7a00 	vldr	s15, [r3]
 8003cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cf4:	ee17 2a90 	vmov	r2, s15
 8003cf8:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <Stabilizing_the_LINK+0xf8>)
 8003cfa:	605a      	str	r2, [r3, #4]
 8003cfc:	e01b      	b.n	8003d36 <Stabilizing_the_LINK+0xa6>
		}
		else if (Plant_input < 0)
 8003cfe:	4b21      	ldr	r3, [pc, #132]	; (8003d84 <Stabilizing_the_LINK+0xf4>)
 8003d00:	edd3 7a00 	vldr	s15, [r3]
 8003d04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0c:	d513      	bpl.n	8003d36 <Stabilizing_the_LINK+0xa6>
		{
		  DCMotorStruc.DIR = 0;
 8003d0e:	4b1e      	ldr	r3, [pc, #120]	; (8003d88 <Stabilizing_the_LINK+0xf8>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input * -1.0);
 8003d14:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <Stabilizing_the_LINK+0xf4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fc fbc1 	bl	80004a0 <__aeabi_f2d>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4690      	mov	r8, r2
 8003d24:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003d28:	4640      	mov	r0, r8
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	f7fc fec0 	bl	8000ab0 <__aeabi_d2uiz>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4a15      	ldr	r2, [pc, #84]	; (8003d88 <Stabilizing_the_LINK+0xf8>)
 8003d34:	6053      	str	r3, [r2, #4]
		}

		if (DCMotorStruc.PWMOut > 10000)   /// Saturation Output
 8003d36:	4b14      	ldr	r3, [pc, #80]	; (8003d88 <Stabilizing_the_LINK+0xf8>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d903      	bls.n	8003d4a <Stabilizing_the_LINK+0xba>
		{
		 DCMotorStruc.PWMOut = 10000;
 8003d42:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <Stabilizing_the_LINK+0xf8>)
 8003d44:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d48:	605a      	str	r2, [r3, #4]
		}

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 8003d4a:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <Stabilizing_the_LINK+0xf8>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	2180      	movs	r1, #128	; 0x80
 8003d52:	480e      	ldr	r0, [pc, #56]	; (8003d8c <Stabilizing_the_LINK+0xfc>)
 8003d54:	f001 fb7e 	bl	8005454 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut); ///Setting PWM Pin
 8003d58:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <Stabilizing_the_LINK+0x100>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <Stabilizing_the_LINK+0xf8>)
 8003d5e:	6852      	ldr	r2, [r2, #4]
 8003d60:	635a      	str	r2, [r3, #52]	; 0x34
		TrjStruc.Loop_Timestamp = micros();
 8003d62:	f7fd fef3 	bl	8001b4c <micros>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4904      	ldr	r1, [pc, #16]	; (8003d7c <Stabilizing_the_LINK+0xec>)
 8003d6c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	}
}
 8003d70:	bf00      	nop
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d7a:	bf00      	nop
 8003d7c:	200002c0 	.word	0x200002c0
 8003d80:	20000280 	.word	0x20000280
 8003d84:	200001e4 	.word	0x200001e4
 8003d88:	200000d0 	.word	0x200000d0
 8003d8c:	40020800 	.word	0x40020800
 8003d90:	2000054c 	.word	0x2000054c

08003d94 <SETHOME_StateMachine_Function>:

void SETHOME_StateMachine_Function()
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
	switch (SethomeMode)
 8003d98:	4b1c      	ldr	r3, [pc, #112]	; (8003e0c <SETHOME_StateMachine_Function+0x78>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d013      	beq.n	8003dc8 <SETHOME_StateMachine_Function+0x34>
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	dc31      	bgt.n	8003e08 <SETHOME_StateMachine_Function+0x74>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <SETHOME_StateMachine_Function+0x18>
 8003da8:	2b01      	cmp	r3, #1
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2000);
			SethomeMode = SetHomeState_1;
			break;
		case SetHomeState_1:
			break;
 8003daa:	e02d      	b.n	8003e08 <SETHOME_StateMachine_Function+0x74>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8003dac:	2200      	movs	r2, #0
 8003dae:	2180      	movs	r1, #128	; 0x80
 8003db0:	4817      	ldr	r0, [pc, #92]	; (8003e10 <SETHOME_StateMachine_Function+0x7c>)
 8003db2:	f001 fb4f 	bl	8005454 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2000);
 8003db6:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <SETHOME_StateMachine_Function+0x80>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003dbe:	635a      	str	r2, [r3, #52]	; 0x34
			SethomeMode = SetHomeState_1;
 8003dc0:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <SETHOME_StateMachine_Function+0x78>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	701a      	strb	r2, [r3, #0]
			break;
 8003dc6:	e01f      	b.n	8003e08 <SETHOME_StateMachine_Function+0x74>
		case SetHomeState_2:

			SethomeMode = SetHomeState_0;
 8003dc8:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <SETHOME_StateMachine_Function+0x78>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
			Munmunbot_State = STATE_Idle;
 8003dce:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <SETHOME_StateMachine_Function+0x84>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 8003dd4:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <SETHOME_StateMachine_Function+0x88>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003dda:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <SETHOME_StateMachine_Function+0x80>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2200      	movs	r2, #0
 8003de0:	635a      	str	r2, [r3, #52]	; 0x34
			TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
 8003de2:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <SETHOME_StateMachine_Function+0x8c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	ee07 3a90 	vmov	s15, r3
 8003dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <SETHOME_StateMachine_Function+0x90>)
 8003df2:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			Moving_Link_Task_Flag = 0;
 8003df6:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <SETHOME_StateMachine_Function+0x94>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
			sethomeTrigger = 1;
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <SETHOME_StateMachine_Function+0x98>)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	701a      	strb	r2, [r3, #0]
			PID_Reset();
 8003e02:	f7ff fdbb 	bl	800397c <PID_Reset>

			break;
 8003e06:	bf00      	nop

     }

}
 8003e08:	bf00      	nop
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	200000da 	.word	0x200000da
 8003e10:	40020800 	.word	0x40020800
 8003e14:	2000054c 	.word	0x2000054c
 8003e18:	200000d9 	.word	0x200000d9
 8003e1c:	200001de 	.word	0x200001de
 8003e20:	200005f4 	.word	0x200005f4
 8003e24:	200002c0 	.word	0x200002c0
 8003e28:	200001e8 	.word	0x200001e8
 8003e2c:	200001e9 	.word	0x200001e9

08003e30 <UpdateMunmunBotState>:

void UpdateMunmunBotState()
{
 8003e30:	b5b0      	push	{r4, r5, r7, lr}
 8003e32:	af00      	add	r7, sp, #0
	if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8003e34:	f7fd fe8a 	bl	8001b4c <micros>
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <UpdateMunmunBotState+0x38>)
 8003e3a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003e3e:	1a84      	subs	r4, r0, r2
 8003e40:	eb61 0503 	sbc.w	r5, r1, r3
 8003e44:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <UpdateMunmunBotState+0x38>)
 8003e46:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003e4a:	429d      	cmp	r5, r3
 8003e4c:	bf08      	it	eq
 8003e4e:	4294      	cmpeq	r4, r2
 8003e50:	d308      	bcc.n	8003e64 <UpdateMunmunBotState+0x34>
	{
		EncoderVelocityAndPosition_Update();
 8003e52:	f7fd fd69 	bl	8001928 <EncoderVelocityAndPosition_Update>
		TrjStruc.Loop_Timestamp = micros();
 8003e56:	f7fd fe79 	bl	8001b4c <micros>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4902      	ldr	r1, [pc, #8]	; (8003e68 <UpdateMunmunBotState+0x38>)
 8003e60:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	}
}
 8003e64:	bf00      	nop
 8003e66:	bdb0      	pop	{r4, r5, r7, pc}
 8003e68:	200002c0 	.word	0x200002c0
 8003e6c:	00000000 	.word	0x00000000

08003e70 <EndEffectorWorkingState>:

void EndEffectorWorkingState()
{
 8003e70:	b5b0      	push	{r4, r5, r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
	  if(GripperEnable == 1)
 8003e76:	4b62      	ldr	r3, [pc, #392]	; (8004000 <EndEffectorWorkingState+0x190>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	f040 80b0 	bne.w	8003fe0 <EndEffectorWorkingState+0x170>
	  {
		if (GripperState == 0)
 8003e80:	4b60      	ldr	r3, [pc, #384]	; (8004004 <EndEffectorWorkingState+0x194>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d112      	bne.n	8003eae <EndEffectorWorkingState+0x3e>
		{
			{
				uint8_t temp[1] = {0x45};
 8003e88:	2345      	movs	r3, #69	; 0x45
 8003e8a:	713b      	strb	r3, [r7, #4]
				HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
 8003e8c:	1d3a      	adds	r2, r7, #4
 8003e8e:	2301      	movs	r3, #1
 8003e90:	2146      	movs	r1, #70	; 0x46
 8003e92:	485d      	ldr	r0, [pc, #372]	; (8004008 <EndEffectorWorkingState+0x198>)
 8003e94:	f001 fc54 	bl	8005740 <HAL_I2C_Master_Transmit_IT>
			}
			GripperState = 1;
 8003e98:	4b5a      	ldr	r3, [pc, #360]	; (8004004 <EndEffectorWorkingState+0x194>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	701a      	strb	r2, [r3, #0]
			Timestamp_Gripper = micros();
 8003e9e:	f7fd fe55 	bl	8001b4c <micros>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4959      	ldr	r1, [pc, #356]	; (800400c <EndEffectorWorkingState+0x19c>)
 8003ea8:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  else if(GripperEnable == 0)
	  {
		 Munmunbot_State = STATE_PrepareDATA;
	  }
}
 8003eac:	e09f      	b.n	8003fee <EndEffectorWorkingState+0x17e>
		else if (GripperState != 0)
 8003eae:	4b55      	ldr	r3, [pc, #340]	; (8004004 <EndEffectorWorkingState+0x194>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 809b 	beq.w	8003fee <EndEffectorWorkingState+0x17e>
			if ((hi2c1.State == HAL_I2C_STATE_READY) && (GripperState == 1))
 8003eb8:	4b53      	ldr	r3, [pc, #332]	; (8004008 <EndEffectorWorkingState+0x198>)
 8003eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d10f      	bne.n	8003ee4 <EndEffectorWorkingState+0x74>
 8003ec4:	4b4f      	ldr	r3, [pc, #316]	; (8004004 <EndEffectorWorkingState+0x194>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d10b      	bne.n	8003ee4 <EndEffectorWorkingState+0x74>
					uint8_t temp[1] = {0x23};
 8003ecc:	2323      	movs	r3, #35	; 0x23
 8003ece:	703b      	strb	r3, [r7, #0]
					HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
 8003ed0:	463a      	mov	r2, r7
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	2146      	movs	r1, #70	; 0x46
 8003ed6:	484c      	ldr	r0, [pc, #304]	; (8004008 <EndEffectorWorkingState+0x198>)
 8003ed8:	f001 fc32 	bl	8005740 <HAL_I2C_Master_Transmit_IT>
				GripperState = 2;
 8003edc:	4b49      	ldr	r3, [pc, #292]	; (8004004 <EndEffectorWorkingState+0x194>)
 8003ede:	2202      	movs	r2, #2
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	e012      	b.n	8003f0a <EndEffectorWorkingState+0x9a>
			else if ((hi2c1.State == HAL_I2C_STATE_READY) && ( GripperState == 2 ))
 8003ee4:	4b48      	ldr	r3, [pc, #288]	; (8004008 <EndEffectorWorkingState+0x198>)
 8003ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d10c      	bne.n	8003f0a <EndEffectorWorkingState+0x9a>
 8003ef0:	4b44      	ldr	r3, [pc, #272]	; (8004004 <EndEffectorWorkingState+0x194>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d108      	bne.n	8003f0a <EndEffectorWorkingState+0x9a>
					HAL_I2C_Master_Receive_IT(&hi2c1, ((0x23 << 1) | 0b1), GripperStatus, 1);
 8003ef8:	2301      	movs	r3, #1
 8003efa:	4a45      	ldr	r2, [pc, #276]	; (8004010 <EndEffectorWorkingState+0x1a0>)
 8003efc:	2147      	movs	r1, #71	; 0x47
 8003efe:	4842      	ldr	r0, [pc, #264]	; (8004008 <EndEffectorWorkingState+0x198>)
 8003f00:	f001 fcc4 	bl	800588c <HAL_I2C_Master_Receive_IT>
				GripperState = 1;
 8003f04:	4b3f      	ldr	r3, [pc, #252]	; (8004004 <EndEffectorWorkingState+0x194>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	701a      	strb	r2, [r3, #0]
			if (GripperStatus[0] == 0x12 )
 8003f0a:	4b41      	ldr	r3, [pc, #260]	; (8004010 <EndEffectorWorkingState+0x1a0>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b12      	cmp	r3, #18
 8003f10:	d110      	bne.n	8003f34 <EndEffectorWorkingState+0xc4>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003f12:	2201      	movs	r2, #1
 8003f14:	2102      	movs	r1, #2
 8003f16:	483f      	ldr	r0, [pc, #252]	; (8004014 <EndEffectorWorkingState+0x1a4>)
 8003f18:	f001 fa9c 	bl	8005454 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	2104      	movs	r1, #4
 8003f20:	483c      	ldr	r0, [pc, #240]	; (8004014 <EndEffectorWorkingState+0x1a4>)
 8003f22:	f001 fa97 	bl	8005454 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003f26:	2200      	movs	r2, #0
 8003f28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f2c:	483a      	ldr	r0, [pc, #232]	; (8004018 <EndEffectorWorkingState+0x1a8>)
 8003f2e:	f001 fa91 	bl	8005454 <HAL_GPIO_WritePin>
 8003f32:	e03d      	b.n	8003fb0 <EndEffectorWorkingState+0x140>
			else if (GripperStatus[0] == 0x34)
 8003f34:	4b36      	ldr	r3, [pc, #216]	; (8004010 <EndEffectorWorkingState+0x1a0>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b34      	cmp	r3, #52	; 0x34
 8003f3a:	d110      	bne.n	8003f5e <EndEffectorWorkingState+0xee>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	2102      	movs	r1, #2
 8003f40:	4834      	ldr	r0, [pc, #208]	; (8004014 <EndEffectorWorkingState+0x1a4>)
 8003f42:	f001 fa87 	bl	8005454 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8003f46:	2200      	movs	r2, #0
 8003f48:	2104      	movs	r1, #4
 8003f4a:	4832      	ldr	r0, [pc, #200]	; (8004014 <EndEffectorWorkingState+0x1a4>)
 8003f4c:	f001 fa82 	bl	8005454 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003f50:	2200      	movs	r2, #0
 8003f52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f56:	4830      	ldr	r0, [pc, #192]	; (8004018 <EndEffectorWorkingState+0x1a8>)
 8003f58:	f001 fa7c 	bl	8005454 <HAL_GPIO_WritePin>
 8003f5c:	e028      	b.n	8003fb0 <EndEffectorWorkingState+0x140>
			else if (GripperStatus[0] == 0x56)
 8003f5e:	4b2c      	ldr	r3, [pc, #176]	; (8004010 <EndEffectorWorkingState+0x1a0>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b56      	cmp	r3, #86	; 0x56
 8003f64:	d110      	bne.n	8003f88 <EndEffectorWorkingState+0x118>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8003f66:	2200      	movs	r2, #0
 8003f68:	2102      	movs	r1, #2
 8003f6a:	482a      	ldr	r0, [pc, #168]	; (8004014 <EndEffectorWorkingState+0x1a4>)
 8003f6c:	f001 fa72 	bl	8005454 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8003f70:	2200      	movs	r2, #0
 8003f72:	2104      	movs	r1, #4
 8003f74:	4827      	ldr	r0, [pc, #156]	; (8004014 <EndEffectorWorkingState+0x1a4>)
 8003f76:	f001 fa6d 	bl	8005454 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f80:	4825      	ldr	r0, [pc, #148]	; (8004018 <EndEffectorWorkingState+0x1a8>)
 8003f82:	f001 fa67 	bl	8005454 <HAL_GPIO_WritePin>
 8003f86:	e013      	b.n	8003fb0 <EndEffectorWorkingState+0x140>
			else if (GripperStatus[0] == 0x78)
 8003f88:	4b21      	ldr	r3, [pc, #132]	; (8004010 <EndEffectorWorkingState+0x1a0>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b78      	cmp	r3, #120	; 0x78
 8003f8e:	d10f      	bne.n	8003fb0 <EndEffectorWorkingState+0x140>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003f90:	2201      	movs	r2, #1
 8003f92:	2102      	movs	r1, #2
 8003f94:	481f      	ldr	r0, [pc, #124]	; (8004014 <EndEffectorWorkingState+0x1a4>)
 8003f96:	f001 fa5d 	bl	8005454 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	2104      	movs	r1, #4
 8003f9e:	481d      	ldr	r0, [pc, #116]	; (8004014 <EndEffectorWorkingState+0x1a4>)
 8003fa0:	f001 fa58 	bl	8005454 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003faa:	481b      	ldr	r0, [pc, #108]	; (8004018 <EndEffectorWorkingState+0x1a8>)
 8003fac:	f001 fa52 	bl	8005454 <HAL_GPIO_WritePin>
			if (micros() - Timestamp_Gripper >= 5100000)
 8003fb0:	f7fd fdcc 	bl	8001b4c <micros>
 8003fb4:	4b15      	ldr	r3, [pc, #84]	; (800400c <EndEffectorWorkingState+0x19c>)
 8003fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fba:	1a84      	subs	r4, r0, r2
 8003fbc:	eb61 0503 	sbc.w	r5, r1, r3
 8003fc0:	a30d      	add	r3, pc, #52	; (adr r3, 8003ff8 <EndEffectorWorkingState+0x188>)
 8003fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc6:	42ab      	cmp	r3, r5
 8003fc8:	bf08      	it	eq
 8003fca:	42a2      	cmpeq	r2, r4
 8003fcc:	d20f      	bcs.n	8003fee <EndEffectorWorkingState+0x17e>
				GripperState = 0;
 8003fce:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <EndEffectorWorkingState+0x194>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	701a      	strb	r2, [r3, #0]
				Munmunbot_State = STATE_PrepareDATA;
 8003fd4:	4b11      	ldr	r3, [pc, #68]	; (800401c <EndEffectorWorkingState+0x1ac>)
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	701a      	strb	r2, [r3, #0]
				PID_Reset();
 8003fda:	f7ff fccf 	bl	800397c <PID_Reset>
}
 8003fde:	e006      	b.n	8003fee <EndEffectorWorkingState+0x17e>
	  else if(GripperEnable == 0)
 8003fe0:	4b07      	ldr	r3, [pc, #28]	; (8004000 <EndEffectorWorkingState+0x190>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <EndEffectorWorkingState+0x17e>
		 Munmunbot_State = STATE_PrepareDATA;
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <EndEffectorWorkingState+0x1ac>)
 8003fea:	2202      	movs	r2, #2
 8003fec:	701a      	strb	r2, [r3, #0]
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	004dd1df 	.word	0x004dd1df
 8003ffc:	00000000 	.word	0x00000000
 8004000:	200001ea 	.word	0x200001ea
 8004004:	200001eb 	.word	0x200001eb
 8004008:	200004f8 	.word	0x200004f8
 800400c:	200001f0 	.word	0x200001f0
 8004010:	200001ec 	.word	0x200001ec
 8004014:	40020400 	.word	0x40020400
 8004018:	40020000 	.word	0x40020000
 800401c:	200000d9 	.word	0x200000d9

08004020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004024:	b672      	cpsid	i
}
 8004026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004028:	e7fe      	b.n	8004028 <Error_Handler+0x8>
	...

0800402c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	607b      	str	r3, [r7, #4]
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <HAL_MspInit+0x4c>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	4a0f      	ldr	r2, [pc, #60]	; (8004078 <HAL_MspInit+0x4c>)
 800403c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004040:	6453      	str	r3, [r2, #68]	; 0x44
 8004042:	4b0d      	ldr	r3, [pc, #52]	; (8004078 <HAL_MspInit+0x4c>)
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800404a:	607b      	str	r3, [r7, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	603b      	str	r3, [r7, #0]
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <HAL_MspInit+0x4c>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	4a08      	ldr	r2, [pc, #32]	; (8004078 <HAL_MspInit+0x4c>)
 8004058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800405c:	6413      	str	r3, [r2, #64]	; 0x40
 800405e:	4b06      	ldr	r3, [pc, #24]	; (8004078 <HAL_MspInit+0x4c>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800406a:	2007      	movs	r0, #7
 800406c:	f000 fc04 	bl	8004878 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40023800 	.word	0x40023800

0800407c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	; 0x28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004084:	f107 0314 	add.w	r3, r7, #20
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	60da      	str	r2, [r3, #12]
 8004092:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a21      	ldr	r2, [pc, #132]	; (8004120 <HAL_I2C_MspInit+0xa4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d13c      	bne.n	8004118 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	4b20      	ldr	r3, [pc, #128]	; (8004124 <HAL_I2C_MspInit+0xa8>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	4a1f      	ldr	r2, [pc, #124]	; (8004124 <HAL_I2C_MspInit+0xa8>)
 80040a8:	f043 0302 	orr.w	r3, r3, #2
 80040ac:	6313      	str	r3, [r2, #48]	; 0x30
 80040ae:	4b1d      	ldr	r3, [pc, #116]	; (8004124 <HAL_I2C_MspInit+0xa8>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80040ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80040be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040c0:	2312      	movs	r3, #18
 80040c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040c4:	2301      	movs	r3, #1
 80040c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c8:	2303      	movs	r3, #3
 80040ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040cc:	2304      	movs	r3, #4
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	4619      	mov	r1, r3
 80040d6:	4814      	ldr	r0, [pc, #80]	; (8004128 <HAL_I2C_MspInit+0xac>)
 80040d8:	f001 f820 	bl	800511c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	4b10      	ldr	r3, [pc, #64]	; (8004124 <HAL_I2C_MspInit+0xa8>)
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	4a0f      	ldr	r2, [pc, #60]	; (8004124 <HAL_I2C_MspInit+0xa8>)
 80040e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040ea:	6413      	str	r3, [r2, #64]	; 0x40
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <HAL_I2C_MspInit+0xa8>)
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80040f8:	2200      	movs	r2, #0
 80040fa:	2100      	movs	r1, #0
 80040fc:	201f      	movs	r0, #31
 80040fe:	f000 fbc6 	bl	800488e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004102:	201f      	movs	r0, #31
 8004104:	f000 fbdf 	bl	80048c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004108:	2200      	movs	r2, #0
 800410a:	2100      	movs	r1, #0
 800410c:	2020      	movs	r0, #32
 800410e:	f000 fbbe 	bl	800488e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004112:	2020      	movs	r0, #32
 8004114:	f000 fbd7 	bl	80048c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004118:	bf00      	nop
 800411a:	3728      	adds	r7, #40	; 0x28
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40005400 	.word	0x40005400
 8004124:	40023800 	.word	0x40023800
 8004128:	40020400 	.word	0x40020400

0800412c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08a      	sub	sp, #40	; 0x28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004134:	f107 0314 	add.w	r3, r7, #20
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a19      	ldr	r2, [pc, #100]	; (80041b0 <HAL_TIM_Encoder_MspInit+0x84>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d12c      	bne.n	80041a8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	4b18      	ldr	r3, [pc, #96]	; (80041b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	4a17      	ldr	r2, [pc, #92]	; (80041b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	6453      	str	r3, [r2, #68]	; 0x44
 800415e:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	4a10      	ldr	r2, [pc, #64]	; (80041b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	6313      	str	r3, [r2, #48]	; 0x30
 800417a:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <HAL_TIM_Encoder_MspInit+0x88>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Encoder_A_Pin|Motor_Encoder_B_Pin;
 8004186:	f44f 7340 	mov.w	r3, #768	; 0x300
 800418a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418c:	2302      	movs	r3, #2
 800418e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004190:	2300      	movs	r3, #0
 8004192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004194:	2300      	movs	r3, #0
 8004196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004198:	2301      	movs	r3, #1
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800419c:	f107 0314 	add.w	r3, r7, #20
 80041a0:	4619      	mov	r1, r3
 80041a2:	4805      	ldr	r0, [pc, #20]	; (80041b8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80041a4:	f000 ffba 	bl	800511c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80041a8:	bf00      	nop
 80041aa:	3728      	adds	r7, #40	; 0x28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40010000 	.word	0x40010000
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40020000 	.word	0x40020000

080041bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041cc:	d116      	bne.n	80041fc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	4b16      	ldr	r3, [pc, #88]	; (800422c <HAL_TIM_Base_MspInit+0x70>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	4a15      	ldr	r2, [pc, #84]	; (800422c <HAL_TIM_Base_MspInit+0x70>)
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	6413      	str	r3, [r2, #64]	; 0x40
 80041de:	4b13      	ldr	r3, [pc, #76]	; (800422c <HAL_TIM_Base_MspInit+0x70>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80041ea:	2200      	movs	r2, #0
 80041ec:	2100      	movs	r1, #0
 80041ee:	201c      	movs	r0, #28
 80041f0:	f000 fb4d 	bl	800488e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041f4:	201c      	movs	r0, #28
 80041f6:	f000 fb66 	bl	80048c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80041fa:	e012      	b.n	8004222 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a0b      	ldr	r2, [pc, #44]	; (8004230 <HAL_TIM_Base_MspInit+0x74>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d10d      	bne.n	8004222 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004206:	2300      	movs	r3, #0
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	4b08      	ldr	r3, [pc, #32]	; (800422c <HAL_TIM_Base_MspInit+0x70>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	4a07      	ldr	r2, [pc, #28]	; (800422c <HAL_TIM_Base_MspInit+0x70>)
 8004210:	f043 0302 	orr.w	r3, r3, #2
 8004214:	6413      	str	r3, [r2, #64]	; 0x40
 8004216:	4b05      	ldr	r3, [pc, #20]	; (800422c <HAL_TIM_Base_MspInit+0x70>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	68bb      	ldr	r3, [r7, #8]
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40023800 	.word	0x40023800
 8004230:	40000400 	.word	0x40000400

08004234 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800423c:	f107 030c 	add.w	r3, r7, #12
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	609a      	str	r2, [r3, #8]
 8004248:	60da      	str	r2, [r3, #12]
 800424a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a12      	ldr	r2, [pc, #72]	; (800429c <HAL_TIM_MspPostInit+0x68>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d11d      	bne.n	8004292 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004256:	2300      	movs	r3, #0
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <HAL_TIM_MspPostInit+0x6c>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	4a10      	ldr	r2, [pc, #64]	; (80042a0 <HAL_TIM_MspPostInit+0x6c>)
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	6313      	str	r3, [r2, #48]	; 0x30
 8004266:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <HAL_TIM_MspPostInit+0x6c>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	60bb      	str	r3, [r7, #8]
 8004270:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_Generation_Pin;
 8004272:	2340      	movs	r3, #64	; 0x40
 8004274:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004276:	2302      	movs	r3, #2
 8004278:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427e:	2300      	movs	r3, #0
 8004280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004282:	2302      	movs	r3, #2
 8004284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Generation_GPIO_Port, &GPIO_InitStruct);
 8004286:	f107 030c 	add.w	r3, r7, #12
 800428a:	4619      	mov	r1, r3
 800428c:	4805      	ldr	r0, [pc, #20]	; (80042a4 <HAL_TIM_MspPostInit+0x70>)
 800428e:	f000 ff45 	bl	800511c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004292:	bf00      	nop
 8004294:	3720      	adds	r7, #32
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40000400 	.word	0x40000400
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40020000 	.word	0x40020000

080042a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	; 0x28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b0:	f107 0314 	add.w	r3, r7, #20
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	609a      	str	r2, [r3, #8]
 80042bc:	60da      	str	r2, [r3, #12]
 80042be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a4c      	ldr	r2, [pc, #304]	; (80043f8 <HAL_UART_MspInit+0x150>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	f040 8091 	bne.w	80043ee <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80042cc:	2300      	movs	r3, #0
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	4b4a      	ldr	r3, [pc, #296]	; (80043fc <HAL_UART_MspInit+0x154>)
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	4a49      	ldr	r2, [pc, #292]	; (80043fc <HAL_UART_MspInit+0x154>)
 80042d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042da:	6413      	str	r3, [r2, #64]	; 0x40
 80042dc:	4b47      	ldr	r3, [pc, #284]	; (80043fc <HAL_UART_MspInit+0x154>)
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e8:	2300      	movs	r3, #0
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	4b43      	ldr	r3, [pc, #268]	; (80043fc <HAL_UART_MspInit+0x154>)
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	4a42      	ldr	r2, [pc, #264]	; (80043fc <HAL_UART_MspInit+0x154>)
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	6313      	str	r3, [r2, #48]	; 0x30
 80042f8:	4b40      	ldr	r3, [pc, #256]	; (80043fc <HAL_UART_MspInit+0x154>)
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004304:	230c      	movs	r3, #12
 8004306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004308:	2302      	movs	r3, #2
 800430a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430c:	2300      	movs	r3, #0
 800430e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004310:	2303      	movs	r3, #3
 8004312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004314:	2307      	movs	r3, #7
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004318:	f107 0314 	add.w	r3, r7, #20
 800431c:	4619      	mov	r1, r3
 800431e:	4838      	ldr	r0, [pc, #224]	; (8004400 <HAL_UART_MspInit+0x158>)
 8004320:	f000 fefc 	bl	800511c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004324:	4b37      	ldr	r3, [pc, #220]	; (8004404 <HAL_UART_MspInit+0x15c>)
 8004326:	4a38      	ldr	r2, [pc, #224]	; (8004408 <HAL_UART_MspInit+0x160>)
 8004328:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800432a:	4b36      	ldr	r3, [pc, #216]	; (8004404 <HAL_UART_MspInit+0x15c>)
 800432c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004330:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004332:	4b34      	ldr	r3, [pc, #208]	; (8004404 <HAL_UART_MspInit+0x15c>)
 8004334:	2240      	movs	r2, #64	; 0x40
 8004336:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004338:	4b32      	ldr	r3, [pc, #200]	; (8004404 <HAL_UART_MspInit+0x15c>)
 800433a:	2200      	movs	r2, #0
 800433c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800433e:	4b31      	ldr	r3, [pc, #196]	; (8004404 <HAL_UART_MspInit+0x15c>)
 8004340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004344:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004346:	4b2f      	ldr	r3, [pc, #188]	; (8004404 <HAL_UART_MspInit+0x15c>)
 8004348:	2200      	movs	r2, #0
 800434a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800434c:	4b2d      	ldr	r3, [pc, #180]	; (8004404 <HAL_UART_MspInit+0x15c>)
 800434e:	2200      	movs	r2, #0
 8004350:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004352:	4b2c      	ldr	r3, [pc, #176]	; (8004404 <HAL_UART_MspInit+0x15c>)
 8004354:	2200      	movs	r2, #0
 8004356:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004358:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <HAL_UART_MspInit+0x15c>)
 800435a:	2200      	movs	r2, #0
 800435c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800435e:	4b29      	ldr	r3, [pc, #164]	; (8004404 <HAL_UART_MspInit+0x15c>)
 8004360:	2200      	movs	r2, #0
 8004362:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004364:	4827      	ldr	r0, [pc, #156]	; (8004404 <HAL_UART_MspInit+0x15c>)
 8004366:	f000 fac9 	bl	80048fc <HAL_DMA_Init>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004370:	f7ff fe56 	bl	8004020 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a23      	ldr	r2, [pc, #140]	; (8004404 <HAL_UART_MspInit+0x15c>)
 8004378:	635a      	str	r2, [r3, #52]	; 0x34
 800437a:	4a22      	ldr	r2, [pc, #136]	; (8004404 <HAL_UART_MspInit+0x15c>)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004380:	4b22      	ldr	r3, [pc, #136]	; (800440c <HAL_UART_MspInit+0x164>)
 8004382:	4a23      	ldr	r2, [pc, #140]	; (8004410 <HAL_UART_MspInit+0x168>)
 8004384:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004386:	4b21      	ldr	r3, [pc, #132]	; (800440c <HAL_UART_MspInit+0x164>)
 8004388:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800438c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800438e:	4b1f      	ldr	r3, [pc, #124]	; (800440c <HAL_UART_MspInit+0x164>)
 8004390:	2200      	movs	r2, #0
 8004392:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004394:	4b1d      	ldr	r3, [pc, #116]	; (800440c <HAL_UART_MspInit+0x164>)
 8004396:	2200      	movs	r2, #0
 8004398:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800439a:	4b1c      	ldr	r3, [pc, #112]	; (800440c <HAL_UART_MspInit+0x164>)
 800439c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043a2:	4b1a      	ldr	r3, [pc, #104]	; (800440c <HAL_UART_MspInit+0x164>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043a8:	4b18      	ldr	r3, [pc, #96]	; (800440c <HAL_UART_MspInit+0x164>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80043ae:	4b17      	ldr	r3, [pc, #92]	; (800440c <HAL_UART_MspInit+0x164>)
 80043b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043b4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043b6:	4b15      	ldr	r3, [pc, #84]	; (800440c <HAL_UART_MspInit+0x164>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043bc:	4b13      	ldr	r3, [pc, #76]	; (800440c <HAL_UART_MspInit+0x164>)
 80043be:	2200      	movs	r2, #0
 80043c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80043c2:	4812      	ldr	r0, [pc, #72]	; (800440c <HAL_UART_MspInit+0x164>)
 80043c4:	f000 fa9a 	bl	80048fc <HAL_DMA_Init>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80043ce:	f7ff fe27 	bl	8004020 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a0d      	ldr	r2, [pc, #52]	; (800440c <HAL_UART_MspInit+0x164>)
 80043d6:	639a      	str	r2, [r3, #56]	; 0x38
 80043d8:	4a0c      	ldr	r2, [pc, #48]	; (800440c <HAL_UART_MspInit+0x164>)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80043de:	2200      	movs	r2, #0
 80043e0:	2100      	movs	r1, #0
 80043e2:	2026      	movs	r0, #38	; 0x26
 80043e4:	f000 fa53 	bl	800488e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80043e8:	2026      	movs	r0, #38	; 0x26
 80043ea:	f000 fa6c 	bl	80048c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80043ee:	bf00      	nop
 80043f0:	3728      	adds	r7, #40	; 0x28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40004400 	.word	0x40004400
 80043fc:	40023800 	.word	0x40023800
 8004400:	40020000 	.word	0x40020000
 8004404:	20000594 	.word	0x20000594
 8004408:	400260a0 	.word	0x400260a0
 800440c:	20000498 	.word	0x20000498
 8004410:	40026088 	.word	0x40026088

08004414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004418:	e7fe      	b.n	8004418 <NMI_Handler+0x4>

0800441a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800441a:	b480      	push	{r7}
 800441c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800441e:	e7fe      	b.n	800441e <HardFault_Handler+0x4>

08004420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004424:	e7fe      	b.n	8004424 <MemManage_Handler+0x4>

08004426 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004426:	b480      	push	{r7}
 8004428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800442a:	e7fe      	b.n	800442a <BusFault_Handler+0x4>

0800442c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004430:	e7fe      	b.n	8004430 <UsageFault_Handler+0x4>

08004432 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004432:	b480      	push	{r7}
 8004434:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004436:	bf00      	nop
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004444:	bf00      	nop
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800444e:	b480      	push	{r7}
 8004450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004452:	bf00      	nop
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004460:	f000 f91a 	bl	8004698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004464:	bf00      	nop
 8004466:	bd80      	pop	{r7, pc}

08004468 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800446c:	4802      	ldr	r0, [pc, #8]	; (8004478 <DMA1_Stream5_IRQHandler+0x10>)
 800446e:	f000 fbdd 	bl	8004c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004472:	bf00      	nop
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20000498 	.word	0x20000498

0800447c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004480:	4802      	ldr	r0, [pc, #8]	; (800448c <DMA1_Stream6_IRQHandler+0x10>)
 8004482:	f000 fbd3 	bl	8004c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004486:	bf00      	nop
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	20000594 	.word	0x20000594

08004490 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004494:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004498:	f000 fff6 	bl	8005488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800449c:	bf00      	nop
 800449e:	bd80      	pop	{r7, pc}

080044a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80044a4:	4802      	ldr	r0, [pc, #8]	; (80044b0 <TIM2_IRQHandler+0x10>)
 80044a6:	f003 ff13 	bl	80082d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	2000063c 	.word	0x2000063c

080044b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80044b8:	4802      	ldr	r0, [pc, #8]	; (80044c4 <I2C1_EV_IRQHandler+0x10>)
 80044ba:	f001 fa95 	bl	80059e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	200004f8 	.word	0x200004f8

080044c8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80044cc:	4802      	ldr	r0, [pc, #8]	; (80044d8 <I2C1_ER_IRQHandler+0x10>)
 80044ce:	f001 fbf8 	bl	8005cc2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80044d2:	bf00      	nop
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	200004f8 	.word	0x200004f8

080044dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80044e0:	4802      	ldr	r0, [pc, #8]	; (80044ec <USART2_IRQHandler+0x10>)
 80044e2:	f004 fddf 	bl	80090a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000684 	.word	0x20000684

080044f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80044f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80044f8:	f000 ffc6 	bl	8005488 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80044fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004500:	f000 ffc2 	bl	8005488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004504:	bf00      	nop
 8004506:	bd80      	pop	{r7, pc}

08004508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004510:	4a14      	ldr	r2, [pc, #80]	; (8004564 <_sbrk+0x5c>)
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <_sbrk+0x60>)
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800451c:	4b13      	ldr	r3, [pc, #76]	; (800456c <_sbrk+0x64>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d102      	bne.n	800452a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004524:	4b11      	ldr	r3, [pc, #68]	; (800456c <_sbrk+0x64>)
 8004526:	4a12      	ldr	r2, [pc, #72]	; (8004570 <_sbrk+0x68>)
 8004528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800452a:	4b10      	ldr	r3, [pc, #64]	; (800456c <_sbrk+0x64>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4413      	add	r3, r2
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	429a      	cmp	r2, r3
 8004536:	d207      	bcs.n	8004548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004538:	f005 fc10 	bl	8009d5c <__errno>
 800453c:	4603      	mov	r3, r0
 800453e:	220c      	movs	r2, #12
 8004540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004542:	f04f 33ff 	mov.w	r3, #4294967295
 8004546:	e009      	b.n	800455c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004548:	4b08      	ldr	r3, [pc, #32]	; (800456c <_sbrk+0x64>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <_sbrk+0x64>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4413      	add	r3, r2
 8004556:	4a05      	ldr	r2, [pc, #20]	; (800456c <_sbrk+0x64>)
 8004558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800455a:	68fb      	ldr	r3, [r7, #12]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20020000 	.word	0x20020000
 8004568:	00000400 	.word	0x00000400
 800456c:	2000048c 	.word	0x2000048c
 8004570:	200006e0 	.word	0x200006e0

08004574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004578:	4b08      	ldr	r3, [pc, #32]	; (800459c <SystemInit+0x28>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457e:	4a07      	ldr	r2, [pc, #28]	; (800459c <SystemInit+0x28>)
 8004580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004588:	4b04      	ldr	r3, [pc, #16]	; (800459c <SystemInit+0x28>)
 800458a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800458e:	609a      	str	r2, [r3, #8]
#endif
}
 8004590:	bf00      	nop
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	e000ed00 	.word	0xe000ed00

080045a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80045a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80045a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80045a6:	e003      	b.n	80045b0 <LoopCopyDataInit>

080045a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80045a8:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80045aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80045ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80045ae:	3104      	adds	r1, #4

080045b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80045b0:	480b      	ldr	r0, [pc, #44]	; (80045e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80045b2:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80045b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80045b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80045b8:	d3f6      	bcc.n	80045a8 <CopyDataInit>
  ldr  r2, =_sbss
 80045ba:	4a0b      	ldr	r2, [pc, #44]	; (80045e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80045bc:	e002      	b.n	80045c4 <LoopFillZerobss>

080045be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80045be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80045c0:	f842 3b04 	str.w	r3, [r2], #4

080045c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80045c4:	4b09      	ldr	r3, [pc, #36]	; (80045ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80045c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80045c8:	d3f9      	bcc.n	80045be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80045ca:	f7ff ffd3 	bl	8004574 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045ce:	f005 fbcb 	bl	8009d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045d2:	f7fc fd67 	bl	80010a4 <main>
  bx  lr    
 80045d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80045d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80045dc:	0800a11c 	.word	0x0800a11c
  ldr  r0, =_sdata
 80045e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80045e4:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 80045e8:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80045ec:	200006dc 	.word	0x200006dc

080045f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045f0:	e7fe      	b.n	80045f0 <ADC_IRQHandler>
	...

080045f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045f8:	4b0e      	ldr	r3, [pc, #56]	; (8004634 <HAL_Init+0x40>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a0d      	ldr	r2, [pc, #52]	; (8004634 <HAL_Init+0x40>)
 80045fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004602:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004604:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_Init+0x40>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a0a      	ldr	r2, [pc, #40]	; (8004634 <HAL_Init+0x40>)
 800460a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800460e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004610:	4b08      	ldr	r3, [pc, #32]	; (8004634 <HAL_Init+0x40>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a07      	ldr	r2, [pc, #28]	; (8004634 <HAL_Init+0x40>)
 8004616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800461c:	2003      	movs	r0, #3
 800461e:	f000 f92b 	bl	8004878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004622:	2000      	movs	r0, #0
 8004624:	f000 f808 	bl	8004638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004628:	f7ff fd00 	bl	800402c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40023c00 	.word	0x40023c00

08004638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004640:	4b12      	ldr	r3, [pc, #72]	; (800468c <HAL_InitTick+0x54>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	4b12      	ldr	r3, [pc, #72]	; (8004690 <HAL_InitTick+0x58>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	4619      	mov	r1, r3
 800464a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800464e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004652:	fbb2 f3f3 	udiv	r3, r2, r3
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f943 	bl	80048e2 <HAL_SYSTICK_Config>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e00e      	b.n	8004684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b0f      	cmp	r3, #15
 800466a:	d80a      	bhi.n	8004682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800466c:	2200      	movs	r2, #0
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	f04f 30ff 	mov.w	r0, #4294967295
 8004674:	f000 f90b 	bl	800488e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004678:	4a06      	ldr	r2, [pc, #24]	; (8004694 <HAL_InitTick+0x5c>)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	e000      	b.n	8004684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20000018 	.word	0x20000018
 8004690:	20000020 	.word	0x20000020
 8004694:	2000001c 	.word	0x2000001c

08004698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <HAL_IncTick+0x20>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <HAL_IncTick+0x24>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4413      	add	r3, r2
 80046a8:	4a04      	ldr	r2, [pc, #16]	; (80046bc <HAL_IncTick+0x24>)
 80046aa:	6013      	str	r3, [r2, #0]
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20000020 	.word	0x20000020
 80046bc:	200006c8 	.word	0x200006c8

080046c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return uwTick;
 80046c4:	4b03      	ldr	r3, [pc, #12]	; (80046d4 <HAL_GetTick+0x14>)
 80046c6:	681b      	ldr	r3, [r3, #0]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	200006c8 	.word	0x200006c8

080046d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <__NVIC_SetPriorityGrouping+0x44>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046f4:	4013      	ands	r3, r2
 80046f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800470a:	4a04      	ldr	r2, [pc, #16]	; (800471c <__NVIC_SetPriorityGrouping+0x44>)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	60d3      	str	r3, [r2, #12]
}
 8004710:	bf00      	nop
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	e000ed00 	.word	0xe000ed00

08004720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004724:	4b04      	ldr	r3, [pc, #16]	; (8004738 <__NVIC_GetPriorityGrouping+0x18>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	0a1b      	lsrs	r3, r3, #8
 800472a:	f003 0307 	and.w	r3, r3, #7
}
 800472e:	4618      	mov	r0, r3
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	e000ed00 	.word	0xe000ed00

0800473c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800474a:	2b00      	cmp	r3, #0
 800474c:	db0b      	blt.n	8004766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	f003 021f 	and.w	r2, r3, #31
 8004754:	4907      	ldr	r1, [pc, #28]	; (8004774 <__NVIC_EnableIRQ+0x38>)
 8004756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	2001      	movs	r0, #1
 800475e:	fa00 f202 	lsl.w	r2, r0, r2
 8004762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	e000e100 	.word	0xe000e100

08004778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	6039      	str	r1, [r7, #0]
 8004782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004788:	2b00      	cmp	r3, #0
 800478a:	db0a      	blt.n	80047a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	b2da      	uxtb	r2, r3
 8004790:	490c      	ldr	r1, [pc, #48]	; (80047c4 <__NVIC_SetPriority+0x4c>)
 8004792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004796:	0112      	lsls	r2, r2, #4
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	440b      	add	r3, r1
 800479c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047a0:	e00a      	b.n	80047b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	4908      	ldr	r1, [pc, #32]	; (80047c8 <__NVIC_SetPriority+0x50>)
 80047a8:	79fb      	ldrb	r3, [r7, #7]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	3b04      	subs	r3, #4
 80047b0:	0112      	lsls	r2, r2, #4
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	440b      	add	r3, r1
 80047b6:	761a      	strb	r2, [r3, #24]
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	e000e100 	.word	0xe000e100
 80047c8:	e000ed00 	.word	0xe000ed00

080047cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b089      	sub	sp, #36	; 0x24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f1c3 0307 	rsb	r3, r3, #7
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	bf28      	it	cs
 80047ea:	2304      	movcs	r3, #4
 80047ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	3304      	adds	r3, #4
 80047f2:	2b06      	cmp	r3, #6
 80047f4:	d902      	bls.n	80047fc <NVIC_EncodePriority+0x30>
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	3b03      	subs	r3, #3
 80047fa:	e000      	b.n	80047fe <NVIC_EncodePriority+0x32>
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004800:	f04f 32ff 	mov.w	r2, #4294967295
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	43da      	mvns	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	401a      	ands	r2, r3
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004814:	f04f 31ff 	mov.w	r1, #4294967295
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	fa01 f303 	lsl.w	r3, r1, r3
 800481e:	43d9      	mvns	r1, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004824:	4313      	orrs	r3, r2
         );
}
 8004826:	4618      	mov	r0, r3
 8004828:	3724      	adds	r7, #36	; 0x24
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
	...

08004834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3b01      	subs	r3, #1
 8004840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004844:	d301      	bcc.n	800484a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004846:	2301      	movs	r3, #1
 8004848:	e00f      	b.n	800486a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800484a:	4a0a      	ldr	r2, [pc, #40]	; (8004874 <SysTick_Config+0x40>)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3b01      	subs	r3, #1
 8004850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004852:	210f      	movs	r1, #15
 8004854:	f04f 30ff 	mov.w	r0, #4294967295
 8004858:	f7ff ff8e 	bl	8004778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800485c:	4b05      	ldr	r3, [pc, #20]	; (8004874 <SysTick_Config+0x40>)
 800485e:	2200      	movs	r2, #0
 8004860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004862:	4b04      	ldr	r3, [pc, #16]	; (8004874 <SysTick_Config+0x40>)
 8004864:	2207      	movs	r2, #7
 8004866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	e000e010 	.word	0xe000e010

08004878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff ff29 	bl	80046d8 <__NVIC_SetPriorityGrouping>
}
 8004886:	bf00      	nop
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800488e:	b580      	push	{r7, lr}
 8004890:	b086      	sub	sp, #24
 8004892:	af00      	add	r7, sp, #0
 8004894:	4603      	mov	r3, r0
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048a0:	f7ff ff3e 	bl	8004720 <__NVIC_GetPriorityGrouping>
 80048a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	6978      	ldr	r0, [r7, #20]
 80048ac:	f7ff ff8e 	bl	80047cc <NVIC_EncodePriority>
 80048b0:	4602      	mov	r2, r0
 80048b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048b6:	4611      	mov	r1, r2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff ff5d 	bl	8004778 <__NVIC_SetPriority>
}
 80048be:	bf00      	nop
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	4603      	mov	r3, r0
 80048ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff ff31 	bl	800473c <__NVIC_EnableIRQ>
}
 80048da:	bf00      	nop
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b082      	sub	sp, #8
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff ffa2 	bl	8004834 <SysTick_Config>
 80048f0:	4603      	mov	r3, r0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004908:	f7ff feda 	bl	80046c0 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e099      	b.n	8004a4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0201 	bic.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004938:	e00f      	b.n	800495a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800493a:	f7ff fec1 	bl	80046c0 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b05      	cmp	r3, #5
 8004946:	d908      	bls.n	800495a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2203      	movs	r2, #3
 8004952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e078      	b.n	8004a4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e8      	bne.n	800493a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4b38      	ldr	r3, [pc, #224]	; (8004a54 <HAL_DMA_Init+0x158>)
 8004974:	4013      	ands	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004986:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004992:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800499e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d107      	bne.n	80049c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049bc:	4313      	orrs	r3, r2
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f023 0307 	bic.w	r3, r3, #7
 80049da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d117      	bne.n	8004a1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00e      	beq.n	8004a1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fb0f 	bl	8005024 <DMA_CheckFifoParam>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2240      	movs	r2, #64	; 0x40
 8004a10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e016      	b.n	8004a4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fac6 	bl	8004fb8 <DMA_CalcBaseAndBitshift>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a34:	223f      	movs	r2, #63	; 0x3f
 8004a36:	409a      	lsls	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	f010803f 	.word	0xf010803f

08004a58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d101      	bne.n	8004a7e <HAL_DMA_Start_IT+0x26>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e040      	b.n	8004b00 <HAL_DMA_Start_IT+0xa8>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d12f      	bne.n	8004af2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2202      	movs	r2, #2
 8004a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 fa58 	bl	8004f5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab0:	223f      	movs	r2, #63	; 0x3f
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0216 	orr.w	r2, r2, #22
 8004ac6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d007      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0208 	orr.w	r2, r2, #8
 8004ade:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	e005      	b.n	8004afe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004afa:	2302      	movs	r3, #2
 8004afc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b16:	f7ff fdd3 	bl	80046c0 <HAL_GetTick>
 8004b1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d008      	beq.n	8004b3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2280      	movs	r2, #128	; 0x80
 8004b2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e052      	b.n	8004be0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0216 	bic.w	r2, r2, #22
 8004b48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d103      	bne.n	8004b6a <HAL_DMA_Abort+0x62>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d007      	beq.n	8004b7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0208 	bic.w	r2, r2, #8
 8004b78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0201 	bic.w	r2, r2, #1
 8004b88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b8a:	e013      	b.n	8004bb4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b8c:	f7ff fd98 	bl	80046c0 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b05      	cmp	r3, #5
 8004b98:	d90c      	bls.n	8004bb4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2203      	movs	r2, #3
 8004bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e015      	b.n	8004be0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e4      	bne.n	8004b8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc6:	223f      	movs	r2, #63	; 0x3f
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d004      	beq.n	8004c06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2280      	movs	r2, #128	; 0x80
 8004c00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e00c      	b.n	8004c20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2205      	movs	r2, #5
 8004c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0201 	bic.w	r2, r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c38:	4b92      	ldr	r3, [pc, #584]	; (8004e84 <HAL_DMA_IRQHandler+0x258>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a92      	ldr	r2, [pc, #584]	; (8004e88 <HAL_DMA_IRQHandler+0x25c>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	0a9b      	lsrs	r3, r3, #10
 8004c44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c56:	2208      	movs	r2, #8
 8004c58:	409a      	lsls	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d01a      	beq.n	8004c98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d013      	beq.n	8004c98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0204 	bic.w	r2, r2, #4
 8004c7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c84:	2208      	movs	r2, #8
 8004c86:	409a      	lsls	r2, r3
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c90:	f043 0201 	orr.w	r2, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d012      	beq.n	8004cce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00b      	beq.n	8004cce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cba:	2201      	movs	r2, #1
 8004cbc:	409a      	lsls	r2, r3
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc6:	f043 0202 	orr.w	r2, r3, #2
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	409a      	lsls	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d012      	beq.n	8004d04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00b      	beq.n	8004d04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf0:	2204      	movs	r2, #4
 8004cf2:	409a      	lsls	r2, r3
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfc:	f043 0204 	orr.w	r2, r3, #4
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d08:	2210      	movs	r2, #16
 8004d0a:	409a      	lsls	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d043      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d03c      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d26:	2210      	movs	r2, #16
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d018      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d108      	bne.n	8004d5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d024      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	4798      	blx	r3
 8004d5a:	e01f      	b.n	8004d9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01b      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	4798      	blx	r3
 8004d6c:	e016      	b.n	8004d9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d107      	bne.n	8004d8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0208 	bic.w	r2, r2, #8
 8004d8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da0:	2220      	movs	r2, #32
 8004da2:	409a      	lsls	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 808e 	beq.w	8004eca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8086 	beq.w	8004eca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	409a      	lsls	r2, r3
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b05      	cmp	r3, #5
 8004dd4:	d136      	bne.n	8004e44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0216 	bic.w	r2, r2, #22
 8004de4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695a      	ldr	r2, [r3, #20]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004df4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d103      	bne.n	8004e06 <HAL_DMA_IRQHandler+0x1da>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0208 	bic.w	r2, r2, #8
 8004e14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e1a:	223f      	movs	r2, #63	; 0x3f
 8004e1c:	409a      	lsls	r2, r3
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d07d      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
        }
        return;
 8004e42:	e078      	b.n	8004f36 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01c      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d108      	bne.n	8004e72 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d030      	beq.n	8004eca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	4798      	blx	r3
 8004e70:	e02b      	b.n	8004eca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d027      	beq.n	8004eca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	4798      	blx	r3
 8004e82:	e022      	b.n	8004eca <HAL_DMA_IRQHandler+0x29e>
 8004e84:	20000018 	.word	0x20000018
 8004e88:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10f      	bne.n	8004eba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0210 	bic.w	r2, r2, #16
 8004ea8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d032      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d022      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2205      	movs	r2, #5
 8004ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0201 	bic.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d307      	bcc.n	8004f12 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1f2      	bne.n	8004ef6 <HAL_DMA_IRQHandler+0x2ca>
 8004f10:	e000      	b.n	8004f14 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004f12:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	4798      	blx	r3
 8004f34:	e000      	b.n	8004f38 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004f36:	bf00      	nop
    }
  }
}
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop

08004f40 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f4e:	b2db      	uxtb	r3, r3
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2b40      	cmp	r3, #64	; 0x40
 8004f88:	d108      	bne.n	8004f9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f9a:	e007      	b.n	8004fac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	60da      	str	r2, [r3, #12]
}
 8004fac:	bf00      	nop
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	3b10      	subs	r3, #16
 8004fc8:	4a14      	ldr	r2, [pc, #80]	; (800501c <DMA_CalcBaseAndBitshift+0x64>)
 8004fca:	fba2 2303 	umull	r2, r3, r2, r3
 8004fce:	091b      	lsrs	r3, r3, #4
 8004fd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fd2:	4a13      	ldr	r2, [pc, #76]	; (8005020 <DMA_CalcBaseAndBitshift+0x68>)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d909      	bls.n	8004ffa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004fee:	f023 0303 	bic.w	r3, r3, #3
 8004ff2:	1d1a      	adds	r2, r3, #4
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	659a      	str	r2, [r3, #88]	; 0x58
 8004ff8:	e007      	b.n	800500a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005002:	f023 0303 	bic.w	r3, r3, #3
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	aaaaaaab 	.word	0xaaaaaaab
 8005020:	0800a104 	.word	0x0800a104

08005024 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800502c:	2300      	movs	r3, #0
 800502e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005034:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d11f      	bne.n	800507e <DMA_CheckFifoParam+0x5a>
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b03      	cmp	r3, #3
 8005042:	d856      	bhi.n	80050f2 <DMA_CheckFifoParam+0xce>
 8005044:	a201      	add	r2, pc, #4	; (adr r2, 800504c <DMA_CheckFifoParam+0x28>)
 8005046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504a:	bf00      	nop
 800504c:	0800505d 	.word	0x0800505d
 8005050:	0800506f 	.word	0x0800506f
 8005054:	0800505d 	.word	0x0800505d
 8005058:	080050f3 	.word	0x080050f3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d046      	beq.n	80050f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800506c:	e043      	b.n	80050f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005072:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005076:	d140      	bne.n	80050fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800507c:	e03d      	b.n	80050fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005086:	d121      	bne.n	80050cc <DMA_CheckFifoParam+0xa8>
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b03      	cmp	r3, #3
 800508c:	d837      	bhi.n	80050fe <DMA_CheckFifoParam+0xda>
 800508e:	a201      	add	r2, pc, #4	; (adr r2, 8005094 <DMA_CheckFifoParam+0x70>)
 8005090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005094:	080050a5 	.word	0x080050a5
 8005098:	080050ab 	.word	0x080050ab
 800509c:	080050a5 	.word	0x080050a5
 80050a0:	080050bd 	.word	0x080050bd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
      break;
 80050a8:	e030      	b.n	800510c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d025      	beq.n	8005102 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ba:	e022      	b.n	8005102 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050c4:	d11f      	bne.n	8005106 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050ca:	e01c      	b.n	8005106 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d903      	bls.n	80050da <DMA_CheckFifoParam+0xb6>
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	d003      	beq.n	80050e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050d8:	e018      	b.n	800510c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	73fb      	strb	r3, [r7, #15]
      break;
 80050de:	e015      	b.n	800510c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00e      	beq.n	800510a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
      break;
 80050f0:	e00b      	b.n	800510a <DMA_CheckFifoParam+0xe6>
      break;
 80050f2:	bf00      	nop
 80050f4:	e00a      	b.n	800510c <DMA_CheckFifoParam+0xe8>
      break;
 80050f6:	bf00      	nop
 80050f8:	e008      	b.n	800510c <DMA_CheckFifoParam+0xe8>
      break;
 80050fa:	bf00      	nop
 80050fc:	e006      	b.n	800510c <DMA_CheckFifoParam+0xe8>
      break;
 80050fe:	bf00      	nop
 8005100:	e004      	b.n	800510c <DMA_CheckFifoParam+0xe8>
      break;
 8005102:	bf00      	nop
 8005104:	e002      	b.n	800510c <DMA_CheckFifoParam+0xe8>
      break;   
 8005106:	bf00      	nop
 8005108:	e000      	b.n	800510c <DMA_CheckFifoParam+0xe8>
      break;
 800510a:	bf00      	nop
    }
  } 
  
  return status; 
 800510c:	7bfb      	ldrb	r3, [r7, #15]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop

0800511c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800511c:	b480      	push	{r7}
 800511e:	b089      	sub	sp, #36	; 0x24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800512a:	2300      	movs	r3, #0
 800512c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800512e:	2300      	movs	r3, #0
 8005130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005132:	2300      	movs	r3, #0
 8005134:	61fb      	str	r3, [r7, #28]
 8005136:	e159      	b.n	80053ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005138:	2201      	movs	r2, #1
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4013      	ands	r3, r2
 800514a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	429a      	cmp	r2, r3
 8005152:	f040 8148 	bne.w	80053e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	2b01      	cmp	r3, #1
 8005160:	d005      	beq.n	800516e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800516a:	2b02      	cmp	r3, #2
 800516c:	d130      	bne.n	80051d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	2203      	movs	r2, #3
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	43db      	mvns	r3, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4013      	ands	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	4313      	orrs	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051a4:	2201      	movs	r2, #1
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	43db      	mvns	r3, r3
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4013      	ands	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	f003 0201 	and.w	r2, r3, #1
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d017      	beq.n	800520c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	2203      	movs	r2, #3
 80051e8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ec:	43db      	mvns	r3, r3
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	4013      	ands	r3, r2
 80051f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	4313      	orrs	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f003 0303 	and.w	r3, r3, #3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d123      	bne.n	8005260 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	08da      	lsrs	r2, r3, #3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3208      	adds	r2, #8
 8005220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	220f      	movs	r2, #15
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	43db      	mvns	r3, r3
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	4013      	ands	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	4313      	orrs	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	08da      	lsrs	r2, r3, #3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3208      	adds	r2, #8
 800525a:	69b9      	ldr	r1, [r7, #24]
 800525c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	2203      	movs	r2, #3
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	43db      	mvns	r3, r3
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	4013      	ands	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f003 0203 	and.w	r2, r3, #3
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	4313      	orrs	r3, r2
 800528c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 80a2 	beq.w	80053e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	4b57      	ldr	r3, [pc, #348]	; (8005404 <HAL_GPIO_Init+0x2e8>)
 80052a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052aa:	4a56      	ldr	r2, [pc, #344]	; (8005404 <HAL_GPIO_Init+0x2e8>)
 80052ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052b0:	6453      	str	r3, [r2, #68]	; 0x44
 80052b2:	4b54      	ldr	r3, [pc, #336]	; (8005404 <HAL_GPIO_Init+0x2e8>)
 80052b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052be:	4a52      	ldr	r2, [pc, #328]	; (8005408 <HAL_GPIO_Init+0x2ec>)
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	089b      	lsrs	r3, r3, #2
 80052c4:	3302      	adds	r3, #2
 80052c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	220f      	movs	r2, #15
 80052d6:	fa02 f303 	lsl.w	r3, r2, r3
 80052da:	43db      	mvns	r3, r3
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	4013      	ands	r3, r2
 80052e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a49      	ldr	r2, [pc, #292]	; (800540c <HAL_GPIO_Init+0x2f0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d019      	beq.n	800531e <HAL_GPIO_Init+0x202>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a48      	ldr	r2, [pc, #288]	; (8005410 <HAL_GPIO_Init+0x2f4>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d013      	beq.n	800531a <HAL_GPIO_Init+0x1fe>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a47      	ldr	r2, [pc, #284]	; (8005414 <HAL_GPIO_Init+0x2f8>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00d      	beq.n	8005316 <HAL_GPIO_Init+0x1fa>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a46      	ldr	r2, [pc, #280]	; (8005418 <HAL_GPIO_Init+0x2fc>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d007      	beq.n	8005312 <HAL_GPIO_Init+0x1f6>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a45      	ldr	r2, [pc, #276]	; (800541c <HAL_GPIO_Init+0x300>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d101      	bne.n	800530e <HAL_GPIO_Init+0x1f2>
 800530a:	2304      	movs	r3, #4
 800530c:	e008      	b.n	8005320 <HAL_GPIO_Init+0x204>
 800530e:	2307      	movs	r3, #7
 8005310:	e006      	b.n	8005320 <HAL_GPIO_Init+0x204>
 8005312:	2303      	movs	r3, #3
 8005314:	e004      	b.n	8005320 <HAL_GPIO_Init+0x204>
 8005316:	2302      	movs	r3, #2
 8005318:	e002      	b.n	8005320 <HAL_GPIO_Init+0x204>
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <HAL_GPIO_Init+0x204>
 800531e:	2300      	movs	r3, #0
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	f002 0203 	and.w	r2, r2, #3
 8005326:	0092      	lsls	r2, r2, #2
 8005328:	4093      	lsls	r3, r2
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4313      	orrs	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005330:	4935      	ldr	r1, [pc, #212]	; (8005408 <HAL_GPIO_Init+0x2ec>)
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	089b      	lsrs	r3, r3, #2
 8005336:	3302      	adds	r3, #2
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800533e:	4b38      	ldr	r3, [pc, #224]	; (8005420 <HAL_GPIO_Init+0x304>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	43db      	mvns	r3, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4013      	ands	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005362:	4a2f      	ldr	r2, [pc, #188]	; (8005420 <HAL_GPIO_Init+0x304>)
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005368:	4b2d      	ldr	r3, [pc, #180]	; (8005420 <HAL_GPIO_Init+0x304>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	43db      	mvns	r3, r3
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	4013      	ands	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800538c:	4a24      	ldr	r2, [pc, #144]	; (8005420 <HAL_GPIO_Init+0x304>)
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005392:	4b23      	ldr	r3, [pc, #140]	; (8005420 <HAL_GPIO_Init+0x304>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	43db      	mvns	r3, r3
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	4013      	ands	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053b6:	4a1a      	ldr	r2, [pc, #104]	; (8005420 <HAL_GPIO_Init+0x304>)
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053bc:	4b18      	ldr	r3, [pc, #96]	; (8005420 <HAL_GPIO_Init+0x304>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	43db      	mvns	r3, r3
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	4013      	ands	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053e0:	4a0f      	ldr	r2, [pc, #60]	; (8005420 <HAL_GPIO_Init+0x304>)
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	3301      	adds	r3, #1
 80053ea:	61fb      	str	r3, [r7, #28]
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	2b0f      	cmp	r3, #15
 80053f0:	f67f aea2 	bls.w	8005138 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop
 80053f8:	3724      	adds	r7, #36	; 0x24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40023800 	.word	0x40023800
 8005408:	40013800 	.word	0x40013800
 800540c:	40020000 	.word	0x40020000
 8005410:	40020400 	.word	0x40020400
 8005414:	40020800 	.word	0x40020800
 8005418:	40020c00 	.word	0x40020c00
 800541c:	40021000 	.word	0x40021000
 8005420:	40013c00 	.word	0x40013c00

08005424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	887b      	ldrh	r3, [r7, #2]
 8005436:	4013      	ands	r3, r2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
 8005440:	e001      	b.n	8005446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005442:	2300      	movs	r3, #0
 8005444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005446:	7bfb      	ldrb	r3, [r7, #15]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	807b      	strh	r3, [r7, #2]
 8005460:	4613      	mov	r3, r2
 8005462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005464:	787b      	ldrb	r3, [r7, #1]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800546a:	887a      	ldrh	r2, [r7, #2]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005470:	e003      	b.n	800547a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005472:	887b      	ldrh	r3, [r7, #2]
 8005474:	041a      	lsls	r2, r3, #16
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	619a      	str	r2, [r3, #24]
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
	...

08005488 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	4603      	mov	r3, r0
 8005490:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005492:	4b08      	ldr	r3, [pc, #32]	; (80054b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005494:	695a      	ldr	r2, [r3, #20]
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	4013      	ands	r3, r2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d006      	beq.n	80054ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800549e:	4a05      	ldr	r2, [pc, #20]	; (80054b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054a0:	88fb      	ldrh	r3, [r7, #6]
 80054a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054a4:	88fb      	ldrh	r3, [r7, #6]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fc fb20 	bl	8001aec <HAL_GPIO_EXTI_Callback>
  }
}
 80054ac:	bf00      	nop
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40013c00 	.word	0x40013c00

080054b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e12b      	b.n	8005722 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7fe fdcc 	bl	800407c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2224      	movs	r2, #36	; 0x24
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0201 	bic.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800550a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800551a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800551c:	f002 fb66 	bl	8007bec <HAL_RCC_GetPCLK1Freq>
 8005520:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	4a81      	ldr	r2, [pc, #516]	; (800572c <HAL_I2C_Init+0x274>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d807      	bhi.n	800553c <HAL_I2C_Init+0x84>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4a80      	ldr	r2, [pc, #512]	; (8005730 <HAL_I2C_Init+0x278>)
 8005530:	4293      	cmp	r3, r2
 8005532:	bf94      	ite	ls
 8005534:	2301      	movls	r3, #1
 8005536:	2300      	movhi	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	e006      	b.n	800554a <HAL_I2C_Init+0x92>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4a7d      	ldr	r2, [pc, #500]	; (8005734 <HAL_I2C_Init+0x27c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	bf94      	ite	ls
 8005544:	2301      	movls	r3, #1
 8005546:	2300      	movhi	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e0e7      	b.n	8005722 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4a78      	ldr	r2, [pc, #480]	; (8005738 <HAL_I2C_Init+0x280>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	0c9b      	lsrs	r3, r3, #18
 800555c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	430a      	orrs	r2, r1
 8005570:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	4a6a      	ldr	r2, [pc, #424]	; (800572c <HAL_I2C_Init+0x274>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d802      	bhi.n	800558c <HAL_I2C_Init+0xd4>
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	3301      	adds	r3, #1
 800558a:	e009      	b.n	80055a0 <HAL_I2C_Init+0xe8>
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005592:	fb02 f303 	mul.w	r3, r2, r3
 8005596:	4a69      	ldr	r2, [pc, #420]	; (800573c <HAL_I2C_Init+0x284>)
 8005598:	fba2 2303 	umull	r2, r3, r2, r3
 800559c:	099b      	lsrs	r3, r3, #6
 800559e:	3301      	adds	r3, #1
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6812      	ldr	r2, [r2, #0]
 80055a4:	430b      	orrs	r3, r1
 80055a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	495c      	ldr	r1, [pc, #368]	; (800572c <HAL_I2C_Init+0x274>)
 80055bc:	428b      	cmp	r3, r1
 80055be:	d819      	bhi.n	80055f4 <HAL_I2C_Init+0x13c>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	1e59      	subs	r1, r3, #1
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80055ce:	1c59      	adds	r1, r3, #1
 80055d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80055d4:	400b      	ands	r3, r1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <HAL_I2C_Init+0x138>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	1e59      	subs	r1, r3, #1
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80055e8:	3301      	adds	r3, #1
 80055ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ee:	e051      	b.n	8005694 <HAL_I2C_Init+0x1dc>
 80055f0:	2304      	movs	r3, #4
 80055f2:	e04f      	b.n	8005694 <HAL_I2C_Init+0x1dc>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d111      	bne.n	8005620 <HAL_I2C_Init+0x168>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	1e58      	subs	r0, r3, #1
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6859      	ldr	r1, [r3, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	440b      	add	r3, r1
 800560a:	fbb0 f3f3 	udiv	r3, r0, r3
 800560e:	3301      	adds	r3, #1
 8005610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005614:	2b00      	cmp	r3, #0
 8005616:	bf0c      	ite	eq
 8005618:	2301      	moveq	r3, #1
 800561a:	2300      	movne	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	e012      	b.n	8005646 <HAL_I2C_Init+0x18e>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	1e58      	subs	r0, r3, #1
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6859      	ldr	r1, [r3, #4]
 8005628:	460b      	mov	r3, r1
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	0099      	lsls	r1, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	fbb0 f3f3 	udiv	r3, r0, r3
 8005636:	3301      	adds	r3, #1
 8005638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800563c:	2b00      	cmp	r3, #0
 800563e:	bf0c      	ite	eq
 8005640:	2301      	moveq	r3, #1
 8005642:	2300      	movne	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <HAL_I2C_Init+0x196>
 800564a:	2301      	movs	r3, #1
 800564c:	e022      	b.n	8005694 <HAL_I2C_Init+0x1dc>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10e      	bne.n	8005674 <HAL_I2C_Init+0x1bc>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	1e58      	subs	r0, r3, #1
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6859      	ldr	r1, [r3, #4]
 800565e:	460b      	mov	r3, r1
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	440b      	add	r3, r1
 8005664:	fbb0 f3f3 	udiv	r3, r0, r3
 8005668:	3301      	adds	r3, #1
 800566a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800566e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005672:	e00f      	b.n	8005694 <HAL_I2C_Init+0x1dc>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	1e58      	subs	r0, r3, #1
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6859      	ldr	r1, [r3, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	0099      	lsls	r1, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	fbb0 f3f3 	udiv	r3, r0, r3
 800568a:	3301      	adds	r3, #1
 800568c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	6809      	ldr	r1, [r1, #0]
 8005698:	4313      	orrs	r3, r2
 800569a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69da      	ldr	r2, [r3, #28]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6911      	ldr	r1, [r2, #16]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	68d2      	ldr	r2, [r2, #12]
 80056ce:	4311      	orrs	r1, r2
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	430b      	orrs	r3, r1
 80056d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	695a      	ldr	r2, [r3, #20]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	000186a0 	.word	0x000186a0
 8005730:	001e847f 	.word	0x001e847f
 8005734:	003d08ff 	.word	0x003d08ff
 8005738:	431bde83 	.word	0x431bde83
 800573c:	10624dd3 	.word	0x10624dd3

08005740 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	607a      	str	r2, [r7, #4]
 800574a:	461a      	mov	r2, r3
 800574c:	460b      	mov	r3, r1
 800574e:	817b      	strh	r3, [r7, #10]
 8005750:	4613      	mov	r3, r2
 8005752:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b20      	cmp	r3, #32
 8005762:	f040 8085 	bne.w	8005870 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005766:	4b46      	ldr	r3, [pc, #280]	; (8005880 <HAL_I2C_Master_Transmit_IT+0x140>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	08db      	lsrs	r3, r3, #3
 800576c:	4a45      	ldr	r2, [pc, #276]	; (8005884 <HAL_I2C_Master_Transmit_IT+0x144>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	0a1a      	lsrs	r2, r3, #8
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009a      	lsls	r2, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	3b01      	subs	r3, #1
 8005784:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d116      	bne.n	80057ba <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f043 0220 	orr.w	r2, r3, #32
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e05b      	b.n	8005872 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d0db      	beq.n	8005780 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_I2C_Master_Transmit_IT+0x96>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e04d      	b.n	8005872 <HAL_I2C_Master_Transmit_IT+0x132>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d007      	beq.n	80057fc <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800580a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2221      	movs	r2, #33	; 0x21
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2210      	movs	r2, #16
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	893a      	ldrh	r2, [r7, #8]
 800582c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4a13      	ldr	r2, [pc, #76]	; (8005888 <HAL_I2C_Master_Transmit_IT+0x148>)
 800583c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800583e:	897a      	ldrh	r2, [r7, #10]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005852:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800586a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	e000      	b.n	8005872 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8005870:	2302      	movs	r3, #2
  }
}
 8005872:	4618      	mov	r0, r3
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	20000018 	.word	0x20000018
 8005884:	14f8b589 	.word	0x14f8b589
 8005888:	ffff0000 	.word	0xffff0000

0800588c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	607a      	str	r2, [r7, #4]
 8005896:	461a      	mov	r2, r3
 8005898:	460b      	mov	r3, r1
 800589a:	817b      	strh	r3, [r7, #10]
 800589c:	4613      	mov	r3, r2
 800589e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	f040 808d 	bne.w	80059cc <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80058b2:	4b4a      	ldr	r3, [pc, #296]	; (80059dc <HAL_I2C_Master_Receive_IT+0x150>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	08db      	lsrs	r3, r3, #3
 80058b8:	4a49      	ldr	r2, [pc, #292]	; (80059e0 <HAL_I2C_Master_Receive_IT+0x154>)
 80058ba:	fba2 2303 	umull	r2, r3, r2, r3
 80058be:	0a1a      	lsrs	r2, r3, #8
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	009a      	lsls	r2, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d116      	bne.n	8005906 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	f043 0220 	orr.w	r2, r3, #32
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e063      	b.n	80059ce <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b02      	cmp	r3, #2
 8005912:	d0db      	beq.n	80058cc <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800591a:	2b01      	cmp	r3, #1
 800591c:	d101      	bne.n	8005922 <HAL_I2C_Master_Receive_IT+0x96>
 800591e:	2302      	movs	r3, #2
 8005920:	e055      	b.n	80059ce <HAL_I2C_Master_Receive_IT+0x142>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b01      	cmp	r3, #1
 8005936:	d007      	beq.n	8005948 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005956:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2222      	movs	r2, #34	; 0x22
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2210      	movs	r2, #16
 8005964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	893a      	ldrh	r2, [r7, #8]
 8005978:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4a17      	ldr	r2, [pc, #92]	; (80059e4 <HAL_I2C_Master_Receive_IT+0x158>)
 8005988:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800598a:	897a      	ldrh	r2, [r7, #10]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800599e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059ae:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80059c6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	e000      	b.n	80059ce <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80059cc:	2302      	movs	r3, #2
  }
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	20000018 	.word	0x20000018
 80059e0:	14f8b589 	.word	0x14f8b589
 80059e4:	ffff0000 	.word	0xffff0000

080059e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a08:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a10:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	2b10      	cmp	r3, #16
 8005a16:	d003      	beq.n	8005a20 <HAL_I2C_EV_IRQHandler+0x38>
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
 8005a1a:	2b40      	cmp	r3, #64	; 0x40
 8005a1c:	f040 80bd 	bne.w	8005b9a <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10d      	bne.n	8005a56 <HAL_I2C_EV_IRQHandler+0x6e>
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005a40:	d003      	beq.n	8005a4a <HAL_I2C_EV_IRQHandler+0x62>
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005a48:	d101      	bne.n	8005a4e <HAL_I2C_EV_IRQHandler+0x66>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <HAL_I2C_EV_IRQHandler+0x68>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	f000 812e 	beq.w	8005cb2 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00c      	beq.n	8005a7a <HAL_I2C_EV_IRQHandler+0x92>
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	0a5b      	lsrs	r3, r3, #9
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d006      	beq.n	8005a7a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f001 fc55 	bl	800731c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fd62 	bl	800653c <I2C_Master_SB>
 8005a78:	e08e      	b.n	8005b98 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	08db      	lsrs	r3, r3, #3
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d009      	beq.n	8005a9a <HAL_I2C_EV_IRQHandler+0xb2>
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	0a5b      	lsrs	r3, r3, #9
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fdd8 	bl	8006648 <I2C_Master_ADD10>
 8005a98:	e07e      	b.n	8005b98 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	085b      	lsrs	r3, r3, #1
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <HAL_I2C_EV_IRQHandler+0xd2>
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	0a5b      	lsrs	r3, r3, #9
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fdf2 	bl	800669c <I2C_Master_ADDR>
 8005ab8:	e06e      	b.n	8005b98 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	089b      	lsrs	r3, r3, #2
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d037      	beq.n	8005b36 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad4:	f000 80ef 	beq.w	8005cb6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	09db      	lsrs	r3, r3, #7
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00f      	beq.n	8005b04 <HAL_I2C_EV_IRQHandler+0x11c>
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	0a9b      	lsrs	r3, r3, #10
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d009      	beq.n	8005b04 <HAL_I2C_EV_IRQHandler+0x11c>
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	089b      	lsrs	r3, r3, #2
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d103      	bne.n	8005b04 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f9ef 	bl	8005ee0 <I2C_MasterTransmit_TXE>
 8005b02:	e049      	b.n	8005b98 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	089b      	lsrs	r3, r3, #2
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 80d2 	beq.w	8005cb6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	0a5b      	lsrs	r3, r3, #9
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 80cb 	beq.w	8005cb6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
 8005b22:	2b10      	cmp	r3, #16
 8005b24:	d103      	bne.n	8005b2e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fa76 	bl	8006018 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b2c:	e0c3      	b.n	8005cb6 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fada 	bl	80060e8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b34:	e0bf      	b.n	8005cb6 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b44:	f000 80b7 	beq.w	8005cb6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	099b      	lsrs	r3, r3, #6
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00f      	beq.n	8005b74 <HAL_I2C_EV_IRQHandler+0x18c>
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	0a9b      	lsrs	r3, r3, #10
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d009      	beq.n	8005b74 <HAL_I2C_EV_IRQHandler+0x18c>
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	089b      	lsrs	r3, r3, #2
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d103      	bne.n	8005b74 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fb4a 	bl	8006206 <I2C_MasterReceive_RXNE>
 8005b72:	e011      	b.n	8005b98 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	089b      	lsrs	r3, r3, #2
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 809a 	beq.w	8005cb6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	0a5b      	lsrs	r3, r3, #9
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 8093 	beq.w	8005cb6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 fbe9 	bl	8006368 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b96:	e08e      	b.n	8005cb6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8005b98:	e08d      	b.n	8005cb6 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d004      	beq.n	8005bac <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	61fb      	str	r3, [r7, #28]
 8005baa:	e007      	b.n	8005bbc <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	085b      	lsrs	r3, r3, #1
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d012      	beq.n	8005bee <HAL_I2C_EV_IRQHandler+0x206>
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	0a5b      	lsrs	r3, r3, #9
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00c      	beq.n	8005bee <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005be4:	69b9      	ldr	r1, [r7, #24]
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 ffa7 	bl	8006b3a <I2C_Slave_ADDR>
 8005bec:	e066      	b.n	8005cbc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	091b      	lsrs	r3, r3, #4
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d009      	beq.n	8005c0e <HAL_I2C_EV_IRQHandler+0x226>
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	0a5b      	lsrs	r3, r3, #9
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 ffdc 	bl	8006bc4 <I2C_Slave_STOPF>
 8005c0c:	e056      	b.n	8005cbc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c0e:	7bbb      	ldrb	r3, [r7, #14]
 8005c10:	2b21      	cmp	r3, #33	; 0x21
 8005c12:	d002      	beq.n	8005c1a <HAL_I2C_EV_IRQHandler+0x232>
 8005c14:	7bbb      	ldrb	r3, [r7, #14]
 8005c16:	2b29      	cmp	r3, #41	; 0x29
 8005c18:	d125      	bne.n	8005c66 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	09db      	lsrs	r3, r3, #7
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00f      	beq.n	8005c46 <HAL_I2C_EV_IRQHandler+0x25e>
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	0a9b      	lsrs	r3, r3, #10
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <HAL_I2C_EV_IRQHandler+0x25e>
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	089b      	lsrs	r3, r3, #2
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d103      	bne.n	8005c46 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 febd 	bl	80069be <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c44:	e039      	b.n	8005cba <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	089b      	lsrs	r3, r3, #2
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d033      	beq.n	8005cba <HAL_I2C_EV_IRQHandler+0x2d2>
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	0a5b      	lsrs	r3, r3, #9
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d02d      	beq.n	8005cba <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 feea 	bl	8006a38 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c64:	e029      	b.n	8005cba <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	099b      	lsrs	r3, r3, #6
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00f      	beq.n	8005c92 <HAL_I2C_EV_IRQHandler+0x2aa>
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	0a9b      	lsrs	r3, r3, #10
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d009      	beq.n	8005c92 <HAL_I2C_EV_IRQHandler+0x2aa>
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	089b      	lsrs	r3, r3, #2
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d103      	bne.n	8005c92 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fef5 	bl	8006a7a <I2C_SlaveReceive_RXNE>
 8005c90:	e014      	b.n	8005cbc <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	089b      	lsrs	r3, r3, #2
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00e      	beq.n	8005cbc <HAL_I2C_EV_IRQHandler+0x2d4>
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	0a5b      	lsrs	r3, r3, #9
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d008      	beq.n	8005cbc <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 ff23 	bl	8006af6 <I2C_SlaveReceive_BTF>
 8005cb0:	e004      	b.n	8005cbc <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8005cb2:	bf00      	nop
 8005cb4:	e002      	b.n	8005cbc <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cb6:	bf00      	nop
 8005cb8:	e000      	b.n	8005cbc <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005cbc:	3720      	adds	r7, #32
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b08a      	sub	sp, #40	; 0x28
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ce4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	0a1b      	lsrs	r3, r3, #8
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00e      	beq.n	8005d10 <HAL_I2C_ER_IRQHandler+0x4e>
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	0a1b      	lsrs	r3, r3, #8
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d008      	beq.n	8005d10 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	f043 0301 	orr.w	r3, r3, #1
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d0e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	0a5b      	lsrs	r3, r3, #9
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00e      	beq.n	8005d3a <HAL_I2C_ER_IRQHandler+0x78>
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	0a1b      	lsrs	r3, r3, #8
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d008      	beq.n	8005d3a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	f043 0302 	orr.w	r3, r3, #2
 8005d2e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005d38:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	0a9b      	lsrs	r3, r3, #10
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d03f      	beq.n	8005dc6 <HAL_I2C_ER_IRQHandler+0x104>
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	0a1b      	lsrs	r3, r3, #8
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d039      	beq.n	8005dc6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005d52:	7efb      	ldrb	r3, [r7, #27]
 8005d54:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d64:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005d6c:	7ebb      	ldrb	r3, [r7, #26]
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	d112      	bne.n	8005d98 <HAL_I2C_ER_IRQHandler+0xd6>
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10f      	bne.n	8005d98 <HAL_I2C_ER_IRQHandler+0xd6>
 8005d78:	7cfb      	ldrb	r3, [r7, #19]
 8005d7a:	2b21      	cmp	r3, #33	; 0x21
 8005d7c:	d008      	beq.n	8005d90 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005d7e:	7cfb      	ldrb	r3, [r7, #19]
 8005d80:	2b29      	cmp	r3, #41	; 0x29
 8005d82:	d005      	beq.n	8005d90 <HAL_I2C_ER_IRQHandler+0xce>
 8005d84:	7cfb      	ldrb	r3, [r7, #19]
 8005d86:	2b28      	cmp	r3, #40	; 0x28
 8005d88:	d106      	bne.n	8005d98 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2b21      	cmp	r3, #33	; 0x21
 8005d8e:	d103      	bne.n	8005d98 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f001 f847 	bl	8006e24 <I2C_Slave_AF>
 8005d96:	e016      	b.n	8005dc6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005da0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	f043 0304 	orr.w	r3, r3, #4
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005daa:	7efb      	ldrb	r3, [r7, #27]
 8005dac:	2b10      	cmp	r3, #16
 8005dae:	d002      	beq.n	8005db6 <HAL_I2C_ER_IRQHandler+0xf4>
 8005db0:	7efb      	ldrb	r3, [r7, #27]
 8005db2:	2b40      	cmp	r3, #64	; 0x40
 8005db4:	d107      	bne.n	8005dc6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dc4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	0adb      	lsrs	r3, r3, #11
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00e      	beq.n	8005df0 <HAL_I2C_ER_IRQHandler+0x12e>
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	0a1b      	lsrs	r3, r3, #8
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d008      	beq.n	8005df0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	f043 0308 	orr.w	r3, r3, #8
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005dee:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d008      	beq.n	8005e08 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f001 f87e 	bl	8006f04 <I2C_ITError>
  }
}
 8005e08:	bf00      	nop
 8005e0a:	3728      	adds	r7, #40	; 0x28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	70fb      	strb	r3, [r7, #3]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ef6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d150      	bne.n	8005fa8 <I2C_MasterTransmit_TXE+0xc8>
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	2b21      	cmp	r3, #33	; 0x21
 8005f0a:	d14d      	bne.n	8005fa8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b08      	cmp	r3, #8
 8005f10:	d01d      	beq.n	8005f4e <I2C_MasterTransmit_TXE+0x6e>
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d01a      	beq.n	8005f4e <I2C_MasterTransmit_TXE+0x6e>
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f1e:	d016      	beq.n	8005f4e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f2e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2211      	movs	r2, #17
 8005f34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff ff62 	bl	8005e10 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f4c:	e060      	b.n	8006010 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f5c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b40      	cmp	r3, #64	; 0x40
 8005f86:	d107      	bne.n	8005f98 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff ff7d 	bl	8005e90 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f96:	e03b      	b.n	8006010 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff ff35 	bl	8005e10 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005fa6:	e033      	b.n	8006010 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	2b21      	cmp	r3, #33	; 0x21
 8005fac:	d005      	beq.n	8005fba <I2C_MasterTransmit_TXE+0xda>
 8005fae:	7bbb      	ldrb	r3, [r7, #14]
 8005fb0:	2b40      	cmp	r3, #64	; 0x40
 8005fb2:	d12d      	bne.n	8006010 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	2b22      	cmp	r3, #34	; 0x22
 8005fb8:	d12a      	bne.n	8006010 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d108      	bne.n	8005fd6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005fd4:	e01c      	b.n	8006010 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b40      	cmp	r3, #64	; 0x40
 8005fe0:	d103      	bne.n	8005fea <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f880 	bl	80060e8 <I2C_MemoryTransmit_TXE_BTF>
}
 8005fe8:	e012      	b.n	8006010 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	781a      	ldrb	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006004:	b29b      	uxth	r3, r3
 8006006:	3b01      	subs	r3, #1
 8006008:	b29a      	uxth	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800600e:	e7ff      	b.n	8006010 <I2C_MasterTransmit_TXE+0x130>
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b21      	cmp	r3, #33	; 0x21
 8006030:	d156      	bne.n	80060e0 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006036:	b29b      	uxth	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	d012      	beq.n	8006062 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	781a      	ldrb	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006056:	b29b      	uxth	r3, r3
 8006058:	3b01      	subs	r3, #1
 800605a:	b29a      	uxth	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006060:	e03e      	b.n	80060e0 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b08      	cmp	r3, #8
 8006066:	d01d      	beq.n	80060a4 <I2C_MasterTransmit_BTF+0x8c>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2b20      	cmp	r3, #32
 800606c:	d01a      	beq.n	80060a4 <I2C_MasterTransmit_BTF+0x8c>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006074:	d016      	beq.n	80060a4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006084:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2211      	movs	r2, #17
 800608a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff feb7 	bl	8005e10 <HAL_I2C_MasterTxCpltCallback>
}
 80060a2:	e01d      	b.n	80060e0 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060b2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff fe98 	bl	8005e10 <HAL_I2C_MasterTxCpltCallback>
}
 80060e0:	bf00      	nop
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d11d      	bne.n	800613c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006104:	2b01      	cmp	r3, #1
 8006106:	d10b      	bne.n	8006120 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800610c:	b2da      	uxtb	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006118:	1c9a      	adds	r2, r3, #2
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800611e:	e06e      	b.n	80061fe <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006124:	b29b      	uxth	r3, r3
 8006126:	121b      	asrs	r3, r3, #8
 8006128:	b2da      	uxtb	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006134:	1c5a      	adds	r2, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	651a      	str	r2, [r3, #80]	; 0x50
}
 800613a:	e060      	b.n	80061fe <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006140:	2b01      	cmp	r3, #1
 8006142:	d10b      	bne.n	800615c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006148:	b2da      	uxtb	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	651a      	str	r2, [r3, #80]	; 0x50
}
 800615a:	e050      	b.n	80061fe <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006160:	2b02      	cmp	r3, #2
 8006162:	d14c      	bne.n	80061fe <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	2b22      	cmp	r3, #34	; 0x22
 8006168:	d108      	bne.n	800617c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006178:	601a      	str	r2, [r3, #0]
}
 800617a:	e040      	b.n	80061fe <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d015      	beq.n	80061b2 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8006186:	7bfb      	ldrb	r3, [r7, #15]
 8006188:	2b21      	cmp	r3, #33	; 0x21
 800618a:	d112      	bne.n	80061b2 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	781a      	ldrb	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80061b0:	e025      	b.n	80061fe <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d120      	bne.n	80061fe <I2C_MemoryTransmit_TXE_BTF+0x116>
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	2b21      	cmp	r3, #33	; 0x21
 80061c0:	d11d      	bne.n	80061fe <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061d0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061e0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff fe49 	bl	8005e90 <HAL_I2C_MemTxCpltCallback>
}
 80061fe:	bf00      	nop
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b22      	cmp	r3, #34	; 0x22
 8006218:	f040 80a2 	bne.w	8006360 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006220:	b29b      	uxth	r3, r3
 8006222:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b03      	cmp	r3, #3
 8006228:	d921      	bls.n	800626e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691a      	ldr	r2, [r3, #16]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006246:	b29b      	uxth	r3, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006254:	b29b      	uxth	r3, r3
 8006256:	2b03      	cmp	r3, #3
 8006258:	f040 8082 	bne.w	8006360 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800626a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800626c:	e078      	b.n	8006360 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	2b02      	cmp	r3, #2
 8006274:	d074      	beq.n	8006360 <I2C_MasterReceive_RXNE+0x15a>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d002      	beq.n	8006282 <I2C_MasterReceive_RXNE+0x7c>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d16e      	bne.n	8006360 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f001 f818 	bl	80072b8 <I2C_WaitOnSTOPRequestThroughIT>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d142      	bne.n	8006314 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800629c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b40      	cmp	r3, #64	; 0x40
 80062e6:	d10a      	bne.n	80062fe <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff fdd4 	bl	8005ea4 <HAL_I2C_MemRxCpltCallback>
}
 80062fc:	e030      	b.n	8006360 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2212      	movs	r2, #18
 800630a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff fd89 	bl	8005e24 <HAL_I2C_MasterRxCpltCallback>
}
 8006312:	e025      	b.n	8006360 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006322:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691a      	ldr	r2, [r3, #16]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006340:	b29b      	uxth	r3, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2220      	movs	r2, #32
 800634e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7ff fdac 	bl	8005eb8 <HAL_I2C_ErrorCallback>
}
 8006360:	bf00      	nop
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b04      	cmp	r3, #4
 800637e:	d11b      	bne.n	80063b8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800638e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691a      	ldr	r2, [r3, #16]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80063b6:	e0bd      	b.n	8006534 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063bc:	b29b      	uxth	r3, r3
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d129      	bne.n	8006416 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063d0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b04      	cmp	r3, #4
 80063d6:	d00a      	beq.n	80063ee <I2C_MasterReceive_BTF+0x86>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d007      	beq.n	80063ee <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640a:	b29b      	uxth	r3, r3
 800640c:	3b01      	subs	r3, #1
 800640e:	b29a      	uxth	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006414:	e08e      	b.n	8006534 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641a:	b29b      	uxth	r3, r3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d176      	bne.n	800650e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d002      	beq.n	800642c <I2C_MasterReceive_BTF+0xc4>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b10      	cmp	r3, #16
 800642a:	d108      	bne.n	800643e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	e019      	b.n	8006472 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2b04      	cmp	r3, #4
 8006442:	d002      	beq.n	800644a <I2C_MasterReceive_BTF+0xe2>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d108      	bne.n	800645c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	e00a      	b.n	8006472 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b10      	cmp	r3, #16
 8006460:	d007      	beq.n	8006472 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006470:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	691a      	ldr	r2, [r3, #16]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648e:	b29b      	uxth	r3, r3
 8006490:	3b01      	subs	r3, #1
 8006492:	b29a      	uxth	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691a      	ldr	r2, [r3, #16]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80064cc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2220      	movs	r2, #32
 80064d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b40      	cmp	r3, #64	; 0x40
 80064e0:	d10a      	bne.n	80064f8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff fcd7 	bl	8005ea4 <HAL_I2C_MemRxCpltCallback>
}
 80064f6:	e01d      	b.n	8006534 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2212      	movs	r2, #18
 8006504:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff fc8c 	bl	8005e24 <HAL_I2C_MasterRxCpltCallback>
}
 800650c:	e012      	b.n	8006534 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652a:	b29b      	uxth	r3, r3
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006534:	bf00      	nop
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b40      	cmp	r3, #64	; 0x40
 800654e:	d117      	bne.n	8006580 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006554:	2b00      	cmp	r3, #0
 8006556:	d109      	bne.n	800656c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655c:	b2db      	uxtb	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006568:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800656a:	e067      	b.n	800663c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006570:	b2db      	uxtb	r3, r3
 8006572:	f043 0301 	orr.w	r3, r3, #1
 8006576:	b2da      	uxtb	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	611a      	str	r2, [r3, #16]
}
 800657e:	e05d      	b.n	800663c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006588:	d133      	bne.n	80065f2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b21      	cmp	r3, #33	; 0x21
 8006594:	d109      	bne.n	80065aa <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659a:	b2db      	uxtb	r3, r3
 800659c:	461a      	mov	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065a6:	611a      	str	r2, [r3, #16]
 80065a8:	e008      	b.n	80065bc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	f043 0301 	orr.w	r3, r3, #1
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d004      	beq.n	80065ce <I2C_Master_SB+0x92>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d108      	bne.n	80065e0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d032      	beq.n	800663c <I2C_Master_SB+0x100>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d02d      	beq.n	800663c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ee:	605a      	str	r2, [r3, #4]
}
 80065f0:	e024      	b.n	800663c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10e      	bne.n	8006618 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fe:	b29b      	uxth	r3, r3
 8006600:	11db      	asrs	r3, r3, #7
 8006602:	b2db      	uxtb	r3, r3
 8006604:	f003 0306 	and.w	r3, r3, #6
 8006608:	b2db      	uxtb	r3, r3
 800660a:	f063 030f 	orn	r3, r3, #15
 800660e:	b2da      	uxtb	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	611a      	str	r2, [r3, #16]
}
 8006616:	e011      	b.n	800663c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661c:	2b01      	cmp	r3, #1
 800661e:	d10d      	bne.n	800663c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006624:	b29b      	uxth	r3, r3
 8006626:	11db      	asrs	r3, r3, #7
 8006628:	b2db      	uxtb	r3, r3
 800662a:	f003 0306 	and.w	r3, r3, #6
 800662e:	b2db      	uxtb	r3, r3
 8006630:	f063 030e 	orn	r3, r3, #14
 8006634:	b2da      	uxtb	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	611a      	str	r2, [r3, #16]
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006654:	b2da      	uxtb	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006660:	2b00      	cmp	r3, #0
 8006662:	d004      	beq.n	800666e <I2C_Master_ADD10+0x26>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666a:	2b00      	cmp	r3, #0
 800666c:	d108      	bne.n	8006680 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00c      	beq.n	8006690 <I2C_Master_ADD10+0x48>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667c:	2b00      	cmp	r3, #0
 800667e:	d007      	beq.n	8006690 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800668e:	605a      	str	r2, [r3, #4]
  }
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800669c:	b480      	push	{r7}
 800669e:	b091      	sub	sp, #68	; 0x44
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b22      	cmp	r3, #34	; 0x22
 80066c4:	f040 8169 	bne.w	800699a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10f      	bne.n	80066f0 <I2C_Master_ADDR+0x54>
 80066d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066d4:	2b40      	cmp	r3, #64	; 0x40
 80066d6:	d10b      	bne.n	80066f0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066d8:	2300      	movs	r3, #0
 80066da:	633b      	str	r3, [r7, #48]	; 0x30
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	633b      	str	r3, [r7, #48]	; 0x30
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	633b      	str	r3, [r7, #48]	; 0x30
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	e160      	b.n	80069b2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d11d      	bne.n	8006734 <I2C_Master_ADDR+0x98>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006700:	d118      	bne.n	8006734 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006702:	2300      	movs	r3, #0
 8006704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006726:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	651a      	str	r2, [r3, #80]	; 0x50
 8006732:	e13e      	b.n	80069b2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d113      	bne.n	8006766 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800673e:	2300      	movs	r3, #0
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	62bb      	str	r3, [r7, #40]	; 0x28
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	62bb      	str	r3, [r7, #40]	; 0x28
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	e115      	b.n	8006992 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800676a:	b29b      	uxth	r3, r3
 800676c:	2b01      	cmp	r3, #1
 800676e:	f040 808a 	bne.w	8006886 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006774:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006778:	d137      	bne.n	80067ea <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006788:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006798:	d113      	bne.n	80067c2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067aa:	2300      	movs	r3, #0
 80067ac:	627b      	str	r3, [r7, #36]	; 0x24
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	e0e7      	b.n	8006992 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067c2:	2300      	movs	r3, #0
 80067c4:	623b      	str	r3, [r7, #32]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	623b      	str	r3, [r7, #32]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	623b      	str	r3, [r7, #32]
 80067d6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	e0d3      	b.n	8006992 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80067ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d02e      	beq.n	800684e <I2C_Master_ADDR+0x1b2>
 80067f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f2:	2b20      	cmp	r3, #32
 80067f4:	d02b      	beq.n	800684e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80067f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f8:	2b12      	cmp	r3, #18
 80067fa:	d102      	bne.n	8006802 <I2C_Master_ADDR+0x166>
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d125      	bne.n	800684e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006804:	2b04      	cmp	r3, #4
 8006806:	d00e      	beq.n	8006826 <I2C_Master_ADDR+0x18a>
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	2b02      	cmp	r3, #2
 800680c:	d00b      	beq.n	8006826 <I2C_Master_ADDR+0x18a>
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	2b10      	cmp	r3, #16
 8006812:	d008      	beq.n	8006826 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	e007      	b.n	8006836 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006834:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006836:	2300      	movs	r3, #0
 8006838:	61fb      	str	r3, [r7, #28]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	61fb      	str	r3, [r7, #28]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	61fb      	str	r3, [r7, #28]
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	e0a1      	b.n	8006992 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800685c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800685e:	2300      	movs	r3, #0
 8006860:	61bb      	str	r3, [r7, #24]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	61bb      	str	r3, [r7, #24]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	e085      	b.n	8006992 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688a:	b29b      	uxth	r3, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d14d      	bne.n	800692c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006892:	2b04      	cmp	r3, #4
 8006894:	d016      	beq.n	80068c4 <I2C_Master_ADDR+0x228>
 8006896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006898:	2b02      	cmp	r3, #2
 800689a:	d013      	beq.n	80068c4 <I2C_Master_ADDR+0x228>
 800689c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689e:	2b10      	cmp	r3, #16
 80068a0:	d010      	beq.n	80068c4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	e007      	b.n	80068d4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068d2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068e2:	d117      	bne.n	8006914 <I2C_Master_ADDR+0x278>
 80068e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068ea:	d00b      	beq.n	8006904 <I2C_Master_ADDR+0x268>
 80068ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d008      	beq.n	8006904 <I2C_Master_ADDR+0x268>
 80068f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d005      	beq.n	8006904 <I2C_Master_ADDR+0x268>
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	d002      	beq.n	8006904 <I2C_Master_ADDR+0x268>
 80068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006900:	2b20      	cmp	r3, #32
 8006902:	d107      	bne.n	8006914 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006912:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006914:	2300      	movs	r3, #0
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	e032      	b.n	8006992 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800693a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800694a:	d117      	bne.n	800697c <I2C_Master_ADDR+0x2e0>
 800694c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006952:	d00b      	beq.n	800696c <I2C_Master_ADDR+0x2d0>
 8006954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006956:	2b01      	cmp	r3, #1
 8006958:	d008      	beq.n	800696c <I2C_Master_ADDR+0x2d0>
 800695a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695c:	2b08      	cmp	r3, #8
 800695e:	d005      	beq.n	800696c <I2C_Master_ADDR+0x2d0>
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	2b10      	cmp	r3, #16
 8006964:	d002      	beq.n	800696c <I2C_Master_ADDR+0x2d0>
 8006966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006968:	2b20      	cmp	r3, #32
 800696a:	d107      	bne.n	800697c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800697a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800697c:	2300      	movs	r3, #0
 800697e:	613b      	str	r3, [r7, #16]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	613b      	str	r3, [r7, #16]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006998:	e00b      	b.n	80069b2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	68fb      	ldr	r3, [r7, #12]
}
 80069b0:	e7ff      	b.n	80069b2 <I2C_Master_ADDR+0x316>
 80069b2:	bf00      	nop
 80069b4:	3744      	adds	r7, #68	; 0x44
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b084      	sub	sp, #16
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069cc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d02b      	beq.n	8006a30 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	781a      	ldrb	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d114      	bne.n	8006a30 <I2C_SlaveTransmit_TXE+0x72>
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	2b29      	cmp	r3, #41	; 0x29
 8006a0a:	d111      	bne.n	8006a30 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a1a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2221      	movs	r2, #33	; 0x21
 8006a20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2228      	movs	r2, #40	; 0x28
 8006a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7ff fa04 	bl	8005e38 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006a30:	bf00      	nop
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d011      	beq.n	8006a6e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	781a      	ldrb	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a88:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d02c      	beq.n	8006aee <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691a      	ldr	r2, [r3, #16]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	b2d2      	uxtb	r2, r2
 8006aa0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d114      	bne.n	8006aee <I2C_SlaveReceive_RXNE+0x74>
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ac8:	d111      	bne.n	8006aee <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ad8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2222      	movs	r2, #34	; 0x22
 8006ade:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2228      	movs	r2, #40	; 0x28
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff f9af 	bl	8005e4c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006aee:	bf00      	nop
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b083      	sub	sp, #12
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d012      	beq.n	8006b2e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	691a      	ldr	r2, [r3, #16]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006b2e:	bf00      	nop
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006b44:	2300      	movs	r3, #0
 8006b46:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b54:	2b28      	cmp	r3, #40	; 0x28
 8006b56:	d127      	bne.n	8006ba8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b66:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	089b      	lsrs	r3, r3, #2
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006b74:	2301      	movs	r3, #1
 8006b76:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	09db      	lsrs	r3, r3, #7
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d103      	bne.n	8006b8c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	81bb      	strh	r3, [r7, #12]
 8006b8a:	e002      	b.n	8006b92 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006b9a:	89ba      	ldrh	r2, [r7, #12]
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff f95d 	bl	8005e60 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006ba6:	e008      	b.n	8006bba <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f06f 0202 	mvn.w	r2, #2
 8006bb0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006bba:	bf00      	nop
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006be2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006be4:	2300      	movs	r3, #0
 8006be6:	60bb      	str	r3, [r7, #8]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	60bb      	str	r3, [r7, #8]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0201 	orr.w	r2, r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c10:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c20:	d172      	bne.n	8006d08 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
 8006c24:	2b22      	cmp	r3, #34	; 0x22
 8006c26:	d002      	beq.n	8006c2e <I2C_Slave_STOPF+0x6a>
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c2c:	d135      	bne.n	8006c9a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d005      	beq.n	8006c52 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	f043 0204 	orr.w	r2, r3, #4
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c60:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fe f96a 	bl	8004f40 <HAL_DMA_GetState>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d049      	beq.n	8006d06 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c76:	4a69      	ldr	r2, [pc, #420]	; (8006e1c <I2C_Slave_STOPF+0x258>)
 8006c78:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fd ffb2 	bl	8004be8 <HAL_DMA_Abort_IT>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d03d      	beq.n	8006d06 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c94:	4610      	mov	r0, r2
 8006c96:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c98:	e035      	b.n	8006d06 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	f043 0204 	orr.w	r2, r3, #4
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ccc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fe f934 	bl	8004f40 <HAL_DMA_GetState>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d014      	beq.n	8006d08 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce2:	4a4e      	ldr	r2, [pc, #312]	; (8006e1c <I2C_Slave_STOPF+0x258>)
 8006ce4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fd ff7c 	bl	8004be8 <HAL_DMA_Abort_IT>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d008      	beq.n	8006d08 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d00:	4610      	mov	r0, r2
 8006d02:	4798      	blx	r3
 8006d04:	e000      	b.n	8006d08 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d06:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d03e      	beq.n	8006d90 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	2b04      	cmp	r3, #4
 8006d1e:	d112      	bne.n	8006d46 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	691a      	ldr	r2, [r3, #16]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d50:	2b40      	cmp	r3, #64	; 0x40
 8006d52:	d112      	bne.n	8006d7a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d005      	beq.n	8006d90 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d88:	f043 0204 	orr.w	r2, r3, #4
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d003      	beq.n	8006da0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f8b3 	bl	8006f04 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006d9e:	e039      	b.n	8006e14 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
 8006da2:	2b2a      	cmp	r3, #42	; 0x2a
 8006da4:	d109      	bne.n	8006dba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2228      	movs	r2, #40	; 0x28
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7ff f849 	bl	8005e4c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b28      	cmp	r3, #40	; 0x28
 8006dc4:	d111      	bne.n	8006dea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a15      	ldr	r2, [pc, #84]	; (8006e20 <I2C_Slave_STOPF+0x25c>)
 8006dca:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7ff f84a 	bl	8005e7c <HAL_I2C_ListenCpltCallback>
}
 8006de8:	e014      	b.n	8006e14 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dee:	2b22      	cmp	r3, #34	; 0x22
 8006df0:	d002      	beq.n	8006df8 <I2C_Slave_STOPF+0x234>
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	2b22      	cmp	r3, #34	; 0x22
 8006df6:	d10d      	bne.n	8006e14 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7ff f81c 	bl	8005e4c <HAL_I2C_SlaveRxCpltCallback>
}
 8006e14:	bf00      	nop
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	08007169 	.word	0x08007169
 8006e20:	ffff0000 	.word	0xffff0000

08006e24 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e32:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d002      	beq.n	8006e46 <I2C_Slave_AF+0x22>
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b20      	cmp	r3, #32
 8006e44:	d129      	bne.n	8006e9a <I2C_Slave_AF+0x76>
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
 8006e48:	2b28      	cmp	r3, #40	; 0x28
 8006e4a:	d126      	bne.n	8006e9a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a2c      	ldr	r2, [pc, #176]	; (8006f00 <I2C_Slave_AF+0xdc>)
 8006e50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e60:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e6a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e7a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fe fff2 	bl	8005e7c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006e98:	e02e      	b.n	8006ef8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	2b21      	cmp	r3, #33	; 0x21
 8006e9e:	d126      	bne.n	8006eee <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a17      	ldr	r2, [pc, #92]	; (8006f00 <I2C_Slave_AF+0xdc>)
 8006ea4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2221      	movs	r2, #33	; 0x21
 8006eaa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006eca:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ed4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fe ffa6 	bl	8005e38 <HAL_I2C_SlaveTxCpltCallback>
}
 8006eec:	e004      	b.n	8006ef8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ef6:	615a      	str	r2, [r3, #20]
}
 8006ef8:	bf00      	nop
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	ffff0000 	.word	0xffff0000

08006f04 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f12:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f1a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
 8006f1e:	2b10      	cmp	r3, #16
 8006f20:	d002      	beq.n	8006f28 <I2C_ITError+0x24>
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	d10a      	bne.n	8006f3e <I2C_ITError+0x3a>
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	2b22      	cmp	r3, #34	; 0x22
 8006f2c:	d107      	bne.n	8006f3e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f3c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f44:	2b28      	cmp	r3, #40	; 0x28
 8006f46:	d107      	bne.n	8006f58 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2228      	movs	r2, #40	; 0x28
 8006f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f56:	e015      	b.n	8006f84 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f66:	d00a      	beq.n	8006f7e <I2C_ITError+0x7a>
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	2b60      	cmp	r3, #96	; 0x60
 8006f6c:	d007      	beq.n	8006f7e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f92:	d162      	bne.n	800705a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fa2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d020      	beq.n	8006ff4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb6:	4a6a      	ldr	r2, [pc, #424]	; (8007160 <I2C_ITError+0x25c>)
 8006fb8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fd fe12 	bl	8004be8 <HAL_DMA_Abort_IT>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 8089 	beq.w	80070de <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0201 	bic.w	r2, r2, #1
 8006fda:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006fee:	4610      	mov	r0, r2
 8006ff0:	4798      	blx	r3
 8006ff2:	e074      	b.n	80070de <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff8:	4a59      	ldr	r2, [pc, #356]	; (8007160 <I2C_ITError+0x25c>)
 8006ffa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007000:	4618      	mov	r0, r3
 8007002:	f7fd fdf1 	bl	8004be8 <HAL_DMA_Abort_IT>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d068      	beq.n	80070de <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007016:	2b40      	cmp	r3, #64	; 0x40
 8007018:	d10b      	bne.n	8007032 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 0201 	bic.w	r2, r2, #1
 8007040:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2220      	movs	r2, #32
 8007046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007054:	4610      	mov	r0, r2
 8007056:	4798      	blx	r3
 8007058:	e041      	b.n	80070de <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b60      	cmp	r3, #96	; 0x60
 8007064:	d125      	bne.n	80070b2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2220      	movs	r2, #32
 800706a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707e:	2b40      	cmp	r3, #64	; 0x40
 8007080:	d10b      	bne.n	800709a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	691a      	ldr	r2, [r3, #16]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	b2d2      	uxtb	r2, r2
 800708e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	1c5a      	adds	r2, r3, #1
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0201 	bic.w	r2, r2, #1
 80070a8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7fe ff0e 	bl	8005ecc <HAL_I2C_AbortCpltCallback>
 80070b0:	e015      	b.n	80070de <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070bc:	2b40      	cmp	r3, #64	; 0x40
 80070be:	d10b      	bne.n	80070d8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691a      	ldr	r2, [r3, #16]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7fe feed 	bl	8005eb8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10e      	bne.n	800710c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d109      	bne.n	800710c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d104      	bne.n	800710c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007108:	2b00      	cmp	r3, #0
 800710a:	d007      	beq.n	800711c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800711a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007122:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b04      	cmp	r3, #4
 800712e:	d113      	bne.n	8007158 <I2C_ITError+0x254>
 8007130:	7bfb      	ldrb	r3, [r7, #15]
 8007132:	2b28      	cmp	r3, #40	; 0x28
 8007134:	d110      	bne.n	8007158 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a0a      	ldr	r2, [pc, #40]	; (8007164 <I2C_ITError+0x260>)
 800713a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2220      	movs	r2, #32
 8007146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fe fe92 	bl	8005e7c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007158:	bf00      	nop
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	08007169 	.word	0x08007169
 8007164:	ffff0000 	.word	0xffff0000

08007168 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007180:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007182:	4b4b      	ldr	r3, [pc, #300]	; (80072b0 <I2C_DMAAbort+0x148>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	08db      	lsrs	r3, r3, #3
 8007188:	4a4a      	ldr	r2, [pc, #296]	; (80072b4 <I2C_DMAAbort+0x14c>)
 800718a:	fba2 2303 	umull	r2, r3, r2, r3
 800718e:	0a1a      	lsrs	r2, r3, #8
 8007190:	4613      	mov	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	00da      	lsls	r2, r3, #3
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d106      	bne.n	80071b0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	f043 0220 	orr.w	r2, r3, #32
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80071ae:	e00a      	b.n	80071c6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3b01      	subs	r3, #1
 80071b4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071c4:	d0ea      	beq.n	800719c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d2:	2200      	movs	r2, #0
 80071d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	2200      	movs	r2, #0
 80071e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2200      	movs	r2, #0
 80071fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007208:	2200      	movs	r2, #0
 800720a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007218:	2200      	movs	r2, #0
 800721a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 0201 	bic.w	r2, r2, #1
 800722a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b60      	cmp	r3, #96	; 0x60
 8007236:	d10e      	bne.n	8007256 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2220      	movs	r2, #32
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2200      	movs	r2, #0
 800724c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800724e:	6978      	ldr	r0, [r7, #20]
 8007250:	f7fe fe3c 	bl	8005ecc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007254:	e027      	b.n	80072a6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007256:	7cfb      	ldrb	r3, [r7, #19]
 8007258:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800725c:	2b28      	cmp	r3, #40	; 0x28
 800725e:	d117      	bne.n	8007290 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0201 	orr.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800727e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	2200      	movs	r2, #0
 8007284:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	2228      	movs	r2, #40	; 0x28
 800728a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800728e:	e007      	b.n	80072a0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	2220      	movs	r2, #32
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80072a0:	6978      	ldr	r0, [r7, #20]
 80072a2:	f7fe fe09 	bl	8005eb8 <HAL_I2C_ErrorCallback>
}
 80072a6:	bf00      	nop
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20000018 	.word	0x20000018
 80072b4:	14f8b589 	.word	0x14f8b589

080072b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80072c4:	4b13      	ldr	r3, [pc, #76]	; (8007314 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	08db      	lsrs	r3, r3, #3
 80072ca:	4a13      	ldr	r2, [pc, #76]	; (8007318 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80072cc:	fba2 2303 	umull	r2, r3, r2, r3
 80072d0:	0a1a      	lsrs	r2, r3, #8
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	3b01      	subs	r3, #1
 80072de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d107      	bne.n	80072f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	f043 0220 	orr.w	r2, r3, #32
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e008      	b.n	8007308 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007304:	d0e9      	beq.n	80072da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	20000018 	.word	0x20000018
 8007318:	14f8b589 	.word	0x14f8b589

0800731c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800732c:	d103      	bne.n	8007336 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007334:	e007      	b.n	8007346 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800733e:	d102      	bne.n	8007346 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2208      	movs	r2, #8
 8007344:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007346:	bf00      	nop
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
	...

08007354 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e264      	b.n	8007830 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d075      	beq.n	800745e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007372:	4ba3      	ldr	r3, [pc, #652]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 030c 	and.w	r3, r3, #12
 800737a:	2b04      	cmp	r3, #4
 800737c:	d00c      	beq.n	8007398 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800737e:	4ba0      	ldr	r3, [pc, #640]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007386:	2b08      	cmp	r3, #8
 8007388:	d112      	bne.n	80073b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800738a:	4b9d      	ldr	r3, [pc, #628]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007396:	d10b      	bne.n	80073b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007398:	4b99      	ldr	r3, [pc, #612]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d05b      	beq.n	800745c <HAL_RCC_OscConfig+0x108>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d157      	bne.n	800745c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e23f      	b.n	8007830 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073b8:	d106      	bne.n	80073c8 <HAL_RCC_OscConfig+0x74>
 80073ba:	4b91      	ldr	r3, [pc, #580]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a90      	ldr	r2, [pc, #576]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	e01d      	b.n	8007404 <HAL_RCC_OscConfig+0xb0>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073d0:	d10c      	bne.n	80073ec <HAL_RCC_OscConfig+0x98>
 80073d2:	4b8b      	ldr	r3, [pc, #556]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a8a      	ldr	r2, [pc, #552]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073dc:	6013      	str	r3, [r2, #0]
 80073de:	4b88      	ldr	r3, [pc, #544]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a87      	ldr	r2, [pc, #540]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073e8:	6013      	str	r3, [r2, #0]
 80073ea:	e00b      	b.n	8007404 <HAL_RCC_OscConfig+0xb0>
 80073ec:	4b84      	ldr	r3, [pc, #528]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a83      	ldr	r2, [pc, #524]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073f6:	6013      	str	r3, [r2, #0]
 80073f8:	4b81      	ldr	r3, [pc, #516]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a80      	ldr	r2, [pc, #512]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d013      	beq.n	8007434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800740c:	f7fd f958 	bl	80046c0 <HAL_GetTick>
 8007410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007412:	e008      	b.n	8007426 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007414:	f7fd f954 	bl	80046c0 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b64      	cmp	r3, #100	; 0x64
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e204      	b.n	8007830 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007426:	4b76      	ldr	r3, [pc, #472]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0f0      	beq.n	8007414 <HAL_RCC_OscConfig+0xc0>
 8007432:	e014      	b.n	800745e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007434:	f7fd f944 	bl	80046c0 <HAL_GetTick>
 8007438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800743a:	e008      	b.n	800744e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800743c:	f7fd f940 	bl	80046c0 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b64      	cmp	r3, #100	; 0x64
 8007448:	d901      	bls.n	800744e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e1f0      	b.n	8007830 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800744e:	4b6c      	ldr	r3, [pc, #432]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1f0      	bne.n	800743c <HAL_RCC_OscConfig+0xe8>
 800745a:	e000      	b.n	800745e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800745c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d063      	beq.n	8007532 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800746a:	4b65      	ldr	r3, [pc, #404]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f003 030c 	and.w	r3, r3, #12
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00b      	beq.n	800748e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007476:	4b62      	ldr	r3, [pc, #392]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800747e:	2b08      	cmp	r3, #8
 8007480:	d11c      	bne.n	80074bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007482:	4b5f      	ldr	r3, [pc, #380]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d116      	bne.n	80074bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800748e:	4b5c      	ldr	r3, [pc, #368]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <HAL_RCC_OscConfig+0x152>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d001      	beq.n	80074a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e1c4      	b.n	8007830 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074a6:	4b56      	ldr	r3, [pc, #344]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	4952      	ldr	r1, [pc, #328]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074ba:	e03a      	b.n	8007532 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d020      	beq.n	8007506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074c4:	4b4f      	ldr	r3, [pc, #316]	; (8007604 <HAL_RCC_OscConfig+0x2b0>)
 80074c6:	2201      	movs	r2, #1
 80074c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ca:	f7fd f8f9 	bl	80046c0 <HAL_GetTick>
 80074ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074d0:	e008      	b.n	80074e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074d2:	f7fd f8f5 	bl	80046c0 <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d901      	bls.n	80074e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e1a5      	b.n	8007830 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074e4:	4b46      	ldr	r3, [pc, #280]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d0f0      	beq.n	80074d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074f0:	4b43      	ldr	r3, [pc, #268]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	4940      	ldr	r1, [pc, #256]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007500:	4313      	orrs	r3, r2
 8007502:	600b      	str	r3, [r1, #0]
 8007504:	e015      	b.n	8007532 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007506:	4b3f      	ldr	r3, [pc, #252]	; (8007604 <HAL_RCC_OscConfig+0x2b0>)
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800750c:	f7fd f8d8 	bl	80046c0 <HAL_GetTick>
 8007510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007512:	e008      	b.n	8007526 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007514:	f7fd f8d4 	bl	80046c0 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b02      	cmp	r3, #2
 8007520:	d901      	bls.n	8007526 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e184      	b.n	8007830 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007526:	4b36      	ldr	r3, [pc, #216]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1f0      	bne.n	8007514 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0308 	and.w	r3, r3, #8
 800753a:	2b00      	cmp	r3, #0
 800753c:	d030      	beq.n	80075a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d016      	beq.n	8007574 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007546:	4b30      	ldr	r3, [pc, #192]	; (8007608 <HAL_RCC_OscConfig+0x2b4>)
 8007548:	2201      	movs	r2, #1
 800754a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800754c:	f7fd f8b8 	bl	80046c0 <HAL_GetTick>
 8007550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007552:	e008      	b.n	8007566 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007554:	f7fd f8b4 	bl	80046c0 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	2b02      	cmp	r3, #2
 8007560:	d901      	bls.n	8007566 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e164      	b.n	8007830 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007566:	4b26      	ldr	r3, [pc, #152]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800756a:	f003 0302 	and.w	r3, r3, #2
 800756e:	2b00      	cmp	r3, #0
 8007570:	d0f0      	beq.n	8007554 <HAL_RCC_OscConfig+0x200>
 8007572:	e015      	b.n	80075a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007574:	4b24      	ldr	r3, [pc, #144]	; (8007608 <HAL_RCC_OscConfig+0x2b4>)
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800757a:	f7fd f8a1 	bl	80046c0 <HAL_GetTick>
 800757e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007580:	e008      	b.n	8007594 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007582:	f7fd f89d 	bl	80046c0 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	2b02      	cmp	r3, #2
 800758e:	d901      	bls.n	8007594 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e14d      	b.n	8007830 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007594:	4b1a      	ldr	r3, [pc, #104]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1f0      	bne.n	8007582 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 80a0 	beq.w	80076ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075ae:	2300      	movs	r3, #0
 80075b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075b2:	4b13      	ldr	r3, [pc, #76]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10f      	bne.n	80075de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075be:	2300      	movs	r3, #0
 80075c0:	60bb      	str	r3, [r7, #8]
 80075c2:	4b0f      	ldr	r3, [pc, #60]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	4a0e      	ldr	r2, [pc, #56]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80075c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075cc:	6413      	str	r3, [r2, #64]	; 0x40
 80075ce:	4b0c      	ldr	r3, [pc, #48]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075d6:	60bb      	str	r3, [r7, #8]
 80075d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075da:	2301      	movs	r3, #1
 80075dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075de:	4b0b      	ldr	r3, [pc, #44]	; (800760c <HAL_RCC_OscConfig+0x2b8>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d121      	bne.n	800762e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075ea:	4b08      	ldr	r3, [pc, #32]	; (800760c <HAL_RCC_OscConfig+0x2b8>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a07      	ldr	r2, [pc, #28]	; (800760c <HAL_RCC_OscConfig+0x2b8>)
 80075f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075f6:	f7fd f863 	bl	80046c0 <HAL_GetTick>
 80075fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075fc:	e011      	b.n	8007622 <HAL_RCC_OscConfig+0x2ce>
 80075fe:	bf00      	nop
 8007600:	40023800 	.word	0x40023800
 8007604:	42470000 	.word	0x42470000
 8007608:	42470e80 	.word	0x42470e80
 800760c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007610:	f7fd f856 	bl	80046c0 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b02      	cmp	r3, #2
 800761c:	d901      	bls.n	8007622 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e106      	b.n	8007830 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007622:	4b85      	ldr	r3, [pc, #532]	; (8007838 <HAL_RCC_OscConfig+0x4e4>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800762a:	2b00      	cmp	r3, #0
 800762c:	d0f0      	beq.n	8007610 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d106      	bne.n	8007644 <HAL_RCC_OscConfig+0x2f0>
 8007636:	4b81      	ldr	r3, [pc, #516]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 8007638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763a:	4a80      	ldr	r2, [pc, #512]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 800763c:	f043 0301 	orr.w	r3, r3, #1
 8007640:	6713      	str	r3, [r2, #112]	; 0x70
 8007642:	e01c      	b.n	800767e <HAL_RCC_OscConfig+0x32a>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	2b05      	cmp	r3, #5
 800764a:	d10c      	bne.n	8007666 <HAL_RCC_OscConfig+0x312>
 800764c:	4b7b      	ldr	r3, [pc, #492]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 800764e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007650:	4a7a      	ldr	r2, [pc, #488]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 8007652:	f043 0304 	orr.w	r3, r3, #4
 8007656:	6713      	str	r3, [r2, #112]	; 0x70
 8007658:	4b78      	ldr	r3, [pc, #480]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 800765a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800765c:	4a77      	ldr	r2, [pc, #476]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 800765e:	f043 0301 	orr.w	r3, r3, #1
 8007662:	6713      	str	r3, [r2, #112]	; 0x70
 8007664:	e00b      	b.n	800767e <HAL_RCC_OscConfig+0x32a>
 8007666:	4b75      	ldr	r3, [pc, #468]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 8007668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800766a:	4a74      	ldr	r2, [pc, #464]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 800766c:	f023 0301 	bic.w	r3, r3, #1
 8007670:	6713      	str	r3, [r2, #112]	; 0x70
 8007672:	4b72      	ldr	r3, [pc, #456]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 8007674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007676:	4a71      	ldr	r2, [pc, #452]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 8007678:	f023 0304 	bic.w	r3, r3, #4
 800767c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d015      	beq.n	80076b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007686:	f7fd f81b 	bl	80046c0 <HAL_GetTick>
 800768a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800768c:	e00a      	b.n	80076a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800768e:	f7fd f817 	bl	80046c0 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	f241 3288 	movw	r2, #5000	; 0x1388
 800769c:	4293      	cmp	r3, r2
 800769e:	d901      	bls.n	80076a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e0c5      	b.n	8007830 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076a4:	4b65      	ldr	r3, [pc, #404]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 80076a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d0ee      	beq.n	800768e <HAL_RCC_OscConfig+0x33a>
 80076b0:	e014      	b.n	80076dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076b2:	f7fd f805 	bl	80046c0 <HAL_GetTick>
 80076b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076b8:	e00a      	b.n	80076d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076ba:	f7fd f801 	bl	80046c0 <HAL_GetTick>
 80076be:	4602      	mov	r2, r0
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d901      	bls.n	80076d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e0af      	b.n	8007830 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076d0:	4b5a      	ldr	r3, [pc, #360]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 80076d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1ee      	bne.n	80076ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d105      	bne.n	80076ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076e2:	4b56      	ldr	r3, [pc, #344]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	4a55      	ldr	r2, [pc, #340]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 80076e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 809b 	beq.w	800782e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076f8:	4b50      	ldr	r3, [pc, #320]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f003 030c 	and.w	r3, r3, #12
 8007700:	2b08      	cmp	r3, #8
 8007702:	d05c      	beq.n	80077be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	2b02      	cmp	r3, #2
 800770a:	d141      	bne.n	8007790 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800770c:	4b4c      	ldr	r3, [pc, #304]	; (8007840 <HAL_RCC_OscConfig+0x4ec>)
 800770e:	2200      	movs	r2, #0
 8007710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007712:	f7fc ffd5 	bl	80046c0 <HAL_GetTick>
 8007716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007718:	e008      	b.n	800772c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800771a:	f7fc ffd1 	bl	80046c0 <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	2b02      	cmp	r3, #2
 8007726:	d901      	bls.n	800772c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e081      	b.n	8007830 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800772c:	4b43      	ldr	r3, [pc, #268]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1f0      	bne.n	800771a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	69da      	ldr	r2, [r3, #28]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a1b      	ldr	r3, [r3, #32]
 8007740:	431a      	orrs	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	019b      	lsls	r3, r3, #6
 8007748:	431a      	orrs	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774e:	085b      	lsrs	r3, r3, #1
 8007750:	3b01      	subs	r3, #1
 8007752:	041b      	lsls	r3, r3, #16
 8007754:	431a      	orrs	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775a:	061b      	lsls	r3, r3, #24
 800775c:	4937      	ldr	r1, [pc, #220]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 800775e:	4313      	orrs	r3, r2
 8007760:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007762:	4b37      	ldr	r3, [pc, #220]	; (8007840 <HAL_RCC_OscConfig+0x4ec>)
 8007764:	2201      	movs	r2, #1
 8007766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007768:	f7fc ffaa 	bl	80046c0 <HAL_GetTick>
 800776c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800776e:	e008      	b.n	8007782 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007770:	f7fc ffa6 	bl	80046c0 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b02      	cmp	r3, #2
 800777c:	d901      	bls.n	8007782 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e056      	b.n	8007830 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007782:	4b2e      	ldr	r3, [pc, #184]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0f0      	beq.n	8007770 <HAL_RCC_OscConfig+0x41c>
 800778e:	e04e      	b.n	800782e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007790:	4b2b      	ldr	r3, [pc, #172]	; (8007840 <HAL_RCC_OscConfig+0x4ec>)
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007796:	f7fc ff93 	bl	80046c0 <HAL_GetTick>
 800779a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800779c:	e008      	b.n	80077b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800779e:	f7fc ff8f 	bl	80046c0 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d901      	bls.n	80077b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e03f      	b.n	8007830 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077b0:	4b22      	ldr	r3, [pc, #136]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1f0      	bne.n	800779e <HAL_RCC_OscConfig+0x44a>
 80077bc:	e037      	b.n	800782e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d101      	bne.n	80077ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e032      	b.n	8007830 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80077ca:	4b1c      	ldr	r3, [pc, #112]	; (800783c <HAL_RCC_OscConfig+0x4e8>)
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d028      	beq.n	800782a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d121      	bne.n	800782a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d11a      	bne.n	800782a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80077fa:	4013      	ands	r3, r2
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007800:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007802:	4293      	cmp	r3, r2
 8007804:	d111      	bne.n	800782a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007810:	085b      	lsrs	r3, r3, #1
 8007812:	3b01      	subs	r3, #1
 8007814:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007816:	429a      	cmp	r2, r3
 8007818:	d107      	bne.n	800782a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007826:	429a      	cmp	r2, r3
 8007828:	d001      	beq.n	800782e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e000      	b.n	8007830 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3718      	adds	r7, #24
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	40007000 	.word	0x40007000
 800783c:	40023800 	.word	0x40023800
 8007840:	42470060 	.word	0x42470060

08007844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e0cc      	b.n	80079f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007858:	4b68      	ldr	r3, [pc, #416]	; (80079fc <HAL_RCC_ClockConfig+0x1b8>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0307 	and.w	r3, r3, #7
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	429a      	cmp	r2, r3
 8007864:	d90c      	bls.n	8007880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007866:	4b65      	ldr	r3, [pc, #404]	; (80079fc <HAL_RCC_ClockConfig+0x1b8>)
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	b2d2      	uxtb	r2, r2
 800786c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800786e:	4b63      	ldr	r3, [pc, #396]	; (80079fc <HAL_RCC_ClockConfig+0x1b8>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0307 	and.w	r3, r3, #7
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	429a      	cmp	r2, r3
 800787a:	d001      	beq.n	8007880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e0b8      	b.n	80079f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	2b00      	cmp	r3, #0
 800788a:	d020      	beq.n	80078ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0304 	and.w	r3, r3, #4
 8007894:	2b00      	cmp	r3, #0
 8007896:	d005      	beq.n	80078a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007898:	4b59      	ldr	r3, [pc, #356]	; (8007a00 <HAL_RCC_ClockConfig+0x1bc>)
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	4a58      	ldr	r2, [pc, #352]	; (8007a00 <HAL_RCC_ClockConfig+0x1bc>)
 800789e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80078a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0308 	and.w	r3, r3, #8
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d005      	beq.n	80078bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078b0:	4b53      	ldr	r3, [pc, #332]	; (8007a00 <HAL_RCC_ClockConfig+0x1bc>)
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	4a52      	ldr	r2, [pc, #328]	; (8007a00 <HAL_RCC_ClockConfig+0x1bc>)
 80078b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80078ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078bc:	4b50      	ldr	r3, [pc, #320]	; (8007a00 <HAL_RCC_ClockConfig+0x1bc>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	494d      	ldr	r1, [pc, #308]	; (8007a00 <HAL_RCC_ClockConfig+0x1bc>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d044      	beq.n	8007964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d107      	bne.n	80078f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078e2:	4b47      	ldr	r3, [pc, #284]	; (8007a00 <HAL_RCC_ClockConfig+0x1bc>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d119      	bne.n	8007922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e07f      	b.n	80079f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d003      	beq.n	8007902 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d107      	bne.n	8007912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007902:	4b3f      	ldr	r3, [pc, #252]	; (8007a00 <HAL_RCC_ClockConfig+0x1bc>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d109      	bne.n	8007922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e06f      	b.n	80079f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007912:	4b3b      	ldr	r3, [pc, #236]	; (8007a00 <HAL_RCC_ClockConfig+0x1bc>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e067      	b.n	80079f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007922:	4b37      	ldr	r3, [pc, #220]	; (8007a00 <HAL_RCC_ClockConfig+0x1bc>)
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f023 0203 	bic.w	r2, r3, #3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	4934      	ldr	r1, [pc, #208]	; (8007a00 <HAL_RCC_ClockConfig+0x1bc>)
 8007930:	4313      	orrs	r3, r2
 8007932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007934:	f7fc fec4 	bl	80046c0 <HAL_GetTick>
 8007938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800793a:	e00a      	b.n	8007952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800793c:	f7fc fec0 	bl	80046c0 <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	f241 3288 	movw	r2, #5000	; 0x1388
 800794a:	4293      	cmp	r3, r2
 800794c:	d901      	bls.n	8007952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e04f      	b.n	80079f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007952:	4b2b      	ldr	r3, [pc, #172]	; (8007a00 <HAL_RCC_ClockConfig+0x1bc>)
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f003 020c 	and.w	r2, r3, #12
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	429a      	cmp	r2, r3
 8007962:	d1eb      	bne.n	800793c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007964:	4b25      	ldr	r3, [pc, #148]	; (80079fc <HAL_RCC_ClockConfig+0x1b8>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0307 	and.w	r3, r3, #7
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	429a      	cmp	r2, r3
 8007970:	d20c      	bcs.n	800798c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007972:	4b22      	ldr	r3, [pc, #136]	; (80079fc <HAL_RCC_ClockConfig+0x1b8>)
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	b2d2      	uxtb	r2, r2
 8007978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800797a:	4b20      	ldr	r3, [pc, #128]	; (80079fc <HAL_RCC_ClockConfig+0x1b8>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0307 	and.w	r3, r3, #7
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	429a      	cmp	r2, r3
 8007986:	d001      	beq.n	800798c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e032      	b.n	80079f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	2b00      	cmp	r3, #0
 8007996:	d008      	beq.n	80079aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007998:	4b19      	ldr	r3, [pc, #100]	; (8007a00 <HAL_RCC_ClockConfig+0x1bc>)
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	4916      	ldr	r1, [pc, #88]	; (8007a00 <HAL_RCC_ClockConfig+0x1bc>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0308 	and.w	r3, r3, #8
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d009      	beq.n	80079ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079b6:	4b12      	ldr	r3, [pc, #72]	; (8007a00 <HAL_RCC_ClockConfig+0x1bc>)
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	00db      	lsls	r3, r3, #3
 80079c4:	490e      	ldr	r1, [pc, #56]	; (8007a00 <HAL_RCC_ClockConfig+0x1bc>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80079ca:	f000 f821 	bl	8007a10 <HAL_RCC_GetSysClockFreq>
 80079ce:	4602      	mov	r2, r0
 80079d0:	4b0b      	ldr	r3, [pc, #44]	; (8007a00 <HAL_RCC_ClockConfig+0x1bc>)
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	091b      	lsrs	r3, r3, #4
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	490a      	ldr	r1, [pc, #40]	; (8007a04 <HAL_RCC_ClockConfig+0x1c0>)
 80079dc:	5ccb      	ldrb	r3, [r1, r3]
 80079de:	fa22 f303 	lsr.w	r3, r2, r3
 80079e2:	4a09      	ldr	r2, [pc, #36]	; (8007a08 <HAL_RCC_ClockConfig+0x1c4>)
 80079e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80079e6:	4b09      	ldr	r3, [pc, #36]	; (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fc fe24 	bl	8004638 <HAL_InitTick>

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	40023c00 	.word	0x40023c00
 8007a00:	40023800 	.word	0x40023800
 8007a04:	0800a0ec 	.word	0x0800a0ec
 8007a08:	20000018 	.word	0x20000018
 8007a0c:	2000001c 	.word	0x2000001c

08007a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	607b      	str	r3, [r7, #4]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	2300      	movs	r3, #0
 8007a22:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a28:	4b67      	ldr	r3, [pc, #412]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f003 030c 	and.w	r3, r3, #12
 8007a30:	2b08      	cmp	r3, #8
 8007a32:	d00d      	beq.n	8007a50 <HAL_RCC_GetSysClockFreq+0x40>
 8007a34:	2b08      	cmp	r3, #8
 8007a36:	f200 80bd 	bhi.w	8007bb4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <HAL_RCC_GetSysClockFreq+0x34>
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d003      	beq.n	8007a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8007a42:	e0b7      	b.n	8007bb4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a44:	4b61      	ldr	r3, [pc, #388]	; (8007bcc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007a46:	60bb      	str	r3, [r7, #8]
       break;
 8007a48:	e0b7      	b.n	8007bba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a4a:	4b61      	ldr	r3, [pc, #388]	; (8007bd0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007a4c:	60bb      	str	r3, [r7, #8]
      break;
 8007a4e:	e0b4      	b.n	8007bba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a50:	4b5d      	ldr	r3, [pc, #372]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a5a:	4b5b      	ldr	r3, [pc, #364]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d04d      	beq.n	8007b02 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a66:	4b58      	ldr	r3, [pc, #352]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	099b      	lsrs	r3, r3, #6
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	f04f 0300 	mov.w	r3, #0
 8007a72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007a76:	f04f 0100 	mov.w	r1, #0
 8007a7a:	ea02 0800 	and.w	r8, r2, r0
 8007a7e:	ea03 0901 	and.w	r9, r3, r1
 8007a82:	4640      	mov	r0, r8
 8007a84:	4649      	mov	r1, r9
 8007a86:	f04f 0200 	mov.w	r2, #0
 8007a8a:	f04f 0300 	mov.w	r3, #0
 8007a8e:	014b      	lsls	r3, r1, #5
 8007a90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007a94:	0142      	lsls	r2, r0, #5
 8007a96:	4610      	mov	r0, r2
 8007a98:	4619      	mov	r1, r3
 8007a9a:	ebb0 0008 	subs.w	r0, r0, r8
 8007a9e:	eb61 0109 	sbc.w	r1, r1, r9
 8007aa2:	f04f 0200 	mov.w	r2, #0
 8007aa6:	f04f 0300 	mov.w	r3, #0
 8007aaa:	018b      	lsls	r3, r1, #6
 8007aac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007ab0:	0182      	lsls	r2, r0, #6
 8007ab2:	1a12      	subs	r2, r2, r0
 8007ab4:	eb63 0301 	sbc.w	r3, r3, r1
 8007ab8:	f04f 0000 	mov.w	r0, #0
 8007abc:	f04f 0100 	mov.w	r1, #0
 8007ac0:	00d9      	lsls	r1, r3, #3
 8007ac2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ac6:	00d0      	lsls	r0, r2, #3
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	eb12 0208 	adds.w	r2, r2, r8
 8007ad0:	eb43 0309 	adc.w	r3, r3, r9
 8007ad4:	f04f 0000 	mov.w	r0, #0
 8007ad8:	f04f 0100 	mov.w	r1, #0
 8007adc:	0259      	lsls	r1, r3, #9
 8007ade:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007ae2:	0250      	lsls	r0, r2, #9
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4610      	mov	r0, r2
 8007aea:	4619      	mov	r1, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	461a      	mov	r2, r3
 8007af0:	f04f 0300 	mov.w	r3, #0
 8007af4:	f7f9 f95a 	bl	8000dac <__aeabi_uldivmod>
 8007af8:	4602      	mov	r2, r0
 8007afa:	460b      	mov	r3, r1
 8007afc:	4613      	mov	r3, r2
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	e04a      	b.n	8007b98 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b02:	4b31      	ldr	r3, [pc, #196]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	099b      	lsrs	r3, r3, #6
 8007b08:	461a      	mov	r2, r3
 8007b0a:	f04f 0300 	mov.w	r3, #0
 8007b0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007b12:	f04f 0100 	mov.w	r1, #0
 8007b16:	ea02 0400 	and.w	r4, r2, r0
 8007b1a:	ea03 0501 	and.w	r5, r3, r1
 8007b1e:	4620      	mov	r0, r4
 8007b20:	4629      	mov	r1, r5
 8007b22:	f04f 0200 	mov.w	r2, #0
 8007b26:	f04f 0300 	mov.w	r3, #0
 8007b2a:	014b      	lsls	r3, r1, #5
 8007b2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007b30:	0142      	lsls	r2, r0, #5
 8007b32:	4610      	mov	r0, r2
 8007b34:	4619      	mov	r1, r3
 8007b36:	1b00      	subs	r0, r0, r4
 8007b38:	eb61 0105 	sbc.w	r1, r1, r5
 8007b3c:	f04f 0200 	mov.w	r2, #0
 8007b40:	f04f 0300 	mov.w	r3, #0
 8007b44:	018b      	lsls	r3, r1, #6
 8007b46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007b4a:	0182      	lsls	r2, r0, #6
 8007b4c:	1a12      	subs	r2, r2, r0
 8007b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8007b52:	f04f 0000 	mov.w	r0, #0
 8007b56:	f04f 0100 	mov.w	r1, #0
 8007b5a:	00d9      	lsls	r1, r3, #3
 8007b5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b60:	00d0      	lsls	r0, r2, #3
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	1912      	adds	r2, r2, r4
 8007b68:	eb45 0303 	adc.w	r3, r5, r3
 8007b6c:	f04f 0000 	mov.w	r0, #0
 8007b70:	f04f 0100 	mov.w	r1, #0
 8007b74:	0299      	lsls	r1, r3, #10
 8007b76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007b7a:	0290      	lsls	r0, r2, #10
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4610      	mov	r0, r2
 8007b82:	4619      	mov	r1, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	461a      	mov	r2, r3
 8007b88:	f04f 0300 	mov.w	r3, #0
 8007b8c:	f7f9 f90e 	bl	8000dac <__aeabi_uldivmod>
 8007b90:	4602      	mov	r2, r0
 8007b92:	460b      	mov	r3, r1
 8007b94:	4613      	mov	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b98:	4b0b      	ldr	r3, [pc, #44]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	0c1b      	lsrs	r3, r3, #16
 8007b9e:	f003 0303 	and.w	r3, r3, #3
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb0:	60bb      	str	r3, [r7, #8]
      break;
 8007bb2:	e002      	b.n	8007bba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007bb4:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007bb6:	60bb      	str	r3, [r7, #8]
      break;
 8007bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007bba:	68bb      	ldr	r3, [r7, #8]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007bc6:	bf00      	nop
 8007bc8:	40023800 	.word	0x40023800
 8007bcc:	00f42400 	.word	0x00f42400
 8007bd0:	007a1200 	.word	0x007a1200

08007bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007bd8:	4b03      	ldr	r3, [pc, #12]	; (8007be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007bda:	681b      	ldr	r3, [r3, #0]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	20000018 	.word	0x20000018

08007bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007bf0:	f7ff fff0 	bl	8007bd4 <HAL_RCC_GetHCLKFreq>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	4b05      	ldr	r3, [pc, #20]	; (8007c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	0a9b      	lsrs	r3, r3, #10
 8007bfc:	f003 0307 	and.w	r3, r3, #7
 8007c00:	4903      	ldr	r1, [pc, #12]	; (8007c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c02:	5ccb      	ldrb	r3, [r1, r3]
 8007c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	40023800 	.word	0x40023800
 8007c10:	0800a0fc 	.word	0x0800a0fc

08007c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007c18:	f7ff ffdc 	bl	8007bd4 <HAL_RCC_GetHCLKFreq>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	0b5b      	lsrs	r3, r3, #13
 8007c24:	f003 0307 	and.w	r3, r3, #7
 8007c28:	4903      	ldr	r1, [pc, #12]	; (8007c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c2a:	5ccb      	ldrb	r3, [r1, r3]
 8007c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	40023800 	.word	0x40023800
 8007c38:	0800a0fc 	.word	0x0800a0fc

08007c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e041      	b.n	8007cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d106      	bne.n	8007c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7fc faaa 	bl	80041bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	f000 fdda 	bl	8008834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d001      	beq.n	8007cf4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e03c      	b.n	8007d6e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a1e      	ldr	r2, [pc, #120]	; (8007d7c <HAL_TIM_Base_Start+0xa0>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d018      	beq.n	8007d38 <HAL_TIM_Base_Start+0x5c>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d0e:	d013      	beq.n	8007d38 <HAL_TIM_Base_Start+0x5c>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a1a      	ldr	r2, [pc, #104]	; (8007d80 <HAL_TIM_Base_Start+0xa4>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d00e      	beq.n	8007d38 <HAL_TIM_Base_Start+0x5c>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a19      	ldr	r2, [pc, #100]	; (8007d84 <HAL_TIM_Base_Start+0xa8>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d009      	beq.n	8007d38 <HAL_TIM_Base_Start+0x5c>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a17      	ldr	r2, [pc, #92]	; (8007d88 <HAL_TIM_Base_Start+0xac>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d004      	beq.n	8007d38 <HAL_TIM_Base_Start+0x5c>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a16      	ldr	r2, [pc, #88]	; (8007d8c <HAL_TIM_Base_Start+0xb0>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d111      	bne.n	8007d5c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f003 0307 	and.w	r3, r3, #7
 8007d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b06      	cmp	r3, #6
 8007d48:	d010      	beq.n	8007d6c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f042 0201 	orr.w	r2, r2, #1
 8007d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d5a:	e007      	b.n	8007d6c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f042 0201 	orr.w	r2, r2, #1
 8007d6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	40010000 	.word	0x40010000
 8007d80:	40000400 	.word	0x40000400
 8007d84:	40000800 	.word	0x40000800
 8007d88:	40000c00 	.word	0x40000c00
 8007d8c:	40014000 	.word	0x40014000

08007d90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d001      	beq.n	8007da8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e044      	b.n	8007e32 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2202      	movs	r2, #2
 8007dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68da      	ldr	r2, [r3, #12]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f042 0201 	orr.w	r2, r2, #1
 8007dbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a1e      	ldr	r2, [pc, #120]	; (8007e40 <HAL_TIM_Base_Start_IT+0xb0>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d018      	beq.n	8007dfc <HAL_TIM_Base_Start_IT+0x6c>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd2:	d013      	beq.n	8007dfc <HAL_TIM_Base_Start_IT+0x6c>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a1a      	ldr	r2, [pc, #104]	; (8007e44 <HAL_TIM_Base_Start_IT+0xb4>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d00e      	beq.n	8007dfc <HAL_TIM_Base_Start_IT+0x6c>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a19      	ldr	r2, [pc, #100]	; (8007e48 <HAL_TIM_Base_Start_IT+0xb8>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d009      	beq.n	8007dfc <HAL_TIM_Base_Start_IT+0x6c>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a17      	ldr	r2, [pc, #92]	; (8007e4c <HAL_TIM_Base_Start_IT+0xbc>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d004      	beq.n	8007dfc <HAL_TIM_Base_Start_IT+0x6c>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a16      	ldr	r2, [pc, #88]	; (8007e50 <HAL_TIM_Base_Start_IT+0xc0>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d111      	bne.n	8007e20 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f003 0307 	and.w	r3, r3, #7
 8007e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2b06      	cmp	r3, #6
 8007e0c:	d010      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f042 0201 	orr.w	r2, r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e1e:	e007      	b.n	8007e30 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0201 	orr.w	r2, r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	40010000 	.word	0x40010000
 8007e44:	40000400 	.word	0x40000400
 8007e48:	40000800 	.word	0x40000800
 8007e4c:	40000c00 	.word	0x40000c00
 8007e50:	40014000 	.word	0x40014000

08007e54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e041      	b.n	8007eea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d106      	bne.n	8007e80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f839 	bl	8007ef2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3304      	adds	r3, #4
 8007e90:	4619      	mov	r1, r3
 8007e92:	4610      	mov	r0, r2
 8007e94:	f000 fcce 	bl	8008834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b083      	sub	sp, #12
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007efa:	bf00      	nop
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
	...

08007f08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d109      	bne.n	8007f2c <HAL_TIM_PWM_Start+0x24>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	bf14      	ite	ne
 8007f24:	2301      	movne	r3, #1
 8007f26:	2300      	moveq	r3, #0
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	e022      	b.n	8007f72 <HAL_TIM_PWM_Start+0x6a>
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b04      	cmp	r3, #4
 8007f30:	d109      	bne.n	8007f46 <HAL_TIM_PWM_Start+0x3e>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	bf14      	ite	ne
 8007f3e:	2301      	movne	r3, #1
 8007f40:	2300      	moveq	r3, #0
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	e015      	b.n	8007f72 <HAL_TIM_PWM_Start+0x6a>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b08      	cmp	r3, #8
 8007f4a:	d109      	bne.n	8007f60 <HAL_TIM_PWM_Start+0x58>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	bf14      	ite	ne
 8007f58:	2301      	movne	r3, #1
 8007f5a:	2300      	moveq	r3, #0
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	e008      	b.n	8007f72 <HAL_TIM_PWM_Start+0x6a>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	bf14      	ite	ne
 8007f6c:	2301      	movne	r3, #1
 8007f6e:	2300      	moveq	r3, #0
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e068      	b.n	800804c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d104      	bne.n	8007f8a <HAL_TIM_PWM_Start+0x82>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2202      	movs	r2, #2
 8007f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f88:	e013      	b.n	8007fb2 <HAL_TIM_PWM_Start+0xaa>
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	2b04      	cmp	r3, #4
 8007f8e:	d104      	bne.n	8007f9a <HAL_TIM_PWM_Start+0x92>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f98:	e00b      	b.n	8007fb2 <HAL_TIM_PWM_Start+0xaa>
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d104      	bne.n	8007faa <HAL_TIM_PWM_Start+0xa2>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fa8:	e003      	b.n	8007fb2 <HAL_TIM_PWM_Start+0xaa>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2202      	movs	r2, #2
 8007fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fee0 	bl	8008d80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a23      	ldr	r2, [pc, #140]	; (8008054 <HAL_TIM_PWM_Start+0x14c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d107      	bne.n	8007fda <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a1d      	ldr	r2, [pc, #116]	; (8008054 <HAL_TIM_PWM_Start+0x14c>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d018      	beq.n	8008016 <HAL_TIM_PWM_Start+0x10e>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fec:	d013      	beq.n	8008016 <HAL_TIM_PWM_Start+0x10e>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a19      	ldr	r2, [pc, #100]	; (8008058 <HAL_TIM_PWM_Start+0x150>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d00e      	beq.n	8008016 <HAL_TIM_PWM_Start+0x10e>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a17      	ldr	r2, [pc, #92]	; (800805c <HAL_TIM_PWM_Start+0x154>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d009      	beq.n	8008016 <HAL_TIM_PWM_Start+0x10e>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a16      	ldr	r2, [pc, #88]	; (8008060 <HAL_TIM_PWM_Start+0x158>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d004      	beq.n	8008016 <HAL_TIM_PWM_Start+0x10e>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a14      	ldr	r2, [pc, #80]	; (8008064 <HAL_TIM_PWM_Start+0x15c>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d111      	bne.n	800803a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f003 0307 	and.w	r3, r3, #7
 8008020:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2b06      	cmp	r3, #6
 8008026:	d010      	beq.n	800804a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0201 	orr.w	r2, r2, #1
 8008036:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008038:	e007      	b.n	800804a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f042 0201 	orr.w	r2, r2, #1
 8008048:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	40010000 	.word	0x40010000
 8008058:	40000400 	.word	0x40000400
 800805c:	40000800 	.word	0x40000800
 8008060:	40000c00 	.word	0x40000c00
 8008064:	40014000 	.word	0x40014000

08008068 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e097      	b.n	80081ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b00      	cmp	r3, #0
 8008086:	d106      	bne.n	8008096 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7fc f84b 	bl	800412c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2202      	movs	r2, #2
 800809a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	6812      	ldr	r2, [r2, #0]
 80080a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080ac:	f023 0307 	bic.w	r3, r3, #7
 80080b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	3304      	adds	r3, #4
 80080ba:	4619      	mov	r1, r3
 80080bc:	4610      	mov	r0, r2
 80080be:	f000 fbb9 	bl	8008834 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080ea:	f023 0303 	bic.w	r3, r3, #3
 80080ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	689a      	ldr	r2, [r3, #8]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	021b      	lsls	r3, r3, #8
 80080fa:	4313      	orrs	r3, r2
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	4313      	orrs	r3, r2
 8008100:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008108:	f023 030c 	bic.w	r3, r3, #12
 800810c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008114:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008118:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	68da      	ldr	r2, [r3, #12]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	021b      	lsls	r3, r3, #8
 8008124:	4313      	orrs	r3, r2
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	4313      	orrs	r3, r2
 800812a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	011a      	lsls	r2, r3, #4
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	031b      	lsls	r3, r3, #12
 8008138:	4313      	orrs	r3, r2
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	4313      	orrs	r3, r2
 800813e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008146:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800814e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	011b      	lsls	r3, r3, #4
 800815a:	4313      	orrs	r3, r2
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	4313      	orrs	r3, r2
 8008160:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3718      	adds	r7, #24
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80081d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80081dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d110      	bne.n	8008206 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d102      	bne.n	80081f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80081ea:	7b7b      	ldrb	r3, [r7, #13]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d001      	beq.n	80081f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e069      	b.n	80082c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2202      	movs	r2, #2
 80081f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008204:	e031      	b.n	800826a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b04      	cmp	r3, #4
 800820a:	d110      	bne.n	800822e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800820c:	7bbb      	ldrb	r3, [r7, #14]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d102      	bne.n	8008218 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008212:	7b3b      	ldrb	r3, [r7, #12]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d001      	beq.n	800821c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e055      	b.n	80082c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2202      	movs	r2, #2
 8008220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2202      	movs	r2, #2
 8008228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800822c:	e01d      	b.n	800826a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800822e:	7bfb      	ldrb	r3, [r7, #15]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d108      	bne.n	8008246 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d105      	bne.n	8008246 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800823a:	7b7b      	ldrb	r3, [r7, #13]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d102      	bne.n	8008246 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008240:	7b3b      	ldrb	r3, [r7, #12]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d001      	beq.n	800824a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e03e      	b.n	80082c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2202      	movs	r2, #2
 800824e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2202      	movs	r2, #2
 8008256:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2202      	movs	r2, #2
 800825e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2202      	movs	r2, #2
 8008266:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d003      	beq.n	8008278 <HAL_TIM_Encoder_Start+0xc4>
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2b04      	cmp	r3, #4
 8008274:	d008      	beq.n	8008288 <HAL_TIM_Encoder_Start+0xd4>
 8008276:	e00f      	b.n	8008298 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2201      	movs	r2, #1
 800827e:	2100      	movs	r1, #0
 8008280:	4618      	mov	r0, r3
 8008282:	f000 fd7d 	bl	8008d80 <TIM_CCxChannelCmd>
      break;
 8008286:	e016      	b.n	80082b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2201      	movs	r2, #1
 800828e:	2104      	movs	r1, #4
 8008290:	4618      	mov	r0, r3
 8008292:	f000 fd75 	bl	8008d80 <TIM_CCxChannelCmd>
      break;
 8008296:	e00e      	b.n	80082b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2201      	movs	r2, #1
 800829e:	2100      	movs	r1, #0
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fd6d 	bl	8008d80 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2201      	movs	r2, #1
 80082ac:	2104      	movs	r1, #4
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 fd66 	bl	8008d80 <TIM_CCxChannelCmd>
      break;
 80082b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f042 0201 	orr.w	r2, r2, #1
 80082c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	f003 0302 	and.w	r3, r3, #2
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d122      	bne.n	800832c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	f003 0302 	and.w	r3, r3, #2
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d11b      	bne.n	800832c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f06f 0202 	mvn.w	r2, #2
 80082fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	f003 0303 	and.w	r3, r3, #3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fa70 	bl	80087f8 <HAL_TIM_IC_CaptureCallback>
 8008318:	e005      	b.n	8008326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fa62 	bl	80087e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fa73 	bl	800880c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	f003 0304 	and.w	r3, r3, #4
 8008336:	2b04      	cmp	r3, #4
 8008338:	d122      	bne.n	8008380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f003 0304 	and.w	r3, r3, #4
 8008344:	2b04      	cmp	r3, #4
 8008346:	d11b      	bne.n	8008380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f06f 0204 	mvn.w	r2, #4
 8008350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2202      	movs	r2, #2
 8008356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008362:	2b00      	cmp	r3, #0
 8008364:	d003      	beq.n	800836e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fa46 	bl	80087f8 <HAL_TIM_IC_CaptureCallback>
 800836c:	e005      	b.n	800837a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fa38 	bl	80087e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fa49 	bl	800880c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	f003 0308 	and.w	r3, r3, #8
 800838a:	2b08      	cmp	r3, #8
 800838c:	d122      	bne.n	80083d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	f003 0308 	and.w	r3, r3, #8
 8008398:	2b08      	cmp	r3, #8
 800839a:	d11b      	bne.n	80083d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f06f 0208 	mvn.w	r2, #8
 80083a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2204      	movs	r2, #4
 80083aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	f003 0303 	and.w	r3, r3, #3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d003      	beq.n	80083c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fa1c 	bl	80087f8 <HAL_TIM_IC_CaptureCallback>
 80083c0:	e005      	b.n	80083ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fa0e 	bl	80087e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fa1f 	bl	800880c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	f003 0310 	and.w	r3, r3, #16
 80083de:	2b10      	cmp	r3, #16
 80083e0:	d122      	bne.n	8008428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f003 0310 	and.w	r3, r3, #16
 80083ec:	2b10      	cmp	r3, #16
 80083ee:	d11b      	bne.n	8008428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f06f 0210 	mvn.w	r2, #16
 80083f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2208      	movs	r2, #8
 80083fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f9f2 	bl	80087f8 <HAL_TIM_IC_CaptureCallback>
 8008414:	e005      	b.n	8008422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f9e4 	bl	80087e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f9f5 	bl	800880c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b01      	cmp	r3, #1
 8008434:	d10e      	bne.n	8008454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b01      	cmp	r3, #1
 8008442:	d107      	bne.n	8008454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f06f 0201 	mvn.w	r2, #1
 800844c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7f9 fb30 	bl	8001ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845e:	2b80      	cmp	r3, #128	; 0x80
 8008460:	d10e      	bne.n	8008480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846c:	2b80      	cmp	r3, #128	; 0x80
 800846e:	d107      	bne.n	8008480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fd1e 	bl	8008ebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848a:	2b40      	cmp	r3, #64	; 0x40
 800848c:	d10e      	bne.n	80084ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008498:	2b40      	cmp	r3, #64	; 0x40
 800849a:	d107      	bne.n	80084ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f9ba 	bl	8008820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	f003 0320 	and.w	r3, r3, #32
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	d10e      	bne.n	80084d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f003 0320 	and.w	r3, r3, #32
 80084c4:	2b20      	cmp	r3, #32
 80084c6:	d107      	bne.n	80084d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f06f 0220 	mvn.w	r2, #32
 80084d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fce8 	bl	8008ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084d8:	bf00      	nop
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d101      	bne.n	80084fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80084f6:	2302      	movs	r3, #2
 80084f8:	e0ac      	b.n	8008654 <HAL_TIM_PWM_ConfigChannel+0x174>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2b0c      	cmp	r3, #12
 8008506:	f200 809f 	bhi.w	8008648 <HAL_TIM_PWM_ConfigChannel+0x168>
 800850a:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	08008545 	.word	0x08008545
 8008514:	08008649 	.word	0x08008649
 8008518:	08008649 	.word	0x08008649
 800851c:	08008649 	.word	0x08008649
 8008520:	08008585 	.word	0x08008585
 8008524:	08008649 	.word	0x08008649
 8008528:	08008649 	.word	0x08008649
 800852c:	08008649 	.word	0x08008649
 8008530:	080085c7 	.word	0x080085c7
 8008534:	08008649 	.word	0x08008649
 8008538:	08008649 	.word	0x08008649
 800853c:	08008649 	.word	0x08008649
 8008540:	08008607 	.word	0x08008607
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68b9      	ldr	r1, [r7, #8]
 800854a:	4618      	mov	r0, r3
 800854c:	f000 f9f2 	bl	8008934 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	699a      	ldr	r2, [r3, #24]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f042 0208 	orr.w	r2, r2, #8
 800855e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	699a      	ldr	r2, [r3, #24]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f022 0204 	bic.w	r2, r2, #4
 800856e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6999      	ldr	r1, [r3, #24]
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	691a      	ldr	r2, [r3, #16]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	619a      	str	r2, [r3, #24]
      break;
 8008582:	e062      	b.n	800864a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 fa38 	bl	8008a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	699a      	ldr	r2, [r3, #24]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800859e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	699a      	ldr	r2, [r3, #24]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6999      	ldr	r1, [r3, #24]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	021a      	lsls	r2, r3, #8
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	619a      	str	r2, [r3, #24]
      break;
 80085c4:	e041      	b.n	800864a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68b9      	ldr	r1, [r7, #8]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 fa83 	bl	8008ad8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	69da      	ldr	r2, [r3, #28]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f042 0208 	orr.w	r2, r2, #8
 80085e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	69da      	ldr	r2, [r3, #28]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 0204 	bic.w	r2, r2, #4
 80085f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69d9      	ldr	r1, [r3, #28]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	691a      	ldr	r2, [r3, #16]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	430a      	orrs	r2, r1
 8008602:	61da      	str	r2, [r3, #28]
      break;
 8008604:	e021      	b.n	800864a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68b9      	ldr	r1, [r7, #8]
 800860c:	4618      	mov	r0, r3
 800860e:	f000 facd 	bl	8008bac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	69da      	ldr	r2, [r3, #28]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69da      	ldr	r2, [r3, #28]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	69d9      	ldr	r1, [r3, #28]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	021a      	lsls	r2, r3, #8
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	430a      	orrs	r2, r1
 8008644:	61da      	str	r2, [r3, #28]
      break;
 8008646:	e000      	b.n	800864a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008648:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800866c:	2b01      	cmp	r3, #1
 800866e:	d101      	bne.n	8008674 <HAL_TIM_ConfigClockSource+0x18>
 8008670:	2302      	movs	r3, #2
 8008672:	e0b3      	b.n	80087dc <HAL_TIM_ConfigClockSource+0x180>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2202      	movs	r2, #2
 8008680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008692:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800869a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ac:	d03e      	beq.n	800872c <HAL_TIM_ConfigClockSource+0xd0>
 80086ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086b2:	f200 8087 	bhi.w	80087c4 <HAL_TIM_ConfigClockSource+0x168>
 80086b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ba:	f000 8085 	beq.w	80087c8 <HAL_TIM_ConfigClockSource+0x16c>
 80086be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086c2:	d87f      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x168>
 80086c4:	2b70      	cmp	r3, #112	; 0x70
 80086c6:	d01a      	beq.n	80086fe <HAL_TIM_ConfigClockSource+0xa2>
 80086c8:	2b70      	cmp	r3, #112	; 0x70
 80086ca:	d87b      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x168>
 80086cc:	2b60      	cmp	r3, #96	; 0x60
 80086ce:	d050      	beq.n	8008772 <HAL_TIM_ConfigClockSource+0x116>
 80086d0:	2b60      	cmp	r3, #96	; 0x60
 80086d2:	d877      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x168>
 80086d4:	2b50      	cmp	r3, #80	; 0x50
 80086d6:	d03c      	beq.n	8008752 <HAL_TIM_ConfigClockSource+0xf6>
 80086d8:	2b50      	cmp	r3, #80	; 0x50
 80086da:	d873      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x168>
 80086dc:	2b40      	cmp	r3, #64	; 0x40
 80086de:	d058      	beq.n	8008792 <HAL_TIM_ConfigClockSource+0x136>
 80086e0:	2b40      	cmp	r3, #64	; 0x40
 80086e2:	d86f      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x168>
 80086e4:	2b30      	cmp	r3, #48	; 0x30
 80086e6:	d064      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x156>
 80086e8:	2b30      	cmp	r3, #48	; 0x30
 80086ea:	d86b      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x168>
 80086ec:	2b20      	cmp	r3, #32
 80086ee:	d060      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x156>
 80086f0:	2b20      	cmp	r3, #32
 80086f2:	d867      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x168>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d05c      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x156>
 80086f8:	2b10      	cmp	r3, #16
 80086fa:	d05a      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80086fc:	e062      	b.n	80087c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6818      	ldr	r0, [r3, #0]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	6899      	ldr	r1, [r3, #8]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	685a      	ldr	r2, [r3, #4]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	f000 fb17 	bl	8008d40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008720:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	609a      	str	r2, [r3, #8]
      break;
 800872a:	e04e      	b.n	80087ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6818      	ldr	r0, [r3, #0]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	6899      	ldr	r1, [r3, #8]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f000 fb00 	bl	8008d40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689a      	ldr	r2, [r3, #8]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800874e:	609a      	str	r2, [r3, #8]
      break;
 8008750:	e03b      	b.n	80087ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6818      	ldr	r0, [r3, #0]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	6859      	ldr	r1, [r3, #4]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	461a      	mov	r2, r3
 8008760:	f000 fa74 	bl	8008c4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2150      	movs	r1, #80	; 0x50
 800876a:	4618      	mov	r0, r3
 800876c:	f000 facd 	bl	8008d0a <TIM_ITRx_SetConfig>
      break;
 8008770:	e02b      	b.n	80087ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6818      	ldr	r0, [r3, #0]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	6859      	ldr	r1, [r3, #4]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	461a      	mov	r2, r3
 8008780:	f000 fa93 	bl	8008caa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2160      	movs	r1, #96	; 0x60
 800878a:	4618      	mov	r0, r3
 800878c:	f000 fabd 	bl	8008d0a <TIM_ITRx_SetConfig>
      break;
 8008790:	e01b      	b.n	80087ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6818      	ldr	r0, [r3, #0]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	6859      	ldr	r1, [r3, #4]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	461a      	mov	r2, r3
 80087a0:	f000 fa54 	bl	8008c4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2140      	movs	r1, #64	; 0x40
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 faad 	bl	8008d0a <TIM_ITRx_SetConfig>
      break;
 80087b0:	e00b      	b.n	80087ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4619      	mov	r1, r3
 80087bc:	4610      	mov	r0, r2
 80087be:	f000 faa4 	bl	8008d0a <TIM_ITRx_SetConfig>
        break;
 80087c2:	e002      	b.n	80087ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80087c4:	bf00      	nop
 80087c6:	e000      	b.n	80087ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80087c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a34      	ldr	r2, [pc, #208]	; (8008918 <TIM_Base_SetConfig+0xe4>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d00f      	beq.n	800886c <TIM_Base_SetConfig+0x38>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008852:	d00b      	beq.n	800886c <TIM_Base_SetConfig+0x38>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a31      	ldr	r2, [pc, #196]	; (800891c <TIM_Base_SetConfig+0xe8>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d007      	beq.n	800886c <TIM_Base_SetConfig+0x38>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a30      	ldr	r2, [pc, #192]	; (8008920 <TIM_Base_SetConfig+0xec>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d003      	beq.n	800886c <TIM_Base_SetConfig+0x38>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a2f      	ldr	r2, [pc, #188]	; (8008924 <TIM_Base_SetConfig+0xf0>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d108      	bne.n	800887e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	4313      	orrs	r3, r2
 800887c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a25      	ldr	r2, [pc, #148]	; (8008918 <TIM_Base_SetConfig+0xe4>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d01b      	beq.n	80088be <TIM_Base_SetConfig+0x8a>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800888c:	d017      	beq.n	80088be <TIM_Base_SetConfig+0x8a>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a22      	ldr	r2, [pc, #136]	; (800891c <TIM_Base_SetConfig+0xe8>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d013      	beq.n	80088be <TIM_Base_SetConfig+0x8a>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a21      	ldr	r2, [pc, #132]	; (8008920 <TIM_Base_SetConfig+0xec>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d00f      	beq.n	80088be <TIM_Base_SetConfig+0x8a>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a20      	ldr	r2, [pc, #128]	; (8008924 <TIM_Base_SetConfig+0xf0>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d00b      	beq.n	80088be <TIM_Base_SetConfig+0x8a>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a1f      	ldr	r2, [pc, #124]	; (8008928 <TIM_Base_SetConfig+0xf4>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d007      	beq.n	80088be <TIM_Base_SetConfig+0x8a>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a1e      	ldr	r2, [pc, #120]	; (800892c <TIM_Base_SetConfig+0xf8>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d003      	beq.n	80088be <TIM_Base_SetConfig+0x8a>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a1d      	ldr	r2, [pc, #116]	; (8008930 <TIM_Base_SetConfig+0xfc>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d108      	bne.n	80088d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	4313      	orrs	r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	689a      	ldr	r2, [r3, #8]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a08      	ldr	r2, [pc, #32]	; (8008918 <TIM_Base_SetConfig+0xe4>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d103      	bne.n	8008904 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	691a      	ldr	r2, [r3, #16]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	615a      	str	r2, [r3, #20]
}
 800890a:	bf00      	nop
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	40010000 	.word	0x40010000
 800891c:	40000400 	.word	0x40000400
 8008920:	40000800 	.word	0x40000800
 8008924:	40000c00 	.word	0x40000c00
 8008928:	40014000 	.word	0x40014000
 800892c:	40014400 	.word	0x40014400
 8008930:	40014800 	.word	0x40014800

08008934 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	f023 0201 	bic.w	r2, r3, #1
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	699b      	ldr	r3, [r3, #24]
 800895a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f023 0303 	bic.w	r3, r3, #3
 800896a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	4313      	orrs	r3, r2
 8008974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f023 0302 	bic.w	r3, r3, #2
 800897c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	4313      	orrs	r3, r2
 8008986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a1c      	ldr	r2, [pc, #112]	; (80089fc <TIM_OC1_SetConfig+0xc8>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d10c      	bne.n	80089aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f023 0308 	bic.w	r3, r3, #8
 8008996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	4313      	orrs	r3, r2
 80089a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	f023 0304 	bic.w	r3, r3, #4
 80089a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a13      	ldr	r2, [pc, #76]	; (80089fc <TIM_OC1_SetConfig+0xc8>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d111      	bne.n	80089d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	621a      	str	r2, [r3, #32]
}
 80089f0:	bf00      	nop
 80089f2:	371c      	adds	r7, #28
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	40010000 	.word	0x40010000

08008a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b087      	sub	sp, #28
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	f023 0210 	bic.w	r2, r3, #16
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	021b      	lsls	r3, r3, #8
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f023 0320 	bic.w	r3, r3, #32
 8008a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	011b      	lsls	r3, r3, #4
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a1e      	ldr	r2, [pc, #120]	; (8008ad4 <TIM_OC2_SetConfig+0xd4>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d10d      	bne.n	8008a7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	011b      	lsls	r3, r3, #4
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a15      	ldr	r2, [pc, #84]	; (8008ad4 <TIM_OC2_SetConfig+0xd4>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d113      	bne.n	8008aac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	621a      	str	r2, [r3, #32]
}
 8008ac6:	bf00      	nop
 8008ac8:	371c      	adds	r7, #28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	40010000 	.word	0x40010000

08008ad8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b087      	sub	sp, #28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f023 0303 	bic.w	r3, r3, #3
 8008b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	021b      	lsls	r3, r3, #8
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a1d      	ldr	r2, [pc, #116]	; (8008ba8 <TIM_OC3_SetConfig+0xd0>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d10d      	bne.n	8008b52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	021b      	lsls	r3, r3, #8
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a14      	ldr	r2, [pc, #80]	; (8008ba8 <TIM_OC3_SetConfig+0xd0>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d113      	bne.n	8008b82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	011b      	lsls	r3, r3, #4
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	011b      	lsls	r3, r3, #4
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	621a      	str	r2, [r3, #32]
}
 8008b9c:	bf00      	nop
 8008b9e:	371c      	adds	r7, #28
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr
 8008ba8:	40010000 	.word	0x40010000

08008bac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	021b      	lsls	r3, r3, #8
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	031b      	lsls	r3, r3, #12
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a10      	ldr	r2, [pc, #64]	; (8008c48 <TIM_OC4_SetConfig+0x9c>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d109      	bne.n	8008c20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	019b      	lsls	r3, r3, #6
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	621a      	str	r2, [r3, #32]
}
 8008c3a:	bf00      	nop
 8008c3c:	371c      	adds	r7, #28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	40010000 	.word	0x40010000

08008c4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b087      	sub	sp, #28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6a1b      	ldr	r3, [r3, #32]
 8008c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	f023 0201 	bic.w	r2, r3, #1
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	011b      	lsls	r3, r3, #4
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f023 030a 	bic.w	r3, r3, #10
 8008c88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	621a      	str	r2, [r3, #32]
}
 8008c9e:	bf00      	nop
 8008ca0:	371c      	adds	r7, #28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b087      	sub	sp, #28
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	60b9      	str	r1, [r7, #8]
 8008cb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	f023 0210 	bic.w	r2, r3, #16
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6a1b      	ldr	r3, [r3, #32]
 8008ccc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	031b      	lsls	r3, r3, #12
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ce6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	011b      	lsls	r3, r3, #4
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	697a      	ldr	r2, [r7, #20]
 8008cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	621a      	str	r2, [r3, #32]
}
 8008cfe:	bf00      	nop
 8008d00:	371c      	adds	r7, #28
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b085      	sub	sp, #20
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	f043 0307 	orr.w	r3, r3, #7
 8008d2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	609a      	str	r2, [r3, #8]
}
 8008d34:	bf00      	nop
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
 8008d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	021a      	lsls	r2, r3, #8
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	431a      	orrs	r2, r3
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	609a      	str	r2, [r3, #8]
}
 8008d74:	bf00      	nop
 8008d76:	371c      	adds	r7, #28
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b087      	sub	sp, #28
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	f003 031f 	and.w	r3, r3, #31
 8008d92:	2201      	movs	r2, #1
 8008d94:	fa02 f303 	lsl.w	r3, r2, r3
 8008d98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6a1a      	ldr	r2, [r3, #32]
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	43db      	mvns	r3, r3
 8008da2:	401a      	ands	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6a1a      	ldr	r2, [r3, #32]
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	f003 031f 	and.w	r3, r3, #31
 8008db2:	6879      	ldr	r1, [r7, #4]
 8008db4:	fa01 f303 	lsl.w	r3, r1, r3
 8008db8:	431a      	orrs	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	621a      	str	r2, [r3, #32]
}
 8008dbe:	bf00      	nop
 8008dc0:	371c      	adds	r7, #28
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
	...

08008dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d101      	bne.n	8008de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008de0:	2302      	movs	r3, #2
 8008de2:	e050      	b.n	8008e86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a1c      	ldr	r2, [pc, #112]	; (8008e94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d018      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e30:	d013      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a18      	ldr	r2, [pc, #96]	; (8008e98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d00e      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a16      	ldr	r2, [pc, #88]	; (8008e9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d009      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a15      	ldr	r2, [pc, #84]	; (8008ea0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d004      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a13      	ldr	r2, [pc, #76]	; (8008ea4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d10c      	bne.n	8008e74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	40010000 	.word	0x40010000
 8008e98:	40000400 	.word	0x40000400
 8008e9c:	40000800 	.word	0x40000800
 8008ea0:	40000c00 	.word	0x40000c00
 8008ea4:	40014000 	.word	0x40014000

08008ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ec4:	bf00      	nop
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e03f      	b.n	8008f62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d106      	bne.n	8008efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f7fb f9d6 	bl	80042a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2224      	movs	r2, #36	; 0x24
 8008f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68da      	ldr	r2, [r3, #12]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fd51 	bl	80099bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	691a      	ldr	r2, [r3, #16]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	695a      	ldr	r2, [r3, #20]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2220      	movs	r2, #32
 8008f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	4613      	mov	r3, r2
 8008f78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b20      	cmp	r3, #32
 8008f84:	d153      	bne.n	800902e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <HAL_UART_Transmit_DMA+0x26>
 8008f8c:	88fb      	ldrh	r3, [r7, #6]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d101      	bne.n	8008f96 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e04c      	b.n	8009030 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <HAL_UART_Transmit_DMA+0x38>
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	e045      	b.n	8009030 <HAL_UART_Transmit_DMA+0xc4>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	88fa      	ldrh	r2, [r7, #6]
 8008fb6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	88fa      	ldrh	r2, [r7, #6]
 8008fbc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2221      	movs	r2, #33	; 0x21
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd0:	4a19      	ldr	r2, [pc, #100]	; (8009038 <HAL_UART_Transmit_DMA+0xcc>)
 8008fd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd8:	4a18      	ldr	r2, [pc, #96]	; (800903c <HAL_UART_Transmit_DMA+0xd0>)
 8008fda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe0:	4a17      	ldr	r2, [pc, #92]	; (8009040 <HAL_UART_Transmit_DMA+0xd4>)
 8008fe2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe8:	2200      	movs	r2, #0
 8008fea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008fec:	f107 0308 	add.w	r3, r7, #8
 8008ff0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	6819      	ldr	r1, [r3, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3304      	adds	r3, #4
 8009000:	461a      	mov	r2, r3
 8009002:	88fb      	ldrh	r3, [r7, #6]
 8009004:	f7fb fd28 	bl	8004a58 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009010:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2200      	movs	r2, #0
 8009016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	695a      	ldr	r2, [r3, #20]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009028:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	e000      	b.n	8009030 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800902e:	2302      	movs	r3, #2
  }
}
 8009030:	4618      	mov	r0, r3
 8009032:	3718      	adds	r7, #24
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	08009479 	.word	0x08009479
 800903c:	080094cb 	.word	0x080094cb
 8009040:	080095b3 	.word	0x080095b3

08009044 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	4613      	mov	r3, r2
 8009050:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b20      	cmp	r3, #32
 800905c:	d11d      	bne.n	800909a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <HAL_UART_Receive_DMA+0x26>
 8009064:	88fb      	ldrh	r3, [r7, #6]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e016      	b.n	800909c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009074:	2b01      	cmp	r3, #1
 8009076:	d101      	bne.n	800907c <HAL_UART_Receive_DMA+0x38>
 8009078:	2302      	movs	r3, #2
 800907a:	e00f      	b.n	800909c <HAL_UART_Receive_DMA+0x58>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800908a:	88fb      	ldrh	r3, [r7, #6]
 800908c:	461a      	mov	r2, r3
 800908e:	68b9      	ldr	r1, [r7, #8]
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 fad9 	bl	8009648 <UART_Start_Receive_DMA>
 8009096:	4603      	mov	r3, r0
 8009098:	e000      	b.n	800909c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800909a:	2302      	movs	r3, #2
  }
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b08a      	sub	sp, #40	; 0x28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80090c4:	2300      	movs	r3, #0
 80090c6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80090c8:	2300      	movs	r3, #0
 80090ca:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	f003 030f 	and.w	r3, r3, #15
 80090d2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10d      	bne.n	80090f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	f003 0320 	and.w	r3, r3, #32
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d008      	beq.n	80090f6 <HAL_UART_IRQHandler+0x52>
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	f003 0320 	and.w	r3, r3, #32
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fbcd 	bl	800988e <UART_Receive_IT>
      return;
 80090f4:	e17c      	b.n	80093f0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 80b1 	beq.w	8009260 <HAL_UART_IRQHandler+0x1bc>
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	f003 0301 	and.w	r3, r3, #1
 8009104:	2b00      	cmp	r3, #0
 8009106:	d105      	bne.n	8009114 <HAL_UART_IRQHandler+0x70>
 8009108:	6a3b      	ldr	r3, [r7, #32]
 800910a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800910e:	2b00      	cmp	r3, #0
 8009110:	f000 80a6 	beq.w	8009260 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00a      	beq.n	8009134 <HAL_UART_IRQHandler+0x90>
 800911e:	6a3b      	ldr	r3, [r7, #32]
 8009120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009124:	2b00      	cmp	r3, #0
 8009126:	d005      	beq.n	8009134 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912c:	f043 0201 	orr.w	r2, r3, #1
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009136:	f003 0304 	and.w	r3, r3, #4
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <HAL_UART_IRQHandler+0xb0>
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	f003 0301 	and.w	r3, r3, #1
 8009144:	2b00      	cmp	r3, #0
 8009146:	d005      	beq.n	8009154 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	f043 0202 	orr.w	r2, r3, #2
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	f003 0302 	and.w	r3, r3, #2
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00a      	beq.n	8009174 <HAL_UART_IRQHandler+0xd0>
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	f003 0301 	and.w	r3, r3, #1
 8009164:	2b00      	cmp	r3, #0
 8009166:	d005      	beq.n	8009174 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916c:	f043 0204 	orr.w	r2, r3, #4
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009176:	f003 0308 	and.w	r3, r3, #8
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00f      	beq.n	800919e <HAL_UART_IRQHandler+0xfa>
 800917e:	6a3b      	ldr	r3, [r7, #32]
 8009180:	f003 0320 	and.w	r3, r3, #32
 8009184:	2b00      	cmp	r3, #0
 8009186:	d104      	bne.n	8009192 <HAL_UART_IRQHandler+0xee>
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	2b00      	cmp	r3, #0
 8009190:	d005      	beq.n	800919e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009196:	f043 0208 	orr.w	r2, r3, #8
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 811f 	beq.w	80093e6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	f003 0320 	and.w	r3, r3, #32
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d007      	beq.n	80091c2 <HAL_UART_IRQHandler+0x11e>
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	f003 0320 	and.w	r3, r3, #32
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fb66 	bl	800988e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	695b      	ldr	r3, [r3, #20]
 80091c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091cc:	2b40      	cmp	r3, #64	; 0x40
 80091ce:	bf0c      	ite	eq
 80091d0:	2301      	moveq	r3, #1
 80091d2:	2300      	movne	r3, #0
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091dc:	f003 0308 	and.w	r3, r3, #8
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d102      	bne.n	80091ea <HAL_UART_IRQHandler+0x146>
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d031      	beq.n	800924e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 faa6 	bl	800973c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091fa:	2b40      	cmp	r3, #64	; 0x40
 80091fc:	d123      	bne.n	8009246 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	695a      	ldr	r2, [r3, #20]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800920c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009212:	2b00      	cmp	r3, #0
 8009214:	d013      	beq.n	800923e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921a:	4a77      	ldr	r2, [pc, #476]	; (80093f8 <HAL_UART_IRQHandler+0x354>)
 800921c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009222:	4618      	mov	r0, r3
 8009224:	f7fb fce0 	bl	8004be8 <HAL_DMA_Abort_IT>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d016      	beq.n	800925c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009238:	4610      	mov	r0, r2
 800923a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800923c:	e00e      	b.n	800925c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f904 	bl	800944c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009244:	e00a      	b.n	800925c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f900 	bl	800944c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800924c:	e006      	b.n	800925c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f8fc 	bl	800944c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800925a:	e0c4      	b.n	80093e6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800925c:	bf00      	nop
    return;
 800925e:	e0c2      	b.n	80093e6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009264:	2b01      	cmp	r3, #1
 8009266:	f040 80a2 	bne.w	80093ae <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	f003 0310 	and.w	r3, r3, #16
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 809c 	beq.w	80093ae <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009276:	6a3b      	ldr	r3, [r7, #32]
 8009278:	f003 0310 	and.w	r3, r3, #16
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 8096 	beq.w	80093ae <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009282:	2300      	movs	r3, #0
 8009284:	60fb      	str	r3, [r7, #12]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	60fb      	str	r3, [r7, #12]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a2:	2b40      	cmp	r3, #64	; 0x40
 80092a4:	d14f      	bne.n	8009346 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80092b0:	8a3b      	ldrh	r3, [r7, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f000 8099 	beq.w	80093ea <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092bc:	8a3a      	ldrh	r2, [r7, #16]
 80092be:	429a      	cmp	r2, r3
 80092c0:	f080 8093 	bcs.w	80093ea <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	8a3a      	ldrh	r2, [r7, #16]
 80092c8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ce:	69db      	ldr	r3, [r3, #28]
 80092d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092d4:	d02b      	beq.n	800932e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68da      	ldr	r2, [r3, #12]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092e4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	695a      	ldr	r2, [r3, #20]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f022 0201 	bic.w	r2, r2, #1
 80092f4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	695a      	ldr	r2, [r3, #20]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009304:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2220      	movs	r2, #32
 800930a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68da      	ldr	r2, [r3, #12]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f022 0210 	bic.w	r2, r2, #16
 8009322:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009328:	4618      	mov	r0, r3
 800932a:	f7fb fbed 	bl	8004b08 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009336:	b29b      	uxth	r3, r3
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	b29b      	uxth	r3, r3
 800933c:	4619      	mov	r1, r3
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f88e 	bl	8009460 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009344:	e051      	b.n	80093ea <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800934e:	b29b      	uxth	r3, r3
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009358:	b29b      	uxth	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d047      	beq.n	80093ee <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800935e:	8a7b      	ldrh	r3, [r7, #18]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d044      	beq.n	80093ee <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68da      	ldr	r2, [r3, #12]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009372:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	695a      	ldr	r2, [r3, #20]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f022 0201 	bic.w	r2, r2, #1
 8009382:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2220      	movs	r2, #32
 8009388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68da      	ldr	r2, [r3, #12]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f022 0210 	bic.w	r2, r2, #16
 80093a0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093a2:	8a7b      	ldrh	r3, [r7, #18]
 80093a4:	4619      	mov	r1, r3
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f85a 	bl	8009460 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80093ac:	e01f      	b.n	80093ee <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d008      	beq.n	80093ca <HAL_UART_IRQHandler+0x326>
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d003      	beq.n	80093ca <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f9fb 	bl	80097be <UART_Transmit_IT>
    return;
 80093c8:	e012      	b.n	80093f0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00d      	beq.n	80093f0 <HAL_UART_IRQHandler+0x34c>
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d008      	beq.n	80093f0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fa3d 	bl	800985e <UART_EndTransmit_IT>
    return;
 80093e4:	e004      	b.n	80093f0 <HAL_UART_IRQHandler+0x34c>
    return;
 80093e6:	bf00      	nop
 80093e8:	e002      	b.n	80093f0 <HAL_UART_IRQHandler+0x34c>
      return;
 80093ea:	bf00      	nop
 80093ec:	e000      	b.n	80093f0 <HAL_UART_IRQHandler+0x34c>
      return;
 80093ee:	bf00      	nop
  }
}
 80093f0:	3728      	adds	r7, #40	; 0x28
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	08009797 	.word	0x08009797

080093fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	460b      	mov	r3, r1
 800946a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009484:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009490:	2b00      	cmp	r3, #0
 8009492:	d113      	bne.n	80094bc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	695a      	ldr	r2, [r3, #20]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094a8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68da      	ldr	r2, [r3, #12]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094b8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094ba:	e002      	b.n	80094c2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f7ff ff9d 	bl	80093fc <HAL_UART_TxCpltCallback>
}
 80094c2:	bf00      	nop
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b084      	sub	sp, #16
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f7ff ff99 	bl	8009410 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094de:	bf00      	nop
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b084      	sub	sp, #16
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d12a      	bne.n	8009558 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68da      	ldr	r2, [r3, #12]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009516:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	695a      	ldr	r2, [r3, #20]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f022 0201 	bic.w	r2, r2, #1
 8009526:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	695a      	ldr	r2, [r3, #20]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009536:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2220      	movs	r2, #32
 800953c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009544:	2b01      	cmp	r3, #1
 8009546:	d107      	bne.n	8009558 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68da      	ldr	r2, [r3, #12]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f022 0210 	bic.w	r2, r2, #16
 8009556:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955c:	2b01      	cmp	r3, #1
 800955e:	d106      	bne.n	800956e <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009564:	4619      	mov	r1, r3
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f7ff ff7a 	bl	8009460 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800956c:	e002      	b.n	8009574 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f7ff ff58 	bl	8009424 <HAL_UART_RxCpltCallback>
}
 8009574:	bf00      	nop
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009588:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958e:	2b01      	cmp	r3, #1
 8009590:	d108      	bne.n	80095a4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009596:	085b      	lsrs	r3, r3, #1
 8009598:	b29b      	uxth	r3, r3
 800959a:	4619      	mov	r1, r3
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f7ff ff5f 	bl	8009460 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80095a2:	e002      	b.n	80095aa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f7ff ff47 	bl	8009438 <HAL_UART_RxHalfCpltCallback>
}
 80095aa:	bf00      	nop
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b084      	sub	sp, #16
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80095ba:	2300      	movs	r3, #0
 80095bc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ce:	2b80      	cmp	r3, #128	; 0x80
 80095d0:	bf0c      	ite	eq
 80095d2:	2301      	moveq	r3, #1
 80095d4:	2300      	movne	r3, #0
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b21      	cmp	r3, #33	; 0x21
 80095e4:	d108      	bne.n	80095f8 <UART_DMAError+0x46>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d005      	beq.n	80095f8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2200      	movs	r2, #0
 80095f0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80095f2:	68b8      	ldr	r0, [r7, #8]
 80095f4:	f000 f88c 	bl	8009710 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	695b      	ldr	r3, [r3, #20]
 80095fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009602:	2b40      	cmp	r3, #64	; 0x40
 8009604:	bf0c      	ite	eq
 8009606:	2301      	moveq	r3, #1
 8009608:	2300      	movne	r3, #0
 800960a:	b2db      	uxtb	r3, r3
 800960c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009614:	b2db      	uxtb	r3, r3
 8009616:	2b22      	cmp	r3, #34	; 0x22
 8009618:	d108      	bne.n	800962c <UART_DMAError+0x7a>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d005      	beq.n	800962c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	2200      	movs	r2, #0
 8009624:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009626:	68b8      	ldr	r0, [r7, #8]
 8009628:	f000 f888 	bl	800973c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009630:	f043 0210 	orr.w	r2, r3, #16
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009638:	68b8      	ldr	r0, [r7, #8]
 800963a:	f7ff ff07 	bl	800944c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800963e:	bf00      	nop
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
	...

08009648 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	4613      	mov	r3, r2
 8009654:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	88fa      	ldrh	r2, [r7, #6]
 8009660:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2222      	movs	r2, #34	; 0x22
 800966c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009674:	4a23      	ldr	r2, [pc, #140]	; (8009704 <UART_Start_Receive_DMA+0xbc>)
 8009676:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967c:	4a22      	ldr	r2, [pc, #136]	; (8009708 <UART_Start_Receive_DMA+0xc0>)
 800967e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009684:	4a21      	ldr	r2, [pc, #132]	; (800970c <UART_Start_Receive_DMA+0xc4>)
 8009686:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968c:	2200      	movs	r2, #0
 800968e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009690:	f107 0308 	add.w	r3, r7, #8
 8009694:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3304      	adds	r3, #4
 80096a0:	4619      	mov	r1, r3
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	88fb      	ldrh	r3, [r7, #6]
 80096a8:	f7fb f9d6 	bl	8004a58 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80096ac:	2300      	movs	r3, #0
 80096ae:	613b      	str	r3, [r7, #16]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	613b      	str	r3, [r7, #16]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	613b      	str	r3, [r7, #16]
 80096c0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68da      	ldr	r2, [r3, #12]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096d8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	695a      	ldr	r2, [r3, #20]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f042 0201 	orr.w	r2, r2, #1
 80096e8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	695a      	ldr	r2, [r3, #20]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096f8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3718      	adds	r7, #24
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	080094e7 	.word	0x080094e7
 8009708:	0800957d 	.word	0x0800957d
 800970c:	080095b3 	.word	0x080095b3

08009710 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68da      	ldr	r2, [r3, #12]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009726:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2220      	movs	r2, #32
 800972c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68da      	ldr	r2, [r3, #12]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009752:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	695a      	ldr	r2, [r3, #20]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f022 0201 	bic.w	r2, r2, #1
 8009762:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009768:	2b01      	cmp	r3, #1
 800976a:	d107      	bne.n	800977c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68da      	ldr	r2, [r3, #12]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f022 0210 	bic.w	r2, r2, #16
 800977a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2220      	movs	r2, #32
 8009780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	631a      	str	r2, [r3, #48]	; 0x30
}
 800978a:	bf00      	nop
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b084      	sub	sp, #16
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f7ff fe4b 	bl	800944c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097b6:	bf00      	nop
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80097be:	b480      	push	{r7}
 80097c0:	b085      	sub	sp, #20
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b21      	cmp	r3, #33	; 0x21
 80097d0:	d13e      	bne.n	8009850 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097da:	d114      	bne.n	8009806 <UART_Transmit_IT+0x48>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d110      	bne.n	8009806 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a1b      	ldr	r3, [r3, #32]
 80097e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	881b      	ldrh	r3, [r3, #0]
 80097ee:	461a      	mov	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a1b      	ldr	r3, [r3, #32]
 80097fe:	1c9a      	adds	r2, r3, #2
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	621a      	str	r2, [r3, #32]
 8009804:	e008      	b.n	8009818 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	1c59      	adds	r1, r3, #1
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	6211      	str	r1, [r2, #32]
 8009810:	781a      	ldrb	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800981c:	b29b      	uxth	r3, r3
 800981e:	3b01      	subs	r3, #1
 8009820:	b29b      	uxth	r3, r3
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	4619      	mov	r1, r3
 8009826:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10f      	bne.n	800984c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68da      	ldr	r2, [r3, #12]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800983a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	68da      	ldr	r2, [r3, #12]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800984a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	e000      	b.n	8009852 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009850:	2302      	movs	r3, #2
  }
}
 8009852:	4618      	mov	r0, r3
 8009854:	3714      	adds	r7, #20
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b082      	sub	sp, #8
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68da      	ldr	r2, [r3, #12]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009874:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2220      	movs	r2, #32
 800987a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7ff fdbc 	bl	80093fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3708      	adds	r7, #8
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800989c:	b2db      	uxtb	r3, r3
 800989e:	2b22      	cmp	r3, #34	; 0x22
 80098a0:	f040 8087 	bne.w	80099b2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098ac:	d117      	bne.n	80098de <UART_Receive_IT+0x50>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d113      	bne.n	80098de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80098b6:	2300      	movs	r3, #0
 80098b8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098be:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d6:	1c9a      	adds	r2, r3, #2
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	629a      	str	r2, [r3, #40]	; 0x28
 80098dc:	e026      	b.n	800992c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80098e4:	2300      	movs	r3, #0
 80098e6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098f0:	d007      	beq.n	8009902 <UART_Receive_IT+0x74>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10a      	bne.n	8009910 <UART_Receive_IT+0x82>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d106      	bne.n	8009910 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	b2da      	uxtb	r2, r3
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	701a      	strb	r2, [r3, #0]
 800990e:	e008      	b.n	8009922 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	b2db      	uxtb	r3, r3
 8009918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800991c:	b2da      	uxtb	r2, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009926:	1c5a      	adds	r2, r3, #1
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009930:	b29b      	uxth	r3, r3
 8009932:	3b01      	subs	r3, #1
 8009934:	b29b      	uxth	r3, r3
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	4619      	mov	r1, r3
 800993a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800993c:	2b00      	cmp	r3, #0
 800993e:	d136      	bne.n	80099ae <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68da      	ldr	r2, [r3, #12]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f022 0220 	bic.w	r2, r2, #32
 800994e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	68da      	ldr	r2, [r3, #12]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800995e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	695a      	ldr	r2, [r3, #20]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f022 0201 	bic.w	r2, r2, #1
 800996e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2220      	movs	r2, #32
 8009974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800997c:	2b01      	cmp	r3, #1
 800997e:	d10e      	bne.n	800999e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	68da      	ldr	r2, [r3, #12]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f022 0210 	bic.w	r2, r2, #16
 800998e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7ff fd62 	bl	8009460 <HAL_UARTEx_RxEventCallback>
 800999c:	e002      	b.n	80099a4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7ff fd40 	bl	8009424 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	e002      	b.n	80099b4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	e000      	b.n	80099b4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80099b2:	2302      	movs	r3, #2
  }
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c0:	b09f      	sub	sp, #124	; 0x7c
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80099d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099d2:	68d9      	ldr	r1, [r3, #12]
 80099d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	ea40 0301 	orr.w	r3, r0, r1
 80099dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80099de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099e0:	689a      	ldr	r2, [r3, #8]
 80099e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	431a      	orrs	r2, r3
 80099e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	431a      	orrs	r2, r3
 80099ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099f0:	69db      	ldr	r3, [r3, #28]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80099f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009a00:	f021 010c 	bic.w	r1, r1, #12
 8009a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a0a:	430b      	orrs	r3, r1
 8009a0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a1a:	6999      	ldr	r1, [r3, #24]
 8009a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	ea40 0301 	orr.w	r3, r0, r1
 8009a24:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	4bc5      	ldr	r3, [pc, #788]	; (8009d40 <UART_SetConfig+0x384>)
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d004      	beq.n	8009a3a <UART_SetConfig+0x7e>
 8009a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	4bc3      	ldr	r3, [pc, #780]	; (8009d44 <UART_SetConfig+0x388>)
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d103      	bne.n	8009a42 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a3a:	f7fe f8eb 	bl	8007c14 <HAL_RCC_GetPCLK2Freq>
 8009a3e:	6778      	str	r0, [r7, #116]	; 0x74
 8009a40:	e002      	b.n	8009a48 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a42:	f7fe f8d3 	bl	8007bec <HAL_RCC_GetPCLK1Freq>
 8009a46:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a4a:	69db      	ldr	r3, [r3, #28]
 8009a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a50:	f040 80b6 	bne.w	8009bc0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a56:	461c      	mov	r4, r3
 8009a58:	f04f 0500 	mov.w	r5, #0
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	462b      	mov	r3, r5
 8009a60:	1891      	adds	r1, r2, r2
 8009a62:	6439      	str	r1, [r7, #64]	; 0x40
 8009a64:	415b      	adcs	r3, r3
 8009a66:	647b      	str	r3, [r7, #68]	; 0x44
 8009a68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009a6c:	1912      	adds	r2, r2, r4
 8009a6e:	eb45 0303 	adc.w	r3, r5, r3
 8009a72:	f04f 0000 	mov.w	r0, #0
 8009a76:	f04f 0100 	mov.w	r1, #0
 8009a7a:	00d9      	lsls	r1, r3, #3
 8009a7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009a80:	00d0      	lsls	r0, r2, #3
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	1911      	adds	r1, r2, r4
 8009a88:	6639      	str	r1, [r7, #96]	; 0x60
 8009a8a:	416b      	adcs	r3, r5
 8009a8c:	667b      	str	r3, [r7, #100]	; 0x64
 8009a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	461a      	mov	r2, r3
 8009a94:	f04f 0300 	mov.w	r3, #0
 8009a98:	1891      	adds	r1, r2, r2
 8009a9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009a9c:	415b      	adcs	r3, r3
 8009a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009aa4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009aa8:	f7f7 f980 	bl	8000dac <__aeabi_uldivmod>
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4ba5      	ldr	r3, [pc, #660]	; (8009d48 <UART_SetConfig+0x38c>)
 8009ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8009ab6:	095b      	lsrs	r3, r3, #5
 8009ab8:	011e      	lsls	r6, r3, #4
 8009aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009abc:	461c      	mov	r4, r3
 8009abe:	f04f 0500 	mov.w	r5, #0
 8009ac2:	4622      	mov	r2, r4
 8009ac4:	462b      	mov	r3, r5
 8009ac6:	1891      	adds	r1, r2, r2
 8009ac8:	6339      	str	r1, [r7, #48]	; 0x30
 8009aca:	415b      	adcs	r3, r3
 8009acc:	637b      	str	r3, [r7, #52]	; 0x34
 8009ace:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009ad2:	1912      	adds	r2, r2, r4
 8009ad4:	eb45 0303 	adc.w	r3, r5, r3
 8009ad8:	f04f 0000 	mov.w	r0, #0
 8009adc:	f04f 0100 	mov.w	r1, #0
 8009ae0:	00d9      	lsls	r1, r3, #3
 8009ae2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009ae6:	00d0      	lsls	r0, r2, #3
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	1911      	adds	r1, r2, r4
 8009aee:	65b9      	str	r1, [r7, #88]	; 0x58
 8009af0:	416b      	adcs	r3, r5
 8009af2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	461a      	mov	r2, r3
 8009afa:	f04f 0300 	mov.w	r3, #0
 8009afe:	1891      	adds	r1, r2, r2
 8009b00:	62b9      	str	r1, [r7, #40]	; 0x28
 8009b02:	415b      	adcs	r3, r3
 8009b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b0a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009b0e:	f7f7 f94d 	bl	8000dac <__aeabi_uldivmod>
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	4b8c      	ldr	r3, [pc, #560]	; (8009d48 <UART_SetConfig+0x38c>)
 8009b18:	fba3 1302 	umull	r1, r3, r3, r2
 8009b1c:	095b      	lsrs	r3, r3, #5
 8009b1e:	2164      	movs	r1, #100	; 0x64
 8009b20:	fb01 f303 	mul.w	r3, r1, r3
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	00db      	lsls	r3, r3, #3
 8009b28:	3332      	adds	r3, #50	; 0x32
 8009b2a:	4a87      	ldr	r2, [pc, #540]	; (8009d48 <UART_SetConfig+0x38c>)
 8009b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b30:	095b      	lsrs	r3, r3, #5
 8009b32:	005b      	lsls	r3, r3, #1
 8009b34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009b38:	441e      	add	r6, r3
 8009b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f04f 0100 	mov.w	r1, #0
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	1894      	adds	r4, r2, r2
 8009b48:	623c      	str	r4, [r7, #32]
 8009b4a:	415b      	adcs	r3, r3
 8009b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009b52:	1812      	adds	r2, r2, r0
 8009b54:	eb41 0303 	adc.w	r3, r1, r3
 8009b58:	f04f 0400 	mov.w	r4, #0
 8009b5c:	f04f 0500 	mov.w	r5, #0
 8009b60:	00dd      	lsls	r5, r3, #3
 8009b62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009b66:	00d4      	lsls	r4, r2, #3
 8009b68:	4622      	mov	r2, r4
 8009b6a:	462b      	mov	r3, r5
 8009b6c:	1814      	adds	r4, r2, r0
 8009b6e:	653c      	str	r4, [r7, #80]	; 0x50
 8009b70:	414b      	adcs	r3, r1
 8009b72:	657b      	str	r3, [r7, #84]	; 0x54
 8009b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	f04f 0300 	mov.w	r3, #0
 8009b7e:	1891      	adds	r1, r2, r2
 8009b80:	61b9      	str	r1, [r7, #24]
 8009b82:	415b      	adcs	r3, r3
 8009b84:	61fb      	str	r3, [r7, #28]
 8009b86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b8a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009b8e:	f7f7 f90d 	bl	8000dac <__aeabi_uldivmod>
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	4b6c      	ldr	r3, [pc, #432]	; (8009d48 <UART_SetConfig+0x38c>)
 8009b98:	fba3 1302 	umull	r1, r3, r3, r2
 8009b9c:	095b      	lsrs	r3, r3, #5
 8009b9e:	2164      	movs	r1, #100	; 0x64
 8009ba0:	fb01 f303 	mul.w	r3, r1, r3
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	00db      	lsls	r3, r3, #3
 8009ba8:	3332      	adds	r3, #50	; 0x32
 8009baa:	4a67      	ldr	r2, [pc, #412]	; (8009d48 <UART_SetConfig+0x38c>)
 8009bac:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb0:	095b      	lsrs	r3, r3, #5
 8009bb2:	f003 0207 	and.w	r2, r3, #7
 8009bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4432      	add	r2, r6
 8009bbc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009bbe:	e0b9      	b.n	8009d34 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009bc2:	461c      	mov	r4, r3
 8009bc4:	f04f 0500 	mov.w	r5, #0
 8009bc8:	4622      	mov	r2, r4
 8009bca:	462b      	mov	r3, r5
 8009bcc:	1891      	adds	r1, r2, r2
 8009bce:	6139      	str	r1, [r7, #16]
 8009bd0:	415b      	adcs	r3, r3
 8009bd2:	617b      	str	r3, [r7, #20]
 8009bd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009bd8:	1912      	adds	r2, r2, r4
 8009bda:	eb45 0303 	adc.w	r3, r5, r3
 8009bde:	f04f 0000 	mov.w	r0, #0
 8009be2:	f04f 0100 	mov.w	r1, #0
 8009be6:	00d9      	lsls	r1, r3, #3
 8009be8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009bec:	00d0      	lsls	r0, r2, #3
 8009bee:	4602      	mov	r2, r0
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	eb12 0804 	adds.w	r8, r2, r4
 8009bf6:	eb43 0905 	adc.w	r9, r3, r5
 8009bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f04f 0100 	mov.w	r1, #0
 8009c04:	f04f 0200 	mov.w	r2, #0
 8009c08:	f04f 0300 	mov.w	r3, #0
 8009c0c:	008b      	lsls	r3, r1, #2
 8009c0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009c12:	0082      	lsls	r2, r0, #2
 8009c14:	4640      	mov	r0, r8
 8009c16:	4649      	mov	r1, r9
 8009c18:	f7f7 f8c8 	bl	8000dac <__aeabi_uldivmod>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	4b49      	ldr	r3, [pc, #292]	; (8009d48 <UART_SetConfig+0x38c>)
 8009c22:	fba3 2302 	umull	r2, r3, r3, r2
 8009c26:	095b      	lsrs	r3, r3, #5
 8009c28:	011e      	lsls	r6, r3, #4
 8009c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f04f 0100 	mov.w	r1, #0
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	1894      	adds	r4, r2, r2
 8009c38:	60bc      	str	r4, [r7, #8]
 8009c3a:	415b      	adcs	r3, r3
 8009c3c:	60fb      	str	r3, [r7, #12]
 8009c3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c42:	1812      	adds	r2, r2, r0
 8009c44:	eb41 0303 	adc.w	r3, r1, r3
 8009c48:	f04f 0400 	mov.w	r4, #0
 8009c4c:	f04f 0500 	mov.w	r5, #0
 8009c50:	00dd      	lsls	r5, r3, #3
 8009c52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009c56:	00d4      	lsls	r4, r2, #3
 8009c58:	4622      	mov	r2, r4
 8009c5a:	462b      	mov	r3, r5
 8009c5c:	1814      	adds	r4, r2, r0
 8009c5e:	64bc      	str	r4, [r7, #72]	; 0x48
 8009c60:	414b      	adcs	r3, r1
 8009c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f04f 0100 	mov.w	r1, #0
 8009c6e:	f04f 0200 	mov.w	r2, #0
 8009c72:	f04f 0300 	mov.w	r3, #0
 8009c76:	008b      	lsls	r3, r1, #2
 8009c78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009c7c:	0082      	lsls	r2, r0, #2
 8009c7e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009c82:	f7f7 f893 	bl	8000dac <__aeabi_uldivmod>
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4b2f      	ldr	r3, [pc, #188]	; (8009d48 <UART_SetConfig+0x38c>)
 8009c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8009c90:	095b      	lsrs	r3, r3, #5
 8009c92:	2164      	movs	r1, #100	; 0x64
 8009c94:	fb01 f303 	mul.w	r3, r1, r3
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	011b      	lsls	r3, r3, #4
 8009c9c:	3332      	adds	r3, #50	; 0x32
 8009c9e:	4a2a      	ldr	r2, [pc, #168]	; (8009d48 <UART_SetConfig+0x38c>)
 8009ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ca4:	095b      	lsrs	r3, r3, #5
 8009ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009caa:	441e      	add	r6, r3
 8009cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f04f 0100 	mov.w	r1, #0
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	1894      	adds	r4, r2, r2
 8009cba:	603c      	str	r4, [r7, #0]
 8009cbc:	415b      	adcs	r3, r3
 8009cbe:	607b      	str	r3, [r7, #4]
 8009cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cc4:	1812      	adds	r2, r2, r0
 8009cc6:	eb41 0303 	adc.w	r3, r1, r3
 8009cca:	f04f 0400 	mov.w	r4, #0
 8009cce:	f04f 0500 	mov.w	r5, #0
 8009cd2:	00dd      	lsls	r5, r3, #3
 8009cd4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009cd8:	00d4      	lsls	r4, r2, #3
 8009cda:	4622      	mov	r2, r4
 8009cdc:	462b      	mov	r3, r5
 8009cde:	eb12 0a00 	adds.w	sl, r2, r0
 8009ce2:	eb43 0b01 	adc.w	fp, r3, r1
 8009ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f04f 0100 	mov.w	r1, #0
 8009cf0:	f04f 0200 	mov.w	r2, #0
 8009cf4:	f04f 0300 	mov.w	r3, #0
 8009cf8:	008b      	lsls	r3, r1, #2
 8009cfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009cfe:	0082      	lsls	r2, r0, #2
 8009d00:	4650      	mov	r0, sl
 8009d02:	4659      	mov	r1, fp
 8009d04:	f7f7 f852 	bl	8000dac <__aeabi_uldivmod>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	4b0e      	ldr	r3, [pc, #56]	; (8009d48 <UART_SetConfig+0x38c>)
 8009d0e:	fba3 1302 	umull	r1, r3, r3, r2
 8009d12:	095b      	lsrs	r3, r3, #5
 8009d14:	2164      	movs	r1, #100	; 0x64
 8009d16:	fb01 f303 	mul.w	r3, r1, r3
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	011b      	lsls	r3, r3, #4
 8009d1e:	3332      	adds	r3, #50	; 0x32
 8009d20:	4a09      	ldr	r2, [pc, #36]	; (8009d48 <UART_SetConfig+0x38c>)
 8009d22:	fba2 2303 	umull	r2, r3, r2, r3
 8009d26:	095b      	lsrs	r3, r3, #5
 8009d28:	f003 020f 	and.w	r2, r3, #15
 8009d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4432      	add	r2, r6
 8009d32:	609a      	str	r2, [r3, #8]
}
 8009d34:	bf00      	nop
 8009d36:	377c      	adds	r7, #124	; 0x7c
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d3e:	bf00      	nop
 8009d40:	40011000 	.word	0x40011000
 8009d44:	40011400 	.word	0x40011400
 8009d48:	51eb851f 	.word	0x51eb851f

08009d4c <calloc>:
 8009d4c:	4b02      	ldr	r3, [pc, #8]	; (8009d58 <calloc+0xc>)
 8009d4e:	460a      	mov	r2, r1
 8009d50:	4601      	mov	r1, r0
 8009d52:	6818      	ldr	r0, [r3, #0]
 8009d54:	f000 b842 	b.w	8009ddc <_calloc_r>
 8009d58:	20000024 	.word	0x20000024

08009d5c <__errno>:
 8009d5c:	4b01      	ldr	r3, [pc, #4]	; (8009d64 <__errno+0x8>)
 8009d5e:	6818      	ldr	r0, [r3, #0]
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	20000024 	.word	0x20000024

08009d68 <__libc_init_array>:
 8009d68:	b570      	push	{r4, r5, r6, lr}
 8009d6a:	4d0d      	ldr	r5, [pc, #52]	; (8009da0 <__libc_init_array+0x38>)
 8009d6c:	4c0d      	ldr	r4, [pc, #52]	; (8009da4 <__libc_init_array+0x3c>)
 8009d6e:	1b64      	subs	r4, r4, r5
 8009d70:	10a4      	asrs	r4, r4, #2
 8009d72:	2600      	movs	r6, #0
 8009d74:	42a6      	cmp	r6, r4
 8009d76:	d109      	bne.n	8009d8c <__libc_init_array+0x24>
 8009d78:	4d0b      	ldr	r5, [pc, #44]	; (8009da8 <__libc_init_array+0x40>)
 8009d7a:	4c0c      	ldr	r4, [pc, #48]	; (8009dac <__libc_init_array+0x44>)
 8009d7c:	f000 f99e 	bl	800a0bc <_init>
 8009d80:	1b64      	subs	r4, r4, r5
 8009d82:	10a4      	asrs	r4, r4, #2
 8009d84:	2600      	movs	r6, #0
 8009d86:	42a6      	cmp	r6, r4
 8009d88:	d105      	bne.n	8009d96 <__libc_init_array+0x2e>
 8009d8a:	bd70      	pop	{r4, r5, r6, pc}
 8009d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d90:	4798      	blx	r3
 8009d92:	3601      	adds	r6, #1
 8009d94:	e7ee      	b.n	8009d74 <__libc_init_array+0xc>
 8009d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d9a:	4798      	blx	r3
 8009d9c:	3601      	adds	r6, #1
 8009d9e:	e7f2      	b.n	8009d86 <__libc_init_array+0x1e>
 8009da0:	0800a114 	.word	0x0800a114
 8009da4:	0800a114 	.word	0x0800a114
 8009da8:	0800a114 	.word	0x0800a114
 8009dac:	0800a118 	.word	0x0800a118

08009db0 <memcpy>:
 8009db0:	440a      	add	r2, r1
 8009db2:	4291      	cmp	r1, r2
 8009db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009db8:	d100      	bne.n	8009dbc <memcpy+0xc>
 8009dba:	4770      	bx	lr
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dc6:	4291      	cmp	r1, r2
 8009dc8:	d1f9      	bne.n	8009dbe <memcpy+0xe>
 8009dca:	bd10      	pop	{r4, pc}

08009dcc <memset>:
 8009dcc:	4402      	add	r2, r0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d100      	bne.n	8009dd6 <memset+0xa>
 8009dd4:	4770      	bx	lr
 8009dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8009dda:	e7f9      	b.n	8009dd0 <memset+0x4>

08009ddc <_calloc_r>:
 8009ddc:	b513      	push	{r0, r1, r4, lr}
 8009dde:	434a      	muls	r2, r1
 8009de0:	4611      	mov	r1, r2
 8009de2:	9201      	str	r2, [sp, #4]
 8009de4:	f000 f80a 	bl	8009dfc <_malloc_r>
 8009de8:	4604      	mov	r4, r0
 8009dea:	b118      	cbz	r0, 8009df4 <_calloc_r+0x18>
 8009dec:	9a01      	ldr	r2, [sp, #4]
 8009dee:	2100      	movs	r1, #0
 8009df0:	f7ff ffec 	bl	8009dcc <memset>
 8009df4:	4620      	mov	r0, r4
 8009df6:	b002      	add	sp, #8
 8009df8:	bd10      	pop	{r4, pc}
	...

08009dfc <_malloc_r>:
 8009dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfe:	1ccd      	adds	r5, r1, #3
 8009e00:	f025 0503 	bic.w	r5, r5, #3
 8009e04:	3508      	adds	r5, #8
 8009e06:	2d0c      	cmp	r5, #12
 8009e08:	bf38      	it	cc
 8009e0a:	250c      	movcc	r5, #12
 8009e0c:	2d00      	cmp	r5, #0
 8009e0e:	4606      	mov	r6, r0
 8009e10:	db01      	blt.n	8009e16 <_malloc_r+0x1a>
 8009e12:	42a9      	cmp	r1, r5
 8009e14:	d903      	bls.n	8009e1e <_malloc_r+0x22>
 8009e16:	230c      	movs	r3, #12
 8009e18:	6033      	str	r3, [r6, #0]
 8009e1a:	2000      	movs	r0, #0
 8009e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e1e:	f000 f857 	bl	8009ed0 <__malloc_lock>
 8009e22:	4921      	ldr	r1, [pc, #132]	; (8009ea8 <_malloc_r+0xac>)
 8009e24:	680a      	ldr	r2, [r1, #0]
 8009e26:	4614      	mov	r4, r2
 8009e28:	b99c      	cbnz	r4, 8009e52 <_malloc_r+0x56>
 8009e2a:	4f20      	ldr	r7, [pc, #128]	; (8009eac <_malloc_r+0xb0>)
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	b923      	cbnz	r3, 8009e3a <_malloc_r+0x3e>
 8009e30:	4621      	mov	r1, r4
 8009e32:	4630      	mov	r0, r6
 8009e34:	f000 f83c 	bl	8009eb0 <_sbrk_r>
 8009e38:	6038      	str	r0, [r7, #0]
 8009e3a:	4629      	mov	r1, r5
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	f000 f837 	bl	8009eb0 <_sbrk_r>
 8009e42:	1c43      	adds	r3, r0, #1
 8009e44:	d123      	bne.n	8009e8e <_malloc_r+0x92>
 8009e46:	230c      	movs	r3, #12
 8009e48:	6033      	str	r3, [r6, #0]
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	f000 f846 	bl	8009edc <__malloc_unlock>
 8009e50:	e7e3      	b.n	8009e1a <_malloc_r+0x1e>
 8009e52:	6823      	ldr	r3, [r4, #0]
 8009e54:	1b5b      	subs	r3, r3, r5
 8009e56:	d417      	bmi.n	8009e88 <_malloc_r+0x8c>
 8009e58:	2b0b      	cmp	r3, #11
 8009e5a:	d903      	bls.n	8009e64 <_malloc_r+0x68>
 8009e5c:	6023      	str	r3, [r4, #0]
 8009e5e:	441c      	add	r4, r3
 8009e60:	6025      	str	r5, [r4, #0]
 8009e62:	e004      	b.n	8009e6e <_malloc_r+0x72>
 8009e64:	6863      	ldr	r3, [r4, #4]
 8009e66:	42a2      	cmp	r2, r4
 8009e68:	bf0c      	ite	eq
 8009e6a:	600b      	streq	r3, [r1, #0]
 8009e6c:	6053      	strne	r3, [r2, #4]
 8009e6e:	4630      	mov	r0, r6
 8009e70:	f000 f834 	bl	8009edc <__malloc_unlock>
 8009e74:	f104 000b 	add.w	r0, r4, #11
 8009e78:	1d23      	adds	r3, r4, #4
 8009e7a:	f020 0007 	bic.w	r0, r0, #7
 8009e7e:	1ac2      	subs	r2, r0, r3
 8009e80:	d0cc      	beq.n	8009e1c <_malloc_r+0x20>
 8009e82:	1a1b      	subs	r3, r3, r0
 8009e84:	50a3      	str	r3, [r4, r2]
 8009e86:	e7c9      	b.n	8009e1c <_malloc_r+0x20>
 8009e88:	4622      	mov	r2, r4
 8009e8a:	6864      	ldr	r4, [r4, #4]
 8009e8c:	e7cc      	b.n	8009e28 <_malloc_r+0x2c>
 8009e8e:	1cc4      	adds	r4, r0, #3
 8009e90:	f024 0403 	bic.w	r4, r4, #3
 8009e94:	42a0      	cmp	r0, r4
 8009e96:	d0e3      	beq.n	8009e60 <_malloc_r+0x64>
 8009e98:	1a21      	subs	r1, r4, r0
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	f000 f808 	bl	8009eb0 <_sbrk_r>
 8009ea0:	3001      	adds	r0, #1
 8009ea2:	d1dd      	bne.n	8009e60 <_malloc_r+0x64>
 8009ea4:	e7cf      	b.n	8009e46 <_malloc_r+0x4a>
 8009ea6:	bf00      	nop
 8009ea8:	20000490 	.word	0x20000490
 8009eac:	20000494 	.word	0x20000494

08009eb0 <_sbrk_r>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	4d06      	ldr	r5, [pc, #24]	; (8009ecc <_sbrk_r+0x1c>)
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	4608      	mov	r0, r1
 8009eba:	602b      	str	r3, [r5, #0]
 8009ebc:	f7fa fb24 	bl	8004508 <_sbrk>
 8009ec0:	1c43      	adds	r3, r0, #1
 8009ec2:	d102      	bne.n	8009eca <_sbrk_r+0x1a>
 8009ec4:	682b      	ldr	r3, [r5, #0]
 8009ec6:	b103      	cbz	r3, 8009eca <_sbrk_r+0x1a>
 8009ec8:	6023      	str	r3, [r4, #0]
 8009eca:	bd38      	pop	{r3, r4, r5, pc}
 8009ecc:	200006cc 	.word	0x200006cc

08009ed0 <__malloc_lock>:
 8009ed0:	4801      	ldr	r0, [pc, #4]	; (8009ed8 <__malloc_lock+0x8>)
 8009ed2:	f000 b809 	b.w	8009ee8 <__retarget_lock_acquire_recursive>
 8009ed6:	bf00      	nop
 8009ed8:	200006d4 	.word	0x200006d4

08009edc <__malloc_unlock>:
 8009edc:	4801      	ldr	r0, [pc, #4]	; (8009ee4 <__malloc_unlock+0x8>)
 8009ede:	f000 b804 	b.w	8009eea <__retarget_lock_release_recursive>
 8009ee2:	bf00      	nop
 8009ee4:	200006d4 	.word	0x200006d4

08009ee8 <__retarget_lock_acquire_recursive>:
 8009ee8:	4770      	bx	lr

08009eea <__retarget_lock_release_recursive>:
 8009eea:	4770      	bx	lr

08009eec <sqrt>:
 8009eec:	b538      	push	{r3, r4, r5, lr}
 8009eee:	ed2d 8b02 	vpush	{d8}
 8009ef2:	ec55 4b10 	vmov	r4, r5, d0
 8009ef6:	f000 f82d 	bl	8009f54 <__ieee754_sqrt>
 8009efa:	4b15      	ldr	r3, [pc, #84]	; (8009f50 <sqrt+0x64>)
 8009efc:	eeb0 8a40 	vmov.f32	s16, s0
 8009f00:	eef0 8a60 	vmov.f32	s17, s1
 8009f04:	f993 3000 	ldrsb.w	r3, [r3]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	d019      	beq.n	8009f40 <sqrt+0x54>
 8009f0c:	4622      	mov	r2, r4
 8009f0e:	462b      	mov	r3, r5
 8009f10:	4620      	mov	r0, r4
 8009f12:	4629      	mov	r1, r5
 8009f14:	f7f6 fdb6 	bl	8000a84 <__aeabi_dcmpun>
 8009f18:	b990      	cbnz	r0, 8009f40 <sqrt+0x54>
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	4620      	mov	r0, r4
 8009f20:	4629      	mov	r1, r5
 8009f22:	f7f6 fd87 	bl	8000a34 <__aeabi_dcmplt>
 8009f26:	b158      	cbz	r0, 8009f40 <sqrt+0x54>
 8009f28:	f7ff ff18 	bl	8009d5c <__errno>
 8009f2c:	2321      	movs	r3, #33	; 0x21
 8009f2e:	6003      	str	r3, [r0, #0]
 8009f30:	2200      	movs	r2, #0
 8009f32:	2300      	movs	r3, #0
 8009f34:	4610      	mov	r0, r2
 8009f36:	4619      	mov	r1, r3
 8009f38:	f7f6 fc34 	bl	80007a4 <__aeabi_ddiv>
 8009f3c:	ec41 0b18 	vmov	d8, r0, r1
 8009f40:	eeb0 0a48 	vmov.f32	s0, s16
 8009f44:	eef0 0a68 	vmov.f32	s1, s17
 8009f48:	ecbd 8b02 	vpop	{d8}
 8009f4c:	bd38      	pop	{r3, r4, r5, pc}
 8009f4e:	bf00      	nop
 8009f50:	20000088 	.word	0x20000088

08009f54 <__ieee754_sqrt>:
 8009f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f58:	ec55 4b10 	vmov	r4, r5, d0
 8009f5c:	4e56      	ldr	r6, [pc, #344]	; (800a0b8 <__ieee754_sqrt+0x164>)
 8009f5e:	43ae      	bics	r6, r5
 8009f60:	ee10 0a10 	vmov	r0, s0
 8009f64:	ee10 3a10 	vmov	r3, s0
 8009f68:	4629      	mov	r1, r5
 8009f6a:	462a      	mov	r2, r5
 8009f6c:	d110      	bne.n	8009f90 <__ieee754_sqrt+0x3c>
 8009f6e:	ee10 2a10 	vmov	r2, s0
 8009f72:	462b      	mov	r3, r5
 8009f74:	f7f6 faec 	bl	8000550 <__aeabi_dmul>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	4629      	mov	r1, r5
 8009f80:	f7f6 f930 	bl	80001e4 <__adddf3>
 8009f84:	4604      	mov	r4, r0
 8009f86:	460d      	mov	r5, r1
 8009f88:	ec45 4b10 	vmov	d0, r4, r5
 8009f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f90:	2d00      	cmp	r5, #0
 8009f92:	dc10      	bgt.n	8009fb6 <__ieee754_sqrt+0x62>
 8009f94:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009f98:	4330      	orrs	r0, r6
 8009f9a:	d0f5      	beq.n	8009f88 <__ieee754_sqrt+0x34>
 8009f9c:	b15d      	cbz	r5, 8009fb6 <__ieee754_sqrt+0x62>
 8009f9e:	ee10 2a10 	vmov	r2, s0
 8009fa2:	462b      	mov	r3, r5
 8009fa4:	ee10 0a10 	vmov	r0, s0
 8009fa8:	f7f6 f91a 	bl	80001e0 <__aeabi_dsub>
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	f7f6 fbf8 	bl	80007a4 <__aeabi_ddiv>
 8009fb4:	e7e6      	b.n	8009f84 <__ieee754_sqrt+0x30>
 8009fb6:	1509      	asrs	r1, r1, #20
 8009fb8:	d076      	beq.n	800a0a8 <__ieee754_sqrt+0x154>
 8009fba:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009fbe:	07ce      	lsls	r6, r1, #31
 8009fc0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009fc4:	bf5e      	ittt	pl
 8009fc6:	0fda      	lsrpl	r2, r3, #31
 8009fc8:	005b      	lslpl	r3, r3, #1
 8009fca:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009fce:	0fda      	lsrs	r2, r3, #31
 8009fd0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009fd4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009fd8:	2000      	movs	r0, #0
 8009fda:	106d      	asrs	r5, r5, #1
 8009fdc:	005b      	lsls	r3, r3, #1
 8009fde:	f04f 0e16 	mov.w	lr, #22
 8009fe2:	4684      	mov	ip, r0
 8009fe4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009fe8:	eb0c 0401 	add.w	r4, ip, r1
 8009fec:	4294      	cmp	r4, r2
 8009fee:	bfde      	ittt	le
 8009ff0:	1b12      	suble	r2, r2, r4
 8009ff2:	eb04 0c01 	addle.w	ip, r4, r1
 8009ff6:	1840      	addle	r0, r0, r1
 8009ff8:	0052      	lsls	r2, r2, #1
 8009ffa:	f1be 0e01 	subs.w	lr, lr, #1
 8009ffe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a002:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a006:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a00a:	d1ed      	bne.n	8009fe8 <__ieee754_sqrt+0x94>
 800a00c:	4671      	mov	r1, lr
 800a00e:	2720      	movs	r7, #32
 800a010:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a014:	4562      	cmp	r2, ip
 800a016:	eb04 060e 	add.w	r6, r4, lr
 800a01a:	dc02      	bgt.n	800a022 <__ieee754_sqrt+0xce>
 800a01c:	d113      	bne.n	800a046 <__ieee754_sqrt+0xf2>
 800a01e:	429e      	cmp	r6, r3
 800a020:	d811      	bhi.n	800a046 <__ieee754_sqrt+0xf2>
 800a022:	2e00      	cmp	r6, #0
 800a024:	eb06 0e04 	add.w	lr, r6, r4
 800a028:	da43      	bge.n	800a0b2 <__ieee754_sqrt+0x15e>
 800a02a:	f1be 0f00 	cmp.w	lr, #0
 800a02e:	db40      	blt.n	800a0b2 <__ieee754_sqrt+0x15e>
 800a030:	f10c 0801 	add.w	r8, ip, #1
 800a034:	eba2 020c 	sub.w	r2, r2, ip
 800a038:	429e      	cmp	r6, r3
 800a03a:	bf88      	it	hi
 800a03c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a040:	1b9b      	subs	r3, r3, r6
 800a042:	4421      	add	r1, r4
 800a044:	46c4      	mov	ip, r8
 800a046:	0052      	lsls	r2, r2, #1
 800a048:	3f01      	subs	r7, #1
 800a04a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a04e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a052:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a056:	d1dd      	bne.n	800a014 <__ieee754_sqrt+0xc0>
 800a058:	4313      	orrs	r3, r2
 800a05a:	d006      	beq.n	800a06a <__ieee754_sqrt+0x116>
 800a05c:	1c4c      	adds	r4, r1, #1
 800a05e:	bf13      	iteet	ne
 800a060:	3101      	addne	r1, #1
 800a062:	3001      	addeq	r0, #1
 800a064:	4639      	moveq	r1, r7
 800a066:	f021 0101 	bicne.w	r1, r1, #1
 800a06a:	1043      	asrs	r3, r0, #1
 800a06c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a070:	0849      	lsrs	r1, r1, #1
 800a072:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a076:	07c2      	lsls	r2, r0, #31
 800a078:	bf48      	it	mi
 800a07a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a07e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a082:	460c      	mov	r4, r1
 800a084:	463d      	mov	r5, r7
 800a086:	e77f      	b.n	8009f88 <__ieee754_sqrt+0x34>
 800a088:	0ada      	lsrs	r2, r3, #11
 800a08a:	3815      	subs	r0, #21
 800a08c:	055b      	lsls	r3, r3, #21
 800a08e:	2a00      	cmp	r2, #0
 800a090:	d0fa      	beq.n	800a088 <__ieee754_sqrt+0x134>
 800a092:	02d7      	lsls	r7, r2, #11
 800a094:	d50a      	bpl.n	800a0ac <__ieee754_sqrt+0x158>
 800a096:	f1c1 0420 	rsb	r4, r1, #32
 800a09a:	fa23 f404 	lsr.w	r4, r3, r4
 800a09e:	1e4d      	subs	r5, r1, #1
 800a0a0:	408b      	lsls	r3, r1
 800a0a2:	4322      	orrs	r2, r4
 800a0a4:	1b41      	subs	r1, r0, r5
 800a0a6:	e788      	b.n	8009fba <__ieee754_sqrt+0x66>
 800a0a8:	4608      	mov	r0, r1
 800a0aa:	e7f0      	b.n	800a08e <__ieee754_sqrt+0x13a>
 800a0ac:	0052      	lsls	r2, r2, #1
 800a0ae:	3101      	adds	r1, #1
 800a0b0:	e7ef      	b.n	800a092 <__ieee754_sqrt+0x13e>
 800a0b2:	46e0      	mov	r8, ip
 800a0b4:	e7be      	b.n	800a034 <__ieee754_sqrt+0xe0>
 800a0b6:	bf00      	nop
 800a0b8:	7ff00000 	.word	0x7ff00000

0800a0bc <_init>:
 800a0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0be:	bf00      	nop
 800a0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c2:	bc08      	pop	{r3}
 800a0c4:	469e      	mov	lr, r3
 800a0c6:	4770      	bx	lr

0800a0c8 <_fini>:
 800a0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ca:	bf00      	nop
 800a0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ce:	bc08      	pop	{r3}
 800a0d0:	469e      	mov	lr, r3
 800a0d2:	4770      	bx	lr
