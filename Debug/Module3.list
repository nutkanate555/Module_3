
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a55c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800a6f4  0800a6f4  0001a6f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a72c  0800a72c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a72c  0800a72c  0001a72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a734  0800a734  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a734  0800a734  0001a734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a738  0800a738  0001a738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800a73c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  20000090  0800a7c8  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  0800a7c8  00020734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001114c  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201f  00000000  00000000  00031208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00033228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  000342a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f71  00000000  00000000  00035288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120eb  00000000  00000000  0004c1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f58  00000000  00000000  0005e2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f023c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004be8  00000000  00000000  000f0290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a6dc 	.word	0x0800a6dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800a6dc 	.word	0x0800a6dc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b96e 	b.w	80010a0 <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f806 	bl	8000ddc <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	4604      	mov	r4, r0
 8000de4:	468c      	mov	ip, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 8083 	bne.w	8000ef2 <__udivmoddi4+0x116>
 8000dec:	428a      	cmp	r2, r1
 8000dee:	4617      	mov	r7, r2
 8000df0:	d947      	bls.n	8000e82 <__udivmoddi4+0xa6>
 8000df2:	fab2 f282 	clz	r2, r2
 8000df6:	b142      	cbz	r2, 8000e0a <__udivmoddi4+0x2e>
 8000df8:	f1c2 0020 	rsb	r0, r2, #32
 8000dfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4097      	lsls	r7, r2
 8000e04:	ea40 0c01 	orr.w	ip, r0, r1
 8000e08:	4094      	lsls	r4, r2
 8000e0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e0e:	0c23      	lsrs	r3, r4, #16
 8000e10:	fbbc f6f8 	udiv	r6, ip, r8
 8000e14:	fa1f fe87 	uxth.w	lr, r7
 8000e18:	fb08 c116 	mls	r1, r8, r6, ip
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f10e 	mul.w	r1, r6, lr
 8000e24:	4299      	cmp	r1, r3
 8000e26:	d909      	bls.n	8000e3c <__udivmoddi4+0x60>
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 8119 	bcs.w	8001064 <__udivmoddi4+0x288>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 8116 	bls.w	8001064 <__udivmoddi4+0x288>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	443b      	add	r3, r7
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x8c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	f080 8105 	bcs.w	8001068 <__udivmoddi4+0x28c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8102 	bls.w	8001068 <__udivmoddi4+0x28c>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6c:	eba4 040e 	sub.w	r4, r4, lr
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa0>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	b902      	cbnz	r2, 8000e86 <__udivmoddi4+0xaa>
 8000e84:	deff      	udf	#255	; 0xff
 8000e86:	fab2 f282 	clz	r2, r2
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d150      	bne.n	8000f30 <__udivmoddi4+0x154>
 8000e8e:	1bcb      	subs	r3, r1, r7
 8000e90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	2601      	movs	r6, #1
 8000e9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e9e:	0c21      	lsrs	r1, r4, #16
 8000ea0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb08 f30c 	mul.w	r3, r8, ip
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d907      	bls.n	8000ec0 <__udivmoddi4+0xe4>
 8000eb0:	1879      	adds	r1, r7, r1
 8000eb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0xe2>
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	f200 80e9 	bhi.w	8001090 <__udivmoddi4+0x2b4>
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	1ac9      	subs	r1, r1, r3
 8000ec2:	b2a3      	uxth	r3, r4
 8000ec4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ecc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed0:	fb08 f800 	mul.w	r8, r8, r0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x10c>
 8000ed8:	193c      	adds	r4, r7, r4
 8000eda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x10a>
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	f200 80d9 	bhi.w	8001098 <__udivmoddi4+0x2bc>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	eba4 0408 	sub.w	r4, r4, r8
 8000eec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef0:	e7bf      	b.n	8000e72 <__udivmoddi4+0x96>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d909      	bls.n	8000f0a <__udivmoddi4+0x12e>
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	f000 80b1 	beq.w	800105e <__udivmoddi4+0x282>
 8000efc:	2600      	movs	r6, #0
 8000efe:	e9c5 0100 	strd	r0, r1, [r5]
 8000f02:	4630      	mov	r0, r6
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	fab3 f683 	clz	r6, r3
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d14a      	bne.n	8000fa8 <__udivmoddi4+0x1cc>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d302      	bcc.n	8000f1c <__udivmoddi4+0x140>
 8000f16:	4282      	cmp	r2, r0
 8000f18:	f200 80b8 	bhi.w	800108c <__udivmoddi4+0x2b0>
 8000f1c:	1a84      	subs	r4, r0, r2
 8000f1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000f22:	2001      	movs	r0, #1
 8000f24:	468c      	mov	ip, r1
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d0a8      	beq.n	8000e7c <__udivmoddi4+0xa0>
 8000f2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f2e:	e7a5      	b.n	8000e7c <__udivmoddi4+0xa0>
 8000f30:	f1c2 0320 	rsb	r3, r2, #32
 8000f34:	fa20 f603 	lsr.w	r6, r0, r3
 8000f38:	4097      	lsls	r7, r2
 8000f3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000f3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f42:	40d9      	lsrs	r1, r3
 8000f44:	4330      	orrs	r0, r6
 8000f46:	0c03      	lsrs	r3, r0, #16
 8000f48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f4c:	fa1f f887 	uxth.w	r8, r7
 8000f50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f58:	fb06 f108 	mul.w	r1, r6, r8
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f62:	d909      	bls.n	8000f78 <__udivmoddi4+0x19c>
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f6a:	f080 808d 	bcs.w	8001088 <__udivmoddi4+0x2ac>
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	f240 808a 	bls.w	8001088 <__udivmoddi4+0x2ac>
 8000f74:	3e02      	subs	r6, #2
 8000f76:	443b      	add	r3, r7
 8000f78:	1a5b      	subs	r3, r3, r1
 8000f7a:	b281      	uxth	r1, r0
 8000f7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f88:	fb00 f308 	mul.w	r3, r0, r8
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d907      	bls.n	8000fa0 <__udivmoddi4+0x1c4>
 8000f90:	1879      	adds	r1, r7, r1
 8000f92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f96:	d273      	bcs.n	8001080 <__udivmoddi4+0x2a4>
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d971      	bls.n	8001080 <__udivmoddi4+0x2a4>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4439      	add	r1, r7
 8000fa0:	1acb      	subs	r3, r1, r3
 8000fa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fa6:	e778      	b.n	8000e9a <__udivmoddi4+0xbe>
 8000fa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000fac:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fb4:	431c      	orrs	r4, r3
 8000fb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fba:	fa01 f306 	lsl.w	r3, r1, r6
 8000fbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fc6:	431f      	orrs	r7, r3
 8000fc8:	0c3b      	lsrs	r3, r7, #16
 8000fca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fce:	fa1f f884 	uxth.w	r8, r4
 8000fd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fda:	fb09 fa08 	mul.w	sl, r9, r8
 8000fde:	458a      	cmp	sl, r1
 8000fe0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fe4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0x220>
 8000fea:	1861      	adds	r1, r4, r1
 8000fec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff0:	d248      	bcs.n	8001084 <__udivmoddi4+0x2a8>
 8000ff2:	458a      	cmp	sl, r1
 8000ff4:	d946      	bls.n	8001084 <__udivmoddi4+0x2a8>
 8000ff6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ffa:	4421      	add	r1, r4
 8000ffc:	eba1 010a 	sub.w	r1, r1, sl
 8001000:	b2bf      	uxth	r7, r7
 8001002:	fbb1 f0fe 	udiv	r0, r1, lr
 8001006:	fb0e 1110 	mls	r1, lr, r0, r1
 800100a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800100e:	fb00 f808 	mul.w	r8, r0, r8
 8001012:	45b8      	cmp	r8, r7
 8001014:	d907      	bls.n	8001026 <__udivmoddi4+0x24a>
 8001016:	19e7      	adds	r7, r4, r7
 8001018:	f100 31ff 	add.w	r1, r0, #4294967295
 800101c:	d22e      	bcs.n	800107c <__udivmoddi4+0x2a0>
 800101e:	45b8      	cmp	r8, r7
 8001020:	d92c      	bls.n	800107c <__udivmoddi4+0x2a0>
 8001022:	3802      	subs	r0, #2
 8001024:	4427      	add	r7, r4
 8001026:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800102a:	eba7 0708 	sub.w	r7, r7, r8
 800102e:	fba0 8902 	umull	r8, r9, r0, r2
 8001032:	454f      	cmp	r7, r9
 8001034:	46c6      	mov	lr, r8
 8001036:	4649      	mov	r1, r9
 8001038:	d31a      	bcc.n	8001070 <__udivmoddi4+0x294>
 800103a:	d017      	beq.n	800106c <__udivmoddi4+0x290>
 800103c:	b15d      	cbz	r5, 8001056 <__udivmoddi4+0x27a>
 800103e:	ebb3 020e 	subs.w	r2, r3, lr
 8001042:	eb67 0701 	sbc.w	r7, r7, r1
 8001046:	fa07 fc0c 	lsl.w	ip, r7, ip
 800104a:	40f2      	lsrs	r2, r6
 800104c:	ea4c 0202 	orr.w	r2, ip, r2
 8001050:	40f7      	lsrs	r7, r6
 8001052:	e9c5 2700 	strd	r2, r7, [r5]
 8001056:	2600      	movs	r6, #0
 8001058:	4631      	mov	r1, r6
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105e:	462e      	mov	r6, r5
 8001060:	4628      	mov	r0, r5
 8001062:	e70b      	b.n	8000e7c <__udivmoddi4+0xa0>
 8001064:	4606      	mov	r6, r0
 8001066:	e6e9      	b.n	8000e3c <__udivmoddi4+0x60>
 8001068:	4618      	mov	r0, r3
 800106a:	e6fd      	b.n	8000e68 <__udivmoddi4+0x8c>
 800106c:	4543      	cmp	r3, r8
 800106e:	d2e5      	bcs.n	800103c <__udivmoddi4+0x260>
 8001070:	ebb8 0e02 	subs.w	lr, r8, r2
 8001074:	eb69 0104 	sbc.w	r1, r9, r4
 8001078:	3801      	subs	r0, #1
 800107a:	e7df      	b.n	800103c <__udivmoddi4+0x260>
 800107c:	4608      	mov	r0, r1
 800107e:	e7d2      	b.n	8001026 <__udivmoddi4+0x24a>
 8001080:	4660      	mov	r0, ip
 8001082:	e78d      	b.n	8000fa0 <__udivmoddi4+0x1c4>
 8001084:	4681      	mov	r9, r0
 8001086:	e7b9      	b.n	8000ffc <__udivmoddi4+0x220>
 8001088:	4666      	mov	r6, ip
 800108a:	e775      	b.n	8000f78 <__udivmoddi4+0x19c>
 800108c:	4630      	mov	r0, r6
 800108e:	e74a      	b.n	8000f26 <__udivmoddi4+0x14a>
 8001090:	f1ac 0c02 	sub.w	ip, ip, #2
 8001094:	4439      	add	r1, r7
 8001096:	e713      	b.n	8000ec0 <__udivmoddi4+0xe4>
 8001098:	3802      	subs	r0, #2
 800109a:	443c      	add	r4, r7
 800109c:	e724      	b.n	8000ee8 <__udivmoddi4+0x10c>
 800109e:	bf00      	nop

080010a0 <__aeabi_idiv0>:
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	0000      	movs	r0, r0
	...

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b0:	f003 fd8c 	bl	8004bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b4:	f000 fa0e 	bl	80014d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b8:	f000 fc10 	bl	80018dc <MX_GPIO_Init>
  MX_DMA_Init();
 80010bc:	f000 fbe6 	bl	800188c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010c0:	f000 fbb8 	bl	8001834 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010c4:	f000 fa9c 	bl	8001600 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010c8:	f000 faf2 	bl	80016b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010cc:	f000 fb3c 	bl	8001748 <MX_TIM3_Init>
  MX_I2C1_Init();
 80010d0:	f000 fa68 	bl	80015a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80010d4:	48ba      	ldr	r0, [pc, #744]	; (80013c0 <main+0x318>)
 80010d6:	f007 f96b 	bl	80083b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010da:	213c      	movs	r1, #60	; 0x3c
 80010dc:	48b9      	ldr	r0, [pc, #740]	; (80013c4 <main+0x31c>)
 80010de:	f007 fb79 	bl	80087d4 <HAL_TIM_Encoder_Start>

	// start PWM
  HAL_TIM_Base_Start(&htim3);
 80010e2:	48b9      	ldr	r0, [pc, #740]	; (80013c8 <main+0x320>)
 80010e4:	f007 f90a 	bl	80082fc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010e8:	2100      	movs	r1, #0
 80010ea:	48b7      	ldr	r0, [pc, #732]	; (80013c8 <main+0x320>)
 80010ec:	f007 fa1c 	bl	8008528 <HAL_TIM_PWM_Start>

  ///Init Data
  ConverterUnitSystemStructureInit(&CUSSStruc);
 80010f0:	48b6      	ldr	r0, [pc, #728]	; (80013cc <main+0x324>)
 80010f2:	f000 fdff 	bl	8001cf4 <ConverterUnitSystemStructureInit>
  TrajectoryGenerationStructureInit(&TrjStruc, &CUSSStruc);
 80010f6:	49b5      	ldr	r1, [pc, #724]	; (80013cc <main+0x324>)
 80010f8:	48b5      	ldr	r0, [pc, #724]	; (80013d0 <main+0x328>)
 80010fa:	f000 fe15 	bl	8001d28 <TrajectoryGenerationStructureInit>

  StabilizerPIDLoad();
 80010fe:	f001 f80f 	bl	8002120 <StabilizerPIDLoad>
  LinkMovingPIDLoad();
 8001102:	f000 feb5 	bl	8001e70 <LinkMovingPIDLoad>
  VelocityPurePIDLoad();
 8001106:	f001 f83f 	bl	8002188 <VelocityPurePIDLoad>

  Encoder_SetHome_Position();
 800110a:	f000 fd73 	bl	8001bf4 <Encoder_SetHome_Position>

  ///UART init
  UART2.huart = &huart2;
 800110e:	4bb1      	ldr	r3, [pc, #708]	; (80013d4 <main+0x32c>)
 8001110:	4ab1      	ldr	r2, [pc, #708]	; (80013d8 <main+0x330>)
 8001112:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 8001114:	4baf      	ldr	r3, [pc, #700]	; (80013d4 <main+0x32c>)
 8001116:	22ff      	movs	r2, #255	; 0xff
 8001118:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 800111a:	4bae      	ldr	r3, [pc, #696]	; (80013d4 <main+0x32c>)
 800111c:	22ff      	movs	r2, #255	; 0xff
 800111e:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 8001120:	48ac      	ldr	r0, [pc, #688]	; (80013d4 <main+0x32c>)
 8001122:	f002 f8ef 	bl	8003304 <UARTInit>
  UARTResetStart(&UART2);
 8001126:	48ab      	ldr	r0, [pc, #684]	; (80013d4 <main+0x32c>)
 8001128:	f002 f914 	bl	8003354 <UARTResetStart>

  HAL_Delay( 100 );
 800112c:	2064      	movs	r0, #100	; 0x64
 800112e:	f003 fdbf 	bl	8004cb0 <HAL_Delay>
  if (EndeffectorTestMode == 1)
 8001132:	4baa      	ldr	r3, [pc, #680]	; (80013dc <main+0x334>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d10c      	bne.n	8001154 <main+0xac>
  {
	  while (1)
	  {
		  {
				uint8_t temp[1] = {0x45};
 800113a:	2345      	movs	r3, #69	; 0x45
 800113c:	713b      	strb	r3, [r7, #4]
				HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
 800113e:	1d3a      	adds	r2, r7, #4
 8001140:	2301      	movs	r3, #1
 8001142:	2146      	movs	r1, #70	; 0x46
 8001144:	48a6      	ldr	r0, [pc, #664]	; (80013e0 <main+0x338>)
 8001146:	f004 fe0b 	bl	8005d60 <HAL_I2C_Master_Transmit_IT>
				HAL_Delay( 6000 );
 800114a:	f241 7070 	movw	r0, #6000	; 0x1770
 800114e:	f003 fdaf 	bl	8004cb0 <HAL_Delay>
		  {
 8001152:	e7f2      	b.n	800113a <main+0x92>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int16_t inputChar = UARTReadChar(&UART2);
 8001154:	489f      	ldr	r0, [pc, #636]	; (80013d4 <main+0x32c>)
 8001156:	f002 f921 	bl	800339c <UARTReadChar>
 800115a:	4603      	mov	r3, r0
 800115c:	80fb      	strh	r3, [r7, #6]
	  if (inputChar != -1)
 800115e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001166:	d005      	beq.n	8001174 <main+0xcc>
	  {
		  Munmunbot_Protocol(inputChar, &UART2);
 8001168:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800116c:	4999      	ldr	r1, [pc, #612]	; (80013d4 <main+0x32c>)
 800116e:	4618      	mov	r0, r3
 8001170:	f002 f9fa 	bl	8003568 <Munmunbot_Protocol>

	  }

	  switch (Munmunbot_State)
 8001174:	4b9b      	ldr	r3, [pc, #620]	; (80013e4 <main+0x33c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b08      	cmp	r3, #8
 800117a:	f200 817b 	bhi.w	8001474 <main+0x3cc>
 800117e:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <main+0xdc>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	080011a9 	.word	0x080011a9
 8001188:	080011db 	.word	0x080011db
 800118c:	080011f7 	.word	0x080011f7
 8001190:	08001211 	.word	0x08001211
 8001194:	0800122b 	.word	0x0800122b
 8001198:	08001273 	.word	0x08001273
 800119c:	08001301 	.word	0x08001301
 80011a0:	0800144d 	.word	0x0800144d
 80011a4:	0800145b 	.word	0x0800145b
	  {
	  	  case STATE_Disconnected:
	  		  EndEffectorDebug();
 80011a8:	f003 f916 	bl	80043d8 <EndEffectorDebug>
	  		  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0)
 80011ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b0:	488d      	ldr	r0, [pc, #564]	; (80013e8 <main+0x340>)
 80011b2:	f004 fc47 	bl	8005a44 <HAL_GPIO_ReadPin>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d103      	bne.n	80011c4 <main+0x11c>
	  		  {
	  			  LAMP_ON(0);
 80011bc:	2000      	movs	r0, #0
 80011be:	f002 fea1 	bl	8003f04 <LAMP_ON>
 80011c2:	e002      	b.n	80011ca <main+0x122>
	  		  }
	  		  else
	  		  {
	  			  LAMP_ON(4);
 80011c4:	2004      	movs	r0, #4
 80011c6:	f002 fe9d 	bl	8003f04 <LAMP_ON>
	  		  }
	  		  UpdateMunmunBotState();
 80011ca:	f003 f8e5 	bl	8004398 <UpdateMunmunBotState>
	  		  sethomeTrigger = 0;
 80011ce:	4b87      	ldr	r3, [pc, #540]	; (80013ec <main+0x344>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
	  		  Emergency_switch_trigger();
 80011d4:	f002 ff06 	bl	8003fe4 <Emergency_switch_trigger>
	  		  break;
 80011d8:	e14c      	b.n	8001474 <main+0x3cc>

	  	  case STATE_Idle:
	  		  LAMP_ON(1);
 80011da:	2001      	movs	r0, #1
 80011dc:	f002 fe92 	bl	8003f04 <LAMP_ON>
	  		  UpdateMunmunBotState();
 80011e0:	f003 f8da 	bl	8004398 <UpdateMunmunBotState>
//	  		  Stabilizing_the_LINK( StabilizePosition );
//	  		  Controlling_the_LINK_Velo( StabilizeVelocity );
	  		  if ( sethomeTrigger == 1 )
 80011e4:	4b81      	ldr	r3, [pc, #516]	; (80013ec <main+0x344>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <main+0x148>
	  		  {
	  			  Encoder_SetHome_Position();
 80011ec:	f000 fd02 	bl	8001bf4 <Encoder_SetHome_Position>
	  		  }
	  		  Emergency_switch_trigger();
 80011f0:	f002 fef8 	bl	8003fe4 <Emergency_switch_trigger>
		  	  break;
 80011f4:	e13e      	b.n	8001474 <main+0x3cc>

	  	  case STATE_PrepareDATA:
	  		  sethomeTrigger = 0;
 80011f6:	4b7d      	ldr	r3, [pc, #500]	; (80013ec <main+0x344>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
	  		  UpdateMunmunBotState();
 80011fc:	f003 f8cc 	bl	8004398 <UpdateMunmunBotState>
	  		  LAMP_ON(2);
 8001200:	2002      	movs	r0, #2
 8001202:	f002 fe7f 	bl	8003f04 <LAMP_ON>
	  		  TrajectoryGenerationPrepareDATA();
 8001206:	f001 f82b 	bl	8002260 <TrajectoryGenerationPrepareDATA>
	  		  Emergency_switch_trigger();
 800120a:	f002 feeb 	bl	8003fe4 <Emergency_switch_trigger>
		  	  break;
 800120e:	e131      	b.n	8001474 <main+0x3cc>

	  	  case STATE_Calculation:
	  		  LAMP_ON(2);
 8001210:	2002      	movs	r0, #2
 8001212:	f002 fe77 	bl	8003f04 <LAMP_ON>
	  		  UpdateMunmunBotState();
 8001216:	f003 f8bf 	bl	8004398 <UpdateMunmunBotState>
	  		  TrajectoryGenerationCalculation();
 800121a:	f001 f97d 	bl	8002518 <TrajectoryGenerationCalculation>
	  		  Munmunbot_State = STATE_Link_Moving;
 800121e:	4b71      	ldr	r3, [pc, #452]	; (80013e4 <main+0x33c>)
 8001220:	2204      	movs	r2, #4
 8001222:	701a      	strb	r2, [r3, #0]
	  		  Emergency_switch_trigger();
 8001224:	f002 fede 	bl	8003fe4 <Emergency_switch_trigger>
	  		  break;
 8001228:	e124      	b.n	8001474 <main+0x3cc>

	   	  case STATE_Link_Moving:
	   		  LAMP_ON(2);
 800122a:	2002      	movs	r0, #2
 800122c:	f002 fe6a 	bl	8003f04 <LAMP_ON>
	   		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8001230:	f000 fd46 	bl	8001cc0 <micros>
 8001234:	4b66      	ldr	r3, [pc, #408]	; (80013d0 <main+0x328>)
 8001236:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800123a:	1a84      	subs	r4, r0, r2
 800123c:	eb61 0503 	sbc.w	r5, r1, r3
 8001240:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <main+0x328>)
 8001242:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001246:	429d      	cmp	r5, r3
 8001248:	bf08      	it	eq
 800124a:	4294      	cmpeq	r4, r2
 800124c:	d30e      	bcc.n	800126c <main+0x1c4>
	   		  {
	   			  Controlling_the_LINK();
 800124e:	f002 ff23 	bl	8004098 <Controlling_the_LINK>


				  if (Moving_Link_Task_Flag == 1)
 8001252:	4b67      	ldr	r3, [pc, #412]	; (80013f0 <main+0x348>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d108      	bne.n	800126c <main+0x1c4>
				  {
					  Munmunbot_State = STATE_Stabilized_Link;
 800125a:	4b62      	ldr	r3, [pc, #392]	; (80013e4 <main+0x33c>)
 800125c:	2205      	movs	r2, #5
 800125e:	701a      	strb	r2, [r3, #0]
					  StabilizePosition = TrjStruc.Desire_Theta;
 8001260:	4b5b      	ldr	r3, [pc, #364]	; (80013d0 <main+0x328>)
 8001262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001264:	4a63      	ldr	r2, [pc, #396]	; (80013f4 <main+0x34c>)
 8001266:	6013      	str	r3, [r2, #0]
					  PID_Reset();
 8001268:	f002 fddc 	bl	8003e24 <PID_Reset>
				  }
	   		  }
	  		  Emergency_switch_trigger();
 800126c:	f002 feba 	bl	8003fe4 <Emergency_switch_trigger>
	  		  break;
 8001270:	e100      	b.n	8001474 <main+0x3cc>

	   	  case STATE_Stabilized_Link:
	   		  LAMP_ON(2);
 8001272:	2002      	movs	r0, #2
 8001274:	f002 fe46 	bl	8003f04 <LAMP_ON>
//	   		  Stabilizing_the_LINK( StabilizePosition );
	   		  HackTheLink( StabilizePosition );
 8001278:	4b5e      	ldr	r3, [pc, #376]	; (80013f4 <main+0x34c>)
 800127a:	edd3 7a00 	vldr	s15, [r3]
 800127e:	eeb0 0a67 	vmov.f32	s0, s15
 8001282:	f002 ff71 	bl	8004168 <HackTheLink>
			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 8001286:	4b5c      	ldr	r3, [pc, #368]	; (80013f8 <main+0x350>)
 8001288:	ed93 7a08 	vldr	s14, [r3, #32]
 800128c:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <main+0x328>)
 800128e:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8001292:	4b5a      	ldr	r3, [pc, #360]	; (80013fc <main+0x354>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80012a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012aa:	d826      	bhi.n	80012fa <main+0x252>
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 80012ac:	4b52      	ldr	r3, [pc, #328]	; (80013f8 <main+0x350>)
 80012ae:	ed93 7a08 	vldr	s14, [r3, #32]
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <main+0x328>)
 80012b4:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80012b8:	4b50      	ldr	r3, [pc, #320]	; (80013fc <main+0x354>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 80012c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d0:	db13      	blt.n	80012fa <main+0x252>
					  (Moving_Link_Task_Flag == 1))
 80012d2:	4b47      	ldr	r3, [pc, #284]	; (80013f0 <main+0x348>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d10f      	bne.n	80012fa <main+0x252>
			  {
				    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80012da:	4b3b      	ldr	r3, [pc, #236]	; (80013c8 <main+0x320>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2200      	movs	r2, #0
 80012e0:	635a      	str	r2, [r3, #52]	; 0x34
					Munmunbot_State = STATE_Verified;
 80012e2:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <main+0x33c>)
 80012e4:	2206      	movs	r2, #6
 80012e6:	701a      	strb	r2, [r3, #0]
					Verified_Timestamp = micros();
 80012e8:	f000 fcea 	bl	8001cc0 <micros>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4943      	ldr	r1, [pc, #268]	; (8001400 <main+0x358>)
 80012f2:	e9c1 2300 	strd	r2, r3, [r1]
					PID_Reset();
 80012f6:	f002 fd95 	bl	8003e24 <PID_Reset>
			  }
	   		  Emergency_switch_trigger();
 80012fa:	f002 fe73 	bl	8003fe4 <Emergency_switch_trigger>
	   		  break;
 80012fe:	e0b9      	b.n	8001474 <main+0x3cc>
	   	  case STATE_Verified:
	   	  {
	   		  LAMP_ON(2);
 8001300:	2002      	movs	r0, #2
 8001302:	f002 fdff 	bl	8003f04 <LAMP_ON>
	   		  UpdateMunmunBotState();
 8001306:	f003 f847 	bl	8004398 <UpdateMunmunBotState>
	   		  if ( micros()-Verified_Timestamp >= 0.5*1000000  )
 800130a:	f000 fcd9 	bl	8001cc0 <micros>
 800130e:	4b3c      	ldr	r3, [pc, #240]	; (8001400 <main+0x358>)
 8001310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001314:	ebb0 0802 	subs.w	r8, r0, r2
 8001318:	eb61 0903 	sbc.w	r9, r1, r3
 800131c:	4640      	mov	r0, r8
 800131e:	4649      	mov	r1, r9
 8001320:	f7ff f8e0 	bl	80004e4 <__aeabi_ul2d>
 8001324:	a324      	add	r3, pc, #144	; (adr r3, 80013b8 <main+0x310>)
 8001326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132a:	f7ff fb97 	bl	8000a5c <__aeabi_dcmpge>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 8088 	beq.w	8001446 <main+0x39e>
	   		  {

				  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 8001336:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <main+0x350>)
 8001338:	ed93 7a08 	vldr	s14, [r3, #32]
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <main+0x328>)
 800133e:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8001342:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <main+0x354>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001352:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135a:	d871      	bhi.n	8001440 <main+0x398>
						  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 800135c:	4b26      	ldr	r3, [pc, #152]	; (80013f8 <main+0x350>)
 800135e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <main+0x328>)
 8001364:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8001368:	4b24      	ldr	r3, [pc, #144]	; (80013fc <main+0x354>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001374:	ee76 7ae7 	vsub.f32	s15, s13, s15
				  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 8001378:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001380:	db5e      	blt.n	8001440 <main+0x398>
						  (Moving_Link_Task_Flag == 1))
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <main+0x348>)
 8001384:	781b      	ldrb	r3, [r3, #0]
						  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8001386:	2b01      	cmp	r3, #1
 8001388:	d15a      	bne.n	8001440 <main+0x398>
				  {
					  if(MovingLinkMode == LMM_Set_Pos_Directly)
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <main+0x35c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d13a      	bne.n	8001408 <main+0x360>
					  {
						Munmunbot_State = STATE_Idle;
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <main+0x33c>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
						MovingLinkMode = LMM_Not_Set;
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <main+0x35c>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
						StabilizePosition = TrjStruc.Desire_Theta;
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <main+0x328>)
 80013a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013a2:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <main+0x34c>)
 80013a4:	6013      	str	r3, [r2, #0]
						PID_Reset();
 80013a6:	f002 fd3d 	bl	8003e24 <PID_Reset>
						ACK2Return(&UART2);
 80013aa:	480a      	ldr	r0, [pc, #40]	; (80013d4 <main+0x32c>)
 80013ac:	f002 f8ca 	bl	8003544 <ACK2Return>
 80013b0:	e03e      	b.n	8001430 <main+0x388>
 80013b2:	bf00      	nop
 80013b4:	f3af 8000 	nop.w
 80013b8:	00000000 	.word	0x00000000
 80013bc:	411e8480 	.word	0x411e8480
 80013c0:	20000694 	.word	0x20000694
 80013c4:	2000064c 	.word	0x2000064c
 80013c8:	200005a4 	.word	0x200005a4
 80013cc:	20000398 	.word	0x20000398
 80013d0:	20000308 	.word	0x20000308
 80013d4:	200000b8 	.word	0x200000b8
 80013d8:	200006dc 	.word	0x200006dc
 80013dc:	20000016 	.word	0x20000016
 80013e0:	20000550 	.word	0x20000550
 80013e4:	200000d9 	.word	0x200000d9
 80013e8:	40020400 	.word	0x40020400
 80013ec:	200001e9 	.word	0x200001e9
 80013f0:	200001e8 	.word	0x200001e8
 80013f4:	200001f8 	.word	0x200001f8
 80013f8:	20000208 	.word	0x20000208
 80013fc:	20000015 	.word	0x20000015
 8001400:	20000200 	.word	0x20000200
 8001404:	200001de 	.word	0x200001de
					  }

					  else if ((MovingLinkMode == LMM_Set_Goal_1_Station) || (MovingLinkMode == LMM_Set_Goal_n_Station))
 8001408:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <main+0x400>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d003      	beq.n	8001418 <main+0x370>
 8001410:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <main+0x400>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d10b      	bne.n	8001430 <main+0x388>
					  {
						Munmunbot_State = STATE_End_Effector_Working;
 8001418:	4b24      	ldr	r3, [pc, #144]	; (80014ac <main+0x404>)
 800141a:	2207      	movs	r2, #7
 800141c:	701a      	strb	r2, [r3, #0]
						GripperState = 0;
 800141e:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <main+0x408>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
						StabilizePosition = TrjStruc.Desire_Theta;
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <main+0x40c>)
 8001426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001428:	4a23      	ldr	r2, [pc, #140]	; (80014b8 <main+0x410>)
 800142a:	6013      	str	r3, [r2, #0]
						PID_Reset();
 800142c:	f002 fcfa 	bl	8003e24 <PID_Reset>
					  }
					 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <main+0x414>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2200      	movs	r2, #0
 8001436:	635a      	str	r2, [r3, #52]	; 0x34
					 Moving_Link_Task_Flag = 0;
 8001438:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <main+0x418>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	e002      	b.n	8001446 <main+0x39e>
				  }
				  else
				  {
					  Munmunbot_State =  STATE_Stabilized_Link;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <main+0x404>)
 8001442:	2205      	movs	r2, #5
 8001444:	701a      	strb	r2, [r3, #0]
				  }
	   		  }
	   		  Emergency_switch_trigger();
 8001446:	f002 fdcd 	bl	8003fe4 <Emergency_switch_trigger>
	   		  break;
 800144a:	e013      	b.n	8001474 <main+0x3cc>
	   	  }
	  	  case STATE_End_Effector_Working:
	  		  UpdateMunmunBotState();
 800144c:	f002 ffa4 	bl	8004398 <UpdateMunmunBotState>
	  		  EndEffectorWorkingState();
 8001450:	f002 fff6 	bl	8004440 <EndEffectorWorkingState>
	  		  Emergency_switch_trigger();
 8001454:	f002 fdc6 	bl	8003fe4 <Emergency_switch_trigger>
	  		  break;
 8001458:	e00c      	b.n	8001474 <main+0x3cc>

	  	  case STATE_SetHome:
	  		  sethomeTrigger = 0;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <main+0x41c>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
	  		  LAMP_ON(2);
 8001460:	2002      	movs	r0, #2
 8001462:	f002 fd4f 	bl	8003f04 <LAMP_ON>
	  		  UpdateMunmunBotState();
 8001466:	f002 ff97 	bl	8004398 <UpdateMunmunBotState>
	  		  SETHOME_StateMachine_Function();
 800146a:	f002 ff49 	bl	8004300 <SETHOME_StateMachine_Function>
	  		  Emergency_switch_trigger();
 800146e:	f002 fdb9 	bl	8003fe4 <Emergency_switch_trigger>
	  		  break;
 8001472:	bf00      	nop

	  }

	  if ( pidSetZeroFlag != 0 )
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <main+0x420>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d010      	beq.n	800149e <main+0x3f6>
	  {
		  pidSetZeroFlag = 0;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <main+0x420>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <main+0x414>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2200      	movs	r2, #0
 8001488:	635a      	str	r2, [r3, #52]	; 0x34
		  TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <main+0x424>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <main+0x40c>)
 8001490:	66d3      	str	r3, [r2, #108]	; 0x6c
		  TrjStruc.AngularVelocityDesire = 0;
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <main+0x40c>)
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	; 0x24
		  PID_Reset();
 800149a:	f002 fcc3 	bl	8003e24 <PID_Reset>
	  }



	  UARTTxDumpBuffer(&UART2);
 800149e:	480c      	ldr	r0, [pc, #48]	; (80014d0 <main+0x428>)
 80014a0:	f001 ffa6 	bl	80033f0 <UARTTxDumpBuffer>
  {
 80014a4:	e656      	b.n	8001154 <main+0xac>
 80014a6:	bf00      	nop
 80014a8:	200001de 	.word	0x200001de
 80014ac:	200000d9 	.word	0x200000d9
 80014b0:	200001ea 	.word	0x200001ea
 80014b4:	20000308 	.word	0x20000308
 80014b8:	200001f8 	.word	0x200001f8
 80014bc:	200005a4 	.word	0x200005a4
 80014c0:	200001e8 	.word	0x200001e8
 80014c4:	200001e9 	.word	0x200001e9
 80014c8:	200000ac 	.word	0x200000ac
 80014cc:	20000208 	.word	0x20000208
 80014d0:	200000b8 	.word	0x200000b8

080014d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b094      	sub	sp, #80	; 0x50
 80014d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014da:	f107 0320 	add.w	r3, r7, #32
 80014de:	2230      	movs	r2, #48	; 0x30
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f008 ff82 	bl	800a3ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	4b27      	ldr	r3, [pc, #156]	; (800159c <SystemClock_Config+0xc8>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	4a26      	ldr	r2, [pc, #152]	; (800159c <SystemClock_Config+0xc8>)
 8001502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001506:	6413      	str	r3, [r2, #64]	; 0x40
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <SystemClock_Config+0xc8>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001514:	2300      	movs	r3, #0
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <SystemClock_Config+0xcc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a20      	ldr	r2, [pc, #128]	; (80015a0 <SystemClock_Config+0xcc>)
 800151e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <SystemClock_Config+0xcc>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001530:	2302      	movs	r3, #2
 8001532:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001534:	2301      	movs	r3, #1
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001538:	2310      	movs	r3, #16
 800153a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153c:	2302      	movs	r3, #2
 800153e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001540:	2300      	movs	r3, #0
 8001542:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001544:	2308      	movs	r3, #8
 8001546:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001548:	2364      	movs	r3, #100	; 0x64
 800154a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800154c:	2302      	movs	r3, #2
 800154e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001550:	2304      	movs	r3, #4
 8001552:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001554:	f107 0320 	add.w	r3, r7, #32
 8001558:	4618      	mov	r0, r3
 800155a:	f006 fa0b 	bl	8007974 <HAL_RCC_OscConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001564:	f003 f848 	bl	80045f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001568:	230f      	movs	r3, #15
 800156a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156c:	2302      	movs	r3, #2
 800156e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001578:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	2103      	movs	r1, #3
 8001584:	4618      	mov	r0, r3
 8001586:	f006 fc6d 	bl	8007e64 <HAL_RCC_ClockConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001590:	f003 f832 	bl	80045f8 <Error_Handler>
  }
}
 8001594:	bf00      	nop
 8001596:	3750      	adds	r7, #80	; 0x50
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	40007000 	.word	0x40007000

080015a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015aa:	4a14      	ldr	r2, [pc, #80]	; (80015fc <MX_I2C1_Init+0x58>)
 80015ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80015b4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015d8:	2200      	movs	r2, #0
 80015da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015de:	2200      	movs	r2, #0
 80015e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015e4:	f004 fa78 	bl	8005ad8 <HAL_I2C_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80015ee:	f003 f803 	bl	80045f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000550 	.word	0x20000550
 80015fc:	40005400 	.word	0x40005400

08001600 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	; 0x30
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	2224      	movs	r2, #36	; 0x24
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f008 feec 	bl	800a3ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800161c:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <MX_TIM1_Init+0xa8>)
 800161e:	4a23      	ldr	r2, [pc, #140]	; (80016ac <MX_TIM1_Init+0xac>)
 8001620:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <MX_TIM1_Init+0xa8>)
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_TIM1_Init+0xa8>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24575;
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <MX_TIM1_Init+0xa8>)
 8001630:	f645 72ff 	movw	r2, #24575	; 0x5fff
 8001634:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <MX_TIM1_Init+0xa8>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_TIM1_Init+0xa8>)
 800163e:	2200      	movs	r2, #0
 8001640:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <MX_TIM1_Init+0xa8>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001648:	2303      	movs	r3, #3
 800164a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001650:	2301      	movs	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001658:	2302      	movs	r3, #2
 800165a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001660:	2301      	movs	r3, #1
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	4619      	mov	r1, r3
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_TIM1_Init+0xa8>)
 8001674:	f007 f808 	bl	8008688 <HAL_TIM_Encoder_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800167e:	f002 ffbb 	bl	80045f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <MX_TIM1_Init+0xa8>)
 8001690:	f007 feac 	bl	80093ec <HAL_TIMEx_MasterConfigSynchronization>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800169a:	f002 ffad 	bl	80045f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	3730      	adds	r7, #48	; 0x30
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000064c 	.word	0x2000064c
 80016ac:	40010000 	.word	0x40010000

080016b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c4:	463b      	mov	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <MX_TIM2_Init+0x94>)
 80016ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <MX_TIM2_Init+0x94>)
 80016d6:	2263      	movs	r2, #99	; 0x63
 80016d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_TIM2_Init+0x94>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_TIM2_Init+0x94>)
 80016e2:	f04f 32ff 	mov.w	r2, #4294967295
 80016e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <MX_TIM2_Init+0x94>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_TIM2_Init+0x94>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016f4:	4813      	ldr	r0, [pc, #76]	; (8001744 <MX_TIM2_Init+0x94>)
 80016f6:	f006 fdb1 	bl	800825c <HAL_TIM_Base_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001700:	f002 ff7a 	bl	80045f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001708:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4619      	mov	r1, r3
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <MX_TIM2_Init+0x94>)
 8001712:	f007 fab3 	bl	8008c7c <HAL_TIM_ConfigClockSource>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800171c:	f002 ff6c 	bl	80045f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001728:	463b      	mov	r3, r7
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_TIM2_Init+0x94>)
 800172e:	f007 fe5d 	bl	80093ec <HAL_TIMEx_MasterConfigSynchronization>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001738:	f002 ff5e 	bl	80045f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000694 	.word	0x20000694

08001748 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08e      	sub	sp, #56	; 0x38
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175c:	f107 0320 	add.w	r3, r7, #32
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
 8001774:	615a      	str	r2, [r3, #20]
 8001776:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001778:	4b2c      	ldr	r3, [pc, #176]	; (800182c <MX_TIM3_Init+0xe4>)
 800177a:	4a2d      	ldr	r2, [pc, #180]	; (8001830 <MX_TIM3_Init+0xe8>)
 800177c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800177e:	4b2b      	ldr	r3, [pc, #172]	; (800182c <MX_TIM3_Init+0xe4>)
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001784:	4b29      	ldr	r3, [pc, #164]	; (800182c <MX_TIM3_Init+0xe4>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800178a:	4b28      	ldr	r3, [pc, #160]	; (800182c <MX_TIM3_Init+0xe4>)
 800178c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001790:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <MX_TIM3_Init+0xe4>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <MX_TIM3_Init+0xe4>)
 800179a:	2200      	movs	r2, #0
 800179c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800179e:	4823      	ldr	r0, [pc, #140]	; (800182c <MX_TIM3_Init+0xe4>)
 80017a0:	f006 fd5c 	bl	800825c <HAL_TIM_Base_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80017aa:	f002 ff25 	bl	80045f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b8:	4619      	mov	r1, r3
 80017ba:	481c      	ldr	r0, [pc, #112]	; (800182c <MX_TIM3_Init+0xe4>)
 80017bc:	f007 fa5e 	bl	8008c7c <HAL_TIM_ConfigClockSource>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80017c6:	f002 ff17 	bl	80045f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017ca:	4818      	ldr	r0, [pc, #96]	; (800182c <MX_TIM3_Init+0xe4>)
 80017cc:	f006 fe52 	bl	8008474 <HAL_TIM_PWM_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80017d6:	f002 ff0f 	bl	80045f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017e2:	f107 0320 	add.w	r3, r7, #32
 80017e6:	4619      	mov	r1, r3
 80017e8:	4810      	ldr	r0, [pc, #64]	; (800182c <MX_TIM3_Init+0xe4>)
 80017ea:	f007 fdff 	bl	80093ec <HAL_TIMEx_MasterConfigSynchronization>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80017f4:	f002 ff00 	bl	80045f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f8:	2360      	movs	r3, #96	; 0x60
 80017fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2200      	movs	r2, #0
 800180c:	4619      	mov	r1, r3
 800180e:	4807      	ldr	r0, [pc, #28]	; (800182c <MX_TIM3_Init+0xe4>)
 8001810:	f007 f976 	bl	8008b00 <HAL_TIM_PWM_ConfigChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800181a:	f002 feed 	bl	80045f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800181e:	4803      	ldr	r0, [pc, #12]	; (800182c <MX_TIM3_Init+0xe4>)
 8001820:	f002 fff4 	bl	800480c <HAL_TIM_MspPostInit>

}
 8001824:	bf00      	nop
 8001826:	3738      	adds	r7, #56	; 0x38
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200005a4 	.word	0x200005a4
 8001830:	40000400 	.word	0x40000400

08001834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <MX_USART2_UART_Init+0x50>)
 800183a:	4a13      	ldr	r2, [pc, #76]	; (8001888 <MX_USART2_UART_Init+0x54>)
 800183c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <MX_USART2_UART_Init+0x50>)
 8001840:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <MX_USART2_UART_Init+0x50>)
 8001848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800184c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <MX_USART2_UART_Init+0x50>)
 8001850:	2200      	movs	r2, #0
 8001852:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <MX_USART2_UART_Init+0x50>)
 8001856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800185a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <MX_USART2_UART_Init+0x50>)
 800185e:	220c      	movs	r2, #12
 8001860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001862:	4b08      	ldr	r3, [pc, #32]	; (8001884 <MX_USART2_UART_Init+0x50>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <MX_USART2_UART_Init+0x50>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800186e:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_USART2_UART_Init+0x50>)
 8001870:	f007 fe3e 	bl	80094f0 <HAL_UART_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800187a:	f002 febd 	bl	80045f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200006dc 	.word	0x200006dc
 8001888:	40004400 	.word	0x40004400

0800188c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <MX_DMA_Init+0x4c>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <MX_DMA_Init+0x4c>)
 800189c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <MX_DMA_Init+0x4c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	2010      	movs	r0, #16
 80018b4:	f003 fafb 	bl	8004eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80018b8:	2010      	movs	r0, #16
 80018ba:	f003 fb14 	bl	8004ee6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	2011      	movs	r0, #17
 80018c4:	f003 faf3 	bl	8004eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80018c8:	2011      	movs	r0, #17
 80018ca:	f003 fb0c 	bl	8004ee6 <HAL_NVIC_EnableIRQ>

}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800

080018dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	4b5f      	ldr	r3, [pc, #380]	; (8001a74 <MX_GPIO_Init+0x198>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a5e      	ldr	r2, [pc, #376]	; (8001a74 <MX_GPIO_Init+0x198>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b5c      	ldr	r3, [pc, #368]	; (8001a74 <MX_GPIO_Init+0x198>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b58      	ldr	r3, [pc, #352]	; (8001a74 <MX_GPIO_Init+0x198>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a57      	ldr	r2, [pc, #348]	; (8001a74 <MX_GPIO_Init+0x198>)
 8001918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b55      	ldr	r3, [pc, #340]	; (8001a74 <MX_GPIO_Init+0x198>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	4b51      	ldr	r3, [pc, #324]	; (8001a74 <MX_GPIO_Init+0x198>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a50      	ldr	r2, [pc, #320]	; (8001a74 <MX_GPIO_Init+0x198>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b4e      	ldr	r3, [pc, #312]	; (8001a74 <MX_GPIO_Init+0x198>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	4b4a      	ldr	r3, [pc, #296]	; (8001a74 <MX_GPIO_Init+0x198>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a49      	ldr	r2, [pc, #292]	; (8001a74 <MX_GPIO_Init+0x198>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b47      	ldr	r3, [pc, #284]	; (8001a74 <MX_GPIO_Init+0x198>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	2120      	movs	r1, #32
 8001966:	4844      	ldr	r0, [pc, #272]	; (8001a78 <MX_GPIO_Init+0x19c>)
 8001968:	f004 f884 	bl	8005a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Lamp1_Pin|Lamp2_Pin, GPIO_PIN_SET);
 800196c:	2201      	movs	r2, #1
 800196e:	2106      	movs	r1, #6
 8001970:	4842      	ldr	r0, [pc, #264]	; (8001a7c <MX_GPIO_Init+0x1a0>)
 8001972:	f004 f87f 	bl	8005a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	2180      	movs	r1, #128	; 0x80
 800197a:	4841      	ldr	r0, [pc, #260]	; (8001a80 <MX_GPIO_Init+0x1a4>)
 800197c:	f004 f87a 	bl	8005a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Lamp3_GPIO_Port, Lamp3_Pin, GPIO_PIN_SET);
 8001980:	2201      	movs	r2, #1
 8001982:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001986:	483c      	ldr	r0, [pc, #240]	; (8001a78 <MX_GPIO_Init+0x19c>)
 8001988:	f004 f874 	bl	8005a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800198c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001992:	4b3c      	ldr	r3, [pc, #240]	; (8001a84 <MX_GPIO_Init+0x1a8>)
 8001994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4837      	ldr	r0, [pc, #220]	; (8001a80 <MX_GPIO_Init+0x1a4>)
 80019a2:	f003 fecb 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Lamp3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Lamp3_Pin;
 80019a6:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80019aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ac:	2301      	movs	r3, #1
 80019ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	482e      	ldr	r0, [pc, #184]	; (8001a78 <MX_GPIO_Init+0x19c>)
 80019c0:	f003 febc 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pins : Lamp1_Pin Lamp2_Pin */
  GPIO_InitStruct.Pin = Lamp1_Pin|Lamp2_Pin;
 80019c4:	2306      	movs	r3, #6
 80019c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	4828      	ldr	r0, [pc, #160]	; (8001a7c <MX_GPIO_Init+0x1a0>)
 80019dc:	f003 feae 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Switch_Signal_Pin */
  GPIO_InitStruct.Pin = Emergency_Switch_Signal_Pin;
 80019e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019ea:	2302      	movs	r3, #2
 80019ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Switch_Signal_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	4821      	ldr	r0, [pc, #132]	; (8001a7c <MX_GPIO_Init+0x1a0>)
 80019f6:	f003 fea1 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pin : Index_Signal_Pin */
  GPIO_InitStruct.Pin = Index_Signal_Pin;
 80019fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a00:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <MX_GPIO_Init+0x1ac>)
 8001a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Index_Signal_GPIO_Port, &GPIO_InitStruct);
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	481b      	ldr	r0, [pc, #108]	; (8001a7c <MX_GPIO_Init+0x1a0>)
 8001a10:	f003 fe94 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4815      	ldr	r0, [pc, #84]	; (8001a80 <MX_GPIO_Init+0x1a4>)
 8001a2c:	f003 fe86 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pin : LimitSwitchSignal_Pin */
  GPIO_InitStruct.Pin = LimitSwitchSignal_Pin;
 8001a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <MX_GPIO_Init+0x1ac>)
 8001a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LimitSwitchSignal_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	480e      	ldr	r0, [pc, #56]	; (8001a80 <MX_GPIO_Init+0x1a4>)
 8001a46:	f003 fe79 	bl	800573c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2017      	movs	r0, #23
 8001a50:	f003 fa2d 	bl	8004eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a54:	2017      	movs	r0, #23
 8001a56:	f003 fa46 	bl	8004ee6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2028      	movs	r0, #40	; 0x28
 8001a60:	f003 fa25 	bl	8004eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a64:	2028      	movs	r0, #40	; 0x28
 8001a66:	f003 fa3e 	bl	8004ee6 <HAL_NVIC_EnableIRQ>

}
 8001a6a:	bf00      	nop
 8001a6c:	3728      	adds	r7, #40	; 0x28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	40020800 	.word	0x40020800
 8001a84:	10210000 	.word	0x10210000
 8001a88:	10110000 	.word	0x10110000

08001a8c <EncoderVelocityAndPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 12288
#define  MAX_ENCODER_PERIOD 24576

void EncoderVelocityAndPosition_Update()
{
 8001a8c:	b5b0      	push	{r4, r5, r7, lr}
 8001a8e:	ed2d 8b02 	vpush	{d8}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0

	static float EncoderLastVelocity = 0;
	static float Velocity_Output = 0;
	static float Acceration_Output = 0;
	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8001a96:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <EncoderVelocityAndPosition_Update+0x130>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
	uint64_t EncoderNowTimestamp = micros();
 8001a9e:	f000 f90f 	bl	8001cc0 <micros>
 8001aa2:	e9c7 0106 	strd	r0, r1, [r7, #24]

	int32_t EncoderPositionDiff;
	float EncoderVelocityDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8001aa6:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <EncoderVelocityAndPosition_Update+0x134>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ab0:	1a84      	subs	r4, r0, r2
 8001ab2:	eb61 0503 	sbc.w	r5, r1, r3
 8001ab6:	e9c7 4504 	strd	r4, r5, [r7, #16]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8001aba:	4b42      	ldr	r3, [pc, #264]	; (8001bc4 <EncoderVelocityAndPosition_Update+0x138>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	60fb      	str	r3, [r7, #12]

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8001ac4:	4a3f      	ldr	r2, [pc, #252]	; (8001bc4 <EncoderVelocityAndPosition_Update+0x138>)
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8001aca:	493d      	ldr	r1, [pc, #244]	; (8001bc0 <EncoderVelocityAndPosition_Update+0x134>)
 8001acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad0:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity and Encoder Pos
	PositionPIDController.OutputFeedback = EncoderNowPosition;
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	ee07 3a90 	vmov	s15, r3
 8001ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ade:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <EncoderVelocityAndPosition_Update+0x13c>)
 8001ae0:	edc3 7a08 	vstr	s15, [r3, #32]
	StabilizerPIDController.OutputFeedback = EncoderNowPosition;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	ee07 3a90 	vmov	s15, r3
 8001aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aee:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <EncoderVelocityAndPosition_Update+0x140>)
 8001af0:	edc3 7a08 	vstr	s15, [r3, #32]
	// LPF
	Velocity_Output = (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;  /// Pulse per second
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4a36      	ldr	r2, [pc, #216]	; (8001bd0 <EncoderVelocityAndPosition_Update+0x144>)
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001b04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b08:	f7ff f90a 	bl	8000d20 <__aeabi_ul2f>
 8001b0c:	ee07 0a10 	vmov	s14, r0
 8001b10:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001b14:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <EncoderVelocityAndPosition_Update+0x148>)
 8001b16:	edc3 7a00 	vstr	s15, [r3]
	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*299))/300.0;
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <EncoderVelocityAndPosition_Update+0x14c>)
 8001b1c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b20:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001bdc <EncoderVelocityAndPosition_Update+0x150>
 8001b24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b28:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <EncoderVelocityAndPosition_Update+0x148>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b32:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001be0 <EncoderVelocityAndPosition_Update+0x154>
 8001b36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b3a:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <EncoderVelocityAndPosition_Update+0x14c>)
 8001b3c:	edc3 7a08 	vstr	s15, [r3, #32]
//	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*49))/50.0;

	float EncoderNowVelocity = VelocityPIDController.OutputFeedback;
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <EncoderVelocityAndPosition_Update+0x14c>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	60bb      	str	r3, [r7, #8]

	EncoderVelocityDiff = EncoderNowVelocity - EncoderLastVelocity;
 8001b46:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <EncoderVelocityAndPosition_Update+0x158>)
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b54:	edc7 7a01 	vstr	s15, [r7, #4]
	EncoderLastVelocity = VelocityPIDController.OutputFeedback;
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <EncoderVelocityAndPosition_Update+0x14c>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4a21      	ldr	r2, [pc, #132]	; (8001be4 <EncoderVelocityAndPosition_Update+0x158>)
 8001b5e:	6013      	str	r3, [r2, #0]

	Acceration_Output = ( EncoderVelocityDiff * 1000000)  / (float) EncoderTimeDiff;
 8001b60:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b64:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001be8 <EncoderVelocityAndPosition_Update+0x15c>
 8001b68:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001b6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b70:	f7ff f8d6 	bl	8000d20 <__aeabi_ul2f>
 8001b74:	ee07 0a10 	vmov	s14, r0
 8001b78:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <EncoderVelocityAndPosition_Update+0x160>)
 8001b7e:	edc3 7a00 	vstr	s15, [r3]
	Acceration_Output = (Acceration_Output + (EstimatedAngularAcceration*299))/300.0;
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <EncoderVelocityAndPosition_Update+0x164>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001bdc <EncoderVelocityAndPosition_Update+0x150>
 8001b8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <EncoderVelocityAndPosition_Update+0x160>)
 8001b92:	edd3 7a00 	vldr	s15, [r3]
 8001b96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b9a:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001be0 <EncoderVelocityAndPosition_Update+0x154>
 8001b9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <EncoderVelocityAndPosition_Update+0x160>)
 8001ba4:	edc3 7a00 	vstr	s15, [r3]
//	Acceration_Output = (Acceration_Output + (EstimatedAngularAcceration*49))/50.0;
	EstimatedAngularAcceration = ( Acceration_Output );
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <EncoderVelocityAndPosition_Update+0x160>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <EncoderVelocityAndPosition_Update+0x164>)
 8001bae:	6013      	str	r3, [r2, #0]

}
 8001bb0:	bf00      	nop
 8001bb2:	3728      	adds	r7, #40	; 0x28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	ecbd 8b02 	vpop	{d8}
 8001bba:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbc:	2000064c 	.word	0x2000064c
 8001bc0:	200003b8 	.word	0x200003b8
 8001bc4:	200003c0 	.word	0x200003c0
 8001bc8:	20000208 	.word	0x20000208
 8001bcc:	200002c8 	.word	0x200002c8
 8001bd0:	000f4240 	.word	0x000f4240
 8001bd4:	200003c4 	.word	0x200003c4
 8001bd8:	20000248 	.word	0x20000248
 8001bdc:	43958000 	.word	0x43958000
 8001be0:	43960000 	.word	0x43960000
 8001be4:	200003c8 	.word	0x200003c8
 8001be8:	49742400 	.word	0x49742400
 8001bec:	200003cc 	.word	0x200003cc
 8001bf0:	200003a8 	.word	0x200003a8

08001bf4 <Encoder_SetHome_Position>:


void Encoder_SetHome_Position()
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
	HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <Encoder_SetHome_Position+0x2c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <Encoder_SetHome_Position+0x30>)
 8001bfe:	6852      	ldr	r2, [r2, #4]
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
	StabilizePosition = CUSSStruc.PPRxQEI;
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <Encoder_SetHome_Position+0x30>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <Encoder_SetHome_Position+0x34>)
 8001c10:	edc3 7a00 	vstr	s15, [r3]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	2000064c 	.word	0x2000064c
 8001c24:	20000398 	.word	0x20000398
 8001c28:	200001f8 	.word	0x200001f8

08001c2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c2c:	b4b0      	push	{r4, r5, r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d109      	bne.n	8001c50 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f112 34ff 	adds.w	r4, r2, #4294967295
 8001c46:	f143 0500 	adc.w	r5, r3, #0
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001c4c:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bcb0      	pop	{r4, r5, r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000694 	.word	0x20000694
 8001c60:	200000b0 	.word	0x200000b0

08001c64 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	80fb      	strh	r3, [r7, #6]
    if ((GPIO_Pin == GPIO_PIN_8))  //13 -> BlueButton, 8 -> Limitswitch
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c74:	d10a      	bne.n	8001c8c <HAL_GPIO_EXTI_Callback+0x28>
	{
    	if (Munmunbot_State == STATE_SetHome)
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d106      	bne.n	8001c8c <HAL_GPIO_EXTI_Callback+0x28>
    	{
    		if (SethomeMode == SetHomeState_1)
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_GPIO_EXTI_Callback+0x58>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d102      	bne.n	8001c8c <HAL_GPIO_EXTI_Callback+0x28>
    		{
//    			Encoder_SetHome_Position();
    			SethomeMode = SetHomeState_2;
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_GPIO_EXTI_Callback+0x58>)
 8001c88:	2202      	movs	r2, #2
 8001c8a:	701a      	strb	r2, [r3, #0]
//    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
//				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
    		}
    	}
	}
    if (GPIO_Pin == GPIO_PIN_13)  //13 -> BlueButton, 8 -> Limitswitch
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c92:	d10a      	bne.n	8001caa <HAL_GPIO_EXTI_Callback+0x46>
	{
    	if (Munmunbot_State == STATE_SetHome)
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d106      	bne.n	8001caa <HAL_GPIO_EXTI_Callback+0x46>
    	{
    		if (SethomeMode == SetHomeState_1)
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <HAL_GPIO_EXTI_Callback+0x58>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d102      	bne.n	8001caa <HAL_GPIO_EXTI_Callback+0x46>
    		{
//    			Encoder_SetHome_Position();
    			SethomeMode = SetHomeState_2;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_GPIO_EXTI_Callback+0x58>)
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	701a      	strb	r2, [r3, #0]
    	}

	}


}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	200000d9 	.word	0x200000d9
 8001cbc:	200000da 	.word	0x200000da

08001cc0 <micros>:

uint64_t micros()
{
 8001cc0:	b4b0      	push	{r4, r5, r7}
 8001cc2:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <micros+0x2c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f04f 0100 	mov.w	r1, #0
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <micros+0x30>)
 8001cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd6:	1884      	adds	r4, r0, r2
 8001cd8:	eb41 0503 	adc.w	r5, r1, r3
 8001cdc:	4622      	mov	r2, r4
 8001cde:	462b      	mov	r3, r5
}
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bcb0      	pop	{r4, r5, r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000694 	.word	0x20000694
 8001cf0:	200000b0 	.word	0x200000b0

08001cf4 <ConverterUnitSystemStructureInit>:

void ConverterUnitSystemStructureInit(ConverterUnitSystemStructure *CUSSvar)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	CUSSvar->PPR = 2048;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d02:	601a      	str	r2, [r3, #0]
	CUSSvar->PPRxQEI = CUSSvar->PPR * 4;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	009a      	lsls	r2, r3, #2
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	605a      	str	r2, [r3, #4]
	CUSSvar->RPMp = 10;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <ConverterUnitSystemStructureInit+0x2c>)
 8001d12:	609a      	str	r2, [r3, #8]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	41200000 	.word	0x41200000
 8001d24:	00000000 	.word	0x00000000

08001d28 <TrajectoryGenerationStructureInit>:

void TrajectoryGenerationStructureInit(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
	TGSvar->AngularAccerationMax_Setting = (0.4*(CUSSvar->PPRxQEI))/(3.1416*2.0);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fb90 	bl	800045c <__aeabi_ui2d>
 8001d3c:	a347      	add	r3, pc, #284	; (adr r3, 8001e5c <TrajectoryGenerationStructureInit+0x134>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f7fe fc05 	bl	8000550 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	a345      	add	r3, pc, #276	; (adr r3, 8001e64 <TrajectoryGenerationStructureInit+0x13c>)
 8001d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d54:	f7fe fd26 	bl	80007a4 <__aeabi_ddiv>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7fe fec6 	bl	8000af0 <__aeabi_d2f>
 8001d64:	4602      	mov	r2, r0
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	615a      	str	r2, [r3, #20]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*10)/(60.0);  //pps
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fb70 	bl	800045c <__aeabi_ui2d>
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <TrajectoryGenerationStructureInit+0x128>)
 8001d82:	f7fe fd0f 	bl	80007a4 <__aeabi_ddiv>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f7fe feaf 	bl	8000af0 <__aeabi_d2f>
 8001d92:	4602      	mov	r2, r0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	611a      	str	r2, [r3, #16]
	TGSvar->Start_Theta = CUSSStruc.PPRxQEI;  /// PPRxQEI == 0 degree
 8001d98:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <TrajectoryGenerationStructureInit+0x12c>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	TGSvar->Mode = 0;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	TGSvar->Submode = 0;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	TGSvar->Loop_Freq = 1000;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dc0:	659a      	str	r2, [r3, #88]	; 0x58
	TGSvar->Loop_Period = 1000000/(TGSvar->Loop_Freq);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	4a24      	ldr	r2, [pc, #144]	; (8001e58 <TrajectoryGenerationStructureInit+0x130>)
 8001dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	edd3 6a04 	vldr	s13, [r3, #16]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	ed93 7a05 	vldr	s14, [r3, #20]
 8001de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	ed93 7a04 	vldr	s14, [r3, #16]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	edc3 7a03 	vstr	s15, [r3, #12]
	TGSvar->AngularVelocityFinalMin = 0*1.8*(CUSSvar->PPRxQEI)/60.0;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fb27 	bl	800045c <__aeabi_ui2d>
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	f7fe fb9b 	bl	8000550 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <TrajectoryGenerationStructureInit+0x128>)
 8001e28:	f7fe fcbc 	bl	80007a4 <__aeabi_ddiv>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	f7fe fe5c 	bl	8000af0 <__aeabi_d2f>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	679a      	str	r2, [r3, #120]	; 0x78
	TGSvar->Alpha = 1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e44:	67da      	str	r2, [r3, #124]	; 0x7c

}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	404e0000 	.word	0x404e0000
 8001e54:	20000398 	.word	0x20000398
 8001e58:	000f4240 	.word	0x000f4240
 8001e5c:	9999999a 	.word	0x9999999a
 8001e60:	3fd99999 	.word	0x3fd99999
 8001e64:	2e48e8a7 	.word	0x2e48e8a7
 8001e68:	401921ff 	.word	0x401921ff
 8001e6c:	00000000 	.word	0x00000000

08001e70 <LinkMovingPIDLoad>:

void LinkMovingPIDLoad()
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	PositionPIDController.Kp = 0;
 8001e74:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <LinkMovingPIDLoad+0x90>)
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
	PositionPIDController.Ki = 0;
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <LinkMovingPIDLoad+0x90>)
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	605a      	str	r2, [r3, #4]
	PositionPIDController.Kd = 0;
 8001e84:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <LinkMovingPIDLoad+0x90>)
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
	PositionPIDController.offSet = 0;
 8001e8c:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <LinkMovingPIDLoad+0x90>)
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
	PositionPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <LinkMovingPIDLoad+0x94>)
 8001e96:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f7fe fb21 	bl	80004e4 <__aeabi_ul2d>
 8001ea2:	a315      	add	r3, pc, #84	; (adr r3, 8001ef8 <LinkMovingPIDLoad+0x88>)
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	f7fe fc7c 	bl	80007a4 <__aeabi_ddiv>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4913      	ldr	r1, [pc, #76]	; (8001f00 <LinkMovingPIDLoad+0x90>)
 8001eb2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	VelocityPIDController.Kp = 6;
 8001eb6:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <LinkMovingPIDLoad+0x98>)
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <LinkMovingPIDLoad+0x9c>)
 8001eba:	601a      	str	r2, [r3, #0]
	VelocityPIDController.Ki = 10;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <LinkMovingPIDLoad+0x98>)
 8001ebe:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <LinkMovingPIDLoad+0xa0>)
 8001ec0:	605a      	str	r2, [r3, #4]
	VelocityPIDController.Kd = 0.00005;
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <LinkMovingPIDLoad+0x98>)
 8001ec4:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <LinkMovingPIDLoad+0xa4>)
 8001ec6:	609a      	str	r2, [r3, #8]
	VelocityPIDController.offSet = 1500;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <LinkMovingPIDLoad+0x98>)
 8001eca:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <LinkMovingPIDLoad+0xa8>)
 8001ecc:	611a      	str	r2, [r3, #16]
	VelocityPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001ece:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <LinkMovingPIDLoad+0x94>)
 8001ed0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f7fe fb04 	bl	80004e4 <__aeabi_ul2d>
 8001edc:	a306      	add	r3, pc, #24	; (adr r3, 8001ef8 <LinkMovingPIDLoad+0x88>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f7fe fc5f 	bl	80007a4 <__aeabi_ddiv>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4907      	ldr	r1, [pc, #28]	; (8001f08 <LinkMovingPIDLoad+0x98>)
 8001eec:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	f3af 8000 	nop.w
 8001ef8:	00000000 	.word	0x00000000
 8001efc:	412e8480 	.word	0x412e8480
 8001f00:	20000208 	.word	0x20000208
 8001f04:	20000308 	.word	0x20000308
 8001f08:	20000248 	.word	0x20000248
 8001f0c:	40c00000 	.word	0x40c00000
 8001f10:	41200000 	.word	0x41200000
 8001f14:	3851b717 	.word	0x3851b717
 8001f18:	44bb8000 	.word	0x44bb8000
 8001f1c:	00000000 	.word	0x00000000

08001f20 <LinkMovingPID45to355Load>:

void LinkMovingPID45to355Load()
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	PositionPIDController.Kp = 0;
 8001f24:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <LinkMovingPID45to355Load+0x90>)
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
	PositionPIDController.Ki = 0;
 8001f2c:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <LinkMovingPID45to355Load+0x90>)
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	605a      	str	r2, [r3, #4]
	PositionPIDController.Kd = 0;
 8001f34:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <LinkMovingPID45to355Load+0x90>)
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
	PositionPIDController.offSet = 0;
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <LinkMovingPID45to355Load+0x90>)
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
	PositionPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <LinkMovingPID45to355Load+0x94>)
 8001f46:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f7fe fac9 	bl	80004e4 <__aeabi_ul2d>
 8001f52:	a315      	add	r3, pc, #84	; (adr r3, 8001fa8 <LinkMovingPID45to355Load+0x88>)
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	f7fe fc24 	bl	80007a4 <__aeabi_ddiv>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4913      	ldr	r1, [pc, #76]	; (8001fb0 <LinkMovingPID45to355Load+0x90>)
 8001f62:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	VelocityPIDController.Kp = 5;
 8001f66:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <LinkMovingPID45to355Load+0x98>)
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <LinkMovingPID45to355Load+0x9c>)
 8001f6a:	601a      	str	r2, [r3, #0]
	VelocityPIDController.Ki = 10;
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <LinkMovingPID45to355Load+0x98>)
 8001f6e:	4a14      	ldr	r2, [pc, #80]	; (8001fc0 <LinkMovingPID45to355Load+0xa0>)
 8001f70:	605a      	str	r2, [r3, #4]
//	VelocityPIDController.Kd = 0.00005;
	VelocityPIDController.Kd = 2;
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <LinkMovingPID45to355Load+0x98>)
 8001f74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f78:	609a      	str	r2, [r3, #8]
	VelocityPIDController.offSet = 1500;
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <LinkMovingPID45to355Load+0x98>)
 8001f7c:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <LinkMovingPID45to355Load+0xa4>)
 8001f7e:	611a      	str	r2, [r3, #16]
	VelocityPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <LinkMovingPID45to355Load+0x94>)
 8001f82:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7fe faab 	bl	80004e4 <__aeabi_ul2d>
 8001f8e:	a306      	add	r3, pc, #24	; (adr r3, 8001fa8 <LinkMovingPID45to355Load+0x88>)
 8001f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f94:	f7fe fc06 	bl	80007a4 <__aeabi_ddiv>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4906      	ldr	r1, [pc, #24]	; (8001fb8 <LinkMovingPID45to355Load+0x98>)
 8001f9e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	00000000 	.word	0x00000000
 8001fac:	412e8480 	.word	0x412e8480
 8001fb0:	20000208 	.word	0x20000208
 8001fb4:	20000308 	.word	0x20000308
 8001fb8:	20000248 	.word	0x20000248
 8001fbc:	40a00000 	.word	0x40a00000
 8001fc0:	41200000 	.word	0x41200000
 8001fc4:	44bb8000 	.word	0x44bb8000

08001fc8 <LinkMovingPID10to45Load>:

void LinkMovingPID10to45Load()
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
	PositionPIDController.Kp = 0;
 8001fcc:	4b22      	ldr	r3, [pc, #136]	; (8002058 <LinkMovingPID10to45Load+0x90>)
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
	PositionPIDController.Ki = 0;
 8001fd4:	4b20      	ldr	r3, [pc, #128]	; (8002058 <LinkMovingPID10to45Load+0x90>)
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
	PositionPIDController.Kd = 0;
 8001fdc:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <LinkMovingPID10to45Load+0x90>)
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
	PositionPIDController.offSet = 0;
 8001fe4:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <LinkMovingPID10to45Load+0x90>)
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
	PositionPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <LinkMovingPID10to45Load+0x94>)
 8001fee:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7fe fa75 	bl	80004e4 <__aeabi_ul2d>
 8001ffa:	a315      	add	r3, pc, #84	; (adr r3, 8002050 <LinkMovingPID10to45Load+0x88>)
 8001ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002000:	f7fe fbd0 	bl	80007a4 <__aeabi_ddiv>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4913      	ldr	r1, [pc, #76]	; (8002058 <LinkMovingPID10to45Load+0x90>)
 800200a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	VelocityPIDController.Kp = 3.5;
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <LinkMovingPID10to45Load+0x98>)
 8002010:	4a14      	ldr	r2, [pc, #80]	; (8002064 <LinkMovingPID10to45Load+0x9c>)
 8002012:	601a      	str	r2, [r3, #0]
	VelocityPIDController.Ki = 7;
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <LinkMovingPID10to45Load+0x98>)
 8002016:	4a14      	ldr	r2, [pc, #80]	; (8002068 <LinkMovingPID10to45Load+0xa0>)
 8002018:	605a      	str	r2, [r3, #4]
	VelocityPIDController.Kd = 0.00005;
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <LinkMovingPID10to45Load+0x98>)
 800201c:	4a13      	ldr	r2, [pc, #76]	; (800206c <LinkMovingPID10to45Load+0xa4>)
 800201e:	609a      	str	r2, [r3, #8]
	VelocityPIDController.offSet = 1500;
 8002020:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <LinkMovingPID10to45Load+0x98>)
 8002022:	4a13      	ldr	r2, [pc, #76]	; (8002070 <LinkMovingPID10to45Load+0xa8>)
 8002024:	611a      	str	r2, [r3, #16]
	VelocityPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <LinkMovingPID10to45Load+0x94>)
 8002028:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	f7fe fa58 	bl	80004e4 <__aeabi_ul2d>
 8002034:	a306      	add	r3, pc, #24	; (adr r3, 8002050 <LinkMovingPID10to45Load+0x88>)
 8002036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203a:	f7fe fbb3 	bl	80007a4 <__aeabi_ddiv>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4907      	ldr	r1, [pc, #28]	; (8002060 <LinkMovingPID10to45Load+0x98>)
 8002044:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}
 800204c:	f3af 8000 	nop.w
 8002050:	00000000 	.word	0x00000000
 8002054:	412e8480 	.word	0x412e8480
 8002058:	20000208 	.word	0x20000208
 800205c:	20000308 	.word	0x20000308
 8002060:	20000248 	.word	0x20000248
 8002064:	40600000 	.word	0x40600000
 8002068:	40e00000 	.word	0x40e00000
 800206c:	3851b717 	.word	0x3851b717
 8002070:	44bb8000 	.word	0x44bb8000
 8002074:	00000000 	.word	0x00000000

08002078 <LinkMovingPID0to9Load>:

void LinkMovingPID0to9Load()
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	PositionPIDController.Kp = 0;
 800207c:	4b22      	ldr	r3, [pc, #136]	; (8002108 <LinkMovingPID0to9Load+0x90>)
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
	PositionPIDController.Ki = 0;
 8002084:	4b20      	ldr	r3, [pc, #128]	; (8002108 <LinkMovingPID0to9Load+0x90>)
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	605a      	str	r2, [r3, #4]
	PositionPIDController.Kd = 0;
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <LinkMovingPID0to9Load+0x90>)
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
	PositionPIDController.offSet = 0;
 8002094:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <LinkMovingPID0to9Load+0x90>)
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
	PositionPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 800209c:	4b1b      	ldr	r3, [pc, #108]	; (800210c <LinkMovingPID0to9Load+0x94>)
 800209e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80020a2:	4610      	mov	r0, r2
 80020a4:	4619      	mov	r1, r3
 80020a6:	f7fe fa1d 	bl	80004e4 <__aeabi_ul2d>
 80020aa:	a315      	add	r3, pc, #84	; (adr r3, 8002100 <LinkMovingPID0to9Load+0x88>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	f7fe fb78 	bl	80007a4 <__aeabi_ddiv>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4913      	ldr	r1, [pc, #76]	; (8002108 <LinkMovingPID0to9Load+0x90>)
 80020ba:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	VelocityPIDController.Kp = 1;
 80020be:	4b14      	ldr	r3, [pc, #80]	; (8002110 <LinkMovingPID0to9Load+0x98>)
 80020c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020c4:	601a      	str	r2, [r3, #0]
	VelocityPIDController.Ki = 5;
 80020c6:	4b12      	ldr	r3, [pc, #72]	; (8002110 <LinkMovingPID0to9Load+0x98>)
 80020c8:	4a12      	ldr	r2, [pc, #72]	; (8002114 <LinkMovingPID0to9Load+0x9c>)
 80020ca:	605a      	str	r2, [r3, #4]
	VelocityPIDController.Kd = 0.00005;
 80020cc:	4b10      	ldr	r3, [pc, #64]	; (8002110 <LinkMovingPID0to9Load+0x98>)
 80020ce:	4a12      	ldr	r2, [pc, #72]	; (8002118 <LinkMovingPID0to9Load+0xa0>)
 80020d0:	609a      	str	r2, [r3, #8]
	VelocityPIDController.offSet = 1500;
 80020d2:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <LinkMovingPID0to9Load+0x98>)
 80020d4:	4a11      	ldr	r2, [pc, #68]	; (800211c <LinkMovingPID0to9Load+0xa4>)
 80020d6:	611a      	str	r2, [r3, #16]
	VelocityPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <LinkMovingPID0to9Load+0x94>)
 80020da:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	f7fe f9ff 	bl	80004e4 <__aeabi_ul2d>
 80020e6:	a306      	add	r3, pc, #24	; (adr r3, 8002100 <LinkMovingPID0to9Load+0x88>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	f7fe fb5a 	bl	80007a4 <__aeabi_ddiv>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4906      	ldr	r1, [pc, #24]	; (8002110 <LinkMovingPID0to9Load+0x98>)
 80020f6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	00000000 	.word	0x00000000
 8002104:	412e8480 	.word	0x412e8480
 8002108:	20000208 	.word	0x20000208
 800210c:	20000308 	.word	0x20000308
 8002110:	20000248 	.word	0x20000248
 8002114:	40a00000 	.word	0x40a00000
 8002118:	3851b717 	.word	0x3851b717
 800211c:	44bb8000 	.word	0x44bb8000

08002120 <StabilizerPIDLoad>:

void StabilizerPIDLoad()
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
//	StabilizerPIDController.Kp = 35;
//	StabilizerPIDController.Ki = 17;
	StabilizerPIDController.Kp = 0.0000000000001;
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <StabilizerPIDLoad+0x50>)
 8002126:	4a13      	ldr	r2, [pc, #76]	; (8002174 <StabilizerPIDLoad+0x54>)
 8002128:	601a      	str	r2, [r3, #0]
	StabilizerPIDController.Ki = 1.3;
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <StabilizerPIDLoad+0x50>)
 800212c:	4a12      	ldr	r2, [pc, #72]	; (8002178 <StabilizerPIDLoad+0x58>)
 800212e:	605a      	str	r2, [r3, #4]
	StabilizerPIDController.Kd = 0;
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <StabilizerPIDLoad+0x50>)
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
	StabilizerPIDController.offSet = 1200;
 8002138:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <StabilizerPIDLoad+0x50>)
 800213a:	4a10      	ldr	r2, [pc, #64]	; (800217c <StabilizerPIDLoad+0x5c>)
 800213c:	611a      	str	r2, [r3, #16]
	StabilizerPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <StabilizerPIDLoad+0x60>)
 8002140:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f7fe f9cc 	bl	80004e4 <__aeabi_ul2d>
 800214c:	a306      	add	r3, pc, #24	; (adr r3, 8002168 <StabilizerPIDLoad+0x48>)
 800214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002152:	f7fe fb27 	bl	80007a4 <__aeabi_ddiv>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4905      	ldr	r1, [pc, #20]	; (8002170 <StabilizerPIDLoad+0x50>)
 800215c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}
 8002164:	f3af 8000 	nop.w
 8002168:	00000000 	.word	0x00000000
 800216c:	412e8480 	.word	0x412e8480
 8002170:	200002c8 	.word	0x200002c8
 8002174:	29e12e13 	.word	0x29e12e13
 8002178:	3fa66666 	.word	0x3fa66666
 800217c:	44960000 	.word	0x44960000
 8002180:	20000308 	.word	0x20000308
 8002184:	00000000 	.word	0x00000000

08002188 <VelocityPurePIDLoad>:

void VelocityPurePIDLoad()
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
	PureVelocityPIDController.Kp = 5;
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <VelocityPurePIDLoad+0x50>)
 800218e:	4a13      	ldr	r2, [pc, #76]	; (80021dc <VelocityPurePIDLoad+0x54>)
 8002190:	601a      	str	r2, [r3, #0]
	PureVelocityPIDController.Ki = 15;
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <VelocityPurePIDLoad+0x50>)
 8002194:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <VelocityPurePIDLoad+0x58>)
 8002196:	605a      	str	r2, [r3, #4]
	PureVelocityPIDController.Kd = 0.00005;
 8002198:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <VelocityPurePIDLoad+0x50>)
 800219a:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <VelocityPurePIDLoad+0x5c>)
 800219c:	609a      	str	r2, [r3, #8]
	PureVelocityPIDController.offSet = 1500;
 800219e:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <VelocityPurePIDLoad+0x50>)
 80021a0:	4a11      	ldr	r2, [pc, #68]	; (80021e8 <VelocityPurePIDLoad+0x60>)
 80021a2:	611a      	str	r2, [r3, #16]
	PureVelocityPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <VelocityPurePIDLoad+0x64>)
 80021a6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	f7fe f999 	bl	80004e4 <__aeabi_ul2d>
 80021b2:	a307      	add	r3, pc, #28	; (adr r3, 80021d0 <VelocityPurePIDLoad+0x48>)
 80021b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b8:	f7fe faf4 	bl	80007a4 <__aeabi_ddiv>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4905      	ldr	r1, [pc, #20]	; (80021d8 <VelocityPurePIDLoad+0x50>)
 80021c2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	f3af 8000 	nop.w
 80021d0:	00000000 	.word	0x00000000
 80021d4:	412e8480 	.word	0x412e8480
 80021d8:	20000288 	.word	0x20000288
 80021dc:	40a00000 	.word	0x40a00000
 80021e0:	41700000 	.word	0x41700000
 80021e4:	3851b717 	.word	0x3851b717
 80021e8:	44bb8000 	.word	0x44bb8000
 80021ec:	20000308 	.word	0x20000308

080021f0 <TrajectoryGenerationVelocityMaxSetting>:


void TrajectoryGenerationVelocityMaxSetting(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*(CUSSvar->RPMp))/(60.0);   ///RPM to pps
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	edd3 7a02 	vldr	s15, [r3, #8]
 800220c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002210:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002258 <TrajectoryGenerationVelocityMaxSetting+0x68>
 8002214:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	edc3 7a04 	vstr	s15, [r3, #16]
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	edd3 6a04 	vldr	s13, [r3, #16]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	ed93 7a05 	vldr	s14, [r3, #20]
 800222a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	ed93 7a04 	vldr	s14, [r3, #16]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	42700000 	.word	0x42700000
 800225c:	00000000 	.word	0x00000000

08002260 <TrajectoryGenerationPrepareDATA>:

void TrajectoryGenerationPrepareDATA()
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	// fix start position base on Encoder
	TrjStruc.Start_Theta = htim1.Instance->CNT;
 8002264:	4b9e      	ldr	r3, [pc, #632]	; (80024e0 <TrajectoryGenerationPrepareDATA+0x280>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	ee07 3a90 	vmov	s15, r3
 800226e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002272:	4b9c      	ldr	r3, [pc, #624]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 8002274:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

	if (MovingLinkMode == LMM_Set_Pos_Directly)
 8002278:	4b9b      	ldr	r3, [pc, #620]	; (80024e8 <TrajectoryGenerationPrepareDATA+0x288>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d165      	bne.n	800234c <TrajectoryGenerationPrepareDATA+0xec>
	  {
		  TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(10000.0*2.0*3.14159));  //pulse
 8002280:	4b9a      	ldr	r3, [pc, #616]	; (80024ec <TrajectoryGenerationPrepareDATA+0x28c>)
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	4b9a      	ldr	r3, [pc, #616]	; (80024f0 <TrajectoryGenerationPrepareDATA+0x290>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	fb03 f302 	mul.w	r3, r3, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe f8e4 	bl	800045c <__aeabi_ui2d>
 8002294:	a390      	add	r3, pc, #576	; (adr r3, 80024d8 <TrajectoryGenerationPrepareDATA+0x278>)
 8002296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229a:	f7fe fa83 	bl	80007a4 <__aeabi_ddiv>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4610      	mov	r0, r2
 80022a4:	4619      	mov	r1, r3
 80022a6:	f7fe fc23 	bl	8000af0 <__aeabi_d2f>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4a8d      	ldr	r2, [pc, #564]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 80022ae:	6693      	str	r3, [r2, #104]	; 0x68
		  if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)   ///wrap input into 1 revolute.
 80022b0:	4b8c      	ldr	r3, [pc, #560]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 80022b2:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80022b6:	4b8e      	ldr	r3, [pc, #568]	; (80024f0 <TrajectoryGenerationPrepareDATA+0x290>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ca:	db0d      	blt.n	80022e8 <TrajectoryGenerationPrepareDATA+0x88>
		  {
			 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 80022cc:	4b85      	ldr	r3, [pc, #532]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 80022ce:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80022d2:	4b87      	ldr	r3, [pc, #540]	; (80024f0 <TrajectoryGenerationPrepareDATA+0x290>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	ee07 3a90 	vmov	s15, r3
 80022da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e2:	4b80      	ldr	r3, [pc, #512]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 80022e4:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		  }
		  TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 80022e8:	4b7e      	ldr	r3, [pc, #504]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 80022ea:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80022ee:	4b80      	ldr	r3, [pc, #512]	; (80024f0 <TrajectoryGenerationPrepareDATA+0x290>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	ee07 3a90 	vmov	s15, r3
 80022f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fe:	4b79      	ldr	r3, [pc, #484]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 8002300:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

		  if (TrjStruc.Desire_Theta != TrjStruc.Start_Theta)
 8002304:	4b77      	ldr	r3, [pc, #476]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 8002306:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800230a:	4b76      	ldr	r3, [pc, #472]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 800230c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002310:	eeb4 7a67 	vcmp.f32	s14, s15
 8002314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002318:	d00e      	beq.n	8002338 <TrajectoryGenerationPrepareDATA+0xd8>
		  {
			  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 800231a:	4b72      	ldr	r3, [pc, #456]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 800231c:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002320:	4b70      	ldr	r3, [pc, #448]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 8002322:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002326:	ee77 7a67 	vsub.f32	s15, s14, s15
 800232a:	4b6e      	ldr	r3, [pc, #440]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 800232c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
			  Munmunbot_State = STATE_Calculation;
 8002330:	4b70      	ldr	r3, [pc, #448]	; (80024f4 <TrajectoryGenerationPrepareDATA+0x294>)
 8002332:	2203      	movs	r2, #3
 8002334:	701a      	strb	r2, [r3, #0]
	  {
		MovingLinkMode = LMM_Not_Set;
		Munmunbot_State = STATE_Idle;
		ACK2Return(&UART2);
	  }
}
 8002336:	e0cd      	b.n	80024d4 <TrajectoryGenerationPrepareDATA+0x274>
			Munmunbot_State = STATE_Idle;
 8002338:	4b6e      	ldr	r3, [pc, #440]	; (80024f4 <TrajectoryGenerationPrepareDATA+0x294>)
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 800233e:	4b6a      	ldr	r3, [pc, #424]	; (80024e8 <TrajectoryGenerationPrepareDATA+0x288>)
 8002340:	2200      	movs	r2, #0
 8002342:	701a      	strb	r2, [r3, #0]
			ACK2Return(&UART2);
 8002344:	486c      	ldr	r0, [pc, #432]	; (80024f8 <TrajectoryGenerationPrepareDATA+0x298>)
 8002346:	f001 f8fd 	bl	8003544 <ACK2Return>
}
 800234a:	e0c3      	b.n	80024d4 <TrajectoryGenerationPrepareDATA+0x274>
	else if (MovingLinkMode == LMM_Set_Goal_1_Station || MovingLinkMode == LMM_Set_Goal_n_Station )
 800234c:	4b66      	ldr	r3, [pc, #408]	; (80024e8 <TrajectoryGenerationPrepareDATA+0x288>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d004      	beq.n	800235e <TrajectoryGenerationPrepareDATA+0xfe>
 8002354:	4b64      	ldr	r3, [pc, #400]	; (80024e8 <TrajectoryGenerationPrepareDATA+0x288>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b03      	cmp	r3, #3
 800235a:	f040 80b1 	bne.w	80024c0 <TrajectoryGenerationPrepareDATA+0x260>
		  if (NumberOfStationToGo == 0)
 800235e:	4b67      	ldr	r3, [pc, #412]	; (80024fc <TrajectoryGenerationPrepareDATA+0x29c>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10f      	bne.n	8002386 <TrajectoryGenerationPrepareDATA+0x126>
				Munmunbot_State = STATE_Idle;
 8002366:	4b63      	ldr	r3, [pc, #396]	; (80024f4 <TrajectoryGenerationPrepareDATA+0x294>)
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
				NumberOfStationPTR = 0;
 800236c:	4b64      	ldr	r3, [pc, #400]	; (8002500 <TrajectoryGenerationPrepareDATA+0x2a0>)
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo = 0;
 8002372:	4b62      	ldr	r3, [pc, #392]	; (80024fc <TrajectoryGenerationPrepareDATA+0x29c>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
				MovingLinkMode = LMM_Not_Set;
 8002378:	4b5b      	ldr	r3, [pc, #364]	; (80024e8 <TrajectoryGenerationPrepareDATA+0x288>)
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
				ACK2Return(&UART2);
 800237e:	485e      	ldr	r0, [pc, #376]	; (80024f8 <TrajectoryGenerationPrepareDATA+0x298>)
 8002380:	f001 f8e0 	bl	8003544 <ACK2Return>
		  if (NumberOfStationToGo == 0)
 8002384:	e0a6      	b.n	80024d4 <TrajectoryGenerationPrepareDATA+0x274>
			Current_Station = Angularpos_InputArray[NumberOfStationPTR];
 8002386:	4b5e      	ldr	r3, [pc, #376]	; (8002500 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	4b5d      	ldr	r3, [pc, #372]	; (8002504 <TrajectoryGenerationPrepareDATA+0x2a4>)
 800238e:	5c9a      	ldrb	r2, [r3, r2]
 8002390:	4b5d      	ldr	r3, [pc, #372]	; (8002508 <TrajectoryGenerationPrepareDATA+0x2a8>)
 8002392:	701a      	strb	r2, [r3, #0]
			if (Current_Station > 10)   //pass input
 8002394:	4b5c      	ldr	r3, [pc, #368]	; (8002508 <TrajectoryGenerationPrepareDATA+0x2a8>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b0a      	cmp	r3, #10
 800239a:	d90c      	bls.n	80023b6 <TrajectoryGenerationPrepareDATA+0x156>
				NumberOfStationPTR += 1;
 800239c:	4b58      	ldr	r3, [pc, #352]	; (8002500 <TrajectoryGenerationPrepareDATA+0x2a0>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	3301      	adds	r3, #1
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b56      	ldr	r3, [pc, #344]	; (8002500 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80023a6:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo -= 1;
 80023a8:	4b54      	ldr	r3, [pc, #336]	; (80024fc <TrajectoryGenerationPrepareDATA+0x29c>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4b52      	ldr	r3, [pc, #328]	; (80024fc <TrajectoryGenerationPrepareDATA+0x29c>)
 80023b2:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 80023b4:	e08e      	b.n	80024d4 <TrajectoryGenerationPrepareDATA+0x274>
				TrjStruc.Desire_Theta = (StationPos[Current_Station-1]*CUSSStruc.PPRxQEI/(360.0))*5.0;   ///fix this if change algorithm
 80023b6:	4b54      	ldr	r3, [pc, #336]	; (8002508 <TrajectoryGenerationPrepareDATA+0x2a8>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	4a53      	ldr	r2, [pc, #332]	; (800250c <TrajectoryGenerationPrepareDATA+0x2ac>)
 80023be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b4a      	ldr	r3, [pc, #296]	; (80024f0 <TrajectoryGenerationPrepareDATA+0x290>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	fb03 f302 	mul.w	r3, r3, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe f845 	bl	800045c <__aeabi_ui2d>
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	4b4e      	ldr	r3, [pc, #312]	; (8002510 <TrajectoryGenerationPrepareDATA+0x2b0>)
 80023d8:	f7fe f9e4 	bl	80007a4 <__aeabi_ddiv>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	4b4a      	ldr	r3, [pc, #296]	; (8002514 <TrajectoryGenerationPrepareDATA+0x2b4>)
 80023ea:	f7fe f8b1 	bl	8000550 <__aeabi_dmul>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4610      	mov	r0, r2
 80023f4:	4619      	mov	r1, r3
 80023f6:	f7fe fb7b 	bl	8000af0 <__aeabi_d2f>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4a39      	ldr	r2, [pc, #228]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 80023fe:	6693      	str	r3, [r2, #104]	; 0x68
				if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)  ///wrap input into 1 revolute. ///shouldn't happen
 8002400:	4b38      	ldr	r3, [pc, #224]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 8002402:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002406:	4b3a      	ldr	r3, [pc, #232]	; (80024f0 <TrajectoryGenerationPrepareDATA+0x290>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241a:	db0d      	blt.n	8002438 <TrajectoryGenerationPrepareDATA+0x1d8>
					TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 800241c:	4b31      	ldr	r3, [pc, #196]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 800241e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002422:	4b33      	ldr	r3, [pc, #204]	; (80024f0 <TrajectoryGenerationPrepareDATA+0x290>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800242e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002432:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 8002434:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
				TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 800243a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800243e:	4b2c      	ldr	r3, [pc, #176]	; (80024f0 <TrajectoryGenerationPrepareDATA+0x290>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800244e:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 8002450:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
				if (TrjStruc.Desire_Theta == TrjStruc.Start_Theta)
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 8002456:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 800245c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002460:	eeb4 7a67 	vcmp.f32	s14, s15
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	d10f      	bne.n	800248a <TrajectoryGenerationPrepareDATA+0x22a>
					NumberOfStationPTR += 1;
 800246a:	4b25      	ldr	r3, [pc, #148]	; (8002500 <TrajectoryGenerationPrepareDATA+0x2a0>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	3301      	adds	r3, #1
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b23      	ldr	r3, [pc, #140]	; (8002500 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002474:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 8002476:	4b21      	ldr	r3, [pc, #132]	; (80024fc <TrajectoryGenerationPrepareDATA+0x29c>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	3b01      	subs	r3, #1
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <TrajectoryGenerationPrepareDATA+0x29c>)
 8002480:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_End_Effector_Working;
 8002482:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <TrajectoryGenerationPrepareDATA+0x294>)
 8002484:	2207      	movs	r2, #7
 8002486:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8002488:	e024      	b.n	80024d4 <TrajectoryGenerationPrepareDATA+0x274>
					TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 800248a:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 800248c:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002490:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 8002492:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x284>)
 800249c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
					Munmunbot_State = STATE_Calculation;
 80024a0:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <TrajectoryGenerationPrepareDATA+0x294>)
 80024a2:	2203      	movs	r2, #3
 80024a4:	701a      	strb	r2, [r3, #0]
					NumberOfStationPTR += 1;
 80024a6:	4b16      	ldr	r3, [pc, #88]	; (8002500 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	3301      	adds	r3, #1
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b14      	ldr	r3, [pc, #80]	; (8002500 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80024b0:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <TrajectoryGenerationPrepareDATA+0x29c>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <TrajectoryGenerationPrepareDATA+0x29c>)
 80024bc:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 80024be:	e009      	b.n	80024d4 <TrajectoryGenerationPrepareDATA+0x274>
		MovingLinkMode = LMM_Not_Set;
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <TrajectoryGenerationPrepareDATA+0x288>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
		Munmunbot_State = STATE_Idle;
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <TrajectoryGenerationPrepareDATA+0x294>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
		ACK2Return(&UART2);
 80024cc:	480a      	ldr	r0, [pc, #40]	; (80024f8 <TrajectoryGenerationPrepareDATA+0x298>)
 80024ce:	f001 f839 	bl	8003544 <ACK2Return>
}
 80024d2:	e7ff      	b.n	80024d4 <TrajectoryGenerationPrepareDATA+0x274>
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	99999999 	.word	0x99999999
 80024dc:	40eeadf9 	.word	0x40eeadf9
 80024e0:	2000064c 	.word	0x2000064c
 80024e4:	20000308 	.word	0x20000308
 80024e8:	200001de 	.word	0x200001de
 80024ec:	200001dc 	.word	0x200001dc
 80024f0:	20000398 	.word	0x20000398
 80024f4:	200000d9 	.word	0x200000d9
 80024f8:	200000b8 	.word	0x200000b8
 80024fc:	200001e0 	.word	0x200001e0
 8002500:	200001e1 	.word	0x200001e1
 8002504:	200000dc 	.word	0x200000dc
 8002508:	200001df 	.word	0x200001df
 800250c:	20000000 	.word	0x20000000
 8002510:	40768000 	.word	0x40768000
 8002514:	40140000 	.word	0x40140000

08002518 <TrajectoryGenerationCalculation>:

void TrajectoryGenerationCalculation()
{
 8002518:	b5b0      	push	{r4, r5, r7, lr}
 800251a:	af00      	add	r7, sp, #0
	if (TrjStruc.Delta_Theta < 0)
 800251c:	4bb0      	ldr	r3, [pc, #704]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800251e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002522:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252a:	d51b      	bpl.n	8002564 <TrajectoryGenerationCalculation+0x4c>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting * -1;
 800252c:	4bac      	ldr	r3, [pc, #688]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800252e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002532:	eef1 7a67 	vneg.f32	s15, s15
 8002536:	4baa      	ldr	r3, [pc, #680]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002538:	edc3 7a07 	vstr	s15, [r3, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting *-1;
 800253c:	4ba8      	ldr	r3, [pc, #672]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800253e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002542:	eef1 7a67 	vneg.f32	s15, s15
 8002546:	4ba6      	ldr	r3, [pc, #664]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002548:	edc3 7a06 	vstr	s15, [r3, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta * -1;
 800254c:	4ba4      	ldr	r3, [pc, #656]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800254e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002552:	eef1 7a67 	vneg.f32	s15, s15
 8002556:	4ba2      	ldr	r3, [pc, #648]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002558:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
		 TrjStruc.Alpha = -1;
 800255c:	4ba0      	ldr	r3, [pc, #640]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800255e:	4aa1      	ldr	r2, [pc, #644]	; (80027e4 <TrajectoryGenerationCalculation+0x2cc>)
 8002560:	67da      	str	r2, [r3, #124]	; 0x7c
 8002562:	e017      	b.n	8002594 <TrajectoryGenerationCalculation+0x7c>
	  }
	  else if (TrjStruc.Delta_Theta > 0)
 8002564:	4b9e      	ldr	r3, [pc, #632]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002566:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800256a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800256e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002572:	dd0f      	ble.n	8002594 <TrajectoryGenerationCalculation+0x7c>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting;
 8002574:	4b9a      	ldr	r3, [pc, #616]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	4a99      	ldr	r2, [pc, #612]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800257a:	61d3      	str	r3, [r2, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting;
 800257c:	4b98      	ldr	r3, [pc, #608]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	4a97      	ldr	r2, [pc, #604]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002582:	6193      	str	r3, [r2, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta;
 8002584:	4b96      	ldr	r3, [pc, #600]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	4a95      	ldr	r2, [pc, #596]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800258a:	6753      	str	r3, [r2, #116]	; 0x74
		 TrjStruc.Alpha = 1;
 800258c:	4b94      	ldr	r3, [pc, #592]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800258e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002592:	67da      	str	r2, [r3, #124]	; 0x7c
	  }

	 if ( PIDTunerMode == 0 )
 8002594:	4b94      	ldr	r3, [pc, #592]	; (80027e8 <TrajectoryGenerationCalculation+0x2d0>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d13d      	bne.n	8002618 <TrajectoryGenerationCalculation+0x100>
	 {
		 if ( TrjStruc.Abs_Delta_Theta >= ( 45*8192.0/360.0 ) )
 800259c:	4b90      	ldr	r3, [pc, #576]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800259e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80025a2:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80027ec <TrajectoryGenerationCalculation+0x2d4>
 80025a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ae:	db02      	blt.n	80025b6 <TrajectoryGenerationCalculation+0x9e>
		 {
			 LinkMovingPID45to355Load();
 80025b0:	f7ff fcb6 	bl	8001f20 <LinkMovingPID45to355Load>
 80025b4:	e030      	b.n	8002618 <TrajectoryGenerationCalculation+0x100>
		 }
		 else if ( ( TrjStruc.Abs_Delta_Theta >= ( 10*8192.0/360.0 ) ) && ( TrjStruc.Abs_Delta_Theta < ( 45*8192.0/360.0 ) ) )
 80025b6:	4b8a      	ldr	r3, [pc, #552]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 80025b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fd ff70 	bl	80004a0 <__aeabi_f2d>
 80025c0:	a385      	add	r3, pc, #532	; (adr r3, 80027d8 <TrajectoryGenerationCalculation+0x2c0>)
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	f7fe fa49 	bl	8000a5c <__aeabi_dcmpge>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00c      	beq.n	80025ea <TrajectoryGenerationCalculation+0xd2>
 80025d0:	4b83      	ldr	r3, [pc, #524]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 80025d2:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80025d6:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80027ec <TrajectoryGenerationCalculation+0x2d4>
 80025da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e2:	d502      	bpl.n	80025ea <TrajectoryGenerationCalculation+0xd2>
		 {
			 LinkMovingPID10to45Load();
 80025e4:	f7ff fcf0 	bl	8001fc8 <LinkMovingPID10to45Load>
 80025e8:	e016      	b.n	8002618 <TrajectoryGenerationCalculation+0x100>
		 }
		 else if ( ( TrjStruc.Abs_Delta_Theta >= ( 0*8192.0/360.0 ) ) && ( TrjStruc.Abs_Delta_Theta < ( 10*8192.0/360.0 ) ) )
 80025ea:	4b7d      	ldr	r3, [pc, #500]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 80025ec:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80025f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f8:	db0e      	blt.n	8002618 <TrajectoryGenerationCalculation+0x100>
 80025fa:	4b79      	ldr	r3, [pc, #484]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 80025fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd ff4e 	bl	80004a0 <__aeabi_f2d>
 8002604:	a374      	add	r3, pc, #464	; (adr r3, 80027d8 <TrajectoryGenerationCalculation+0x2c0>)
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	f7fe fa13 	bl	8000a34 <__aeabi_dcmplt>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <TrajectoryGenerationCalculation+0x100>
		 {
			 LinkMovingPID0to9Load();
 8002614:	f7ff fd30 	bl	8002078 <LinkMovingPID0to9Load>
		 }
	 }

	  if (TrjStruc.Abs_Delta_Theta < TrjStruc.Theta_min_for_LSPB)   ///Triangular mode0
 8002618:	4b71      	ldr	r3, [pc, #452]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800261a:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800261e:	4b70      	ldr	r3, [pc, #448]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002620:	edd3 7a03 	vldr	s15, [r3, #12]
 8002624:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262c:	d55a      	bpl.n	80026e4 <TrajectoryGenerationCalculation+0x1cc>
	  {
		 TrjStruc.BlendTimeTriangular = sqrt(TrjStruc.Abs_Delta_Theta/TrjStruc.AngularAccerationMax_Setting);
 800262e:	4b6c      	ldr	r3, [pc, #432]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002630:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002634:	4b6a      	ldr	r3, [pc, #424]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002636:	edd3 7a05 	vldr	s15, [r3, #20]
 800263a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800263e:	ee16 0a90 	vmov	r0, s13
 8002642:	f7fd ff2d 	bl	80004a0 <__aeabi_f2d>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	ec43 2b10 	vmov	d0, r2, r3
 800264e:	f007 ff5d 	bl	800a50c <sqrt>
 8002652:	ec53 2b10 	vmov	r2, r3, d0
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	f7fe fa49 	bl	8000af0 <__aeabi_d2f>
 800265e:	4603      	mov	r3, r0
 8002660:	4a5f      	ldr	r2, [pc, #380]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002662:	6053      	str	r3, [r2, #4]
		 TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 8002664:	4b5e      	ldr	r3, [pc, #376]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002668:	4a5d      	ldr	r2, [pc, #372]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800266a:	6293      	str	r3, [r2, #40]	; 0x28
		 TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeTriangular*TrjStruc.BlendTimeTriangular))/2.0) + TrjStruc.Theta_Stamp_0;
 800266c:	4b5c      	ldr	r3, [pc, #368]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800266e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002672:	4b5b      	ldr	r3, [pc, #364]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002674:	edd3 6a01 	vldr	s13, [r3, #4]
 8002678:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800267a:	edd3 7a01 	vldr	s15, [r3, #4]
 800267e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002686:	ee17 0a90 	vmov	r0, s15
 800268a:	f7fd ff09 	bl	80004a0 <__aeabi_f2d>
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002696:	f7fe f885 	bl	80007a4 <__aeabi_ddiv>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4614      	mov	r4, r2
 80026a0:	461d      	mov	r5, r3
 80026a2:	4b4f      	ldr	r3, [pc, #316]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 80026a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fd fefa 	bl	80004a0 <__aeabi_f2d>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4620      	mov	r0, r4
 80026b2:	4629      	mov	r1, r5
 80026b4:	f7fd fd96 	bl	80001e4 <__adddf3>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	f7fe fa16 	bl	8000af0 <__aeabi_d2f>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4a46      	ldr	r2, [pc, #280]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 80026c8:	62d3      	str	r3, [r2, #44]	; 0x2c
		 TrjStruc.Mode = 0;
 80026ca:	4b45      	ldr	r3, [pc, #276]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		 TrjStruc.Submode = 0;
 80026d2:	4b43      	ldr	r3, [pc, #268]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		 TrjStruc.Subsubmode = 0;
 80026da:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80026e2:	e069      	b.n	80027b8 <TrajectoryGenerationCalculation+0x2a0>
	  }
	  else if (TrjStruc.Abs_Delta_Theta >= TrjStruc.Theta_min_for_LSPB)  ///LSPB mode1
 80026e4:	4b3e      	ldr	r3, [pc, #248]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 80026e6:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 80026ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80026f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f8:	db5e      	blt.n	80027b8 <TrajectoryGenerationCalculation+0x2a0>
	  {
		  TrjStruc.LinearTimeLSPB = (TrjStruc.Abs_Delta_Theta-TrjStruc.Theta_min_for_LSPB)/TrjStruc.AngularVelocityMax_Setting;
 80026fa:	4b39      	ldr	r3, [pc, #228]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 80026fc:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002700:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002702:	edd3 7a03 	vldr	s15, [r3, #12]
 8002706:	ee77 6a67 	vsub.f32	s13, s14, s15
 800270a:	4b35      	ldr	r3, [pc, #212]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800270c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002714:	4b32      	ldr	r3, [pc, #200]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002716:	edc3 7a02 	vstr	s15, [r3, #8]
		  TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 800271a:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800271c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800271e:	4a30      	ldr	r2, [pc, #192]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002720:	6293      	str	r3, [r2, #40]	; 0x28
		  TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeLSPB*TrjStruc.BlendTimeLSPB))/2.0) + TrjStruc.Theta_Stamp_0;
 8002722:	4b2f      	ldr	r3, [pc, #188]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002724:	ed93 7a07 	vldr	s14, [r3, #28]
 8002728:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800272a:	edd3 6a00 	vldr	s13, [r3]
 800272e:	4b2c      	ldr	r3, [pc, #176]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273c:	ee17 0a90 	vmov	r0, s15
 8002740:	f7fd feae 	bl	80004a0 <__aeabi_f2d>
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800274c:	f7fe f82a 	bl	80007a4 <__aeabi_ddiv>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4614      	mov	r4, r2
 8002756:	461d      	mov	r5, r3
 8002758:	4b21      	ldr	r3, [pc, #132]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	4618      	mov	r0, r3
 800275e:	f7fd fe9f 	bl	80004a0 <__aeabi_f2d>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4620      	mov	r0, r4
 8002768:	4629      	mov	r1, r5
 800276a:	f7fd fd3b 	bl	80001e4 <__adddf3>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	f7fe f9bb 	bl	8000af0 <__aeabi_d2f>
 800277a:	4603      	mov	r3, r0
 800277c:	4a18      	ldr	r2, [pc, #96]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800277e:	62d3      	str	r3, [r2, #44]	; 0x2c
		  TrjStruc.Theta_Stamp_2 = (TrjStruc.AngularVelocity*TrjStruc.LinearTimeLSPB) + TrjStruc.Theta_Stamp_1;
 8002780:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002782:	ed93 7a06 	vldr	s14, [r3, #24]
 8002786:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002788:	edd3 7a02 	vldr	s15, [r3, #8]
 800278c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002790:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 8002792:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 800279c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		  TrjStruc.Mode = 1;
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		  TrjStruc.Submode = 0;
 80027a8:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		  TrjStruc.Subsubmode = 0;
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  }
	 TrjStruc.Equation_Timestamp = micros();
 80027b8:	f7ff fa82 	bl	8001cc0 <micros>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4907      	ldr	r1, [pc, #28]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 80027c2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 TrjStruc.Loop_Timestamp = micros();
 80027c6:	f7ff fa7b 	bl	8001cc0 <micros>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4904      	ldr	r1, [pc, #16]	; (80027e0 <TrajectoryGenerationCalculation+0x2c8>)
 80027d0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80027d4:	bf00      	nop
 80027d6:	bdb0      	pop	{r4, r5, r7, pc}
 80027d8:	1c71c71c 	.word	0x1c71c71c
 80027dc:	406c71c7 	.word	0x406c71c7
 80027e0:	20000308 	.word	0x20000308
 80027e4:	bf800000 	.word	0xbf800000
 80027e8:	200003a4 	.word	0x200003a4
 80027ec:	44800000 	.word	0x44800000

080027f0 <TrajectoryGenerationProcess>:

void TrajectoryGenerationProcess()
{
 80027f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027f4:	ed2d 8b02 	vpush	{d8}
 80027f8:	b091      	sub	sp, #68	; 0x44
 80027fa:	af00      	add	r7, sp, #0

	TrjStruc.Equation_Realtime_Sec = (micros()-TrjStruc.Equation_Timestamp)/1000000.0;
 80027fc:	f7ff fa60 	bl	8001cc0 <micros>
 8002800:	4ba3      	ldr	r3, [pc, #652]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002802:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002806:	1a84      	subs	r4, r0, r2
 8002808:	eb61 0503 	sbc.w	r5, r1, r3
 800280c:	4620      	mov	r0, r4
 800280e:	4629      	mov	r1, r5
 8002810:	f7fd fe68 	bl	80004e4 <__aeabi_ul2d>
 8002814:	a39c      	add	r3, pc, #624	; (adr r3, 8002a88 <TrajectoryGenerationProcess+0x298>)
 8002816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281a:	f7fd ffc3 	bl	80007a4 <__aeabi_ddiv>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4610      	mov	r0, r2
 8002824:	4619      	mov	r1, r3
 8002826:	4b9a      	ldr	r3, [pc, #616]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002828:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38

	 switch (TrjStruc.Mode)
 800282c:	4b98      	ldr	r3, [pc, #608]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 800282e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002832:	2b02      	cmp	r3, #2
 8002834:	f000 83b0 	beq.w	8002f98 <TrajectoryGenerationProcess+0x7a8>
 8002838:	2b02      	cmp	r3, #2
 800283a:	f200 83bc 	bhi.w	8002fb6 <TrajectoryGenerationProcess+0x7c6>
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <TrajectoryGenerationProcess+0x5a>
 8002842:	2b01      	cmp	r3, #1
 8002844:	f000 81b8 	beq.w	8002bb8 <TrajectoryGenerationProcess+0x3c8>
			  Moving_Link_Task_Flag = 1;
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
			  TrjStruc.AngularVelocityDesire = 0;
			  break;
		  }
}
 8002848:	e3b5      	b.n	8002fb6 <TrajectoryGenerationProcess+0x7c6>
			  if (TrjStruc.Submode == 0)
 800284a:	4b91      	ldr	r3, [pc, #580]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 800284c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002850:	2b00      	cmp	r3, #0
 8002852:	d16f      	bne.n	8002934 <TrajectoryGenerationProcess+0x144>
						  ((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002854:	4b8e      	ldr	r3, [pc, #568]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fe21 	bl	80004a0 <__aeabi_f2d>
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	4b8c      	ldr	r3, [pc, #560]	; (8002a94 <TrajectoryGenerationProcess+0x2a4>)
 8002864:	f7fd fe74 	bl	8000550 <__aeabi_dmul>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4614      	mov	r4, r2
 800286e:	461d      	mov	r5, r3
 8002870:	4b87      	ldr	r3, [pc, #540]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002872:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002876:	4b86      	ldr	r3, [pc, #536]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002878:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800287c:	f7fd fe68 	bl	8000550 <__aeabi_dmul>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4620      	mov	r0, r4
 8002886:	4629      	mov	r1, r5
 8002888:	f7fd fe62 	bl	8000550 <__aeabi_dmul>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4614      	mov	r4, r2
 8002892:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_0;
 8002894:	4b7e      	ldr	r3, [pc, #504]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	4618      	mov	r0, r3
 800289a:	f7fd fe01 	bl	80004a0 <__aeabi_f2d>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4620      	mov	r0, r4
 80028a4:	4629      	mov	r1, r5
 80028a6:	f7fd fc9d 	bl	80001e4 <__adddf3>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	f7fe f91d 	bl	8000af0 <__aeabi_d2f>
 80028b6:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80028b8:	4a75      	ldr	r2, [pc, #468]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 80028ba:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularAcceration * TrjStruc.Equation_Realtime_Sec;
 80028bc:	4b74      	ldr	r3, [pc, #464]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd fded 	bl	80004a0 <__aeabi_f2d>
 80028c6:	4b72      	ldr	r3, [pc, #456]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 80028c8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80028cc:	f7fd fe40 	bl	8000550 <__aeabi_dmul>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4610      	mov	r0, r2
 80028d6:	4619      	mov	r1, r3
 80028d8:	f7fe f90a 	bl	8000af0 <__aeabi_d2f>
 80028dc:	4603      	mov	r3, r0
 80028de:	4a6c      	ldr	r2, [pc, #432]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 80028e0:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 80028e2:	f7ff f9ed 	bl	8001cc0 <micros>
 80028e6:	4b6a      	ldr	r3, [pc, #424]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 80028e8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80028ec:	1a84      	subs	r4, r0, r2
 80028ee:	63bc      	str	r4, [r7, #56]	; 0x38
 80028f0:	eb61 0303 	sbc.w	r3, r1, r3
 80028f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80028fa:	f7fe fa11 	bl	8000d20 <__aeabi_ul2f>
 80028fe:	ee06 0a90 	vmov	s13, r0
 8002902:	4b63      	ldr	r3, [pc, #396]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002904:	edd3 7a01 	vldr	s15, [r3, #4]
 8002908:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002a98 <TrajectoryGenerationProcess+0x2a8>
 800290c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002910:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002918:	da00      	bge.n	800291c <TrajectoryGenerationProcess+0x12c>
			  break;
 800291a:	e349      	b.n	8002fb0 <TrajectoryGenerationProcess+0x7c0>
					  TrjStruc.Equation_Timestamp = micros();
 800291c:	f7ff f9d0 	bl	8001cc0 <micros>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	495a      	ldr	r1, [pc, #360]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002926:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 1;
 800292a:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 800292c:	2201      	movs	r2, #1
 800292e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 8002932:	e33d      	b.n	8002fb0 <TrajectoryGenerationProcess+0x7c0>
			  else if (TrjStruc.Submode == 1)
 8002934:	4b56      	ldr	r3, [pc, #344]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800293a:	2b01      	cmp	r3, #1
 800293c:	f040 8338 	bne.w	8002fb0 <TrajectoryGenerationProcess+0x7c0>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002940:	4b53      	ldr	r3, [pc, #332]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd fdab 	bl	80004a0 <__aeabi_f2d>
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <TrajectoryGenerationProcess+0x2ac>)
 8002950:	f7fd fdfe 	bl	8000550 <__aeabi_dmul>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4614      	mov	r4, r2
 800295a:	461d      	mov	r5, r3
 800295c:	4b4c      	ldr	r3, [pc, #304]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 800295e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002962:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002964:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002968:	f7fd fdf2 	bl	8000550 <__aeabi_dmul>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4620      	mov	r0, r4
 8002972:	4629      	mov	r1, r5
 8002974:	f7fd fdec 	bl	8000550 <__aeabi_dmul>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4614      	mov	r4, r2
 800297e:	461d      	mov	r5, r3
						  + (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular*(TrjStruc.Equation_Realtime_Sec))
 8002980:	4b43      	ldr	r3, [pc, #268]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002982:	ed93 7a07 	vldr	s14, [r3, #28]
 8002986:	4b42      	ldr	r3, [pc, #264]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002988:	edd3 7a01 	vldr	s15, [r3, #4]
 800298c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002990:	ee17 0a90 	vmov	r0, s15
 8002994:	f7fd fd84 	bl	80004a0 <__aeabi_f2d>
 8002998:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 800299a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800299e:	f7fd fdd7 	bl	8000550 <__aeabi_dmul>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4620      	mov	r0, r4
 80029a8:	4629      	mov	r1, r5
 80029aa:	f7fd fc1b 	bl	80001e4 <__adddf3>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4614      	mov	r4, r2
 80029b4:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_1;
 80029b6:	4b36      	ldr	r3, [pc, #216]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fd70 	bl	80004a0 <__aeabi_f2d>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4620      	mov	r0, r4
 80029c6:	4629      	mov	r1, r5
 80029c8:	f7fd fc0c 	bl	80001e4 <__adddf3>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	f7fe f88c 	bl	8000af0 <__aeabi_d2f>
 80029d8:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80029da:	4a2d      	ldr	r2, [pc, #180]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 80029dc:	6213      	str	r3, [r2, #32]
				  if ( TrjStruc.Subsubmode == 0 )
 80029de:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d15b      	bne.n	8002aa0 <TrajectoryGenerationProcess+0x2b0>
					  TrjStruc.AngularVelocityDesire = ( -1.0*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec ) +
 80029e8:	4b29      	ldr	r3, [pc, #164]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd fd57 	bl	80004a0 <__aeabi_f2d>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	633a      	str	r2, [r7, #48]	; 0x30
 80029f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80029fc:	637b      	str	r3, [r7, #52]	; 0x34
 80029fe:	4b24      	ldr	r3, [pc, #144]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002a00:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002a04:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002a08:	f7fd fda2 	bl	8000550 <__aeabi_dmul>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4614      	mov	r4, r2
 8002a12:	461d      	mov	r5, r3
													   (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular);
 8002a14:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002a16:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002a1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a24:	ee17 0a90 	vmov	r0, s15
 8002a28:	f7fd fd3a 	bl	80004a0 <__aeabi_f2d>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
					  TrjStruc.AngularVelocityDesire = ( -1.0*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec ) +
 8002a30:	4620      	mov	r0, r4
 8002a32:	4629      	mov	r1, r5
 8002a34:	f7fd fbd6 	bl	80001e4 <__adddf3>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f7fe f856 	bl	8000af0 <__aeabi_d2f>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4a12      	ldr	r2, [pc, #72]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002a48:	6253      	str	r3, [r2, #36]	; 0x24
					  if ( TrjStruc.Alpha * TrjStruc.AngularVelocityDesire <= TrjStruc.AngularVelocityFinalMin )
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002a4c:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002a50:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002a52:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002a5c:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002a60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a68:	d875      	bhi.n	8002b56 <TrajectoryGenerationProcess+0x366>
						  TrjStruc.Subsubmode = 1;
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						  TrjStruc.Velocity_Timestamp = micros();
 8002a72:	f7ff f925 	bl	8001cc0 <micros>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4905      	ldr	r1, [pc, #20]	; (8002a90 <TrajectoryGenerationProcess+0x2a0>)
 8002a7c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8002a80:	e069      	b.n	8002b56 <TrajectoryGenerationProcess+0x366>
 8002a82:	bf00      	nop
 8002a84:	f3af 8000 	nop.w
 8002a88:	00000000 	.word	0x00000000
 8002a8c:	412e8480 	.word	0x412e8480
 8002a90:	20000308 	.word	0x20000308
 8002a94:	3fe00000 	.word	0x3fe00000
 8002a98:	49742400 	.word	0x49742400
 8002a9c:	bfe00000 	.word	0xbfe00000
				  else if ( TrjStruc.Subsubmode == 1 )
 8002aa0:	4ba9      	ldr	r3, [pc, #676]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d14c      	bne.n	8002b44 <TrajectoryGenerationProcess+0x354>
					  TrjStruc.AngularVelocityDesire = TrjStruc.Alpha * TrjStruc.AngularVelocityFinalMin;
 8002aaa:	4ba7      	ldr	r3, [pc, #668]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002aac:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002ab0:	4ba5      	ldr	r3, [pc, #660]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002ab2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aba:	4ba3      	ldr	r3, [pc, #652]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002abc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					  if (micros()-TrjStruc.Velocity_Timestamp >= ((TrjStruc.BlendTimeTriangular*1000000)-(TrjStruc.Velocity_Timestamp - TrjStruc.Equation_Timestamp))/2.0)
 8002ac0:	f7ff f8fe 	bl	8001cc0 <micros>
 8002ac4:	4ba0      	ldr	r3, [pc, #640]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002ac6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002aca:	1a84      	subs	r4, r0, r2
 8002acc:	62bc      	str	r4, [r7, #40]	; 0x28
 8002ace:	eb61 0303 	sbc.w	r3, r1, r3
 8002ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ad4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ad8:	f7fd fd04 	bl	80004e4 <__aeabi_ul2d>
 8002adc:	4604      	mov	r4, r0
 8002ade:	460d      	mov	r5, r1
 8002ae0:	4b99      	ldr	r3, [pc, #612]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002ae2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ae6:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8002d4c <TrajectoryGenerationProcess+0x55c>
 8002aea:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002aee:	4b96      	ldr	r3, [pc, #600]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002af0:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002af4:	4b94      	ldr	r3, [pc, #592]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002af6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002afa:	1a86      	subs	r6, r0, r2
 8002afc:	623e      	str	r6, [r7, #32]
 8002afe:	eb61 0303 	sbc.w	r3, r1, r3
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
 8002b04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b08:	f7fe f90a 	bl	8000d20 <__aeabi_ul2f>
 8002b0c:	ee07 0a90 	vmov	s15, r0
 8002b10:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002b14:	ee17 0a90 	vmov	r0, s15
 8002b18:	f7fd fcc2 	bl	80004a0 <__aeabi_f2d>
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b24:	f7fd fe3e 	bl	80007a4 <__aeabi_ddiv>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	4629      	mov	r1, r5
 8002b30:	f7fd ff94 	bl	8000a5c <__aeabi_dcmpge>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <TrajectoryGenerationProcess+0x366>
						  TrjStruc.Subsubmode = 2;
 8002b3a:	4b83      	ldr	r3, [pc, #524]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8002b42:	e008      	b.n	8002b56 <TrajectoryGenerationProcess+0x366>
				  else if ( TrjStruc.Subsubmode == 2 )
 8002b44:	4b80      	ldr	r3, [pc, #512]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d103      	bne.n	8002b56 <TrajectoryGenerationProcess+0x366>
					  TrjStruc.AngularVelocityDesire = 0;
 8002b4e:	4b7e      	ldr	r3, [pc, #504]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 8002b56:	f7ff f8b3 	bl	8001cc0 <micros>
 8002b5a:	4b7b      	ldr	r3, [pc, #492]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002b5c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002b60:	1a84      	subs	r4, r0, r2
 8002b62:	61bc      	str	r4, [r7, #24]
 8002b64:	eb61 0303 	sbc.w	r3, r1, r3
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b6e:	f7fe f8d7 	bl	8000d20 <__aeabi_ul2f>
 8002b72:	ee06 0a90 	vmov	s13, r0
 8002b76:	4b74      	ldr	r3, [pc, #464]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002b78:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b7c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002d4c <TrajectoryGenerationProcess+0x55c>
 8002b80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b84:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8c:	da00      	bge.n	8002b90 <TrajectoryGenerationProcess+0x3a0>
			  break;
 8002b8e:	e20f      	b.n	8002fb0 <TrajectoryGenerationProcess+0x7c0>
					  TrjStruc.Equation_Timestamp = micros();
 8002b90:	f7ff f896 	bl	8001cc0 <micros>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	496b      	ldr	r1, [pc, #428]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002b9a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 0;
 8002b9e:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					  TrjStruc.Subsubmode = 0;
 8002ba6:	4b68      	ldr	r3, [pc, #416]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					  TrjStruc.Mode = 2; ///Final Value Mode
 8002bae:	4b66      	ldr	r3, [pc, #408]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			  break;
 8002bb6:	e1fb      	b.n	8002fb0 <TrajectoryGenerationProcess+0x7c0>
			  if (TrjStruc.Submode == 0)
 8002bb8:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d16e      	bne.n	8002ca0 <TrajectoryGenerationProcess+0x4b0>
							((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002bc2:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fd fc6a 	bl	80004a0 <__aeabi_f2d>
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	4b5f      	ldr	r3, [pc, #380]	; (8002d50 <TrajectoryGenerationProcess+0x560>)
 8002bd2:	f7fd fcbd 	bl	8000550 <__aeabi_dmul>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4614      	mov	r4, r2
 8002bdc:	461d      	mov	r5, r3
 8002bde:	4b5a      	ldr	r3, [pc, #360]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002be0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002be4:	4b58      	ldr	r3, [pc, #352]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002be6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002bea:	f7fd fcb1 	bl	8000550 <__aeabi_dmul>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	4629      	mov	r1, r5
 8002bf6:	f7fd fcab 	bl	8000550 <__aeabi_dmul>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4614      	mov	r4, r2
 8002c00:	461d      	mov	r5, r3
							+TrjStruc.Theta_Stamp_0;
 8002c02:	4b51      	ldr	r3, [pc, #324]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fd fc4a 	bl	80004a0 <__aeabi_f2d>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4620      	mov	r0, r4
 8002c12:	4629      	mov	r1, r5
 8002c14:	f7fd fae6 	bl	80001e4 <__adddf3>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f7fd ff66 	bl	8000af0 <__aeabi_d2f>
 8002c24:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002c26:	4a48      	ldr	r2, [pc, #288]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002c28:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularAcceration * TrjStruc.Equation_Realtime_Sec;
 8002c2a:	4b47      	ldr	r3, [pc, #284]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fc36 	bl	80004a0 <__aeabi_f2d>
 8002c34:	4b44      	ldr	r3, [pc, #272]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002c36:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002c3a:	f7fd fc89 	bl	8000550 <__aeabi_dmul>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4610      	mov	r0, r2
 8002c44:	4619      	mov	r1, r3
 8002c46:	f7fd ff53 	bl	8000af0 <__aeabi_d2f>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4a3e      	ldr	r2, [pc, #248]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002c4e:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 8002c50:	f7ff f836 	bl	8001cc0 <micros>
 8002c54:	4b3c      	ldr	r3, [pc, #240]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002c56:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002c5a:	ebb0 0a02 	subs.w	sl, r0, r2
 8002c5e:	eb61 0b03 	sbc.w	fp, r1, r3
 8002c62:	4650      	mov	r0, sl
 8002c64:	4659      	mov	r1, fp
 8002c66:	f7fe f85b 	bl	8000d20 <__aeabi_ul2f>
 8002c6a:	ee06 0a90 	vmov	s13, r0
 8002c6e:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002c70:	edd3 7a00 	vldr	s15, [r3]
 8002c74:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002d4c <TrajectoryGenerationProcess+0x55c>
 8002c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c7c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c84:	da00      	bge.n	8002c88 <TrajectoryGenerationProcess+0x498>
			  break;
 8002c86:	e195      	b.n	8002fb4 <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002c88:	f7ff f81a 	bl	8001cc0 <micros>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	492d      	ldr	r1, [pc, #180]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002c92:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 1;
 8002c96:	4b2c      	ldr	r3, [pc, #176]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 8002c9e:	e189      	b.n	8002fb4 <TrajectoryGenerationProcess+0x7c4>
			  else if (TrjStruc.Submode == 1)
 8002ca0:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d154      	bne.n	8002d54 <TrajectoryGenerationProcess+0x564>
						  (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8002caa:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd fbf6 	bl	80004a0 <__aeabi_f2d>
 8002cb4:	4b24      	ldr	r3, [pc, #144]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002cb6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002cba:	f7fd fc49 	bl	8000550 <__aeabi_dmul>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4614      	mov	r4, r2
 8002cc4:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_1;
 8002cc6:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fbe8 	bl	80004a0 <__aeabi_f2d>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	f7fd fa84 	bl	80001e4 <__adddf3>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f7fd ff04 	bl	8000af0 <__aeabi_d2f>
 8002ce8:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002cea:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002cec:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularVelocity;
 8002cee:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002cf4:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.LinearTimeLSPB*1000000)
 8002cf6:	f7fe ffe3 	bl	8001cc0 <micros>
 8002cfa:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002cfc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002d00:	ebb0 0802 	subs.w	r8, r0, r2
 8002d04:	eb61 0903 	sbc.w	r9, r1, r3
 8002d08:	4640      	mov	r0, r8
 8002d0a:	4649      	mov	r1, r9
 8002d0c:	f7fe f808 	bl	8000d20 <__aeabi_ul2f>
 8002d10:	ee06 0a90 	vmov	s13, r0
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002d16:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d1a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002d4c <TrajectoryGenerationProcess+0x55c>
 8002d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d22:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2a:	da00      	bge.n	8002d2e <TrajectoryGenerationProcess+0x53e>
			  break;
 8002d2c:	e142      	b.n	8002fb4 <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002d2e:	f7fe ffc7 	bl	8001cc0 <micros>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4904      	ldr	r1, [pc, #16]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002d38:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 2;
 8002d3c:	4b02      	ldr	r3, [pc, #8]	; (8002d48 <TrajectoryGenerationProcess+0x558>)
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 8002d44:	e136      	b.n	8002fb4 <TrajectoryGenerationProcess+0x7c4>
 8002d46:	bf00      	nop
 8002d48:	20000308 	.word	0x20000308
 8002d4c:	49742400 	.word	0x49742400
 8002d50:	3fe00000 	.word	0x3fe00000
			  else if (TrjStruc.Submode == 2)
 8002d54:	4b9b      	ldr	r3, [pc, #620]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	f040 812a 	bne.w	8002fb4 <TrajectoryGenerationProcess+0x7c4>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002d60:	4b98      	ldr	r3, [pc, #608]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fb9b 	bl	80004a0 <__aeabi_f2d>
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	4b96      	ldr	r3, [pc, #600]	; (8002fc8 <TrajectoryGenerationProcess+0x7d8>)
 8002d70:	f7fd fbee 	bl	8000550 <__aeabi_dmul>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4614      	mov	r4, r2
 8002d7a:	461d      	mov	r5, r3
 8002d7c:	4b91      	ldr	r3, [pc, #580]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002d7e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002d82:	4b90      	ldr	r3, [pc, #576]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002d84:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002d88:	f7fd fbe2 	bl	8000550 <__aeabi_dmul>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4620      	mov	r0, r4
 8002d92:	4629      	mov	r1, r5
 8002d94:	f7fd fbdc 	bl	8000550 <__aeabi_dmul>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4614      	mov	r4, r2
 8002d9e:	461d      	mov	r5, r3
						  + (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8002da0:	4b88      	ldr	r3, [pc, #544]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd fb7b 	bl	80004a0 <__aeabi_f2d>
 8002daa:	4b86      	ldr	r3, [pc, #536]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002dac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002db0:	f7fd fbce 	bl	8000550 <__aeabi_dmul>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4620      	mov	r0, r4
 8002dba:	4629      	mov	r1, r5
 8002dbc:	f7fd fa12 	bl	80001e4 <__adddf3>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4614      	mov	r4, r2
 8002dc6:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_2;
 8002dc8:	4b7e      	ldr	r3, [pc, #504]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd fb67 	bl	80004a0 <__aeabi_f2d>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	4629      	mov	r1, r5
 8002dda:	f7fd fa03 	bl	80001e4 <__adddf3>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4610      	mov	r0, r2
 8002de4:	4619      	mov	r1, r3
 8002de6:	f7fd fe83 	bl	8000af0 <__aeabi_d2f>
 8002dea:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002dec:	4a75      	ldr	r2, [pc, #468]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002dee:	6213      	str	r3, [r2, #32]
				  if ( TrjStruc.Subsubmode == 0 )
 8002df0:	4b74      	ldr	r3, [pc, #464]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d142      	bne.n	8002e80 <TrajectoryGenerationProcess+0x690>
					  TrjStruc.AngularVelocityDesire = ( -1*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec )
 8002dfa:	4b72      	ldr	r3, [pc, #456]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002dfc:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e00:	eef1 7a67 	vneg.f32	s15, s15
 8002e04:	ee17 3a90 	vmov	r3, s15
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd fb49 	bl	80004a0 <__aeabi_f2d>
 8002e0e:	4b6d      	ldr	r3, [pc, #436]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002e10:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002e14:	f7fd fb9c 	bl	8000550 <__aeabi_dmul>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4614      	mov	r4, r2
 8002e1e:	461d      	mov	r5, r3
							                           + ( TrjStruc.AngularVelocity );
 8002e20:	4b68      	ldr	r3, [pc, #416]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd fb3b 	bl	80004a0 <__aeabi_f2d>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4620      	mov	r0, r4
 8002e30:	4629      	mov	r1, r5
 8002e32:	f7fd f9d7 	bl	80001e4 <__adddf3>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f7fd fe57 	bl	8000af0 <__aeabi_d2f>
 8002e42:	4603      	mov	r3, r0
					  TrjStruc.AngularVelocityDesire = ( -1*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec )
 8002e44:	4a5f      	ldr	r2, [pc, #380]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002e46:	6253      	str	r3, [r2, #36]	; 0x24
					  if (  TrjStruc.Alpha * TrjStruc.AngularVelocityDesire <=  TrjStruc.AngularVelocityFinalMin )
 8002e48:	4b5e      	ldr	r3, [pc, #376]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002e4a:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002e4e:	4b5d      	ldr	r3, [pc, #372]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002e50:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002e54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e58:	4b5a      	ldr	r3, [pc, #360]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002e5a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002e5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e66:	d866      	bhi.n	8002f36 <TrajectoryGenerationProcess+0x746>
						  TrjStruc.Subsubmode = 1;
 8002e68:	4b56      	ldr	r3, [pc, #344]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						  TrjStruc.Velocity_Timestamp = micros();
 8002e70:	f7fe ff26 	bl	8001cc0 <micros>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4952      	ldr	r1, [pc, #328]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002e7a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8002e7e:	e05a      	b.n	8002f36 <TrajectoryGenerationProcess+0x746>
				  else if ( TrjStruc.Subsubmode == 1 )
 8002e80:	4b50      	ldr	r3, [pc, #320]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d14c      	bne.n	8002f24 <TrajectoryGenerationProcess+0x734>
					  TrjStruc.AngularVelocityDesire = TrjStruc.Alpha * TrjStruc.AngularVelocityFinalMin;
 8002e8a:	4b4e      	ldr	r3, [pc, #312]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002e8c:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002e90:	4b4c      	ldr	r3, [pc, #304]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002e92:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e9a:	4b4a      	ldr	r3, [pc, #296]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002e9c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					  if (micros()-TrjStruc.Velocity_Timestamp >= ((TrjStruc.BlendTimeLSPB*1000000)-(TrjStruc.Velocity_Timestamp - TrjStruc.Equation_Timestamp))/2.0)
 8002ea0:	f7fe ff0e 	bl	8001cc0 <micros>
 8002ea4:	4b47      	ldr	r3, [pc, #284]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002ea6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002eaa:	1a84      	subs	r4, r0, r2
 8002eac:	613c      	str	r4, [r7, #16]
 8002eae:	eb61 0303 	sbc.w	r3, r1, r3
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002eb8:	f7fd fb14 	bl	80004e4 <__aeabi_ul2d>
 8002ebc:	4604      	mov	r4, r0
 8002ebe:	460d      	mov	r5, r1
 8002ec0:	4b40      	ldr	r3, [pc, #256]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002ec2:	edd3 7a00 	vldr	s15, [r3]
 8002ec6:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002fcc <TrajectoryGenerationProcess+0x7dc>
 8002eca:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002ece:	4b3d      	ldr	r3, [pc, #244]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002ed0:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002ed4:	4b3b      	ldr	r3, [pc, #236]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002ed6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002eda:	1a86      	subs	r6, r0, r2
 8002edc:	60be      	str	r6, [r7, #8]
 8002ede:	eb61 0303 	sbc.w	r3, r1, r3
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ee8:	f7fd ff1a 	bl	8000d20 <__aeabi_ul2f>
 8002eec:	ee07 0a90 	vmov	s15, r0
 8002ef0:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002ef4:	ee17 0a90 	vmov	r0, s15
 8002ef8:	f7fd fad2 	bl	80004a0 <__aeabi_f2d>
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f04:	f7fd fc4e 	bl	80007a4 <__aeabi_ddiv>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	4629      	mov	r1, r5
 8002f10:	f7fd fda4 	bl	8000a5c <__aeabi_dcmpge>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00d      	beq.n	8002f36 <TrajectoryGenerationProcess+0x746>
						  TrjStruc.Subsubmode = 2;
 8002f1a:	4b2a      	ldr	r3, [pc, #168]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8002f22:	e008      	b.n	8002f36 <TrajectoryGenerationProcess+0x746>
				  else if ( TrjStruc.Subsubmode == 2 )
 8002f24:	4b27      	ldr	r3, [pc, #156]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d103      	bne.n	8002f36 <TrajectoryGenerationProcess+0x746>
					  TrjStruc.AngularVelocityDesire = 0;
 8002f2e:	4b25      	ldr	r3, [pc, #148]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 8002f36:	f7fe fec3 	bl	8001cc0 <micros>
 8002f3a:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002f3c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002f40:	1a84      	subs	r4, r0, r2
 8002f42:	603c      	str	r4, [r7, #0]
 8002f44:	eb61 0303 	sbc.w	r3, r1, r3
 8002f48:	607b      	str	r3, [r7, #4]
 8002f4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f4e:	f7fd fee7 	bl	8000d20 <__aeabi_ul2f>
 8002f52:	ee06 0a90 	vmov	s13, r0
 8002f56:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002f58:	edd3 7a00 	vldr	s15, [r3]
 8002f5c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002fcc <TrajectoryGenerationProcess+0x7dc>
 8002f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f64:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6c:	da00      	bge.n	8002f70 <TrajectoryGenerationProcess+0x780>
			  break;
 8002f6e:	e021      	b.n	8002fb4 <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002f70:	f7fe fea6 	bl	8001cc0 <micros>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4912      	ldr	r1, [pc, #72]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002f7a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 0;
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					  TrjStruc.Subsubmode = 0;
 8002f86:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					  TrjStruc.Mode = 2; ///Final Value Mode
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002f90:	2202      	movs	r2, #2
 8002f92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			  break;
 8002f96:	e00d      	b.n	8002fb4 <TrajectoryGenerationProcess+0x7c4>
			  Moving_Link_Task_Flag = 1;
 8002f98:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <TrajectoryGenerationProcess+0x7e0>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002fa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fa2:	4a08      	ldr	r2, [pc, #32]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002fa4:	6213      	str	r3, [r2, #32]
			  TrjStruc.AngularVelocityDesire = 0;
 8002fa6:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <TrajectoryGenerationProcess+0x7d4>)
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	625a      	str	r2, [r3, #36]	; 0x24
			  break;
 8002fae:	e002      	b.n	8002fb6 <TrajectoryGenerationProcess+0x7c6>
			  break;
 8002fb0:	bf00      	nop
 8002fb2:	e000      	b.n	8002fb6 <TrajectoryGenerationProcess+0x7c6>
			  break;
 8002fb4:	bf00      	nop
}
 8002fb6:	bf00      	nop
 8002fb8:	3744      	adds	r7, #68	; 0x44
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	ecbd 8b02 	vpop	{d8}
 8002fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fc4:	20000308 	.word	0x20000308
 8002fc8:	bfe00000 	.word	0xbfe00000
 8002fcc:	49742400 	.word	0x49742400
 8002fd0:	200001e8 	.word	0x200001e8

08002fd4 <PIDController2in1>:

void PIDController2in1()
{
 8002fd4:	b5b0      	push	{r4, r5, r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
	PositionPIDController.OutputDesire = TrjStruc.AngularDisplacementDesire;
 8002fd8:	4b7f      	ldr	r3, [pc, #508]	; (80031d8 <PIDController2in1+0x204>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4a7f      	ldr	r2, [pc, #508]	; (80031dc <PIDController2in1+0x208>)
 8002fde:	61d3      	str	r3, [r2, #28]
    PositionPIDController.NowError = PositionPIDController.OutputDesire - PositionPIDController.OutputFeedback;
 8002fe0:	4b7e      	ldr	r3, [pc, #504]	; (80031dc <PIDController2in1+0x208>)
 8002fe2:	ed93 7a07 	vldr	s14, [r3, #28]
 8002fe6:	4b7d      	ldr	r3, [pc, #500]	; (80031dc <PIDController2in1+0x208>)
 8002fe8:	edd3 7a08 	vldr	s15, [r3, #32]
 8002fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff0:	4b7a      	ldr	r3, [pc, #488]	; (80031dc <PIDController2in1+0x208>)
 8002ff2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    PositionPIDController.Integral_Value += PositionPIDController.NowError*PositionPIDController.SamplingTime;
 8002ff6:	4b79      	ldr	r3, [pc, #484]	; (80031dc <PIDController2in1+0x208>)
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fa50 	bl	80004a0 <__aeabi_f2d>
 8003000:	4604      	mov	r4, r0
 8003002:	460d      	mov	r5, r1
 8003004:	4b75      	ldr	r3, [pc, #468]	; (80031dc <PIDController2in1+0x208>)
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd fa49 	bl	80004a0 <__aeabi_f2d>
 800300e:	4b73      	ldr	r3, [pc, #460]	; (80031dc <PIDController2in1+0x208>)
 8003010:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003014:	f7fd fa9c 	bl	8000550 <__aeabi_dmul>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4620      	mov	r0, r4
 800301e:	4629      	mov	r1, r5
 8003020:	f7fd f8e0 	bl	80001e4 <__adddf3>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4610      	mov	r0, r2
 800302a:	4619      	mov	r1, r3
 800302c:	f7fd fd60 	bl	8000af0 <__aeabi_d2f>
 8003030:	4603      	mov	r3, r0
 8003032:	4a6a      	ldr	r2, [pc, #424]	; (80031dc <PIDController2in1+0x208>)
 8003034:	6253      	str	r3, [r2, #36]	; 0x24
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8003036:	4b69      	ldr	r3, [pc, #420]	; (80031dc <PIDController2in1+0x208>)
 8003038:	ed93 7a00 	vldr	s14, [r3]
 800303c:	4b67      	ldr	r3, [pc, #412]	; (80031dc <PIDController2in1+0x208>)
 800303e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003042:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(PositionPIDController.Ki * PositionPIDController.Integral_Value)
 8003046:	4b65      	ldr	r3, [pc, #404]	; (80031dc <PIDController2in1+0x208>)
 8003048:	edd3 6a01 	vldr	s13, [r3, #4]
 800304c:	4b63      	ldr	r3, [pc, #396]	; (80031dc <PIDController2in1+0x208>)
 800304e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003052:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800305a:	ee17 0a90 	vmov	r0, s15
 800305e:	f7fd fa1f 	bl	80004a0 <__aeabi_f2d>
 8003062:	4604      	mov	r4, r0
 8003064:	460d      	mov	r5, r1
					  +(PositionPIDController.Kd * (PositionPIDController.NowError-PositionPIDController.PreviousError)/PositionPIDController.SamplingTime);
 8003066:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <PIDController2in1+0x208>)
 8003068:	ed93 7a02 	vldr	s14, [r3, #8]
 800306c:	4b5b      	ldr	r3, [pc, #364]	; (80031dc <PIDController2in1+0x208>)
 800306e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8003072:	4b5a      	ldr	r3, [pc, #360]	; (80031dc <PIDController2in1+0x208>)
 8003074:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003078:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800307c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003080:	ee17 0a90 	vmov	r0, s15
 8003084:	f7fd fa0c 	bl	80004a0 <__aeabi_f2d>
 8003088:	4b54      	ldr	r3, [pc, #336]	; (80031dc <PIDController2in1+0x208>)
 800308a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800308e:	f7fd fb89 	bl	80007a4 <__aeabi_ddiv>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4620      	mov	r0, r4
 8003098:	4629      	mov	r1, r5
 800309a:	f7fd f8a3 	bl	80001e4 <__adddf3>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	f7fd fd23 	bl	8000af0 <__aeabi_d2f>
 80030aa:	4603      	mov	r3, r0
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 80030ac:	4a4b      	ldr	r2, [pc, #300]	; (80031dc <PIDController2in1+0x208>)
 80030ae:	6153      	str	r3, [r2, #20]
    PositionPIDController.PreviousError = PositionPIDController.NowError;
 80030b0:	4b4a      	ldr	r3, [pc, #296]	; (80031dc <PIDController2in1+0x208>)
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	4a49      	ldr	r2, [pc, #292]	; (80031dc <PIDController2in1+0x208>)
 80030b6:	62d3      	str	r3, [r2, #44]	; 0x2c

    VelocityPIDController.OutputDesire = PositionPIDController.ControllerOutput + TrjStruc.AngularVelocityDesire;
 80030b8:	4b48      	ldr	r3, [pc, #288]	; (80031dc <PIDController2in1+0x208>)
 80030ba:	ed93 7a05 	vldr	s14, [r3, #20]
 80030be:	4b46      	ldr	r3, [pc, #280]	; (80031d8 <PIDController2in1+0x204>)
 80030c0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80030c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c8:	4b45      	ldr	r3, [pc, #276]	; (80031e0 <PIDController2in1+0x20c>)
 80030ca:	edc3 7a07 	vstr	s15, [r3, #28]
    VelocityPIDController.NowError = VelocityPIDController.OutputDesire - VelocityPIDController.OutputFeedback;
 80030ce:	4b44      	ldr	r3, [pc, #272]	; (80031e0 <PIDController2in1+0x20c>)
 80030d0:	ed93 7a07 	vldr	s14, [r3, #28]
 80030d4:	4b42      	ldr	r3, [pc, #264]	; (80031e0 <PIDController2in1+0x20c>)
 80030d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80030da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030de:	4b40      	ldr	r3, [pc, #256]	; (80031e0 <PIDController2in1+0x20c>)
 80030e0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    VelocityPIDController.Integral_Value += VelocityPIDController.NowError*VelocityPIDController.SamplingTime;
 80030e4:	4b3e      	ldr	r3, [pc, #248]	; (80031e0 <PIDController2in1+0x20c>)
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fd f9d9 	bl	80004a0 <__aeabi_f2d>
 80030ee:	4604      	mov	r4, r0
 80030f0:	460d      	mov	r5, r1
 80030f2:	4b3b      	ldr	r3, [pc, #236]	; (80031e0 <PIDController2in1+0x20c>)
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fd f9d2 	bl	80004a0 <__aeabi_f2d>
 80030fc:	4b38      	ldr	r3, [pc, #224]	; (80031e0 <PIDController2in1+0x20c>)
 80030fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003102:	f7fd fa25 	bl	8000550 <__aeabi_dmul>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4620      	mov	r0, r4
 800310c:	4629      	mov	r1, r5
 800310e:	f7fd f869 	bl	80001e4 <__adddf3>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4610      	mov	r0, r2
 8003118:	4619      	mov	r1, r3
 800311a:	f7fd fce9 	bl	8000af0 <__aeabi_d2f>
 800311e:	4603      	mov	r3, r0
 8003120:	4a2f      	ldr	r2, [pc, #188]	; (80031e0 <PIDController2in1+0x20c>)
 8003122:	6253      	str	r3, [r2, #36]	; 0x24
    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
 8003124:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <PIDController2in1+0x20c>)
 8003126:	ed93 7a00 	vldr	s14, [r3]
 800312a:	4b2d      	ldr	r3, [pc, #180]	; (80031e0 <PIDController2in1+0x20c>)
 800312c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003130:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(VelocityPIDController.Ki * VelocityPIDController.Integral_Value)
 8003134:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <PIDController2in1+0x20c>)
 8003136:	edd3 6a01 	vldr	s13, [r3, #4]
 800313a:	4b29      	ldr	r3, [pc, #164]	; (80031e0 <PIDController2in1+0x20c>)
 800313c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003148:	ee17 0a90 	vmov	r0, s15
 800314c:	f7fd f9a8 	bl	80004a0 <__aeabi_f2d>
 8003150:	4604      	mov	r4, r0
 8003152:	460d      	mov	r5, r1
					  +(VelocityPIDController.Kd * (VelocityPIDController.NowError-VelocityPIDController.PreviousError)/VelocityPIDController.SamplingTime)
 8003154:	4b22      	ldr	r3, [pc, #136]	; (80031e0 <PIDController2in1+0x20c>)
 8003156:	ed93 7a02 	vldr	s14, [r3, #8]
 800315a:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <PIDController2in1+0x20c>)
 800315c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8003160:	4b1f      	ldr	r3, [pc, #124]	; (80031e0 <PIDController2in1+0x20c>)
 8003162:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003166:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800316a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316e:	ee17 0a90 	vmov	r0, s15
 8003172:	f7fd f995 	bl	80004a0 <__aeabi_f2d>
 8003176:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <PIDController2in1+0x20c>)
 8003178:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800317c:	f7fd fb12 	bl	80007a4 <__aeabi_ddiv>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4620      	mov	r0, r4
 8003186:	4629      	mov	r1, r5
 8003188:	f7fd f82c 	bl	80001e4 <__adddf3>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4614      	mov	r4, r2
 8003192:	461d      	mov	r5, r3
					  +( TrjStruc.Alpha * VelocityPIDController.offSet );
 8003194:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <PIDController2in1+0x204>)
 8003196:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <PIDController2in1+0x20c>)
 800319c:	edd3 7a04 	vldr	s15, [r3, #16]
 80031a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a4:	ee17 0a90 	vmov	r0, s15
 80031a8:	f7fd f97a 	bl	80004a0 <__aeabi_f2d>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4620      	mov	r0, r4
 80031b2:	4629      	mov	r1, r5
 80031b4:	f7fd f816 	bl	80001e4 <__adddf3>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4610      	mov	r0, r2
 80031be:	4619      	mov	r1, r3
 80031c0:	f7fd fc96 	bl	8000af0 <__aeabi_d2f>
 80031c4:	4603      	mov	r3, r0
    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
 80031c6:	4a06      	ldr	r2, [pc, #24]	; (80031e0 <PIDController2in1+0x20c>)
 80031c8:	6153      	str	r3, [r2, #20]
    VelocityPIDController.PreviousError = VelocityPIDController.NowError;
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <PIDController2in1+0x20c>)
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ce:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <PIDController2in1+0x20c>)
 80031d0:	62d3      	str	r3, [r2, #44]	; 0x2c

}
 80031d2:	bf00      	nop
 80031d4:	bdb0      	pop	{r4, r5, r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000308 	.word	0x20000308
 80031dc:	20000208 	.word	0x20000208
 80031e0:	20000248 	.word	0x20000248

080031e4 <PureVeloPID>:

	StabilizerPIDController.PreviousError = StabilizerPIDController.NowError;
}

void PureVeloPID()
{
 80031e4:	b5b0      	push	{r4, r5, r7, lr}
 80031e6:	af00      	add	r7, sp, #0
	PureVelocityPIDController.OutputDesire = TrjStruc.AngularVelocityDesire;
 80031e8:	4b43      	ldr	r3, [pc, #268]	; (80032f8 <PureVeloPID+0x114>)
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	4a43      	ldr	r2, [pc, #268]	; (80032fc <PureVeloPID+0x118>)
 80031ee:	61d3      	str	r3, [r2, #28]
	PureVelocityPIDController.NowError = PureVelocityPIDController.OutputDesire - VelocityPIDController.OutputFeedback;
 80031f0:	4b42      	ldr	r3, [pc, #264]	; (80032fc <PureVeloPID+0x118>)
 80031f2:	ed93 7a07 	vldr	s14, [r3, #28]
 80031f6:	4b42      	ldr	r3, [pc, #264]	; (8003300 <PureVeloPID+0x11c>)
 80031f8:	edd3 7a08 	vldr	s15, [r3, #32]
 80031fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003200:	4b3e      	ldr	r3, [pc, #248]	; (80032fc <PureVeloPID+0x118>)
 8003202:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	PureVelocityPIDController.Integral_Value += PureVelocityPIDController.NowError*PureVelocityPIDController.SamplingTime;
 8003206:	4b3d      	ldr	r3, [pc, #244]	; (80032fc <PureVeloPID+0x118>)
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd f948 	bl	80004a0 <__aeabi_f2d>
 8003210:	4604      	mov	r4, r0
 8003212:	460d      	mov	r5, r1
 8003214:	4b39      	ldr	r3, [pc, #228]	; (80032fc <PureVeloPID+0x118>)
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd f941 	bl	80004a0 <__aeabi_f2d>
 800321e:	4b37      	ldr	r3, [pc, #220]	; (80032fc <PureVeloPID+0x118>)
 8003220:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003224:	f7fd f994 	bl	8000550 <__aeabi_dmul>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4620      	mov	r0, r4
 800322e:	4629      	mov	r1, r5
 8003230:	f7fc ffd8 	bl	80001e4 <__adddf3>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	f7fd fc58 	bl	8000af0 <__aeabi_d2f>
 8003240:	4603      	mov	r3, r0
 8003242:	4a2e      	ldr	r2, [pc, #184]	; (80032fc <PureVeloPID+0x118>)
 8003244:	6253      	str	r3, [r2, #36]	; 0x24
	PureVelocityPIDController.ControllerOutput = (PureVelocityPIDController.Kp*PureVelocityPIDController.NowError)
 8003246:	4b2d      	ldr	r3, [pc, #180]	; (80032fc <PureVeloPID+0x118>)
 8003248:	ed93 7a00 	vldr	s14, [r3]
 800324c:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <PureVeloPID+0x118>)
 800324e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003252:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(PureVelocityPIDController.Ki * PureVelocityPIDController.Integral_Value)
 8003256:	4b29      	ldr	r3, [pc, #164]	; (80032fc <PureVeloPID+0x118>)
 8003258:	edd3 6a01 	vldr	s13, [r3, #4]
 800325c:	4b27      	ldr	r3, [pc, #156]	; (80032fc <PureVeloPID+0x118>)
 800325e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800326a:	ee17 0a90 	vmov	r0, s15
 800326e:	f7fd f917 	bl	80004a0 <__aeabi_f2d>
 8003272:	4604      	mov	r4, r0
 8003274:	460d      	mov	r5, r1
					  +(PureVelocityPIDController.Kd * (PureVelocityPIDController.NowError-PureVelocityPIDController.PreviousError)/PureVelocityPIDController.SamplingTime)
 8003276:	4b21      	ldr	r3, [pc, #132]	; (80032fc <PureVeloPID+0x118>)
 8003278:	ed93 7a02 	vldr	s14, [r3, #8]
 800327c:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <PureVeloPID+0x118>)
 800327e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8003282:	4b1e      	ldr	r3, [pc, #120]	; (80032fc <PureVeloPID+0x118>)
 8003284:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003288:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800328c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003290:	ee17 0a90 	vmov	r0, s15
 8003294:	f7fd f904 	bl	80004a0 <__aeabi_f2d>
 8003298:	4b18      	ldr	r3, [pc, #96]	; (80032fc <PureVeloPID+0x118>)
 800329a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800329e:	f7fd fa81 	bl	80007a4 <__aeabi_ddiv>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4620      	mov	r0, r4
 80032a8:	4629      	mov	r1, r5
 80032aa:	f7fc ff9b 	bl	80001e4 <__adddf3>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4614      	mov	r4, r2
 80032b4:	461d      	mov	r5, r3
					  +( TrjStruc.Alpha * PureVelocityPIDController.offSet );
 80032b6:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <PureVeloPID+0x114>)
 80032b8:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <PureVeloPID+0x118>)
 80032be:	edd3 7a04 	vldr	s15, [r3, #16]
 80032c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c6:	ee17 0a90 	vmov	r0, s15
 80032ca:	f7fd f8e9 	bl	80004a0 <__aeabi_f2d>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4620      	mov	r0, r4
 80032d4:	4629      	mov	r1, r5
 80032d6:	f7fc ff85 	bl	80001e4 <__adddf3>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4610      	mov	r0, r2
 80032e0:	4619      	mov	r1, r3
 80032e2:	f7fd fc05 	bl	8000af0 <__aeabi_d2f>
 80032e6:	4603      	mov	r3, r0
	PureVelocityPIDController.ControllerOutput = (PureVelocityPIDController.Kp*PureVelocityPIDController.NowError)
 80032e8:	4a04      	ldr	r2, [pc, #16]	; (80032fc <PureVeloPID+0x118>)
 80032ea:	6153      	str	r3, [r2, #20]
	PureVelocityPIDController.PreviousError = PureVelocityPIDController.NowError;
 80032ec:	4b03      	ldr	r3, [pc, #12]	; (80032fc <PureVeloPID+0x118>)
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	4a02      	ldr	r2, [pc, #8]	; (80032fc <PureVeloPID+0x118>)
 80032f2:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80032f4:	bf00      	nop
 80032f6:	bdb0      	pop	{r4, r5, r7, pc}
 80032f8:	20000308 	.word	0x20000308
 80032fc:	20000288 	.word	0x20000288
 8003300:	20000248 	.word	0x20000248

08003304 <UARTInit>:



///UART ZONE
void UARTInit(UARTStucrture *uart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 800330c:	4b10      	ldr	r3, [pc, #64]	; (8003350 <UARTInit+0x4c>)
 800330e:	88db      	ldrh	r3, [r3, #6]
 8003310:	4619      	mov	r1, r3
 8003312:	2001      	movs	r0, #1
 8003314:	f007 f82a 	bl	800a36c <calloc>
 8003318:	4603      	mov	r3, r0
 800331a:	461a      	mov	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <UARTInit+0x4c>)
 8003322:	889b      	ldrh	r3, [r3, #4]
 8003324:	4619      	mov	r1, r3
 8003326:	2001      	movs	r0, #1
 8003328:	f007 f820 	bl	800a36c <calloc>
 800332c:	4603      	mov	r3, r0
 800332e:	461a      	mov	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	81da      	strh	r2, [r3, #14]
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	200000b8 	.word	0x200000b8

08003354 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6919      	ldr	r1, [r3, #16]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	88db      	ldrh	r3, [r3, #6]
 8003368:	461a      	mov	r2, r3
 800336a:	f006 f97b 	bl	8009664 <HAL_UART_Receive_DMA>
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	88db      	ldrh	r3, [r3, #6]
 8003382:	461a      	mov	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	1ad3      	subs	r3, r2, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 80033a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033a8:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	8a9b      	ldrh	r3, [r3, #20]
 80033ae:	461c      	mov	r4, r3
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff ffe0 	bl	8003376 <UARTGetRxHead>
 80033b6:	4603      	mov	r3, r0
 80033b8:	429c      	cmp	r4, r3
 80033ba:	d013      	beq.n	80033e4 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	8a92      	ldrh	r2, [r2, #20]
 80033c4:	4413      	add	r3, r2
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	8a9b      	ldrh	r3, [r3, #20]
 80033ce:	3301      	adds	r3, #1
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	88d2      	ldrh	r2, [r2, #6]
 80033d4:	fb93 f1f2 	sdiv	r1, r3, r2
 80033d8:	fb02 f201 	mul.w	r2, r2, r1
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	b29a      	uxth	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 80033e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd90      	pop	{r4, r7, pc}

080033f0 <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b20      	cmp	r3, #32
 8003404:	d13d      	bne.n	8003482 <UARTTxDumpBuffer+0x92>
 8003406:	4b21      	ldr	r3, [pc, #132]	; (800348c <UARTTxDumpBuffer+0x9c>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d139      	bne.n	8003482 <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 800340e:	4b1f      	ldr	r3, [pc, #124]	; (800348c <UARTTxDumpBuffer+0x9c>)
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	89da      	ldrh	r2, [r3, #14]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	899b      	ldrh	r3, [r3, #12]
 800341c:	429a      	cmp	r2, r3
 800341e:	d02d      	beq.n	800347c <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	89da      	ldrh	r2, [r3, #14]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8003428:	429a      	cmp	r2, r3
 800342a:	d906      	bls.n	800343a <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	89da      	ldrh	r2, [r3, #14]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	b29b      	uxth	r3, r3
 8003438:	e005      	b.n	8003446 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	889a      	ldrh	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	b29b      	uxth	r3, r3
 8003446:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	8992      	ldrh	r2, [r2, #12]
 8003454:	4413      	add	r3, r2
 8003456:	89fa      	ldrh	r2, [r7, #14]
 8003458:	4619      	mov	r1, r3
 800345a:	f006 f897 	bl	800958c <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	899b      	ldrh	r3, [r3, #12]
 8003462:	461a      	mov	r2, r3
 8003464:	89fb      	ldrh	r3, [r7, #14]
 8003466:	4413      	add	r3, r2
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	8892      	ldrh	r2, [r2, #4]
 800346c:	fb93 f1f2 	sdiv	r1, r3, r2
 8003470:	fb02 f201 	mul.w	r2, r2, r1
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	b29a      	uxth	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <UARTTxDumpBuffer+0x9c>)
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]
	}
}
 8003482:	bf00      	nop
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	200003d0 	.word	0x200003d0

08003490 <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	4613      	mov	r3, r2
 800349c:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	889b      	ldrh	r3, [r3, #4]
 80034a2:	88fa      	ldrh	r2, [r7, #6]
 80034a4:	4293      	cmp	r3, r2
 80034a6:	bf28      	it	cs
 80034a8:	4613      	movcs	r3, r2
 80034aa:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80034ac:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	889b      	ldrh	r3, [r3, #4]
 80034b2:	4619      	mov	r1, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	89db      	ldrh	r3, [r3, #14]
 80034b8:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80034ba:	4293      	cmp	r3, r2
 80034bc:	bfa8      	it	ge
 80034be:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 80034c0:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	89d2      	ldrh	r2, [r2, #14]
 80034ca:	4413      	add	r3, r2
 80034cc:	8aba      	ldrh	r2, [r7, #20]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f006 ff7d 	bl	800a3d0 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	89db      	ldrh	r3, [r3, #14]
 80034da:	461a      	mov	r2, r3
 80034dc:	8afb      	ldrh	r3, [r7, #22]
 80034de:	4413      	add	r3, r2
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	8892      	ldrh	r2, [r2, #4]
 80034e4:	fb93 f1f2 	sdiv	r1, r3, r2
 80034e8:	fb02 f201 	mul.w	r2, r2, r1
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 80034f4:	8afa      	ldrh	r2, [r7, #22]
 80034f6:	8abb      	ldrh	r3, [r7, #20]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d00a      	beq.n	8003512 <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6898      	ldr	r0, [r3, #8]
 8003500:	8abb      	ldrh	r3, [r7, #20]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8003506:	8afa      	ldrh	r2, [r7, #22]
 8003508:	8abb      	ldrh	r3, [r7, #20]
 800350a:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 800350c:	461a      	mov	r2, r3
 800350e:	f006 ff5f 	bl	800a3d0 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f7ff ff6c 	bl	80033f0 <UARTTxDumpBuffer>

}
 8003518:	bf00      	nop
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <ACK1Return>:

void ACK1Return(UARTStucrture *uart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {0x58, 0b01110101};
 8003528:	f247 5358 	movw	r3, #30040	; 0x7558
 800352c:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 800352e:	f107 030c 	add.w	r3, r7, #12
 8003532:	2202      	movs	r2, #2
 8003534:	4619      	mov	r1, r3
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ffaa 	bl	8003490 <UARTTxWrite>
	}
}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <ACK2Return>:

void ACK2Return(UARTStucrture *uart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {70, 110};
 800354c:	f646 6346 	movw	r3, #28230	; 0x6e46
 8003550:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 8003552:	f107 030c 	add.w	r3, r7, #12
 8003556:	2202      	movs	r2, #2
 8003558:	4619      	mov	r1, r3
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff ff98 	bl	8003490 <UARTTxWrite>
	}
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <Munmunbot_Protocol>:
	UARTTxWrite(uart, temp, 2);
	}
}

void Munmunbot_Protocol(int16_t dataIn,UARTStucrture *uart)
{
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	b08e      	sub	sp, #56	; 0x38
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	6039      	str	r1, [r7, #0]
 8003572:	80fb      	strh	r3, [r7, #6]
	static uint8_t parameter_ptr = 0;
	static uint16_t Data_HAck = 0;
	static uint32_t CheckSum = 0;
	static uint16_t DataForReturn = 0;

	switch (Munmunbot_Protocol_State)
 8003574:	4b8b      	ldr	r3, [pc, #556]	; (80037a4 <Munmunbot_Protocol+0x23c>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b05      	cmp	r3, #5
 800357a:	f200 841e 	bhi.w	8003dba <Munmunbot_Protocol+0x852>
 800357e:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <Munmunbot_Protocol+0x1c>)
 8003580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003584:	0800359d 	.word	0x0800359d
 8003588:	08003651 	.word	0x08003651
 800358c:	08003693 	.word	0x08003693
 8003590:	080036e1 	.word	0x080036e1
 8003594:	08003705 	.word	0x08003705
 8003598:	080037c5 	.word	0x080037c5
	{
		case PP_STARTandMode:
			if (((dataIn>>4) & 0b1111) == 0b1001)
 800359c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035a0:	111b      	asrs	r3, r3, #4
 80035a2:	b21b      	sxth	r3, r3
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	2b09      	cmp	r3, #9
 80035ac:	f040 8402 	bne.w	8003db4 <Munmunbot_Protocol+0x84c>
			{
				CheckSum = dataIn;
 80035b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035b4:	4a7c      	ldr	r2, [pc, #496]	; (80037a8 <Munmunbot_Protocol+0x240>)
 80035b6:	6013      	str	r3, [r2, #0]
				ProtocolMode = dataIn & 0b1111;
 80035b8:	88fb      	ldrh	r3, [r7, #6]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	4b7a      	ldr	r3, [pc, #488]	; (80037ac <Munmunbot_Protocol+0x244>)
 80035c4:	701a      	strb	r2, [r3, #0]

				if (ProtocolMode == 7)
 80035c6:	4b79      	ldr	r3, [pc, #484]	; (80037ac <Munmunbot_Protocol+0x244>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b07      	cmp	r3, #7
 80035cc:	d103      	bne.n	80035d6 <Munmunbot_Protocol+0x6e>
				{
					Munmunbot_Protocol_State = PP_Frame3_Data_0; ///Frame3
 80035ce:	4b75      	ldr	r3, [pc, #468]	; (80037a4 <Munmunbot_Protocol+0x23c>)
 80035d0:	2203      	movs	r2, #3
 80035d2:	701a      	strb	r2, [r3, #0]
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
				{
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
				}
			}
			break;
 80035d4:	e3ee      	b.n	8003db4 <Munmunbot_Protocol+0x84c>
				else if (ProtocolMode == 1 || ProtocolMode == 4 || ProtocolMode == 5 ||ProtocolMode == 6)
 80035d6:	4b75      	ldr	r3, [pc, #468]	; (80037ac <Munmunbot_Protocol+0x244>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d00b      	beq.n	80035f6 <Munmunbot_Protocol+0x8e>
 80035de:	4b73      	ldr	r3, [pc, #460]	; (80037ac <Munmunbot_Protocol+0x244>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d007      	beq.n	80035f6 <Munmunbot_Protocol+0x8e>
 80035e6:	4b71      	ldr	r3, [pc, #452]	; (80037ac <Munmunbot_Protocol+0x244>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b05      	cmp	r3, #5
 80035ec:	d003      	beq.n	80035f6 <Munmunbot_Protocol+0x8e>
 80035ee:	4b6f      	ldr	r3, [pc, #444]	; (80037ac <Munmunbot_Protocol+0x244>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b06      	cmp	r3, #6
 80035f4:	d103      	bne.n	80035fe <Munmunbot_Protocol+0x96>
					Munmunbot_Protocol_State = PP_Frame2_Data_0; //Frame2
 80035f6:	4b6b      	ldr	r3, [pc, #428]	; (80037a4 <Munmunbot_Protocol+0x23c>)
 80035f8:	2201      	movs	r2, #1
 80035fa:	701a      	strb	r2, [r3, #0]
			break;
 80035fc:	e3da      	b.n	8003db4 <Munmunbot_Protocol+0x84c>
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 80035fe:	4b6b      	ldr	r3, [pc, #428]	; (80037ac <Munmunbot_Protocol+0x244>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d020      	beq.n	8003648 <Munmunbot_Protocol+0xe0>
 8003606:	4b69      	ldr	r3, [pc, #420]	; (80037ac <Munmunbot_Protocol+0x244>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b03      	cmp	r3, #3
 800360c:	d01c      	beq.n	8003648 <Munmunbot_Protocol+0xe0>
 800360e:	4b67      	ldr	r3, [pc, #412]	; (80037ac <Munmunbot_Protocol+0x244>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b08      	cmp	r3, #8
 8003614:	d018      	beq.n	8003648 <Munmunbot_Protocol+0xe0>
 8003616:	4b65      	ldr	r3, [pc, #404]	; (80037ac <Munmunbot_Protocol+0x244>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b09      	cmp	r3, #9
 800361c:	d014      	beq.n	8003648 <Munmunbot_Protocol+0xe0>
 800361e:	4b63      	ldr	r3, [pc, #396]	; (80037ac <Munmunbot_Protocol+0x244>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b0a      	cmp	r3, #10
 8003624:	d010      	beq.n	8003648 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 8003626:	4b61      	ldr	r3, [pc, #388]	; (80037ac <Munmunbot_Protocol+0x244>)
 8003628:	781b      	ldrb	r3, [r3, #0]
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 800362a:	2b0b      	cmp	r3, #11
 800362c:	d00c      	beq.n	8003648 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 800362e:	4b5f      	ldr	r3, [pc, #380]	; (80037ac <Munmunbot_Protocol+0x244>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b0c      	cmp	r3, #12
 8003634:	d008      	beq.n	8003648 <Munmunbot_Protocol+0xe0>
 8003636:	4b5d      	ldr	r3, [pc, #372]	; (80037ac <Munmunbot_Protocol+0x244>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b0d      	cmp	r3, #13
 800363c:	d004      	beq.n	8003648 <Munmunbot_Protocol+0xe0>
 800363e:	4b5b      	ldr	r3, [pc, #364]	; (80037ac <Munmunbot_Protocol+0x244>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b0e      	cmp	r3, #14
 8003644:	f040 83b6 	bne.w	8003db4 <Munmunbot_Protocol+0x84c>
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
 8003648:	4b56      	ldr	r3, [pc, #344]	; (80037a4 <Munmunbot_Protocol+0x23c>)
 800364a:	2205      	movs	r2, #5
 800364c:	701a      	strb	r2, [r3, #0]
			break;
 800364e:	e3b1      	b.n	8003db4 <Munmunbot_Protocol+0x84c>
		case PP_Frame2_Data_0:
			 CheckSum += dataIn;
 8003650:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003654:	4b54      	ldr	r3, [pc, #336]	; (80037a8 <Munmunbot_Protocol+0x240>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4413      	add	r3, r2
 800365a:	4a53      	ldr	r2, [pc, #332]	; (80037a8 <Munmunbot_Protocol+0x240>)
 800365c:	6013      	str	r3, [r2, #0]
			 Data_HAck = ((dataIn&0b11111111)<<8)&0b1111111100000000;
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	b29a      	uxth	r2, r3
 8003664:	4b52      	ldr	r3, [pc, #328]	; (80037b0 <Munmunbot_Protocol+0x248>)
 8003666:	801a      	strh	r2, [r3, #0]
			 parameter[0] = dataIn&0b1111;
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	b2da      	uxtb	r2, r3
 8003672:	4b50      	ldr	r3, [pc, #320]	; (80037b4 <Munmunbot_Protocol+0x24c>)
 8003674:	701a      	strb	r2, [r3, #0]
			 parameter[1] = (dataIn>>4)&0b1111;
 8003676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800367a:	111b      	asrs	r3, r3, #4
 800367c:	b21b      	sxth	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	b2da      	uxtb	r2, r3
 8003686:	4b4b      	ldr	r3, [pc, #300]	; (80037b4 <Munmunbot_Protocol+0x24c>)
 8003688:	705a      	strb	r2, [r3, #1]
			 Munmunbot_Protocol_State = PP_Frame2_Data_1;
 800368a:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <Munmunbot_Protocol+0x23c>)
 800368c:	2202      	movs	r2, #2
 800368e:	701a      	strb	r2, [r3, #0]

			 break;
 8003690:	e393      	b.n	8003dba <Munmunbot_Protocol+0x852>
		case PP_Frame2_Data_1:
			 CheckSum += dataIn;
 8003692:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003696:	4b44      	ldr	r3, [pc, #272]	; (80037a8 <Munmunbot_Protocol+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4413      	add	r3, r2
 800369c:	4a42      	ldr	r2, [pc, #264]	; (80037a8 <Munmunbot_Protocol+0x240>)
 800369e:	6013      	str	r3, [r2, #0]
			 Data_HAck = (dataIn&0b11111111) | Data_HAck;
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	b21a      	sxth	r2, r3
 80036a6:	4b42      	ldr	r3, [pc, #264]	; (80037b0 <Munmunbot_Protocol+0x248>)
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	b21b      	sxth	r3, r3
 80036ac:	4313      	orrs	r3, r2
 80036ae:	b21b      	sxth	r3, r3
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	4b3f      	ldr	r3, [pc, #252]	; (80037b0 <Munmunbot_Protocol+0x248>)
 80036b4:	801a      	strh	r2, [r3, #0]
			 parameter[2] = dataIn&0b1111;
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	4b3c      	ldr	r3, [pc, #240]	; (80037b4 <Munmunbot_Protocol+0x24c>)
 80036c2:	709a      	strb	r2, [r3, #2]
			 parameter[3] = (dataIn>>4)&0b1111;
 80036c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036c8:	111b      	asrs	r3, r3, #4
 80036ca:	b21b      	sxth	r3, r3
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	4b37      	ldr	r3, [pc, #220]	; (80037b4 <Munmunbot_Protocol+0x24c>)
 80036d6:	70da      	strb	r2, [r3, #3]
			 Munmunbot_Protocol_State = PP_CheckSum;
 80036d8:	4b32      	ldr	r3, [pc, #200]	; (80037a4 <Munmunbot_Protocol+0x23c>)
 80036da:	2205      	movs	r2, #5
 80036dc:	701a      	strb	r2, [r3, #0]
			 break;
 80036de:	e36c      	b.n	8003dba <Munmunbot_Protocol+0x852>

		case PP_Frame3_Data_0:
		     CheckSum += dataIn;
 80036e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80036e4:	4b30      	ldr	r3, [pc, #192]	; (80037a8 <Munmunbot_Protocol+0x240>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4413      	add	r3, r2
 80036ea:	4a2f      	ldr	r2, [pc, #188]	; (80037a8 <Munmunbot_Protocol+0x240>)
 80036ec:	6013      	str	r3, [r2, #0]
		     n_station = dataIn;
 80036ee:	88fa      	ldrh	r2, [r7, #6]
 80036f0:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <Munmunbot_Protocol+0x250>)
 80036f2:	801a      	strh	r2, [r3, #0]
		     n_station_mem = n_station;
 80036f4:	4b30      	ldr	r3, [pc, #192]	; (80037b8 <Munmunbot_Protocol+0x250>)
 80036f6:	881a      	ldrh	r2, [r3, #0]
 80036f8:	4b30      	ldr	r3, [pc, #192]	; (80037bc <Munmunbot_Protocol+0x254>)
 80036fa:	801a      	strh	r2, [r3, #0]
		     Munmunbot_Protocol_State = PP_Frame3_Data_1;
 80036fc:	4b29      	ldr	r3, [pc, #164]	; (80037a4 <Munmunbot_Protocol+0x23c>)
 80036fe:	2204      	movs	r2, #4
 8003700:	701a      	strb	r2, [r3, #0]

		   break;
 8003702:	e35a      	b.n	8003dba <Munmunbot_Protocol+0x852>

		case PP_Frame3_Data_1:
				CheckSum += dataIn;
 8003704:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003708:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <Munmunbot_Protocol+0x240>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4413      	add	r3, r2
 800370e:	4a26      	ldr	r2, [pc, #152]	; (80037a8 <Munmunbot_Protocol+0x240>)
 8003710:	6013      	str	r3, [r2, #0]
				if (n_station >= 2)
 8003712:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <Munmunbot_Protocol+0x250>)
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d927      	bls.n	800376a <Munmunbot_Protocol+0x202>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	4a28      	ldr	r2, [pc, #160]	; (80037c0 <Munmunbot_Protocol+0x258>)
 8003720:	7812      	ldrb	r2, [r2, #0]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	b2d9      	uxtb	r1, r3
 8003728:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <Munmunbot_Protocol+0x24c>)
 800372a:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 800372c:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <Munmunbot_Protocol+0x258>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	3301      	adds	r3, #1
 8003732:	b2da      	uxtb	r2, r3
 8003734:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <Munmunbot_Protocol+0x258>)
 8003736:	701a      	strb	r2, [r3, #0]
					parameter[parameter_ptr] = (dataIn>>4)&0b1111;
 8003738:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800373c:	111b      	asrs	r3, r3, #4
 800373e:	b21b      	sxth	r3, r3
 8003740:	b2db      	uxtb	r3, r3
 8003742:	4a1f      	ldr	r2, [pc, #124]	; (80037c0 <Munmunbot_Protocol+0x258>)
 8003744:	7812      	ldrb	r2, [r2, #0]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	b2d9      	uxtb	r1, r3
 800374c:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <Munmunbot_Protocol+0x24c>)
 800374e:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8003750:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <Munmunbot_Protocol+0x258>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	3301      	adds	r3, #1
 8003756:	b2da      	uxtb	r2, r3
 8003758:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <Munmunbot_Protocol+0x258>)
 800375a:	701a      	strb	r2, [r3, #0]
					n_station -= 2;
 800375c:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <Munmunbot_Protocol+0x250>)
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	3b02      	subs	r3, #2
 8003762:	b29a      	uxth	r2, r3
 8003764:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <Munmunbot_Protocol+0x250>)
 8003766:	801a      	strh	r2, [r3, #0]
 8003768:	e012      	b.n	8003790 <Munmunbot_Protocol+0x228>
				}
				else if (n_station == 1)
 800376a:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <Munmunbot_Protocol+0x250>)
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d10e      	bne.n	8003790 <Munmunbot_Protocol+0x228>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8003772:	88fb      	ldrh	r3, [r7, #6]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <Munmunbot_Protocol+0x258>)
 8003778:	7812      	ldrb	r2, [r2, #0]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	b2d9      	uxtb	r1, r3
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <Munmunbot_Protocol+0x24c>)
 8003782:	5499      	strb	r1, [r3, r2]
					n_station -= 1;
 8003784:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <Munmunbot_Protocol+0x250>)
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <Munmunbot_Protocol+0x250>)
 800378e:	801a      	strh	r2, [r3, #0]
				}
				if  (n_station == 0)
 8003790:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <Munmunbot_Protocol+0x250>)
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	f040 830f 	bne.w	8003db8 <Munmunbot_Protocol+0x850>
				{
					Munmunbot_Protocol_State = PP_CheckSum;
 800379a:	4b02      	ldr	r3, [pc, #8]	; (80037a4 <Munmunbot_Protocol+0x23c>)
 800379c:	2205      	movs	r2, #5
 800379e:	701a      	strb	r2, [r3, #0]
				}
				break;
 80037a0:	e30a      	b.n	8003db8 <Munmunbot_Protocol+0x850>
 80037a2:	bf00      	nop
 80037a4:	200000d8 	.word	0x200000d8
 80037a8:	200003d4 	.word	0x200003d4
 80037ac:	200003d8 	.word	0x200003d8
 80037b0:	200003da 	.word	0x200003da
 80037b4:	200003dc 	.word	0x200003dc
 80037b8:	200004dc 	.word	0x200004dc
 80037bc:	200004de 	.word	0x200004de
 80037c0:	200004e0 	.word	0x200004e0

			case PP_CheckSum:
			{
				CheckSum = (~CheckSum) & 0xff;
 80037c4:	4bba      	ldr	r3, [pc, #744]	; (8003ab0 <Munmunbot_Protocol+0x548>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	43db      	mvns	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	4ab8      	ldr	r2, [pc, #736]	; (8003ab0 <Munmunbot_Protocol+0x548>)
 80037ce:	6013      	str	r3, [r2, #0]
				if (CheckSum == dataIn)
 80037d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80037d4:	4bb6      	ldr	r3, [pc, #728]	; (8003ab0 <Munmunbot_Protocol+0x548>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	f040 82d7 	bne.w	8003d8c <Munmunbot_Protocol+0x824>
				{

					switch (ProtocolMode)
 80037de:	4bb5      	ldr	r3, [pc, #724]	; (8003ab4 <Munmunbot_Protocol+0x54c>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	2b0d      	cmp	r3, #13
 80037e6:	f200 82d2 	bhi.w	8003d8e <Munmunbot_Protocol+0x826>
 80037ea:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <Munmunbot_Protocol+0x288>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	08003829 	.word	0x08003829
 80037f4:	0800389d 	.word	0x0800389d
 80037f8:	080038b7 	.word	0x080038b7
 80037fc:	080038cd 	.word	0x080038cd
 8003800:	0800392f 	.word	0x0800392f
 8003804:	0800394d 	.word	0x0800394d
 8003808:	08003971 	.word	0x08003971
 800380c:	080039bb 	.word	0x080039bb
 8003810:	080039e9 	.word	0x080039e9
 8003814:	08003af5 	.word	0x08003af5
 8003818:	08003c07 	.word	0x08003c07
 800381c:	08003d41 	.word	0x08003d41
 8003820:	08003d57 	.word	0x08003d57
 8003824:	08003d6d 	.word	0x08003d6d
					{
					case 1: ///Test Command ##Complete##
						{
						uint8_t temp[] =
 8003828:	2391      	movs	r3, #145	; 0x91
 800382a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						{0b10010001,
						((parameter[1] & 0xff) << 4)  | (parameter[0]& 0xff),
 800382e:	4ba2      	ldr	r3, [pc, #648]	; (8003ab8 <Munmunbot_Protocol+0x550>)
 8003830:	785b      	ldrb	r3, [r3, #1]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	b25a      	sxtb	r2, r3
 8003836:	4ba0      	ldr	r3, [pc, #640]	; (8003ab8 <Munmunbot_Protocol+0x550>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	b25b      	sxtb	r3, r3
 800383c:	4313      	orrs	r3, r2
 800383e:	b25b      	sxtb	r3, r3
 8003840:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 8003842:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						((parameter[3] & 0xff) << 4)  | (parameter[2]& 0xff),
 8003846:	4b9c      	ldr	r3, [pc, #624]	; (8003ab8 <Munmunbot_Protocol+0x550>)
 8003848:	78db      	ldrb	r3, [r3, #3]
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	b25a      	sxtb	r2, r3
 800384e:	4b9a      	ldr	r3, [pc, #616]	; (8003ab8 <Munmunbot_Protocol+0x550>)
 8003850:	789b      	ldrb	r3, [r3, #2]
 8003852:	b25b      	sxtb	r3, r3
 8003854:	4313      	orrs	r3, r2
 8003856:	b25b      	sxtb	r3, r3
 8003858:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 800385a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800385e:	2300      	movs	r3, #0
 8003860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003864:	2358      	movs	r3, #88	; 0x58
 8003866:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800386a:	2375      	movs	r3, #117	; 0x75
 800386c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						0b0 , 0x58 ,0x75 };
						temp[3] = (~(temp[0]+temp[1]+temp[2]))& 0xff;
 8003870:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003874:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003878:	4413      	add	r3, r2
 800387a:	b2da      	uxtb	r2, r3
 800387c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003880:	4413      	add	r3, r2
 8003882:	b2db      	uxtb	r3, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	b2db      	uxtb	r3, r3
 8003888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						UARTTxWrite(uart, temp, 6);
 800388c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003890:	2206      	movs	r2, #6
 8003892:	4619      	mov	r1, r3
 8003894:	6838      	ldr	r0, [r7, #0]
 8003896:	f7ff fdfb 	bl	8003490 <UARTTxWrite>
						}
						break;
 800389a:	e278      	b.n	8003d8e <Munmunbot_Protocol+0x826>
					case 2: //Connect MCU ##Complete##
						if (Munmunbot_State == STATE_Disconnected)
 800389c:	4b87      	ldr	r3, [pc, #540]	; (8003abc <Munmunbot_Protocol+0x554>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d104      	bne.n	80038ae <Munmunbot_Protocol+0x346>
						{
							Munmunbot_State = STATE_Idle;
 80038a4:	4b85      	ldr	r3, [pc, #532]	; (8003abc <Munmunbot_Protocol+0x554>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
							PID_Reset();
 80038aa:	f000 fabb 	bl	8003e24 <PID_Reset>
						}
						ACK1Return(uart);
 80038ae:	6838      	ldr	r0, [r7, #0]
 80038b0:	f7ff fe36 	bl	8003520 <ACK1Return>
						break;
 80038b4:	e26b      	b.n	8003d8e <Munmunbot_Protocol+0x826>
					case 3: //Disconnect MCU ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80038b6:	4b81      	ldr	r3, [pc, #516]	; (8003abc <Munmunbot_Protocol+0x554>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d102      	bne.n	80038c4 <Munmunbot_Protocol+0x35c>
						{
							Munmunbot_State = STATE_Disconnected;
 80038be:	4b7f      	ldr	r3, [pc, #508]	; (8003abc <Munmunbot_Protocol+0x554>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80038c4:	6838      	ldr	r0, [r7, #0]
 80038c6:	f7ff fe2b 	bl	8003520 <ACK1Return>
						break;
 80038ca:	e260      	b.n	8003d8e <Munmunbot_Protocol+0x826>
					case 4: //Set Angular Velocity ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80038cc:	4b7b      	ldr	r3, [pc, #492]	; (8003abc <Munmunbot_Protocol+0x554>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d128      	bne.n	8003926 <Munmunbot_Protocol+0x3be>
						{
							CUSSStruc.RPMp = 0.925*(Data_HAck*10.0)/255.0;
 80038d4:	4b7a      	ldr	r3, [pc, #488]	; (8003ac0 <Munmunbot_Protocol+0x558>)
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fc fdcf 	bl	800047c <__aeabi_i2d>
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	4b78      	ldr	r3, [pc, #480]	; (8003ac4 <Munmunbot_Protocol+0x55c>)
 80038e4:	f7fc fe34 	bl	8000550 <__aeabi_dmul>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4610      	mov	r0, r2
 80038ee:	4619      	mov	r1, r3
 80038f0:	a36b      	add	r3, pc, #428	; (adr r3, 8003aa0 <Munmunbot_Protocol+0x538>)
 80038f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f6:	f7fc fe2b 	bl	8000550 <__aeabi_dmul>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4610      	mov	r0, r2
 8003900:	4619      	mov	r1, r3
 8003902:	a369      	add	r3, pc, #420	; (adr r3, 8003aa8 <Munmunbot_Protocol+0x540>)
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	f7fc ff4c 	bl	80007a4 <__aeabi_ddiv>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4610      	mov	r0, r2
 8003912:	4619      	mov	r1, r3
 8003914:	f7fd f8ec 	bl	8000af0 <__aeabi_d2f>
 8003918:	4603      	mov	r3, r0
 800391a:	4a6b      	ldr	r2, [pc, #428]	; (8003ac8 <Munmunbot_Protocol+0x560>)
 800391c:	6093      	str	r3, [r2, #8]
							TrajectoryGenerationVelocityMaxSetting(&TrjStruc , &CUSSStruc);
 800391e:	496a      	ldr	r1, [pc, #424]	; (8003ac8 <Munmunbot_Protocol+0x560>)
 8003920:	486a      	ldr	r0, [pc, #424]	; (8003acc <Munmunbot_Protocol+0x564>)
 8003922:	f7fe fc65 	bl	80021f0 <TrajectoryGenerationVelocityMaxSetting>
						}
						ACK1Return(uart);
 8003926:	6838      	ldr	r0, [r7, #0]
 8003928:	f7ff fdfa 	bl	8003520 <ACK1Return>
						break;
 800392c:	e22f      	b.n	8003d8e <Munmunbot_Protocol+0x826>
					case 5:   //Set Angular pos ##Complete##
						if (Munmunbot_State == STATE_Idle)
 800392e:	4b63      	ldr	r3, [pc, #396]	; (8003abc <Munmunbot_Protocol+0x554>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d106      	bne.n	8003944 <Munmunbot_Protocol+0x3dc>
						{
							Angularpos_InputNumber = Data_HAck;
 8003936:	4b62      	ldr	r3, [pc, #392]	; (8003ac0 <Munmunbot_Protocol+0x558>)
 8003938:	881a      	ldrh	r2, [r3, #0]
 800393a:	4b65      	ldr	r3, [pc, #404]	; (8003ad0 <Munmunbot_Protocol+0x568>)
 800393c:	801a      	strh	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Pos_Directly;
 800393e:	4b65      	ldr	r3, [pc, #404]	; (8003ad4 <Munmunbot_Protocol+0x56c>)
 8003940:	2201      	movs	r2, #1
 8003942:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003944:	6838      	ldr	r0, [r7, #0]
 8003946:	f7ff fdeb 	bl	8003520 <ACK1Return>
						break;
 800394a:	e220      	b.n	8003d8e <Munmunbot_Protocol+0x826>
					case 6:  /// Set 1 Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 800394c:	4b5b      	ldr	r3, [pc, #364]	; (8003abc <Munmunbot_Protocol+0x554>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d109      	bne.n	8003968 <Munmunbot_Protocol+0x400>
						{
//							Angularpos_InputArray[0] = parameter[0];
							Angularpos_InputArray[0] = parameter[2];    //150 0x00 0x0A Checksum
 8003954:	4b58      	ldr	r3, [pc, #352]	; (8003ab8 <Munmunbot_Protocol+0x550>)
 8003956:	789a      	ldrb	r2, [r3, #2]
 8003958:	4b5f      	ldr	r3, [pc, #380]	; (8003ad8 <Munmunbot_Protocol+0x570>)
 800395a:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Goal_1_Station;
 800395c:	4b5d      	ldr	r3, [pc, #372]	; (8003ad4 <Munmunbot_Protocol+0x56c>)
 800395e:	2202      	movs	r2, #2
 8003960:	701a      	strb	r2, [r3, #0]
							NumberOfStationToGo = 1;
 8003962:	4b5e      	ldr	r3, [pc, #376]	; (8003adc <Munmunbot_Protocol+0x574>)
 8003964:	2201      	movs	r2, #1
 8003966:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003968:	6838      	ldr	r0, [r7, #0]
 800396a:	f7ff fdd9 	bl	8003520 <ACK1Return>
						break;
 800396e:	e20e      	b.n	8003d8e <Munmunbot_Protocol+0x826>
					case 7:  /// Set n Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003970:	4b52      	ldr	r3, [pc, #328]	; (8003abc <Munmunbot_Protocol+0x554>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d11c      	bne.n	80039b2 <Munmunbot_Protocol+0x44a>
						{
							MovingLinkMode = LMM_Set_Goal_n_Station;
 8003978:	4b56      	ldr	r3, [pc, #344]	; (8003ad4 <Munmunbot_Protocol+0x56c>)
 800397a:	2203      	movs	r2, #3
 800397c:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 800397e:	2300      	movs	r3, #0
 8003980:	637b      	str	r3, [r7, #52]	; 0x34
 8003982:	e00b      	b.n	800399c <Munmunbot_Protocol+0x434>
							{
								Angularpos_InputArray[i] = parameter[i];
 8003984:	4a4c      	ldr	r2, [pc, #304]	; (8003ab8 <Munmunbot_Protocol+0x550>)
 8003986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003988:	4413      	add	r3, r2
 800398a:	7819      	ldrb	r1, [r3, #0]
 800398c:	4a52      	ldr	r2, [pc, #328]	; (8003ad8 <Munmunbot_Protocol+0x570>)
 800398e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003990:	4413      	add	r3, r2
 8003992:	460a      	mov	r2, r1
 8003994:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8003996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003998:	3301      	adds	r3, #1
 800399a:	637b      	str	r3, [r7, #52]	; 0x34
 800399c:	4b50      	ldr	r3, [pc, #320]	; (8003ae0 <Munmunbot_Protocol+0x578>)
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a4:	4293      	cmp	r3, r2
 80039a6:	dbed      	blt.n	8003984 <Munmunbot_Protocol+0x41c>
							}
							NumberOfStationToGo = n_station_mem;
 80039a8:	4b4d      	ldr	r3, [pc, #308]	; (8003ae0 <Munmunbot_Protocol+0x578>)
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4b4b      	ldr	r3, [pc, #300]	; (8003adc <Munmunbot_Protocol+0x574>)
 80039b0:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80039b2:	6838      	ldr	r0, [r7, #0]
 80039b4:	f7ff fdb4 	bl	8003520 <ACK1Return>
						break;
 80039b8:	e1e9      	b.n	8003d8e <Munmunbot_Protocol+0x826>
					case 8:  /// Go go ##Complete##  ///But must implement return ACK after it's done
						if (Munmunbot_State == STATE_Idle)
 80039ba:	4b40      	ldr	r3, [pc, #256]	; (8003abc <Munmunbot_Protocol+0x554>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d108      	bne.n	80039d4 <Munmunbot_Protocol+0x46c>
						{
							Munmunbot_State = STATE_PrepareDATA;
 80039c2:	4b3e      	ldr	r3, [pc, #248]	; (8003abc <Munmunbot_Protocol+0x554>)
 80039c4:	2202      	movs	r2, #2
 80039c6:	701a      	strb	r2, [r3, #0]
							PID_Reset();
 80039c8:	f000 fa2c 	bl	8003e24 <PID_Reset>
							ACK1Return(uart);
 80039cc:	6838      	ldr	r0, [r7, #0]
 80039ce:	f7ff fda7 	bl	8003520 <ACK1Return>
								{0x58 ,  0x75 ,
										70,  110};  ///ACK1 + ACK2
								UARTTxWrite(uart, temp, 4);
							}
						}
						break;
 80039d2:	e1dc      	b.n	8003d8e <Munmunbot_Protocol+0x826>
								uint8_t temp[] =
 80039d4:	4b43      	ldr	r3, [pc, #268]	; (8003ae4 <Munmunbot_Protocol+0x57c>)
 80039d6:	623b      	str	r3, [r7, #32]
								UARTTxWrite(uart, temp, 4);
 80039d8:	f107 0320 	add.w	r3, r7, #32
 80039dc:	2204      	movs	r2, #4
 80039de:	4619      	mov	r1, r3
 80039e0:	6838      	ldr	r0, [r7, #0]
 80039e2:	f7ff fd55 	bl	8003490 <UARTTxWrite>
						break;
 80039e6:	e1d2      	b.n	8003d8e <Munmunbot_Protocol+0x826>

					case 9:  /// Return Current Station   ##Complete##

						{
							uint8_t temp[] =
 80039e8:	4a3f      	ldr	r2, [pc, #252]	; (8003ae8 <Munmunbot_Protocol+0x580>)
 80039ea:	f107 0318 	add.w	r3, r7, #24
 80039ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039f2:	6018      	str	r0, [r3, #0]
 80039f4:	3304      	adds	r3, #4
 80039f6:	8019      	strh	r1, [r3, #0]
							{0x58 ,  0x75 ,
									153,  0b0,  0b0, 0b0}; ///ACK1 + Mode 9
							uint8_t Shift = 2;
 80039f8:	2302      	movs	r3, #2
 80039fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
							DataForReturn = Current_Station&(0xff);
 80039fe:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <Munmunbot_Protocol+0x584>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	4b3a      	ldr	r3, [pc, #232]	; (8003af0 <Munmunbot_Protocol+0x588>)
 8003a06:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8003a08:	4b39      	ldr	r3, [pc, #228]	; (8003af0 <Munmunbot_Protocol+0x588>)
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	0a1b      	lsrs	r3, r3, #8
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a14:	3301      	adds	r3, #1
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003a1c:	440b      	add	r3, r1
 8003a1e:	f803 2c20 	strb.w	r2, [r3, #-32]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8003a22:	4b33      	ldr	r3, [pc, #204]	; (8003af0 <Munmunbot_Protocol+0x588>)
 8003a24:	881a      	ldrh	r2, [r3, #0]
 8003a26:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003a32:	440b      	add	r3, r1
 8003a34:	f803 2c20 	strb.w	r2, [r3, #-32]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8003a38:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a3c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003a40:	4413      	add	r3, r2
 8003a42:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8003a46:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003a50:	440b      	add	r3, r1
 8003a52:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003a56:	4413      	add	r3, r2
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a5e:	3302      	adds	r3, #2
 8003a60:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003a64:	440b      	add	r3, r1
 8003a66:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a72:	3303      	adds	r3, #3
 8003a74:	43d2      	mvns	r2, r2
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003a7c:	440b      	add	r3, r1
 8003a7e:	f803 2c20 	strb.w	r2, [r3, #-32]
							UARTTxWrite(uart, temp, 4+Shift);
 8003a82:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3304      	adds	r3, #4
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	f107 0318 	add.w	r3, r7, #24
 8003a90:	4619      	mov	r1, r3
 8003a92:	6838      	ldr	r0, [r7, #0]
 8003a94:	f7ff fcfc 	bl	8003490 <UARTTxWrite>
						}

						break;
 8003a98:	e179      	b.n	8003d8e <Munmunbot_Protocol+0x826>
 8003a9a:	bf00      	nop
 8003a9c:	f3af 8000 	nop.w
 8003aa0:	9999999a 	.word	0x9999999a
 8003aa4:	3fed9999 	.word	0x3fed9999
 8003aa8:	00000000 	.word	0x00000000
 8003aac:	406fe000 	.word	0x406fe000
 8003ab0:	200003d4 	.word	0x200003d4
 8003ab4:	200003d8 	.word	0x200003d8
 8003ab8:	200003dc 	.word	0x200003dc
 8003abc:	200000d9 	.word	0x200000d9
 8003ac0:	200003da 	.word	0x200003da
 8003ac4:	40240000 	.word	0x40240000
 8003ac8:	20000398 	.word	0x20000398
 8003acc:	20000308 	.word	0x20000308
 8003ad0:	200001dc 	.word	0x200001dc
 8003ad4:	200001de 	.word	0x200001de
 8003ad8:	200000dc 	.word	0x200000dc
 8003adc:	200001e0 	.word	0x200001e0
 8003ae0:	200004de 	.word	0x200004de
 8003ae4:	6e467558 	.word	0x6e467558
 8003ae8:	0800a6f4 	.word	0x0800a6f4
 8003aec:	200001df 	.word	0x200001df
 8003af0:	200004e2 	.word	0x200004e2

					case 10: /// Return Angular Position  ##Complete##
						{
							uint8_t temp[] =
 8003af4:	4aba      	ldr	r2, [pc, #744]	; (8003de0 <Munmunbot_Protocol+0x878>)
 8003af6:	f107 0310 	add.w	r3, r7, #16
 8003afa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003afe:	6018      	str	r0, [r3, #0]
 8003b00:	3304      	adds	r3, #4
 8003b02:	8019      	strh	r1, [r3, #0]
							{0x58 , 0x75 ,154, 0b0,  0b0, 0b0};
							uint8_t Shift = 2;
 8003b04:	2302      	movs	r3, #2
 8003b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
							DataForReturn = ((((int) htim1.Instance->CNT) % (CUSSStruc.PPRxQEI))*2*3.141*10000)/(CUSSStruc.PPRxQEI);  ///pulse to (radian*10000)
 8003b0a:	4bb6      	ldr	r3, [pc, #728]	; (8003de4 <Munmunbot_Protocol+0x87c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	4ab5      	ldr	r2, [pc, #724]	; (8003de8 <Munmunbot_Protocol+0x880>)
 8003b12:	6852      	ldr	r2, [r2, #4]
 8003b14:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b18:	fb02 f201 	mul.w	r2, r2, r1
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fc fc9b 	bl	800045c <__aeabi_ui2d>
 8003b26:	a3a8      	add	r3, pc, #672	; (adr r3, 8003dc8 <Munmunbot_Protocol+0x860>)
 8003b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2c:	f7fc fd10 	bl	8000550 <__aeabi_dmul>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4610      	mov	r0, r2
 8003b36:	4619      	mov	r1, r3
 8003b38:	a3a5      	add	r3, pc, #660	; (adr r3, 8003dd0 <Munmunbot_Protocol+0x868>)
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	f7fc fd07 	bl	8000550 <__aeabi_dmul>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4614      	mov	r4, r2
 8003b48:	461d      	mov	r5, r3
 8003b4a:	4ba7      	ldr	r3, [pc, #668]	; (8003de8 <Munmunbot_Protocol+0x880>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fc fc84 	bl	800045c <__aeabi_ui2d>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4620      	mov	r0, r4
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	f7fc fe22 	bl	80007a4 <__aeabi_ddiv>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4610      	mov	r0, r2
 8003b66:	4619      	mov	r1, r3
 8003b68:	f7fc ffa2 	bl	8000ab0 <__aeabi_d2uiz>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	4b9e      	ldr	r3, [pc, #632]	; (8003dec <Munmunbot_Protocol+0x884>)
 8003b72:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8003b74:	4b9d      	ldr	r3, [pc, #628]	; (8003dec <Munmunbot_Protocol+0x884>)
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	0a1b      	lsrs	r3, r3, #8
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b80:	3301      	adds	r3, #1
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003b88:	440b      	add	r3, r1
 8003b8a:	f803 2c28 	strb.w	r2, [r3, #-40]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8003b8e:	4b97      	ldr	r3, [pc, #604]	; (8003dec <Munmunbot_Protocol+0x884>)
 8003b90:	881a      	ldrh	r2, [r3, #0]
 8003b92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b96:	3302      	adds	r3, #2
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003b9e:	440b      	add	r3, r1
 8003ba0:	f803 2c28 	strb.w	r2, [r3, #-40]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8003ba4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ba8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003bac:	4413      	add	r3, r2
 8003bae:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 8003bb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003bbc:	440b      	add	r3, r1
 8003bbe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bca:	3302      	adds	r3, #2
 8003bcc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003bd0:	440b      	add	r3, r1
 8003bd2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bde:	3303      	adds	r3, #3
 8003be0:	43d2      	mvns	r2, r2
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003be8:	440b      	add	r3, r1
 8003bea:	f803 2c28 	strb.w	r2, [r3, #-40]
							UARTTxWrite(uart, temp, 4+Shift);
 8003bee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	f107 0310 	add.w	r3, r7, #16
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	6838      	ldr	r0, [r7, #0]
 8003c00:	f7ff fc46 	bl	8003490 <UARTTxWrite>
						}
						break;
 8003c04:	e0c3      	b.n	8003d8e <Munmunbot_Protocol+0x826>

					case 11: /// Return Angular Velocity Max  ##Complete##
						{
							uint8_t temp[] =
 8003c06:	4a7a      	ldr	r2, [pc, #488]	; (8003df0 <Munmunbot_Protocol+0x888>)
 8003c08:	f107 0308 	add.w	r3, r7, #8
 8003c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c10:	6018      	str	r0, [r3, #0]
 8003c12:	3304      	adds	r3, #4
 8003c14:	8019      	strh	r1, [r3, #0]
							{ 0x58, 0x75, 155, 0b0,  0b0, 0b0 };
							uint8_t Shift = 2;
 8003c16:	2302      	movs	r3, #2
 8003c18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							float temp3 = ( abs( VelocityPIDController.OutputFeedback )*60.0 )/( ( float ) CUSSStruc.PPRxQEI );
 8003c1c:	4b75      	ldr	r3, [pc, #468]	; (8003df4 <Munmunbot_Protocol+0x88c>)
 8003c1e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c26:	ee17 3a90 	vmov	r3, s15
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bfb8      	it	lt
 8003c2e:	425b      	neglt	r3, r3
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fc fc23 	bl	800047c <__aeabi_i2d>
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	4b6f      	ldr	r3, [pc, #444]	; (8003df8 <Munmunbot_Protocol+0x890>)
 8003c3c:	f7fc fc88 	bl	8000550 <__aeabi_dmul>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4614      	mov	r4, r2
 8003c46:	461d      	mov	r5, r3
 8003c48:	4b67      	ldr	r3, [pc, #412]	; (8003de8 <Munmunbot_Protocol+0x880>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	ee07 3a90 	vmov	s15, r3
 8003c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c54:	ee17 0a90 	vmov	r0, s15
 8003c58:	f7fc fc22 	bl	80004a0 <__aeabi_f2d>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4620      	mov	r0, r4
 8003c62:	4629      	mov	r1, r5
 8003c64:	f7fc fd9e 	bl	80007a4 <__aeabi_ddiv>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f7fc ff3e 	bl	8000af0 <__aeabi_d2f>
 8003c74:	4603      	mov	r3, r0
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
							DataForReturn = ( temp3 * 255.0 )/10.0;
 8003c78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c7a:	f7fc fc11 	bl	80004a0 <__aeabi_f2d>
 8003c7e:	a356      	add	r3, pc, #344	; (adr r3, 8003dd8 <Munmunbot_Protocol+0x870>)
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	f7fc fc64 	bl	8000550 <__aeabi_dmul>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	4b59      	ldr	r3, [pc, #356]	; (8003dfc <Munmunbot_Protocol+0x894>)
 8003c96:	f7fc fd85 	bl	80007a4 <__aeabi_ddiv>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f7fc ff05 	bl	8000ab0 <__aeabi_d2uiz>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	4b50      	ldr	r3, [pc, #320]	; (8003dec <Munmunbot_Protocol+0x884>)
 8003cac:	801a      	strh	r2, [r3, #0]
							temp[ 1+Shift ] = ( DataForReturn>>8 )&( 0xff );
 8003cae:	4b4f      	ldr	r3, [pc, #316]	; (8003dec <Munmunbot_Protocol+0x884>)
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cba:	3301      	adds	r3, #1
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003cc2:	440b      	add	r3, r1
 8003cc4:	f803 2c30 	strb.w	r2, [r3, #-48]
							temp[ 2+Shift ] = ( DataForReturn )&( 0xff );
 8003cc8:	4b48      	ldr	r3, [pc, #288]	; (8003dec <Munmunbot_Protocol+0x884>)
 8003cca:	881a      	ldrh	r2, [r3, #0]
 8003ccc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cd0:	3302      	adds	r3, #2
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003cd8:	440b      	add	r3, r1
 8003cda:	f803 2c30 	strb.w	r2, [r3, #-48]
							temp[ 3+Shift ] = ~( temp[ 0+Shift ]+temp[ 1+Shift ]+temp[ 2+Shift ] );
 8003cde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ce2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 8003cec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003cf6:	440b      	add	r3, r1
 8003cf8:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d04:	3302      	adds	r3, #2
 8003d06:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003d0a:	440b      	add	r3, r1
 8003d0c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8003d10:	4413      	add	r3, r2
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d18:	3303      	adds	r3, #3
 8003d1a:	43d2      	mvns	r2, r2
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003d22:	440b      	add	r3, r1
 8003d24:	f803 2c30 	strb.w	r2, [r3, #-48]
							UARTTxWrite( uart, temp, 4+Shift );
 8003d28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3304      	adds	r3, #4
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	f107 0308 	add.w	r3, r7, #8
 8003d36:	4619      	mov	r1, r3
 8003d38:	6838      	ldr	r0, [r7, #0]
 8003d3a:	f7ff fba9 	bl	8003490 <UARTTxWrite>
						}
						break;
 8003d3e:	e026      	b.n	8003d8e <Munmunbot_Protocol+0x826>

					case 12:  //Enable Gripper
						if (Munmunbot_State == STATE_Idle)
 8003d40:	4b2f      	ldr	r3, [pc, #188]	; (8003e00 <Munmunbot_Protocol+0x898>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d102      	bne.n	8003d4e <Munmunbot_Protocol+0x7e6>
						{
							GripperEnable = 1;
 8003d48:	4b2e      	ldr	r3, [pc, #184]	; (8003e04 <Munmunbot_Protocol+0x89c>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003d4e:	6838      	ldr	r0, [r7, #0]
 8003d50:	f7ff fbe6 	bl	8003520 <ACK1Return>
						break;
 8003d54:	e01b      	b.n	8003d8e <Munmunbot_Protocol+0x826>
					case 13: //Disable Gripper
						if (Munmunbot_State == STATE_Idle)
 8003d56:	4b2a      	ldr	r3, [pc, #168]	; (8003e00 <Munmunbot_Protocol+0x898>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d102      	bne.n	8003d64 <Munmunbot_Protocol+0x7fc>
						{
							GripperEnable = 0;
 8003d5e:	4b29      	ldr	r3, [pc, #164]	; (8003e04 <Munmunbot_Protocol+0x89c>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003d64:	6838      	ldr	r0, [r7, #0]
 8003d66:	f7ff fbdb 	bl	8003520 <ACK1Return>
						break;
 8003d6a:	e010      	b.n	8003d8e <Munmunbot_Protocol+0x826>

					case 14: /// Sethome  ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003d6c:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <Munmunbot_Protocol+0x898>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d107      	bne.n	8003d84 <Munmunbot_Protocol+0x81c>
						{
							Munmunbot_State = STATE_SetHome;
 8003d74:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <Munmunbot_Protocol+0x898>)
 8003d76:	2208      	movs	r2, #8
 8003d78:	701a      	strb	r2, [r3, #0]
							SethomeMode = SetHomeState_0;
 8003d7a:	4b23      	ldr	r3, [pc, #140]	; (8003e08 <Munmunbot_Protocol+0x8a0>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	701a      	strb	r2, [r3, #0]
							PID_Reset();
 8003d80:	f000 f850 	bl	8003e24 <PID_Reset>
						}
						ACK1Return(uart);
 8003d84:	6838      	ldr	r0, [r7, #0]
 8003d86:	f7ff fbcb 	bl	8003520 <ACK1Return>
						break;
 8003d8a:	e000      	b.n	8003d8e <Munmunbot_Protocol+0x826>
				    }
			   }
 8003d8c:	bf00      	nop
			n_station = 0;
 8003d8e:	4b1f      	ldr	r3, [pc, #124]	; (8003e0c <Munmunbot_Protocol+0x8a4>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	801a      	strh	r2, [r3, #0]
			ProtocolMode = 0;
 8003d94:	4b1e      	ldr	r3, [pc, #120]	; (8003e10 <Munmunbot_Protocol+0x8a8>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	701a      	strb	r2, [r3, #0]
			parameter_ptr = 0;
 8003d9a:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <Munmunbot_Protocol+0x8ac>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
			Data_HAck = 0;
 8003da0:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <Munmunbot_Protocol+0x8b0>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	801a      	strh	r2, [r3, #0]
			CheckSum = 0;
 8003da6:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <Munmunbot_Protocol+0x8b4>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
			Munmunbot_Protocol_State = PP_STARTandMode;
 8003dac:	4b1c      	ldr	r3, [pc, #112]	; (8003e20 <Munmunbot_Protocol+0x8b8>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
			break;
 8003db2:	e002      	b.n	8003dba <Munmunbot_Protocol+0x852>
			break;
 8003db4:	bf00      	nop
 8003db6:	e000      	b.n	8003dba <Munmunbot_Protocol+0x852>
				break;
 8003db8:	bf00      	nop
			}
	}
}
 8003dba:	bf00      	nop
 8003dbc:	3738      	adds	r7, #56	; 0x38
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	f3af 8000 	nop.w
 8003dc8:	9ba5e354 	.word	0x9ba5e354
 8003dcc:	400920c4 	.word	0x400920c4
 8003dd0:	00000000 	.word	0x00000000
 8003dd4:	40c38800 	.word	0x40c38800
 8003dd8:	00000000 	.word	0x00000000
 8003ddc:	406fe000 	.word	0x406fe000
 8003de0:	0800a6fc 	.word	0x0800a6fc
 8003de4:	2000064c 	.word	0x2000064c
 8003de8:	20000398 	.word	0x20000398
 8003dec:	200004e2 	.word	0x200004e2
 8003df0:	0800a704 	.word	0x0800a704
 8003df4:	20000248 	.word	0x20000248
 8003df8:	404e0000 	.word	0x404e0000
 8003dfc:	40240000 	.word	0x40240000
 8003e00:	200000d9 	.word	0x200000d9
 8003e04:	20000014 	.word	0x20000014
 8003e08:	200000da 	.word	0x200000da
 8003e0c:	200004dc 	.word	0x200004dc
 8003e10:	200003d8 	.word	0x200003d8
 8003e14:	200004e0 	.word	0x200004e0
 8003e18:	200003da 	.word	0x200003da
 8003e1c:	200003d4 	.word	0x200003d4
 8003e20:	200000d8 	.word	0x200000d8

08003e24 <PID_Reset>:

void PID_Reset()
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
	PositionPIDController.PreviousError = 0;
 8003e28:	4b32      	ldr	r3, [pc, #200]	; (8003ef4 <PID_Reset+0xd0>)
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	62da      	str	r2, [r3, #44]	; 0x2c
	PositionPIDController.Integral_Value = 0;
 8003e30:	4b30      	ldr	r3, [pc, #192]	; (8003ef4 <PID_Reset+0xd0>)
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	625a      	str	r2, [r3, #36]	; 0x24
	PositionPIDController.ControllerOutput = 0;
 8003e38:	4b2e      	ldr	r3, [pc, #184]	; (8003ef4 <PID_Reset+0xd0>)
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	615a      	str	r2, [r3, #20]
	PositionPIDController.NowError = 0;
 8003e40:	4b2c      	ldr	r3, [pc, #176]	; (8003ef4 <PID_Reset+0xd0>)
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28
	PositionPIDController.PreviousPreviousError = 0;
 8003e48:	4b2a      	ldr	r3, [pc, #168]	; (8003ef4 <PID_Reset+0xd0>)
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30
	PositionPIDController.PreviousControllerOutput = 0;
 8003e50:	4b28      	ldr	r3, [pc, #160]	; (8003ef4 <PID_Reset+0xd0>)
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	619a      	str	r2, [r3, #24]


	VelocityPIDController.PreviousError = 0;
 8003e58:	4b27      	ldr	r3, [pc, #156]	; (8003ef8 <PID_Reset+0xd4>)
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	62da      	str	r2, [r3, #44]	; 0x2c
	VelocityPIDController.Integral_Value = 0;
 8003e60:	4b25      	ldr	r3, [pc, #148]	; (8003ef8 <PID_Reset+0xd4>)
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	625a      	str	r2, [r3, #36]	; 0x24
	VelocityPIDController.ControllerOutput = 0;
 8003e68:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <PID_Reset+0xd4>)
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	615a      	str	r2, [r3, #20]
	VelocityPIDController.NowError = 0;
 8003e70:	4b21      	ldr	r3, [pc, #132]	; (8003ef8 <PID_Reset+0xd4>)
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28
	VelocityPIDController.PreviousPreviousError = 0;
 8003e78:	4b1f      	ldr	r3, [pc, #124]	; (8003ef8 <PID_Reset+0xd4>)
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
	VelocityPIDController.PreviousControllerOutput = 0;
 8003e80:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <PID_Reset+0xd4>)
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	619a      	str	r2, [r3, #24]

	StabilizerPIDController.PreviousError = 0;
 8003e88:	4b1c      	ldr	r3, [pc, #112]	; (8003efc <PID_Reset+0xd8>)
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	62da      	str	r2, [r3, #44]	; 0x2c
	StabilizerPIDController.Integral_Value = 0;
 8003e90:	4b1a      	ldr	r3, [pc, #104]	; (8003efc <PID_Reset+0xd8>)
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24
	StabilizerPIDController.ControllerOutput = 0;
 8003e98:	4b18      	ldr	r3, [pc, #96]	; (8003efc <PID_Reset+0xd8>)
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	615a      	str	r2, [r3, #20]
	StabilizerPIDController.NowError = 0;
 8003ea0:	4b16      	ldr	r3, [pc, #88]	; (8003efc <PID_Reset+0xd8>)
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	629a      	str	r2, [r3, #40]	; 0x28
	StabilizerPIDController.PreviousPreviousError = 0;
 8003ea8:	4b14      	ldr	r3, [pc, #80]	; (8003efc <PID_Reset+0xd8>)
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
	StabilizerPIDController.PreviousControllerOutput = 0;
 8003eb0:	4b12      	ldr	r3, [pc, #72]	; (8003efc <PID_Reset+0xd8>)
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	619a      	str	r2, [r3, #24]

	PureVelocityPIDController.PreviousError = 0;
 8003eb8:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <PID_Reset+0xdc>)
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	62da      	str	r2, [r3, #44]	; 0x2c
	PureVelocityPIDController.Integral_Value = 0;
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <PID_Reset+0xdc>)
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	625a      	str	r2, [r3, #36]	; 0x24
	PureVelocityPIDController.ControllerOutput = 0;
 8003ec8:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <PID_Reset+0xdc>)
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	615a      	str	r2, [r3, #20]
	PureVelocityPIDController.NowError = 0;
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <PID_Reset+0xdc>)
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	629a      	str	r2, [r3, #40]	; 0x28
	PureVelocityPIDController.PreviousPreviousError = 0;
 8003ed8:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <PID_Reset+0xdc>)
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30
	PureVelocityPIDController.PreviousControllerOutput = 0;
 8003ee0:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <PID_Reset+0xdc>)
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	619a      	str	r2, [r3, #24]
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	20000208 	.word	0x20000208
 8003ef8:	20000248 	.word	0x20000248
 8003efc:	200002c8 	.word	0x200002c8
 8003f00:	20000288 	.word	0x20000288

08003f04 <LAMP_ON>:

void LAMP_ON(uint8_t lampnumber)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	71fb      	strb	r3, [r7, #7]
	if (lampnumber == 0)
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d110      	bne.n	8003f36 <LAMP_ON+0x32>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003f14:	2201      	movs	r2, #1
 8003f16:	2102      	movs	r1, #2
 8003f18:	4830      	ldr	r0, [pc, #192]	; (8003fdc <LAMP_ON+0xd8>)
 8003f1a:	f001 fdab 	bl	8005a74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003f1e:	2201      	movs	r2, #1
 8003f20:	2104      	movs	r1, #4
 8003f22:	482e      	ldr	r0, [pc, #184]	; (8003fdc <LAMP_ON+0xd8>)
 8003f24:	f001 fda6 	bl	8005a74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f2e:	482c      	ldr	r0, [pc, #176]	; (8003fe0 <LAMP_ON+0xdc>)
 8003f30:	f001 fda0 	bl	8005a74 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
	}
}
 8003f34:	e04e      	b.n	8003fd4 <LAMP_ON+0xd0>
	else if (lampnumber == 1)
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d110      	bne.n	8003f5e <LAMP_ON+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2102      	movs	r1, #2
 8003f40:	4826      	ldr	r0, [pc, #152]	; (8003fdc <LAMP_ON+0xd8>)
 8003f42:	f001 fd97 	bl	8005a74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003f46:	2201      	movs	r2, #1
 8003f48:	2104      	movs	r1, #4
 8003f4a:	4824      	ldr	r0, [pc, #144]	; (8003fdc <LAMP_ON+0xd8>)
 8003f4c:	f001 fd92 	bl	8005a74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003f50:	2201      	movs	r2, #1
 8003f52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f56:	4822      	ldr	r0, [pc, #136]	; (8003fe0 <LAMP_ON+0xdc>)
 8003f58:	f001 fd8c 	bl	8005a74 <HAL_GPIO_WritePin>
}
 8003f5c:	e03a      	b.n	8003fd4 <LAMP_ON+0xd0>
	else if (lampnumber == 2)
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d110      	bne.n	8003f86 <LAMP_ON+0x82>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003f64:	2201      	movs	r2, #1
 8003f66:	2102      	movs	r1, #2
 8003f68:	481c      	ldr	r0, [pc, #112]	; (8003fdc <LAMP_ON+0xd8>)
 8003f6a:	f001 fd83 	bl	8005a74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2104      	movs	r1, #4
 8003f72:	481a      	ldr	r0, [pc, #104]	; (8003fdc <LAMP_ON+0xd8>)
 8003f74:	f001 fd7e 	bl	8005a74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f7e:	4818      	ldr	r0, [pc, #96]	; (8003fe0 <LAMP_ON+0xdc>)
 8003f80:	f001 fd78 	bl	8005a74 <HAL_GPIO_WritePin>
}
 8003f84:	e026      	b.n	8003fd4 <LAMP_ON+0xd0>
	else if (lampnumber == 3)
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d110      	bne.n	8003fae <LAMP_ON+0xaa>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	2102      	movs	r1, #2
 8003f90:	4812      	ldr	r0, [pc, #72]	; (8003fdc <LAMP_ON+0xd8>)
 8003f92:	f001 fd6f 	bl	8005a74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003f96:	2201      	movs	r2, #1
 8003f98:	2104      	movs	r1, #4
 8003f9a:	4810      	ldr	r0, [pc, #64]	; (8003fdc <LAMP_ON+0xd8>)
 8003f9c:	f001 fd6a 	bl	8005a74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fa6:	480e      	ldr	r0, [pc, #56]	; (8003fe0 <LAMP_ON+0xdc>)
 8003fa8:	f001 fd64 	bl	8005a74 <HAL_GPIO_WritePin>
}
 8003fac:	e012      	b.n	8003fd4 <LAMP_ON+0xd0>
	else if (lampnumber == 4)
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d10f      	bne.n	8003fd4 <LAMP_ON+0xd0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2102      	movs	r1, #2
 8003fb8:	4808      	ldr	r0, [pc, #32]	; (8003fdc <LAMP_ON+0xd8>)
 8003fba:	f001 fd5b 	bl	8005a74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2104      	movs	r1, #4
 8003fc2:	4806      	ldr	r0, [pc, #24]	; (8003fdc <LAMP_ON+0xd8>)
 8003fc4:	f001 fd56 	bl	8005a74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fce:	4804      	ldr	r0, [pc, #16]	; (8003fe0 <LAMP_ON+0xdc>)
 8003fd0:	f001 fd50 	bl	8005a74 <HAL_GPIO_WritePin>
}
 8003fd4:	bf00      	nop
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40020400 	.word	0x40020400
 8003fe0:	40020000 	.word	0x40020000

08003fe4 <Emergency_switch_trigger>:

void Emergency_switch_trigger()
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1)
 8003fe8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fec:	481f      	ldr	r0, [pc, #124]	; (800406c <Emergency_switch_trigger+0x88>)
 8003fee:	f001 fd29 	bl	8005a44 <HAL_GPIO_ReadPin>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d136      	bne.n	8004066 <Emergency_switch_trigger+0x82>
	{
		// Reset State Machine All
		Munmunbot_State = STATE_Disconnected;
 8003ff8:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <Emergency_switch_trigger+0x8c>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	701a      	strb	r2, [r3, #0]
		MovingLinkMode = LMM_Not_Set;
 8003ffe:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <Emergency_switch_trigger+0x90>)
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
		SethomeMode = SetHomeState_0;
 8004004:	4b1c      	ldr	r3, [pc, #112]	; (8004078 <Emergency_switch_trigger+0x94>)
 8004006:	2200      	movs	r2, #0
 8004008:	701a      	strb	r2, [r3, #0]
		TrjStruc.Mode = 0;
 800400a:	4b1c      	ldr	r3, [pc, #112]	; (800407c <Emergency_switch_trigger+0x98>)
 800400c:	2200      	movs	r2, #0
 800400e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		TrjStruc.Submode = 0;
 8004012:	4b1a      	ldr	r3, [pc, #104]	; (800407c <Emergency_switch_trigger+0x98>)
 8004014:	2200      	movs	r2, #0
 8004016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

		// Send back ACK to User-interface
		if ((Munmunbot_State == STATE_Calculation) || (Munmunbot_State == STATE_PrepareDATA) ||
 800401a:	4b15      	ldr	r3, [pc, #84]	; (8004070 <Emergency_switch_trigger+0x8c>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b03      	cmp	r3, #3
 8004020:	d00b      	beq.n	800403a <Emergency_switch_trigger+0x56>
 8004022:	4b13      	ldr	r3, [pc, #76]	; (8004070 <Emergency_switch_trigger+0x8c>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d007      	beq.n	800403a <Emergency_switch_trigger+0x56>
				(Munmunbot_State == STATE_Link_Moving) || (Munmunbot_State == STATE_End_Effector_Working))
 800402a:	4b11      	ldr	r3, [pc, #68]	; (8004070 <Emergency_switch_trigger+0x8c>)
 800402c:	781b      	ldrb	r3, [r3, #0]
		if ((Munmunbot_State == STATE_Calculation) || (Munmunbot_State == STATE_PrepareDATA) ||
 800402e:	2b04      	cmp	r3, #4
 8004030:	d003      	beq.n	800403a <Emergency_switch_trigger+0x56>
				(Munmunbot_State == STATE_Link_Moving) || (Munmunbot_State == STATE_End_Effector_Working))
 8004032:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <Emergency_switch_trigger+0x8c>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b07      	cmp	r3, #7
 8004038:	d102      	bne.n	8004040 <Emergency_switch_trigger+0x5c>
		{
			ACK2Return(&UART2);
 800403a:	4811      	ldr	r0, [pc, #68]	; (8004080 <Emergency_switch_trigger+0x9c>)
 800403c:	f7ff fa82 	bl	8003544 <ACK2Return>
		}

		// Reset variable
		NumberOfStationToGo = 0;
 8004040:	4b10      	ldr	r3, [pc, #64]	; (8004084 <Emergency_switch_trigger+0xa0>)
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]
		NumberOfStationPTR = 0;
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <Emergency_switch_trigger+0xa4>)
 8004048:	2200      	movs	r2, #0
 800404a:	701a      	strb	r2, [r3, #0]
		Moving_Link_Task_Flag = 0;
 800404c:	4b0f      	ldr	r3, [pc, #60]	; (800408c <Emergency_switch_trigger+0xa8>)
 800404e:	2200      	movs	r2, #0
 8004050:	701a      	strb	r2, [r3, #0]

		// Stop the Motor
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8004052:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <Emergency_switch_trigger+0xac>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2200      	movs	r2, #0
 8004058:	635a      	str	r2, [r3, #52]	; 0x34
		TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 800405a:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <Emergency_switch_trigger+0xb0>)
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	4a07      	ldr	r2, [pc, #28]	; (800407c <Emergency_switch_trigger+0x98>)
 8004060:	66d3      	str	r3, [r2, #108]	; 0x6c

		PID_Reset();
 8004062:	f7ff fedf 	bl	8003e24 <PID_Reset>
	}
}
 8004066:	bf00      	nop
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40020400 	.word	0x40020400
 8004070:	200000d9 	.word	0x200000d9
 8004074:	200001de 	.word	0x200001de
 8004078:	200000da 	.word	0x200000da
 800407c:	20000308 	.word	0x20000308
 8004080:	200000b8 	.word	0x200000b8
 8004084:	200001e0 	.word	0x200001e0
 8004088:	200001e1 	.word	0x200001e1
 800408c:	200001e8 	.word	0x200001e8
 8004090:	200005a4 	.word	0x200005a4
 8004094:	20000208 	.word	0x20000208

08004098 <Controlling_the_LINK>:

void Controlling_the_LINK()
{
 8004098:	b5b0      	push	{r4, r5, r7, lr}
 800409a:	af00      	add	r7, sp, #0
	  // GEN Trajectory
	  TrajectoryGenerationProcess();
 800409c:	f7fe fba8 	bl	80027f0 <TrajectoryGenerationProcess>
	  EncoderVelocityAndPosition_Update();
 80040a0:	f7fd fcf4 	bl	8001a8c <EncoderVelocityAndPosition_Update>
	  PIDController2in1();  ///use only position
 80040a4:	f7fe ff96 	bl	8002fd4 <PIDController2in1>
//	  Plant_input = PositionPIDController.ControllerOutput;
	  Plant_input = VelocityPIDController.ControllerOutput;
 80040a8:	4b29      	ldr	r3, [pc, #164]	; (8004150 <Controlling_the_LINK+0xb8>)
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	4a29      	ldr	r2, [pc, #164]	; (8004154 <Controlling_the_LINK+0xbc>)
 80040ae:	6013      	str	r3, [r2, #0]

	  if (Plant_input >= 0) /// Setting DIR
 80040b0:	4b28      	ldr	r3, [pc, #160]	; (8004154 <Controlling_the_LINK+0xbc>)
 80040b2:	edd3 7a00 	vldr	s15, [r3]
 80040b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040be:	db0c      	blt.n	80040da <Controlling_the_LINK+0x42>
	  {
		  DCMotorStruc.DIR = 1;
 80040c0:	4b25      	ldr	r3, [pc, #148]	; (8004158 <Controlling_the_LINK+0xc0>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input);
 80040c6:	4b23      	ldr	r3, [pc, #140]	; (8004154 <Controlling_the_LINK+0xbc>)
 80040c8:	edd3 7a00 	vldr	s15, [r3]
 80040cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040d0:	ee17 2a90 	vmov	r2, s15
 80040d4:	4b20      	ldr	r3, [pc, #128]	; (8004158 <Controlling_the_LINK+0xc0>)
 80040d6:	605a      	str	r2, [r3, #4]
 80040d8:	e01b      	b.n	8004112 <Controlling_the_LINK+0x7a>
	  }
	  else if (Plant_input < 0)
 80040da:	4b1e      	ldr	r3, [pc, #120]	; (8004154 <Controlling_the_LINK+0xbc>)
 80040dc:	edd3 7a00 	vldr	s15, [r3]
 80040e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e8:	d513      	bpl.n	8004112 <Controlling_the_LINK+0x7a>
	  {
		  DCMotorStruc.DIR = 0;
 80040ea:	4b1b      	ldr	r3, [pc, #108]	; (8004158 <Controlling_the_LINK+0xc0>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input * -1.0);
 80040f0:	4b18      	ldr	r3, [pc, #96]	; (8004154 <Controlling_the_LINK+0xbc>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fc f9d3 	bl	80004a0 <__aeabi_f2d>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4614      	mov	r4, r2
 8004100:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004104:	4620      	mov	r0, r4
 8004106:	4629      	mov	r1, r5
 8004108:	f7fc fcd2 	bl	8000ab0 <__aeabi_d2uiz>
 800410c:	4603      	mov	r3, r0
 800410e:	4a12      	ldr	r2, [pc, #72]	; (8004158 <Controlling_the_LINK+0xc0>)
 8004110:	6053      	str	r3, [r2, #4]
	  }

	  if (DCMotorStruc.PWMOut > 10000)   /// Saturation Output
 8004112:	4b11      	ldr	r3, [pc, #68]	; (8004158 <Controlling_the_LINK+0xc0>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f242 7210 	movw	r2, #10000	; 0x2710
 800411a:	4293      	cmp	r3, r2
 800411c:	d903      	bls.n	8004126 <Controlling_the_LINK+0x8e>
	  {
		 DCMotorStruc.PWMOut = 10000;
 800411e:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <Controlling_the_LINK+0xc0>)
 8004120:	f242 7210 	movw	r2, #10000	; 0x2710
 8004124:	605a      	str	r2, [r3, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <Controlling_the_LINK+0xc0>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	2180      	movs	r1, #128	; 0x80
 800412e:	480b      	ldr	r0, [pc, #44]	; (800415c <Controlling_the_LINK+0xc4>)
 8004130:	f001 fca0 	bl	8005a74 <HAL_GPIO_WritePin>

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut); ///Setting PWM Pin
 8004134:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <Controlling_the_LINK+0xc8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a07      	ldr	r2, [pc, #28]	; (8004158 <Controlling_the_LINK+0xc0>)
 800413a:	6852      	ldr	r2, [r2, #4]
 800413c:	635a      	str	r2, [r3, #52]	; 0x34
	  TrjStruc.Loop_Timestamp = micros();
 800413e:	f7fd fdbf 	bl	8001cc0 <micros>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4907      	ldr	r1, [pc, #28]	; (8004164 <Controlling_the_LINK+0xcc>)
 8004148:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 800414c:	bf00      	nop
 800414e:	bdb0      	pop	{r4, r5, r7, pc}
 8004150:	20000248 	.word	0x20000248
 8004154:	200001e4 	.word	0x200001e4
 8004158:	200000d0 	.word	0x200000d0
 800415c:	40020800 	.word	0x40020800
 8004160:	200005a4 	.word	0x200005a4
 8004164:	20000308 	.word	0x20000308

08004168 <HackTheLink>:
		TrjStruc.Loop_Timestamp = micros();
	}
}

void HackTheLink( float Position )
{
 8004168:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	ed87 0a01 	vstr	s0, [r7, #4]
	if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8004174:	f7fd fda4 	bl	8001cc0 <micros>
 8004178:	4b57      	ldr	r3, [pc, #348]	; (80042d8 <HackTheLink+0x170>)
 800417a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800417e:	1a84      	subs	r4, r0, r2
 8004180:	eb61 0503 	sbc.w	r5, r1, r3
 8004184:	4b54      	ldr	r3, [pc, #336]	; (80042d8 <HackTheLink+0x170>)
 8004186:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800418a:	429d      	cmp	r5, r3
 800418c:	bf08      	it	eq
 800418e:	4294      	cmpeq	r4, r2
 8004190:	f0c0 809c 	bcc.w	80042cc <HackTheLink+0x164>
	{
		TrjStruc.AngularDisplacementDesire = Position;
 8004194:	4a50      	ldr	r2, [pc, #320]	; (80042d8 <HackTheLink+0x170>)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6213      	str	r3, [r2, #32]
		EncoderVelocityAndPosition_Update();
 800419a:	f7fd fc77 	bl	8001a8c <EncoderVelocityAndPosition_Update>

		if ((PositionPIDController.OutputFeedback <= Position + AcceptableError) &&
 800419e:	4b4f      	ldr	r3, [pc, #316]	; (80042dc <HackTheLink+0x174>)
 80041a0:	ed93 7a08 	vldr	s14, [r3, #32]
 80041a4:	4b4e      	ldr	r3, [pc, #312]	; (80042e0 <HackTheLink+0x178>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	ee07 3a90 	vmov	s15, r3
 80041ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80041b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80041b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c0:	d811      	bhi.n	80041e6 <HackTheLink+0x7e>
				(PositionPIDController.OutputFeedback >= Position - AcceptableError))
 80041c2:	4b46      	ldr	r3, [pc, #280]	; (80042dc <HackTheLink+0x174>)
 80041c4:	ed93 7a08 	vldr	s14, [r3, #32]
 80041c8:	4b45      	ldr	r3, [pc, #276]	; (80042e0 <HackTheLink+0x178>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	ee07 3a90 	vmov	s15, r3
 80041d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041d4:	edd7 6a01 	vldr	s13, [r7, #4]
 80041d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
		if ((PositionPIDController.OutputFeedback <= Position + AcceptableError) &&
 80041dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e4:	da1e      	bge.n	8004224 <HackTheLink+0xbc>
		{
//			Plant_input = 1500;
		}
		else if ( Position - PositionPIDController.OutputFeedback >= 0)
 80041e6:	4b3d      	ldr	r3, [pc, #244]	; (80042dc <HackTheLink+0x174>)
 80041e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80041ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80041f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fc:	db03      	blt.n	8004206 <HackTheLink+0x9e>
		{
			TrjStruc.AngularVelocityDesire = 0.5*(8192.0/60.0);
 80041fe:	4b36      	ldr	r3, [pc, #216]	; (80042d8 <HackTheLink+0x170>)
 8004200:	4a38      	ldr	r2, [pc, #224]	; (80042e4 <HackTheLink+0x17c>)
 8004202:	625a      	str	r2, [r3, #36]	; 0x24
 8004204:	e00e      	b.n	8004224 <HackTheLink+0xbc>
		}
		else if ( Position - PositionPIDController.OutputFeedback < 0)
 8004206:	4b35      	ldr	r3, [pc, #212]	; (80042dc <HackTheLink+0x174>)
 8004208:	edd3 7a08 	vldr	s15, [r3, #32]
 800420c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004214:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421c:	d502      	bpl.n	8004224 <HackTheLink+0xbc>
		{
			TrjStruc.AngularVelocityDesire = -0.5*(8192.0/60.0);
 800421e:	4b2e      	ldr	r3, [pc, #184]	; (80042d8 <HackTheLink+0x170>)
 8004220:	4a31      	ldr	r2, [pc, #196]	; (80042e8 <HackTheLink+0x180>)
 8004222:	625a      	str	r2, [r3, #36]	; 0x24
		}
		PureVeloPID();
 8004224:	f7fe ffde 	bl	80031e4 <PureVeloPID>
		Plant_input = PureVelocityPIDController.ControllerOutput;
 8004228:	4b30      	ldr	r3, [pc, #192]	; (80042ec <HackTheLink+0x184>)
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	4a30      	ldr	r2, [pc, #192]	; (80042f0 <HackTheLink+0x188>)
 800422e:	6013      	str	r3, [r2, #0]

		if (Plant_input >= 0) /// Setting DIR
 8004230:	4b2f      	ldr	r3, [pc, #188]	; (80042f0 <HackTheLink+0x188>)
 8004232:	edd3 7a00 	vldr	s15, [r3]
 8004236:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800423a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423e:	db0c      	blt.n	800425a <HackTheLink+0xf2>
		{
		  DCMotorStruc.DIR = 1;
 8004240:	4b2c      	ldr	r3, [pc, #176]	; (80042f4 <HackTheLink+0x18c>)
 8004242:	2201      	movs	r2, #1
 8004244:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input);
 8004246:	4b2a      	ldr	r3, [pc, #168]	; (80042f0 <HackTheLink+0x188>)
 8004248:	edd3 7a00 	vldr	s15, [r3]
 800424c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004250:	ee17 2a90 	vmov	r2, s15
 8004254:	4b27      	ldr	r3, [pc, #156]	; (80042f4 <HackTheLink+0x18c>)
 8004256:	605a      	str	r2, [r3, #4]
 8004258:	e01b      	b.n	8004292 <HackTheLink+0x12a>
		}
		else if (Plant_input < 0)
 800425a:	4b25      	ldr	r3, [pc, #148]	; (80042f0 <HackTheLink+0x188>)
 800425c:	edd3 7a00 	vldr	s15, [r3]
 8004260:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004268:	d513      	bpl.n	8004292 <HackTheLink+0x12a>
		{
		  DCMotorStruc.DIR = 0;
 800426a:	4b22      	ldr	r3, [pc, #136]	; (80042f4 <HackTheLink+0x18c>)
 800426c:	2200      	movs	r2, #0
 800426e:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input * -1.0);
 8004270:	4b1f      	ldr	r3, [pc, #124]	; (80042f0 <HackTheLink+0x188>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7fc f913 	bl	80004a0 <__aeabi_f2d>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4690      	mov	r8, r2
 8004280:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004284:	4640      	mov	r0, r8
 8004286:	4649      	mov	r1, r9
 8004288:	f7fc fc12 	bl	8000ab0 <__aeabi_d2uiz>
 800428c:	4603      	mov	r3, r0
 800428e:	4a19      	ldr	r2, [pc, #100]	; (80042f4 <HackTheLink+0x18c>)
 8004290:	6053      	str	r3, [r2, #4]
		}

		if (DCMotorStruc.PWMOut > 10000)   /// Saturation Output
 8004292:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <HackTheLink+0x18c>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f242 7210 	movw	r2, #10000	; 0x2710
 800429a:	4293      	cmp	r3, r2
 800429c:	d903      	bls.n	80042a6 <HackTheLink+0x13e>
		{
		 DCMotorStruc.PWMOut = 10000;
 800429e:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <HackTheLink+0x18c>)
 80042a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80042a4:	605a      	str	r2, [r3, #4]
		}

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 80042a6:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <HackTheLink+0x18c>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	2180      	movs	r1, #128	; 0x80
 80042ae:	4812      	ldr	r0, [pc, #72]	; (80042f8 <HackTheLink+0x190>)
 80042b0:	f001 fbe0 	bl	8005a74 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut); ///Setting PWM Pin
 80042b4:	4b11      	ldr	r3, [pc, #68]	; (80042fc <HackTheLink+0x194>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a0e      	ldr	r2, [pc, #56]	; (80042f4 <HackTheLink+0x18c>)
 80042ba:	6852      	ldr	r2, [r2, #4]
 80042bc:	635a      	str	r2, [r3, #52]	; 0x34
		TrjStruc.Loop_Timestamp = micros();
 80042be:	f7fd fcff 	bl	8001cc0 <micros>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4904      	ldr	r1, [pc, #16]	; (80042d8 <HackTheLink+0x170>)
 80042c8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	}
}
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042d6:	bf00      	nop
 80042d8:	20000308 	.word	0x20000308
 80042dc:	20000208 	.word	0x20000208
 80042e0:	20000015 	.word	0x20000015
 80042e4:	42888889 	.word	0x42888889
 80042e8:	c2888889 	.word	0xc2888889
 80042ec:	20000288 	.word	0x20000288
 80042f0:	200001e4 	.word	0x200001e4
 80042f4:	200000d0 	.word	0x200000d0
 80042f8:	40020800 	.word	0x40020800
 80042fc:	200005a4 	.word	0x200005a4

08004300 <SETHOME_StateMachine_Function>:

void SETHOME_StateMachine_Function()
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
	switch (SethomeMode)
 8004304:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <SETHOME_StateMachine_Function+0x74>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d013      	beq.n	8004334 <SETHOME_StateMachine_Function+0x34>
 800430c:	2b02      	cmp	r3, #2
 800430e:	dc2e      	bgt.n	800436e <SETHOME_StateMachine_Function+0x6e>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <SETHOME_StateMachine_Function+0x18>
 8004314:	2b01      	cmp	r3, #1
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2700);
			SethomeMode = SetHomeState_1;
			break;
		case SetHomeState_1:
			break;
 8004316:	e02a      	b.n	800436e <SETHOME_StateMachine_Function+0x6e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8004318:	2200      	movs	r2, #0
 800431a:	2180      	movs	r1, #128	; 0x80
 800431c:	4816      	ldr	r0, [pc, #88]	; (8004378 <SETHOME_StateMachine_Function+0x78>)
 800431e:	f001 fba9 	bl	8005a74 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2700);
 8004322:	4b16      	ldr	r3, [pc, #88]	; (800437c <SETHOME_StateMachine_Function+0x7c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f640 228c 	movw	r2, #2700	; 0xa8c
 800432a:	635a      	str	r2, [r3, #52]	; 0x34
			SethomeMode = SetHomeState_1;
 800432c:	4b11      	ldr	r3, [pc, #68]	; (8004374 <SETHOME_StateMachine_Function+0x74>)
 800432e:	2201      	movs	r2, #1
 8004330:	701a      	strb	r2, [r3, #0]
			break;
 8004332:	e01c      	b.n	800436e <SETHOME_StateMachine_Function+0x6e>
		case SetHomeState_2:
			Munmunbot_State = STATE_Idle;
 8004334:	4b12      	ldr	r3, [pc, #72]	; (8004380 <SETHOME_StateMachine_Function+0x80>)
 8004336:	2201      	movs	r2, #1
 8004338:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 800433a:	4b12      	ldr	r3, [pc, #72]	; (8004384 <SETHOME_StateMachine_Function+0x84>)
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8004340:	4b0e      	ldr	r3, [pc, #56]	; (800437c <SETHOME_StateMachine_Function+0x7c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2200      	movs	r2, #0
 8004346:	635a      	str	r2, [r3, #52]	; 0x34
			TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
 8004348:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <SETHOME_StateMachine_Function+0x88>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004356:	4b0d      	ldr	r3, [pc, #52]	; (800438c <SETHOME_StateMachine_Function+0x8c>)
 8004358:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			Moving_Link_Task_Flag = 0;
 800435c:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <SETHOME_StateMachine_Function+0x90>)
 800435e:	2200      	movs	r2, #0
 8004360:	701a      	strb	r2, [r3, #0]
			sethomeTrigger = 1;
 8004362:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <SETHOME_StateMachine_Function+0x94>)
 8004364:	2201      	movs	r2, #1
 8004366:	701a      	strb	r2, [r3, #0]
			PID_Reset();
 8004368:	f7ff fd5c 	bl	8003e24 <PID_Reset>

			break;
 800436c:	bf00      	nop

     }

}
 800436e:	bf00      	nop
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	200000da 	.word	0x200000da
 8004378:	40020800 	.word	0x40020800
 800437c:	200005a4 	.word	0x200005a4
 8004380:	200000d9 	.word	0x200000d9
 8004384:	200001de 	.word	0x200001de
 8004388:	2000064c 	.word	0x2000064c
 800438c:	20000308 	.word	0x20000308
 8004390:	200001e8 	.word	0x200001e8
 8004394:	200001e9 	.word	0x200001e9

08004398 <UpdateMunmunBotState>:

void UpdateMunmunBotState()
{
 8004398:	b5b0      	push	{r4, r5, r7, lr}
 800439a:	af00      	add	r7, sp, #0
	if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 800439c:	f7fd fc90 	bl	8001cc0 <micros>
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <UpdateMunmunBotState+0x38>)
 80043a2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80043a6:	1a84      	subs	r4, r0, r2
 80043a8:	eb61 0503 	sbc.w	r5, r1, r3
 80043ac:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <UpdateMunmunBotState+0x38>)
 80043ae:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80043b2:	429d      	cmp	r5, r3
 80043b4:	bf08      	it	eq
 80043b6:	4294      	cmpeq	r4, r2
 80043b8:	d308      	bcc.n	80043cc <UpdateMunmunBotState+0x34>
	{
		EncoderVelocityAndPosition_Update();
 80043ba:	f7fd fb67 	bl	8001a8c <EncoderVelocityAndPosition_Update>
		TrjStruc.Loop_Timestamp = micros();
 80043be:	f7fd fc7f 	bl	8001cc0 <micros>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4902      	ldr	r1, [pc, #8]	; (80043d0 <UpdateMunmunBotState+0x38>)
 80043c8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	}
}
 80043cc:	bf00      	nop
 80043ce:	bdb0      	pop	{r4, r5, r7, pc}
 80043d0:	20000308 	.word	0x20000308
 80043d4:	00000000 	.word	0x00000000

080043d8 <EndEffectorDebug>:

void EndEffectorDebug()
{
 80043d8:	b5b0      	push	{r4, r5, r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
	if (micros()-Timestamp_EndEffectorDebug >= 5*1000000.0)
 80043de:	f7fd fc6f 	bl	8001cc0 <micros>
 80043e2:	4b15      	ldr	r3, [pc, #84]	; (8004438 <EndEffectorDebug+0x60>)
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	1a84      	subs	r4, r0, r2
 80043ea:	eb61 0503 	sbc.w	r5, r1, r3
 80043ee:	4620      	mov	r0, r4
 80043f0:	4629      	mov	r1, r5
 80043f2:	f7fc f877 	bl	80004e4 <__aeabi_ul2d>
 80043f6:	a30e      	add	r3, pc, #56	; (adr r3, 8004430 <EndEffectorDebug+0x58>)
 80043f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fc:	f7fc fb2e 	bl	8000a5c <__aeabi_dcmpge>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d100      	bne.n	8004408 <EndEffectorDebug+0x30>
				uint8_t temp[1] = {0x45};
				HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
		  }
		Timestamp_EndEffectorDebug = micros();
	}
}
 8004406:	e00e      	b.n	8004426 <EndEffectorDebug+0x4e>
				uint8_t temp[1] = {0x45};
 8004408:	2345      	movs	r3, #69	; 0x45
 800440a:	713b      	strb	r3, [r7, #4]
				HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
 800440c:	1d3a      	adds	r2, r7, #4
 800440e:	2301      	movs	r3, #1
 8004410:	2146      	movs	r1, #70	; 0x46
 8004412:	480a      	ldr	r0, [pc, #40]	; (800443c <EndEffectorDebug+0x64>)
 8004414:	f001 fca4 	bl	8005d60 <HAL_I2C_Master_Transmit_IT>
		Timestamp_EndEffectorDebug = micros();
 8004418:	f7fd fc52 	bl	8001cc0 <micros>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4905      	ldr	r1, [pc, #20]	; (8004438 <EndEffectorDebug+0x60>)
 8004422:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004426:	bf00      	nop
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bdb0      	pop	{r4, r5, r7, pc}
 800442e:	bf00      	nop
 8004430:	00000000 	.word	0x00000000
 8004434:	415312d0 	.word	0x415312d0
 8004438:	200003b0 	.word	0x200003b0
 800443c:	20000550 	.word	0x20000550

08004440 <EndEffectorWorkingState>:

void EndEffectorWorkingState()
{
 8004440:	b5b0      	push	{r4, r5, r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
	  if(GripperEnable == 1)
 8004446:	4b64      	ldr	r3, [pc, #400]	; (80045d8 <EndEffectorWorkingState+0x198>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b01      	cmp	r3, #1
 800444c:	f040 80b3 	bne.w	80045b6 <EndEffectorWorkingState+0x176>
	  {
		if (GripperState == 0)
 8004450:	4b62      	ldr	r3, [pc, #392]	; (80045dc <EndEffectorWorkingState+0x19c>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d115      	bne.n	8004484 <EndEffectorWorkingState+0x44>
		{
			{
				LAMP_ON(3);
 8004458:	2003      	movs	r0, #3
 800445a:	f7ff fd53 	bl	8003f04 <LAMP_ON>
				uint8_t temp[1] = {0x45};
 800445e:	2345      	movs	r3, #69	; 0x45
 8004460:	713b      	strb	r3, [r7, #4]
				HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
 8004462:	1d3a      	adds	r2, r7, #4
 8004464:	2301      	movs	r3, #1
 8004466:	2146      	movs	r1, #70	; 0x46
 8004468:	485d      	ldr	r0, [pc, #372]	; (80045e0 <EndEffectorWorkingState+0x1a0>)
 800446a:	f001 fc79 	bl	8005d60 <HAL_I2C_Master_Transmit_IT>
			}
			GripperState = 1;
 800446e:	4b5b      	ldr	r3, [pc, #364]	; (80045dc <EndEffectorWorkingState+0x19c>)
 8004470:	2201      	movs	r2, #1
 8004472:	701a      	strb	r2, [r3, #0]
			Timestamp_Gripper = micros();
 8004474:	f7fd fc24 	bl	8001cc0 <micros>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4959      	ldr	r1, [pc, #356]	; (80045e4 <EndEffectorWorkingState+0x1a4>)
 800447e:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  else if(GripperEnable == 0)
	  {
		 Munmunbot_State = STATE_PrepareDATA;
	  }
}
 8004482:	e09f      	b.n	80045c4 <EndEffectorWorkingState+0x184>
		else if (GripperState != 0)
 8004484:	4b55      	ldr	r3, [pc, #340]	; (80045dc <EndEffectorWorkingState+0x19c>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 809b 	beq.w	80045c4 <EndEffectorWorkingState+0x184>
			if ((hi2c1.State == HAL_I2C_STATE_READY) && (GripperState == 1))
 800448e:	4b54      	ldr	r3, [pc, #336]	; (80045e0 <EndEffectorWorkingState+0x1a0>)
 8004490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b20      	cmp	r3, #32
 8004498:	d10f      	bne.n	80044ba <EndEffectorWorkingState+0x7a>
 800449a:	4b50      	ldr	r3, [pc, #320]	; (80045dc <EndEffectorWorkingState+0x19c>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d10b      	bne.n	80044ba <EndEffectorWorkingState+0x7a>
					uint8_t temp[1] = {0x23};
 80044a2:	2323      	movs	r3, #35	; 0x23
 80044a4:	703b      	strb	r3, [r7, #0]
					HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
 80044a6:	463a      	mov	r2, r7
 80044a8:	2301      	movs	r3, #1
 80044aa:	2146      	movs	r1, #70	; 0x46
 80044ac:	484c      	ldr	r0, [pc, #304]	; (80045e0 <EndEffectorWorkingState+0x1a0>)
 80044ae:	f001 fc57 	bl	8005d60 <HAL_I2C_Master_Transmit_IT>
				GripperState = 2;
 80044b2:	4b4a      	ldr	r3, [pc, #296]	; (80045dc <EndEffectorWorkingState+0x19c>)
 80044b4:	2202      	movs	r2, #2
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	e012      	b.n	80044e0 <EndEffectorWorkingState+0xa0>
			else if ((hi2c1.State == HAL_I2C_STATE_READY) && ( GripperState == 2 ))
 80044ba:	4b49      	ldr	r3, [pc, #292]	; (80045e0 <EndEffectorWorkingState+0x1a0>)
 80044bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d10c      	bne.n	80044e0 <EndEffectorWorkingState+0xa0>
 80044c6:	4b45      	ldr	r3, [pc, #276]	; (80045dc <EndEffectorWorkingState+0x19c>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d108      	bne.n	80044e0 <EndEffectorWorkingState+0xa0>
					HAL_I2C_Master_Receive_IT(&hi2c1, ((0x23 << 1) | 0b1), GripperStatus, 1);
 80044ce:	2301      	movs	r3, #1
 80044d0:	4a45      	ldr	r2, [pc, #276]	; (80045e8 <EndEffectorWorkingState+0x1a8>)
 80044d2:	2147      	movs	r1, #71	; 0x47
 80044d4:	4842      	ldr	r0, [pc, #264]	; (80045e0 <EndEffectorWorkingState+0x1a0>)
 80044d6:	f001 fce9 	bl	8005eac <HAL_I2C_Master_Receive_IT>
				GripperState = 1;
 80044da:	4b40      	ldr	r3, [pc, #256]	; (80045dc <EndEffectorWorkingState+0x19c>)
 80044dc:	2201      	movs	r2, #1
 80044de:	701a      	strb	r2, [r3, #0]
			if (GripperStatus[0] == 0x12 )
 80044e0:	4b41      	ldr	r3, [pc, #260]	; (80045e8 <EndEffectorWorkingState+0x1a8>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b12      	cmp	r3, #18
 80044e6:	d110      	bne.n	800450a <EndEffectorWorkingState+0xca>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80044e8:	2201      	movs	r2, #1
 80044ea:	2102      	movs	r1, #2
 80044ec:	483f      	ldr	r0, [pc, #252]	; (80045ec <EndEffectorWorkingState+0x1ac>)
 80044ee:	f001 fac1 	bl	8005a74 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80044f2:	2201      	movs	r2, #1
 80044f4:	2104      	movs	r1, #4
 80044f6:	483d      	ldr	r0, [pc, #244]	; (80045ec <EndEffectorWorkingState+0x1ac>)
 80044f8:	f001 fabc 	bl	8005a74 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80044fc:	2200      	movs	r2, #0
 80044fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004502:	483b      	ldr	r0, [pc, #236]	; (80045f0 <EndEffectorWorkingState+0x1b0>)
 8004504:	f001 fab6 	bl	8005a74 <HAL_GPIO_WritePin>
 8004508:	e03d      	b.n	8004586 <EndEffectorWorkingState+0x146>
			else if (GripperStatus[0] == 0x34)
 800450a:	4b37      	ldr	r3, [pc, #220]	; (80045e8 <EndEffectorWorkingState+0x1a8>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b34      	cmp	r3, #52	; 0x34
 8004510:	d110      	bne.n	8004534 <EndEffectorWorkingState+0xf4>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8004512:	2201      	movs	r2, #1
 8004514:	2102      	movs	r1, #2
 8004516:	4835      	ldr	r0, [pc, #212]	; (80045ec <EndEffectorWorkingState+0x1ac>)
 8004518:	f001 faac 	bl	8005a74 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800451c:	2200      	movs	r2, #0
 800451e:	2104      	movs	r1, #4
 8004520:	4832      	ldr	r0, [pc, #200]	; (80045ec <EndEffectorWorkingState+0x1ac>)
 8004522:	f001 faa7 	bl	8005a74 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8004526:	2200      	movs	r2, #0
 8004528:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800452c:	4830      	ldr	r0, [pc, #192]	; (80045f0 <EndEffectorWorkingState+0x1b0>)
 800452e:	f001 faa1 	bl	8005a74 <HAL_GPIO_WritePin>
 8004532:	e028      	b.n	8004586 <EndEffectorWorkingState+0x146>
			else if (GripperStatus[0] == 0x56)
 8004534:	4b2c      	ldr	r3, [pc, #176]	; (80045e8 <EndEffectorWorkingState+0x1a8>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b56      	cmp	r3, #86	; 0x56
 800453a:	d110      	bne.n	800455e <EndEffectorWorkingState+0x11e>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 800453c:	2200      	movs	r2, #0
 800453e:	2102      	movs	r1, #2
 8004540:	482a      	ldr	r0, [pc, #168]	; (80045ec <EndEffectorWorkingState+0x1ac>)
 8004542:	f001 fa97 	bl	8005a74 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8004546:	2200      	movs	r2, #0
 8004548:	2104      	movs	r1, #4
 800454a:	4828      	ldr	r0, [pc, #160]	; (80045ec <EndEffectorWorkingState+0x1ac>)
 800454c:	f001 fa92 	bl	8005a74 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8004550:	2200      	movs	r2, #0
 8004552:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004556:	4826      	ldr	r0, [pc, #152]	; (80045f0 <EndEffectorWorkingState+0x1b0>)
 8004558:	f001 fa8c 	bl	8005a74 <HAL_GPIO_WritePin>
 800455c:	e013      	b.n	8004586 <EndEffectorWorkingState+0x146>
			else if (GripperStatus[0] == 0x78)
 800455e:	4b22      	ldr	r3, [pc, #136]	; (80045e8 <EndEffectorWorkingState+0x1a8>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b78      	cmp	r3, #120	; 0x78
 8004564:	d10f      	bne.n	8004586 <EndEffectorWorkingState+0x146>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8004566:	2201      	movs	r2, #1
 8004568:	2102      	movs	r1, #2
 800456a:	4820      	ldr	r0, [pc, #128]	; (80045ec <EndEffectorWorkingState+0x1ac>)
 800456c:	f001 fa82 	bl	8005a74 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8004570:	2201      	movs	r2, #1
 8004572:	2104      	movs	r1, #4
 8004574:	481d      	ldr	r0, [pc, #116]	; (80045ec <EndEffectorWorkingState+0x1ac>)
 8004576:	f001 fa7d 	bl	8005a74 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 800457a:	2201      	movs	r2, #1
 800457c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004580:	481b      	ldr	r0, [pc, #108]	; (80045f0 <EndEffectorWorkingState+0x1b0>)
 8004582:	f001 fa77 	bl	8005a74 <HAL_GPIO_WritePin>
			if (micros() - Timestamp_Gripper >= 5100000)
 8004586:	f7fd fb9b 	bl	8001cc0 <micros>
 800458a:	4b16      	ldr	r3, [pc, #88]	; (80045e4 <EndEffectorWorkingState+0x1a4>)
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	1a84      	subs	r4, r0, r2
 8004592:	eb61 0503 	sbc.w	r5, r1, r3
 8004596:	a30e      	add	r3, pc, #56	; (adr r3, 80045d0 <EndEffectorWorkingState+0x190>)
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	42ab      	cmp	r3, r5
 800459e:	bf08      	it	eq
 80045a0:	42a2      	cmpeq	r2, r4
 80045a2:	d20f      	bcs.n	80045c4 <EndEffectorWorkingState+0x184>
				GripperState = 0;
 80045a4:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <EndEffectorWorkingState+0x19c>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	701a      	strb	r2, [r3, #0]
				Munmunbot_State = STATE_PrepareDATA;
 80045aa:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <EndEffectorWorkingState+0x1b4>)
 80045ac:	2202      	movs	r2, #2
 80045ae:	701a      	strb	r2, [r3, #0]
				PID_Reset();
 80045b0:	f7ff fc38 	bl	8003e24 <PID_Reset>
}
 80045b4:	e006      	b.n	80045c4 <EndEffectorWorkingState+0x184>
	  else if(GripperEnable == 0)
 80045b6:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <EndEffectorWorkingState+0x198>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d102      	bne.n	80045c4 <EndEffectorWorkingState+0x184>
		 Munmunbot_State = STATE_PrepareDATA;
 80045be:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <EndEffectorWorkingState+0x1b4>)
 80045c0:	2202      	movs	r2, #2
 80045c2:	701a      	strb	r2, [r3, #0]
}
 80045c4:	bf00      	nop
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bdb0      	pop	{r4, r5, r7, pc}
 80045cc:	f3af 8000 	nop.w
 80045d0:	004dd1df 	.word	0x004dd1df
 80045d4:	00000000 	.word	0x00000000
 80045d8:	20000014 	.word	0x20000014
 80045dc:	200001ea 	.word	0x200001ea
 80045e0:	20000550 	.word	0x20000550
 80045e4:	200001f0 	.word	0x200001f0
 80045e8:	200001ec 	.word	0x200001ec
 80045ec:	40020400 	.word	0x40020400
 80045f0:	40020000 	.word	0x40020000
 80045f4:	200000d9 	.word	0x200000d9

080045f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80045fc:	b672      	cpsid	i
}
 80045fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004600:	e7fe      	b.n	8004600 <Error_Handler+0x8>
	...

08004604 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800460a:	2300      	movs	r3, #0
 800460c:	607b      	str	r3, [r7, #4]
 800460e:	4b10      	ldr	r3, [pc, #64]	; (8004650 <HAL_MspInit+0x4c>)
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	4a0f      	ldr	r2, [pc, #60]	; (8004650 <HAL_MspInit+0x4c>)
 8004614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004618:	6453      	str	r3, [r2, #68]	; 0x44
 800461a:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <HAL_MspInit+0x4c>)
 800461c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004622:	607b      	str	r3, [r7, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004626:	2300      	movs	r3, #0
 8004628:	603b      	str	r3, [r7, #0]
 800462a:	4b09      	ldr	r3, [pc, #36]	; (8004650 <HAL_MspInit+0x4c>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	4a08      	ldr	r2, [pc, #32]	; (8004650 <HAL_MspInit+0x4c>)
 8004630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004634:	6413      	str	r3, [r2, #64]	; 0x40
 8004636:	4b06      	ldr	r3, [pc, #24]	; (8004650 <HAL_MspInit+0x4c>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004642:	2007      	movs	r0, #7
 8004644:	f000 fc28 	bl	8004e98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004648:	bf00      	nop
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40023800 	.word	0x40023800

08004654 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08a      	sub	sp, #40	; 0x28
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800465c:	f107 0314 	add.w	r3, r7, #20
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	605a      	str	r2, [r3, #4]
 8004666:	609a      	str	r2, [r3, #8]
 8004668:	60da      	str	r2, [r3, #12]
 800466a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a21      	ldr	r2, [pc, #132]	; (80046f8 <HAL_I2C_MspInit+0xa4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d13c      	bne.n	80046f0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	4b20      	ldr	r3, [pc, #128]	; (80046fc <HAL_I2C_MspInit+0xa8>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	4a1f      	ldr	r2, [pc, #124]	; (80046fc <HAL_I2C_MspInit+0xa8>)
 8004680:	f043 0302 	orr.w	r3, r3, #2
 8004684:	6313      	str	r3, [r2, #48]	; 0x30
 8004686:	4b1d      	ldr	r3, [pc, #116]	; (80046fc <HAL_I2C_MspInit+0xa8>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004692:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004698:	2312      	movs	r3, #18
 800469a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800469c:	2301      	movs	r3, #1
 800469e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a0:	2303      	movs	r3, #3
 80046a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80046a4:	2304      	movs	r3, #4
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046a8:	f107 0314 	add.w	r3, r7, #20
 80046ac:	4619      	mov	r1, r3
 80046ae:	4814      	ldr	r0, [pc, #80]	; (8004700 <HAL_I2C_MspInit+0xac>)
 80046b0:	f001 f844 	bl	800573c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	4b10      	ldr	r3, [pc, #64]	; (80046fc <HAL_I2C_MspInit+0xa8>)
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	4a0f      	ldr	r2, [pc, #60]	; (80046fc <HAL_I2C_MspInit+0xa8>)
 80046be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046c2:	6413      	str	r3, [r2, #64]	; 0x40
 80046c4:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <HAL_I2C_MspInit+0xa8>)
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80046d0:	2200      	movs	r2, #0
 80046d2:	2100      	movs	r1, #0
 80046d4:	201f      	movs	r0, #31
 80046d6:	f000 fbea 	bl	8004eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80046da:	201f      	movs	r0, #31
 80046dc:	f000 fc03 	bl	8004ee6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80046e0:	2200      	movs	r2, #0
 80046e2:	2100      	movs	r1, #0
 80046e4:	2020      	movs	r0, #32
 80046e6:	f000 fbe2 	bl	8004eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80046ea:	2020      	movs	r0, #32
 80046ec:	f000 fbfb 	bl	8004ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80046f0:	bf00      	nop
 80046f2:	3728      	adds	r7, #40	; 0x28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40005400 	.word	0x40005400
 80046fc:	40023800 	.word	0x40023800
 8004700:	40020400 	.word	0x40020400

08004704 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08a      	sub	sp, #40	; 0x28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800470c:	f107 0314 	add.w	r3, r7, #20
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a19      	ldr	r2, [pc, #100]	; (8004788 <HAL_TIM_Encoder_MspInit+0x84>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d12c      	bne.n	8004780 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004726:	2300      	movs	r3, #0
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	4b18      	ldr	r3, [pc, #96]	; (800478c <HAL_TIM_Encoder_MspInit+0x88>)
 800472c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472e:	4a17      	ldr	r2, [pc, #92]	; (800478c <HAL_TIM_Encoder_MspInit+0x88>)
 8004730:	f043 0301 	orr.w	r3, r3, #1
 8004734:	6453      	str	r3, [r2, #68]	; 0x44
 8004736:	4b15      	ldr	r3, [pc, #84]	; (800478c <HAL_TIM_Encoder_MspInit+0x88>)
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	4b11      	ldr	r3, [pc, #68]	; (800478c <HAL_TIM_Encoder_MspInit+0x88>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	4a10      	ldr	r2, [pc, #64]	; (800478c <HAL_TIM_Encoder_MspInit+0x88>)
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	6313      	str	r3, [r2, #48]	; 0x30
 8004752:	4b0e      	ldr	r3, [pc, #56]	; (800478c <HAL_TIM_Encoder_MspInit+0x88>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Encoder_A_Pin|Motor_Encoder_B_Pin;
 800475e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004764:	2302      	movs	r3, #2
 8004766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004768:	2300      	movs	r3, #0
 800476a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800476c:	2300      	movs	r3, #0
 800476e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004770:	2301      	movs	r3, #1
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004774:	f107 0314 	add.w	r3, r7, #20
 8004778:	4619      	mov	r1, r3
 800477a:	4805      	ldr	r0, [pc, #20]	; (8004790 <HAL_TIM_Encoder_MspInit+0x8c>)
 800477c:	f000 ffde 	bl	800573c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004780:	bf00      	nop
 8004782:	3728      	adds	r7, #40	; 0x28
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40010000 	.word	0x40010000
 800478c:	40023800 	.word	0x40023800
 8004790:	40020000 	.word	0x40020000

08004794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a4:	d116      	bne.n	80047d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	4b16      	ldr	r3, [pc, #88]	; (8004804 <HAL_TIM_Base_MspInit+0x70>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	4a15      	ldr	r2, [pc, #84]	; (8004804 <HAL_TIM_Base_MspInit+0x70>)
 80047b0:	f043 0301 	orr.w	r3, r3, #1
 80047b4:	6413      	str	r3, [r2, #64]	; 0x40
 80047b6:	4b13      	ldr	r3, [pc, #76]	; (8004804 <HAL_TIM_Base_MspInit+0x70>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80047c2:	2200      	movs	r2, #0
 80047c4:	2100      	movs	r1, #0
 80047c6:	201c      	movs	r0, #28
 80047c8:	f000 fb71 	bl	8004eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80047cc:	201c      	movs	r0, #28
 80047ce:	f000 fb8a 	bl	8004ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80047d2:	e012      	b.n	80047fa <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a0b      	ldr	r2, [pc, #44]	; (8004808 <HAL_TIM_Base_MspInit+0x74>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d10d      	bne.n	80047fa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047de:	2300      	movs	r3, #0
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	4b08      	ldr	r3, [pc, #32]	; (8004804 <HAL_TIM_Base_MspInit+0x70>)
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	4a07      	ldr	r2, [pc, #28]	; (8004804 <HAL_TIM_Base_MspInit+0x70>)
 80047e8:	f043 0302 	orr.w	r3, r3, #2
 80047ec:	6413      	str	r3, [r2, #64]	; 0x40
 80047ee:	4b05      	ldr	r3, [pc, #20]	; (8004804 <HAL_TIM_Base_MspInit+0x70>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	60bb      	str	r3, [r7, #8]
 80047f8:	68bb      	ldr	r3, [r7, #8]
}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40023800 	.word	0x40023800
 8004808:	40000400 	.word	0x40000400

0800480c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004814:	f107 030c 	add.w	r3, r7, #12
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	605a      	str	r2, [r3, #4]
 800481e:	609a      	str	r2, [r3, #8]
 8004820:	60da      	str	r2, [r3, #12]
 8004822:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a12      	ldr	r2, [pc, #72]	; (8004874 <HAL_TIM_MspPostInit+0x68>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d11d      	bne.n	800486a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800482e:	2300      	movs	r3, #0
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	4b11      	ldr	r3, [pc, #68]	; (8004878 <HAL_TIM_MspPostInit+0x6c>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	4a10      	ldr	r2, [pc, #64]	; (8004878 <HAL_TIM_MspPostInit+0x6c>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	6313      	str	r3, [r2, #48]	; 0x30
 800483e:	4b0e      	ldr	r3, [pc, #56]	; (8004878 <HAL_TIM_MspPostInit+0x6c>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	60bb      	str	r3, [r7, #8]
 8004848:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_Generation_Pin;
 800484a:	2340      	movs	r3, #64	; 0x40
 800484c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484e:	2302      	movs	r3, #2
 8004850:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004856:	2300      	movs	r3, #0
 8004858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800485a:	2302      	movs	r3, #2
 800485c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Generation_GPIO_Port, &GPIO_InitStruct);
 800485e:	f107 030c 	add.w	r3, r7, #12
 8004862:	4619      	mov	r1, r3
 8004864:	4805      	ldr	r0, [pc, #20]	; (800487c <HAL_TIM_MspPostInit+0x70>)
 8004866:	f000 ff69 	bl	800573c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800486a:	bf00      	nop
 800486c:	3720      	adds	r7, #32
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40000400 	.word	0x40000400
 8004878:	40023800 	.word	0x40023800
 800487c:	40020000 	.word	0x40020000

08004880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b08a      	sub	sp, #40	; 0x28
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004888:	f107 0314 	add.w	r3, r7, #20
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	605a      	str	r2, [r3, #4]
 8004892:	609a      	str	r2, [r3, #8]
 8004894:	60da      	str	r2, [r3, #12]
 8004896:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a4c      	ldr	r2, [pc, #304]	; (80049d0 <HAL_UART_MspInit+0x150>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	f040 8091 	bne.w	80049c6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	4b4a      	ldr	r3, [pc, #296]	; (80049d4 <HAL_UART_MspInit+0x154>)
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	4a49      	ldr	r2, [pc, #292]	; (80049d4 <HAL_UART_MspInit+0x154>)
 80048ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048b2:	6413      	str	r3, [r2, #64]	; 0x40
 80048b4:	4b47      	ldr	r3, [pc, #284]	; (80049d4 <HAL_UART_MspInit+0x154>)
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	4b43      	ldr	r3, [pc, #268]	; (80049d4 <HAL_UART_MspInit+0x154>)
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	4a42      	ldr	r2, [pc, #264]	; (80049d4 <HAL_UART_MspInit+0x154>)
 80048ca:	f043 0301 	orr.w	r3, r3, #1
 80048ce:	6313      	str	r3, [r2, #48]	; 0x30
 80048d0:	4b40      	ldr	r3, [pc, #256]	; (80049d4 <HAL_UART_MspInit+0x154>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80048dc:	230c      	movs	r3, #12
 80048de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e0:	2302      	movs	r3, #2
 80048e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e8:	2303      	movs	r3, #3
 80048ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048ec:	2307      	movs	r3, #7
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048f0:	f107 0314 	add.w	r3, r7, #20
 80048f4:	4619      	mov	r1, r3
 80048f6:	4838      	ldr	r0, [pc, #224]	; (80049d8 <HAL_UART_MspInit+0x158>)
 80048f8:	f000 ff20 	bl	800573c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80048fc:	4b37      	ldr	r3, [pc, #220]	; (80049dc <HAL_UART_MspInit+0x15c>)
 80048fe:	4a38      	ldr	r2, [pc, #224]	; (80049e0 <HAL_UART_MspInit+0x160>)
 8004900:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004902:	4b36      	ldr	r3, [pc, #216]	; (80049dc <HAL_UART_MspInit+0x15c>)
 8004904:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004908:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800490a:	4b34      	ldr	r3, [pc, #208]	; (80049dc <HAL_UART_MspInit+0x15c>)
 800490c:	2240      	movs	r2, #64	; 0x40
 800490e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004910:	4b32      	ldr	r3, [pc, #200]	; (80049dc <HAL_UART_MspInit+0x15c>)
 8004912:	2200      	movs	r2, #0
 8004914:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004916:	4b31      	ldr	r3, [pc, #196]	; (80049dc <HAL_UART_MspInit+0x15c>)
 8004918:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800491c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800491e:	4b2f      	ldr	r3, [pc, #188]	; (80049dc <HAL_UART_MspInit+0x15c>)
 8004920:	2200      	movs	r2, #0
 8004922:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004924:	4b2d      	ldr	r3, [pc, #180]	; (80049dc <HAL_UART_MspInit+0x15c>)
 8004926:	2200      	movs	r2, #0
 8004928:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800492a:	4b2c      	ldr	r3, [pc, #176]	; (80049dc <HAL_UART_MspInit+0x15c>)
 800492c:	2200      	movs	r2, #0
 800492e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004930:	4b2a      	ldr	r3, [pc, #168]	; (80049dc <HAL_UART_MspInit+0x15c>)
 8004932:	2200      	movs	r2, #0
 8004934:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004936:	4b29      	ldr	r3, [pc, #164]	; (80049dc <HAL_UART_MspInit+0x15c>)
 8004938:	2200      	movs	r2, #0
 800493a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800493c:	4827      	ldr	r0, [pc, #156]	; (80049dc <HAL_UART_MspInit+0x15c>)
 800493e:	f000 faed 	bl	8004f1c <HAL_DMA_Init>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004948:	f7ff fe56 	bl	80045f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a23      	ldr	r2, [pc, #140]	; (80049dc <HAL_UART_MspInit+0x15c>)
 8004950:	635a      	str	r2, [r3, #52]	; 0x34
 8004952:	4a22      	ldr	r2, [pc, #136]	; (80049dc <HAL_UART_MspInit+0x15c>)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004958:	4b22      	ldr	r3, [pc, #136]	; (80049e4 <HAL_UART_MspInit+0x164>)
 800495a:	4a23      	ldr	r2, [pc, #140]	; (80049e8 <HAL_UART_MspInit+0x168>)
 800495c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800495e:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <HAL_UART_MspInit+0x164>)
 8004960:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004964:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004966:	4b1f      	ldr	r3, [pc, #124]	; (80049e4 <HAL_UART_MspInit+0x164>)
 8004968:	2200      	movs	r2, #0
 800496a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800496c:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <HAL_UART_MspInit+0x164>)
 800496e:	2200      	movs	r2, #0
 8004970:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004972:	4b1c      	ldr	r3, [pc, #112]	; (80049e4 <HAL_UART_MspInit+0x164>)
 8004974:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004978:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800497a:	4b1a      	ldr	r3, [pc, #104]	; (80049e4 <HAL_UART_MspInit+0x164>)
 800497c:	2200      	movs	r2, #0
 800497e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004980:	4b18      	ldr	r3, [pc, #96]	; (80049e4 <HAL_UART_MspInit+0x164>)
 8004982:	2200      	movs	r2, #0
 8004984:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004986:	4b17      	ldr	r3, [pc, #92]	; (80049e4 <HAL_UART_MspInit+0x164>)
 8004988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800498c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800498e:	4b15      	ldr	r3, [pc, #84]	; (80049e4 <HAL_UART_MspInit+0x164>)
 8004990:	2200      	movs	r2, #0
 8004992:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004994:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <HAL_UART_MspInit+0x164>)
 8004996:	2200      	movs	r2, #0
 8004998:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800499a:	4812      	ldr	r0, [pc, #72]	; (80049e4 <HAL_UART_MspInit+0x164>)
 800499c:	f000 fabe 	bl	8004f1c <HAL_DMA_Init>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80049a6:	f7ff fe27 	bl	80045f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a0d      	ldr	r2, [pc, #52]	; (80049e4 <HAL_UART_MspInit+0x164>)
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38
 80049b0:	4a0c      	ldr	r2, [pc, #48]	; (80049e4 <HAL_UART_MspInit+0x164>)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80049b6:	2200      	movs	r2, #0
 80049b8:	2100      	movs	r1, #0
 80049ba:	2026      	movs	r0, #38	; 0x26
 80049bc:	f000 fa77 	bl	8004eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80049c0:	2026      	movs	r0, #38	; 0x26
 80049c2:	f000 fa90 	bl	8004ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80049c6:	bf00      	nop
 80049c8:	3728      	adds	r7, #40	; 0x28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40004400 	.word	0x40004400
 80049d4:	40023800 	.word	0x40023800
 80049d8:	40020000 	.word	0x40020000
 80049dc:	200005ec 	.word	0x200005ec
 80049e0:	400260a0 	.word	0x400260a0
 80049e4:	200004f0 	.word	0x200004f0
 80049e8:	40026088 	.word	0x40026088

080049ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049f0:	e7fe      	b.n	80049f0 <NMI_Handler+0x4>

080049f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049f2:	b480      	push	{r7}
 80049f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049f6:	e7fe      	b.n	80049f6 <HardFault_Handler+0x4>

080049f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049fc:	e7fe      	b.n	80049fc <MemManage_Handler+0x4>

080049fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049fe:	b480      	push	{r7}
 8004a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a02:	e7fe      	b.n	8004a02 <BusFault_Handler+0x4>

08004a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a08:	e7fe      	b.n	8004a08 <UsageFault_Handler+0x4>

08004a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a0e:	bf00      	nop
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a1c:	bf00      	nop
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a26:	b480      	push	{r7}
 8004a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a2a:	bf00      	nop
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a38:	f000 f91a 	bl	8004c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a3c:	bf00      	nop
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004a44:	4802      	ldr	r0, [pc, #8]	; (8004a50 <DMA1_Stream5_IRQHandler+0x10>)
 8004a46:	f000 fc01 	bl	800524c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	200004f0 	.word	0x200004f0

08004a54 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004a58:	4802      	ldr	r0, [pc, #8]	; (8004a64 <DMA1_Stream6_IRQHandler+0x10>)
 8004a5a:	f000 fbf7 	bl	800524c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004a5e:	bf00      	nop
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	200005ec 	.word	0x200005ec

08004a68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004a6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004a70:	f001 f81a 	bl	8005aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004a74:	bf00      	nop
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a7c:	4802      	ldr	r0, [pc, #8]	; (8004a88 <TIM2_IRQHandler+0x10>)
 8004a7e:	f003 ff37 	bl	80088f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a82:	bf00      	nop
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000694 	.word	0x20000694

08004a8c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004a90:	4802      	ldr	r0, [pc, #8]	; (8004a9c <I2C1_EV_IRQHandler+0x10>)
 8004a92:	f001 fab9 	bl	8006008 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004a96:	bf00      	nop
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000550 	.word	0x20000550

08004aa0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004aa4:	4802      	ldr	r0, [pc, #8]	; (8004ab0 <I2C1_ER_IRQHandler+0x10>)
 8004aa6:	f001 fc1c 	bl	80062e2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004aaa:	bf00      	nop
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000550 	.word	0x20000550

08004ab4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ab8:	4802      	ldr	r0, [pc, #8]	; (8004ac4 <USART2_IRQHandler+0x10>)
 8004aba:	f004 fe03 	bl	80096c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004abe:	bf00      	nop
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	200006dc 	.word	0x200006dc

08004ac8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004acc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004ad0:	f000 ffea 	bl	8005aa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004ad4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004ad8:	f000 ffe6 	bl	8005aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004adc:	bf00      	nop
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ae8:	4a14      	ldr	r2, [pc, #80]	; (8004b3c <_sbrk+0x5c>)
 8004aea:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <_sbrk+0x60>)
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004af4:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <_sbrk+0x64>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d102      	bne.n	8004b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004afc:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <_sbrk+0x64>)
 8004afe:	4a12      	ldr	r2, [pc, #72]	; (8004b48 <_sbrk+0x68>)
 8004b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b02:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <_sbrk+0x64>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4413      	add	r3, r2
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d207      	bcs.n	8004b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b10:	f005 fc34 	bl	800a37c <__errno>
 8004b14:	4603      	mov	r3, r0
 8004b16:	220c      	movs	r2, #12
 8004b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1e:	e009      	b.n	8004b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b20:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <_sbrk+0x64>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b26:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <_sbrk+0x64>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	4a05      	ldr	r2, [pc, #20]	; (8004b44 <_sbrk+0x64>)
 8004b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b32:	68fb      	ldr	r3, [r7, #12]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20020000 	.word	0x20020000
 8004b40:	00000400 	.word	0x00000400
 8004b44:	200004e4 	.word	0x200004e4
 8004b48:	20000738 	.word	0x20000738

08004b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b50:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <SystemInit+0x28>)
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b56:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <SystemInit+0x28>)
 8004b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b60:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <SystemInit+0x28>)
 8004b62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b66:	609a      	str	r2, [r3, #8]
#endif
}
 8004b68:	bf00      	nop
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	e000ed00 	.word	0xe000ed00

08004b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004b7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004b7e:	e003      	b.n	8004b88 <LoopCopyDataInit>

08004b80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004b80:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004b82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004b84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004b86:	3104      	adds	r1, #4

08004b88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004b88:	480b      	ldr	r0, [pc, #44]	; (8004bb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004b8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004b8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004b90:	d3f6      	bcc.n	8004b80 <CopyDataInit>
  ldr  r2, =_sbss
 8004b92:	4a0b      	ldr	r2, [pc, #44]	; (8004bc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004b94:	e002      	b.n	8004b9c <LoopFillZerobss>

08004b96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004b96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004b98:	f842 3b04 	str.w	r3, [r2], #4

08004b9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004b9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ba0:	d3f9      	bcc.n	8004b96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004ba2:	f7ff ffd3 	bl	8004b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ba6:	f005 fbef 	bl	800a388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004baa:	f7fc fa7d 	bl	80010a8 <main>
  bx  lr    
 8004bae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004bb0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004bb4:	0800a73c 	.word	0x0800a73c
  ldr  r0, =_sdata
 8004bb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004bbc:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8004bc0:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8004bc4:	20000734 	.word	0x20000734

08004bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004bc8:	e7fe      	b.n	8004bc8 <ADC_IRQHandler>
	...

08004bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004bd0:	4b0e      	ldr	r3, [pc, #56]	; (8004c0c <HAL_Init+0x40>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a0d      	ldr	r2, [pc, #52]	; (8004c0c <HAL_Init+0x40>)
 8004bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <HAL_Init+0x40>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a0a      	ldr	r2, [pc, #40]	; (8004c0c <HAL_Init+0x40>)
 8004be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004be8:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <HAL_Init+0x40>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a07      	ldr	r2, [pc, #28]	; (8004c0c <HAL_Init+0x40>)
 8004bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bf4:	2003      	movs	r0, #3
 8004bf6:	f000 f94f 	bl	8004e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	f000 f808 	bl	8004c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c00:	f7ff fd00 	bl	8004604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40023c00 	.word	0x40023c00

08004c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c18:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <HAL_InitTick+0x54>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b12      	ldr	r3, [pc, #72]	; (8004c68 <HAL_InitTick+0x58>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	4619      	mov	r1, r3
 8004c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 f967 	bl	8004f02 <HAL_SYSTICK_Config>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e00e      	b.n	8004c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b0f      	cmp	r3, #15
 8004c42:	d80a      	bhi.n	8004c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c44:	2200      	movs	r2, #0
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4c:	f000 f92f 	bl	8004eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c50:	4a06      	ldr	r2, [pc, #24]	; (8004c6c <HAL_InitTick+0x5c>)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	e000      	b.n	8004c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20000018 	.word	0x20000018
 8004c68:	20000020 	.word	0x20000020
 8004c6c:	2000001c 	.word	0x2000001c

08004c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c74:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <HAL_IncTick+0x20>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <HAL_IncTick+0x24>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4413      	add	r3, r2
 8004c80:	4a04      	ldr	r2, [pc, #16]	; (8004c94 <HAL_IncTick+0x24>)
 8004c82:	6013      	str	r3, [r2, #0]
}
 8004c84:	bf00      	nop
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	20000020 	.word	0x20000020
 8004c94:	20000720 	.word	0x20000720

08004c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c9c:	4b03      	ldr	r3, [pc, #12]	; (8004cac <HAL_GetTick+0x14>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	20000720 	.word	0x20000720

08004cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cb8:	f7ff ffee 	bl	8004c98 <HAL_GetTick>
 8004cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc8:	d005      	beq.n	8004cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cca:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <HAL_Delay+0x44>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004cd6:	bf00      	nop
 8004cd8:	f7ff ffde 	bl	8004c98 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d8f7      	bhi.n	8004cd8 <HAL_Delay+0x28>
  {
  }
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20000020 	.word	0x20000020

08004cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d08:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <__NVIC_SetPriorityGrouping+0x44>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d14:	4013      	ands	r3, r2
 8004d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d2a:	4a04      	ldr	r2, [pc, #16]	; (8004d3c <__NVIC_SetPriorityGrouping+0x44>)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	60d3      	str	r3, [r2, #12]
}
 8004d30:	bf00      	nop
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	e000ed00 	.word	0xe000ed00

08004d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d44:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <__NVIC_GetPriorityGrouping+0x18>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	0a1b      	lsrs	r3, r3, #8
 8004d4a:	f003 0307 	and.w	r3, r3, #7
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	e000ed00 	.word	0xe000ed00

08004d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	db0b      	blt.n	8004d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	f003 021f 	and.w	r2, r3, #31
 8004d74:	4907      	ldr	r1, [pc, #28]	; (8004d94 <__NVIC_EnableIRQ+0x38>)
 8004d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	2001      	movs	r0, #1
 8004d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	e000e100 	.word	0xe000e100

08004d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	4603      	mov	r3, r0
 8004da0:	6039      	str	r1, [r7, #0]
 8004da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	db0a      	blt.n	8004dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	490c      	ldr	r1, [pc, #48]	; (8004de4 <__NVIC_SetPriority+0x4c>)
 8004db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db6:	0112      	lsls	r2, r2, #4
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	440b      	add	r3, r1
 8004dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dc0:	e00a      	b.n	8004dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	4908      	ldr	r1, [pc, #32]	; (8004de8 <__NVIC_SetPriority+0x50>)
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	3b04      	subs	r3, #4
 8004dd0:	0112      	lsls	r2, r2, #4
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	761a      	strb	r2, [r3, #24]
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	e000e100 	.word	0xe000e100
 8004de8:	e000ed00 	.word	0xe000ed00

08004dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b089      	sub	sp, #36	; 0x24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f1c3 0307 	rsb	r3, r3, #7
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	bf28      	it	cs
 8004e0a:	2304      	movcs	r3, #4
 8004e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	3304      	adds	r3, #4
 8004e12:	2b06      	cmp	r3, #6
 8004e14:	d902      	bls.n	8004e1c <NVIC_EncodePriority+0x30>
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	3b03      	subs	r3, #3
 8004e1a:	e000      	b.n	8004e1e <NVIC_EncodePriority+0x32>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e20:	f04f 32ff 	mov.w	r2, #4294967295
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	43da      	mvns	r2, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	401a      	ands	r2, r3
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e34:	f04f 31ff 	mov.w	r1, #4294967295
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3e:	43d9      	mvns	r1, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e44:	4313      	orrs	r3, r2
         );
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3724      	adds	r7, #36	; 0x24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e64:	d301      	bcc.n	8004e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e66:	2301      	movs	r3, #1
 8004e68:	e00f      	b.n	8004e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e6a:	4a0a      	ldr	r2, [pc, #40]	; (8004e94 <SysTick_Config+0x40>)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e72:	210f      	movs	r1, #15
 8004e74:	f04f 30ff 	mov.w	r0, #4294967295
 8004e78:	f7ff ff8e 	bl	8004d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <SysTick_Config+0x40>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e82:	4b04      	ldr	r3, [pc, #16]	; (8004e94 <SysTick_Config+0x40>)
 8004e84:	2207      	movs	r2, #7
 8004e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	e000e010 	.word	0xe000e010

08004e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff ff29 	bl	8004cf8 <__NVIC_SetPriorityGrouping>
}
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b086      	sub	sp, #24
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
 8004eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ec0:	f7ff ff3e 	bl	8004d40 <__NVIC_GetPriorityGrouping>
 8004ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	6978      	ldr	r0, [r7, #20]
 8004ecc:	f7ff ff8e 	bl	8004dec <NVIC_EncodePriority>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff ff5d 	bl	8004d98 <__NVIC_SetPriority>
}
 8004ede:	bf00      	nop
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b082      	sub	sp, #8
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	4603      	mov	r3, r0
 8004eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff ff31 	bl	8004d5c <__NVIC_EnableIRQ>
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b082      	sub	sp, #8
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff ffa2 	bl	8004e54 <SysTick_Config>
 8004f10:	4603      	mov	r3, r0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f28:	f7ff feb6 	bl	8004c98 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e099      	b.n	800506c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0201 	bic.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f58:	e00f      	b.n	8004f7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f5a:	f7ff fe9d 	bl	8004c98 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b05      	cmp	r3, #5
 8004f66:	d908      	bls.n	8004f7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2203      	movs	r2, #3
 8004f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e078      	b.n	800506c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1e8      	bne.n	8004f5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	4b38      	ldr	r3, [pc, #224]	; (8005074 <HAL_DMA_Init+0x158>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d107      	bne.n	8004fe4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0307 	bic.w	r3, r3, #7
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	2b04      	cmp	r3, #4
 800500c:	d117      	bne.n	800503e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00e      	beq.n	800503e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fb0f 	bl	8005644 <DMA_CheckFifoParam>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d008      	beq.n	800503e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2240      	movs	r2, #64	; 0x40
 8005030:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800503a:	2301      	movs	r3, #1
 800503c:	e016      	b.n	800506c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fac6 	bl	80055d8 <DMA_CalcBaseAndBitshift>
 800504c:	4603      	mov	r3, r0
 800504e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005054:	223f      	movs	r2, #63	; 0x3f
 8005056:	409a      	lsls	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	f010803f 	.word	0xf010803f

08005078 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_DMA_Start_IT+0x26>
 800509a:	2302      	movs	r3, #2
 800509c:	e040      	b.n	8005120 <HAL_DMA_Start_IT+0xa8>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d12f      	bne.n	8005112 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2202      	movs	r2, #2
 80050b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	68b9      	ldr	r1, [r7, #8]
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 fa58 	bl	800557c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d0:	223f      	movs	r2, #63	; 0x3f
 80050d2:	409a      	lsls	r2, r3
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0216 	orr.w	r2, r2, #22
 80050e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0208 	orr.w	r2, r2, #8
 80050fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	e005      	b.n	800511e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800511a:	2302      	movs	r3, #2
 800511c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800511e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005134:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005136:	f7ff fdaf 	bl	8004c98 <HAL_GetTick>
 800513a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d008      	beq.n	800515a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2280      	movs	r2, #128	; 0x80
 800514c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e052      	b.n	8005200 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0216 	bic.w	r2, r2, #22
 8005168:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695a      	ldr	r2, [r3, #20]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005178:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	d103      	bne.n	800518a <HAL_DMA_Abort+0x62>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005186:	2b00      	cmp	r3, #0
 8005188:	d007      	beq.n	800519a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0208 	bic.w	r2, r2, #8
 8005198:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0201 	bic.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051aa:	e013      	b.n	80051d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051ac:	f7ff fd74 	bl	8004c98 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b05      	cmp	r3, #5
 80051b8:	d90c      	bls.n	80051d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2203      	movs	r2, #3
 80051cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e015      	b.n	8005200 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e4      	bne.n	80051ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e6:	223f      	movs	r2, #63	; 0x3f
 80051e8:	409a      	lsls	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d004      	beq.n	8005226 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2280      	movs	r2, #128	; 0x80
 8005220:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e00c      	b.n	8005240 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2205      	movs	r2, #5
 800522a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0201 	bic.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005258:	4b92      	ldr	r3, [pc, #584]	; (80054a4 <HAL_DMA_IRQHandler+0x258>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a92      	ldr	r2, [pc, #584]	; (80054a8 <HAL_DMA_IRQHandler+0x25c>)
 800525e:	fba2 2303 	umull	r2, r3, r2, r3
 8005262:	0a9b      	lsrs	r3, r3, #10
 8005264:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005276:	2208      	movs	r2, #8
 8005278:	409a      	lsls	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4013      	ands	r3, r2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01a      	beq.n	80052b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d013      	beq.n	80052b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0204 	bic.w	r2, r2, #4
 800529e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a4:	2208      	movs	r2, #8
 80052a6:	409a      	lsls	r2, r3
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b0:	f043 0201 	orr.w	r2, r3, #1
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052bc:	2201      	movs	r2, #1
 80052be:	409a      	lsls	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d012      	beq.n	80052ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052da:	2201      	movs	r2, #1
 80052dc:	409a      	lsls	r2, r3
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e6:	f043 0202 	orr.w	r2, r3, #2
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f2:	2204      	movs	r2, #4
 80052f4:	409a      	lsls	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4013      	ands	r3, r2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d012      	beq.n	8005324 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00b      	beq.n	8005324 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005310:	2204      	movs	r2, #4
 8005312:	409a      	lsls	r2, r3
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531c:	f043 0204 	orr.w	r2, r3, #4
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005328:	2210      	movs	r2, #16
 800532a:	409a      	lsls	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4013      	ands	r3, r2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d043      	beq.n	80053bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d03c      	beq.n	80053bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005346:	2210      	movs	r2, #16
 8005348:	409a      	lsls	r2, r3
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d018      	beq.n	800538e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d108      	bne.n	800537c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	d024      	beq.n	80053bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	4798      	blx	r3
 800537a:	e01f      	b.n	80053bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01b      	beq.n	80053bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	4798      	blx	r3
 800538c:	e016      	b.n	80053bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005398:	2b00      	cmp	r3, #0
 800539a:	d107      	bne.n	80053ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0208 	bic.w	r2, r2, #8
 80053aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c0:	2220      	movs	r2, #32
 80053c2:	409a      	lsls	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4013      	ands	r3, r2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 808e 	beq.w	80054ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 8086 	beq.w	80054ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e2:	2220      	movs	r2, #32
 80053e4:	409a      	lsls	r2, r3
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b05      	cmp	r3, #5
 80053f4:	d136      	bne.n	8005464 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0216 	bic.w	r2, r2, #22
 8005404:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695a      	ldr	r2, [r3, #20]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005414:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d103      	bne.n	8005426 <HAL_DMA_IRQHandler+0x1da>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0208 	bic.w	r2, r2, #8
 8005434:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800543a:	223f      	movs	r2, #63	; 0x3f
 800543c:	409a      	lsls	r2, r3
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005456:	2b00      	cmp	r3, #0
 8005458:	d07d      	beq.n	8005556 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	4798      	blx	r3
        }
        return;
 8005462:	e078      	b.n	8005556 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d01c      	beq.n	80054ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d108      	bne.n	8005492 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005484:	2b00      	cmp	r3, #0
 8005486:	d030      	beq.n	80054ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	4798      	blx	r3
 8005490:	e02b      	b.n	80054ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d027      	beq.n	80054ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	4798      	blx	r3
 80054a2:	e022      	b.n	80054ea <HAL_DMA_IRQHandler+0x29e>
 80054a4:	20000018 	.word	0x20000018
 80054a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10f      	bne.n	80054da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0210 	bic.w	r2, r2, #16
 80054c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d032      	beq.n	8005558 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d022      	beq.n	8005544 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2205      	movs	r2, #5
 8005502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0201 	bic.w	r2, r2, #1
 8005514:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	3301      	adds	r3, #1
 800551a:	60bb      	str	r3, [r7, #8]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	429a      	cmp	r2, r3
 8005520:	d307      	bcc.n	8005532 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1f2      	bne.n	8005516 <HAL_DMA_IRQHandler+0x2ca>
 8005530:	e000      	b.n	8005534 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005532:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005548:	2b00      	cmp	r3, #0
 800554a:	d005      	beq.n	8005558 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	4798      	blx	r3
 8005554:	e000      	b.n	8005558 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005556:	bf00      	nop
    }
  }
}
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop

08005560 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800556e:	b2db      	uxtb	r3, r3
}
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005598:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b40      	cmp	r3, #64	; 0x40
 80055a8:	d108      	bne.n	80055bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80055ba:	e007      	b.n	80055cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	60da      	str	r2, [r3, #12]
}
 80055cc:	bf00      	nop
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	3b10      	subs	r3, #16
 80055e8:	4a14      	ldr	r2, [pc, #80]	; (800563c <DMA_CalcBaseAndBitshift+0x64>)
 80055ea:	fba2 2303 	umull	r2, r3, r2, r3
 80055ee:	091b      	lsrs	r3, r3, #4
 80055f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80055f2:	4a13      	ldr	r2, [pc, #76]	; (8005640 <DMA_CalcBaseAndBitshift+0x68>)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4413      	add	r3, r2
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b03      	cmp	r3, #3
 8005604:	d909      	bls.n	800561a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800560e:	f023 0303 	bic.w	r3, r3, #3
 8005612:	1d1a      	adds	r2, r3, #4
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	659a      	str	r2, [r3, #88]	; 0x58
 8005618:	e007      	b.n	800562a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005622:	f023 0303 	bic.w	r3, r3, #3
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	aaaaaaab 	.word	0xaaaaaaab
 8005640:	0800a724 	.word	0x0800a724

08005644 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800564c:	2300      	movs	r3, #0
 800564e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005654:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d11f      	bne.n	800569e <DMA_CheckFifoParam+0x5a>
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2b03      	cmp	r3, #3
 8005662:	d856      	bhi.n	8005712 <DMA_CheckFifoParam+0xce>
 8005664:	a201      	add	r2, pc, #4	; (adr r2, 800566c <DMA_CheckFifoParam+0x28>)
 8005666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566a:	bf00      	nop
 800566c:	0800567d 	.word	0x0800567d
 8005670:	0800568f 	.word	0x0800568f
 8005674:	0800567d 	.word	0x0800567d
 8005678:	08005713 	.word	0x08005713
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d046      	beq.n	8005716 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800568c:	e043      	b.n	8005716 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005692:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005696:	d140      	bne.n	800571a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800569c:	e03d      	b.n	800571a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a6:	d121      	bne.n	80056ec <DMA_CheckFifoParam+0xa8>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d837      	bhi.n	800571e <DMA_CheckFifoParam+0xda>
 80056ae:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <DMA_CheckFifoParam+0x70>)
 80056b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b4:	080056c5 	.word	0x080056c5
 80056b8:	080056cb 	.word	0x080056cb
 80056bc:	080056c5 	.word	0x080056c5
 80056c0:	080056dd 	.word	0x080056dd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	73fb      	strb	r3, [r7, #15]
      break;
 80056c8:	e030      	b.n	800572c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d025      	beq.n	8005722 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056da:	e022      	b.n	8005722 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056e4:	d11f      	bne.n	8005726 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80056ea:	e01c      	b.n	8005726 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d903      	bls.n	80056fa <DMA_CheckFifoParam+0xb6>
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d003      	beq.n	8005700 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80056f8:	e018      	b.n	800572c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	73fb      	strb	r3, [r7, #15]
      break;
 80056fe:	e015      	b.n	800572c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00e      	beq.n	800572a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	73fb      	strb	r3, [r7, #15]
      break;
 8005710:	e00b      	b.n	800572a <DMA_CheckFifoParam+0xe6>
      break;
 8005712:	bf00      	nop
 8005714:	e00a      	b.n	800572c <DMA_CheckFifoParam+0xe8>
      break;
 8005716:	bf00      	nop
 8005718:	e008      	b.n	800572c <DMA_CheckFifoParam+0xe8>
      break;
 800571a:	bf00      	nop
 800571c:	e006      	b.n	800572c <DMA_CheckFifoParam+0xe8>
      break;
 800571e:	bf00      	nop
 8005720:	e004      	b.n	800572c <DMA_CheckFifoParam+0xe8>
      break;
 8005722:	bf00      	nop
 8005724:	e002      	b.n	800572c <DMA_CheckFifoParam+0xe8>
      break;   
 8005726:	bf00      	nop
 8005728:	e000      	b.n	800572c <DMA_CheckFifoParam+0xe8>
      break;
 800572a:	bf00      	nop
    }
  } 
  
  return status; 
 800572c:	7bfb      	ldrb	r3, [r7, #15]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop

0800573c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800573c:	b480      	push	{r7}
 800573e:	b089      	sub	sp, #36	; 0x24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800574a:	2300      	movs	r3, #0
 800574c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800574e:	2300      	movs	r3, #0
 8005750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	e159      	b.n	8005a0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005758:	2201      	movs	r2, #1
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4013      	ands	r3, r2
 800576a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	429a      	cmp	r2, r3
 8005772:	f040 8148 	bne.w	8005a06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	2b01      	cmp	r3, #1
 8005780:	d005      	beq.n	800578e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800578a:	2b02      	cmp	r3, #2
 800578c:	d130      	bne.n	80057f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	2203      	movs	r2, #3
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	43db      	mvns	r3, r3
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4013      	ands	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057c4:	2201      	movs	r2, #1
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4013      	ands	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	091b      	lsrs	r3, r3, #4
 80057da:	f003 0201 	and.w	r2, r3, #1
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f003 0303 	and.w	r3, r3, #3
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d017      	beq.n	800582c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	2203      	movs	r2, #3
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	43db      	mvns	r3, r3
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4013      	ands	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	fa02 f303 	lsl.w	r3, r2, r3
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	4313      	orrs	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f003 0303 	and.w	r3, r3, #3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d123      	bne.n	8005880 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	08da      	lsrs	r2, r3, #3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3208      	adds	r2, #8
 8005840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005844:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	220f      	movs	r2, #15
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	43db      	mvns	r3, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4013      	ands	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4313      	orrs	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	08da      	lsrs	r2, r3, #3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	3208      	adds	r2, #8
 800587a:	69b9      	ldr	r1, [r7, #24]
 800587c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	2203      	movs	r2, #3
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	43db      	mvns	r3, r3
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	4013      	ands	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 0203 	and.w	r2, r3, #3
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 80a2 	beq.w	8005a06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058c2:	2300      	movs	r3, #0
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	4b57      	ldr	r3, [pc, #348]	; (8005a24 <HAL_GPIO_Init+0x2e8>)
 80058c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ca:	4a56      	ldr	r2, [pc, #344]	; (8005a24 <HAL_GPIO_Init+0x2e8>)
 80058cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058d0:	6453      	str	r3, [r2, #68]	; 0x44
 80058d2:	4b54      	ldr	r3, [pc, #336]	; (8005a24 <HAL_GPIO_Init+0x2e8>)
 80058d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058de:	4a52      	ldr	r2, [pc, #328]	; (8005a28 <HAL_GPIO_Init+0x2ec>)
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	089b      	lsrs	r3, r3, #2
 80058e4:	3302      	adds	r3, #2
 80058e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	220f      	movs	r2, #15
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	43db      	mvns	r3, r3
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	4013      	ands	r3, r2
 8005900:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a49      	ldr	r2, [pc, #292]	; (8005a2c <HAL_GPIO_Init+0x2f0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d019      	beq.n	800593e <HAL_GPIO_Init+0x202>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a48      	ldr	r2, [pc, #288]	; (8005a30 <HAL_GPIO_Init+0x2f4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <HAL_GPIO_Init+0x1fe>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a47      	ldr	r2, [pc, #284]	; (8005a34 <HAL_GPIO_Init+0x2f8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00d      	beq.n	8005936 <HAL_GPIO_Init+0x1fa>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a46      	ldr	r2, [pc, #280]	; (8005a38 <HAL_GPIO_Init+0x2fc>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d007      	beq.n	8005932 <HAL_GPIO_Init+0x1f6>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a45      	ldr	r2, [pc, #276]	; (8005a3c <HAL_GPIO_Init+0x300>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d101      	bne.n	800592e <HAL_GPIO_Init+0x1f2>
 800592a:	2304      	movs	r3, #4
 800592c:	e008      	b.n	8005940 <HAL_GPIO_Init+0x204>
 800592e:	2307      	movs	r3, #7
 8005930:	e006      	b.n	8005940 <HAL_GPIO_Init+0x204>
 8005932:	2303      	movs	r3, #3
 8005934:	e004      	b.n	8005940 <HAL_GPIO_Init+0x204>
 8005936:	2302      	movs	r3, #2
 8005938:	e002      	b.n	8005940 <HAL_GPIO_Init+0x204>
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <HAL_GPIO_Init+0x204>
 800593e:	2300      	movs	r3, #0
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	f002 0203 	and.w	r2, r2, #3
 8005946:	0092      	lsls	r2, r2, #2
 8005948:	4093      	lsls	r3, r2
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	4313      	orrs	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005950:	4935      	ldr	r1, [pc, #212]	; (8005a28 <HAL_GPIO_Init+0x2ec>)
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	089b      	lsrs	r3, r3, #2
 8005956:	3302      	adds	r3, #2
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800595e:	4b38      	ldr	r3, [pc, #224]	; (8005a40 <HAL_GPIO_Init+0x304>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	43db      	mvns	r3, r3
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	4013      	ands	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005982:	4a2f      	ldr	r2, [pc, #188]	; (8005a40 <HAL_GPIO_Init+0x304>)
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005988:	4b2d      	ldr	r3, [pc, #180]	; (8005a40 <HAL_GPIO_Init+0x304>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	43db      	mvns	r3, r3
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	4013      	ands	r3, r2
 8005996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059ac:	4a24      	ldr	r2, [pc, #144]	; (8005a40 <HAL_GPIO_Init+0x304>)
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059b2:	4b23      	ldr	r3, [pc, #140]	; (8005a40 <HAL_GPIO_Init+0x304>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	43db      	mvns	r3, r3
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	4013      	ands	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059d6:	4a1a      	ldr	r2, [pc, #104]	; (8005a40 <HAL_GPIO_Init+0x304>)
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059dc:	4b18      	ldr	r3, [pc, #96]	; (8005a40 <HAL_GPIO_Init+0x304>)
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	43db      	mvns	r3, r3
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4013      	ands	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a00:	4a0f      	ldr	r2, [pc, #60]	; (8005a40 <HAL_GPIO_Init+0x304>)
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	61fb      	str	r3, [r7, #28]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	2b0f      	cmp	r3, #15
 8005a10:	f67f aea2 	bls.w	8005758 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
 8005a18:	3724      	adds	r7, #36	; 0x24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	40023800 	.word	0x40023800
 8005a28:	40013800 	.word	0x40013800
 8005a2c:	40020000 	.word	0x40020000
 8005a30:	40020400 	.word	0x40020400
 8005a34:	40020800 	.word	0x40020800
 8005a38:	40020c00 	.word	0x40020c00
 8005a3c:	40021000 	.word	0x40021000
 8005a40:	40013c00 	.word	0x40013c00

08005a44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	887b      	ldrh	r3, [r7, #2]
 8005a56:	4013      	ands	r3, r2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	73fb      	strb	r3, [r7, #15]
 8005a60:	e001      	b.n	8005a66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a62:	2300      	movs	r3, #0
 8005a64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	807b      	strh	r3, [r7, #2]
 8005a80:	4613      	mov	r3, r2
 8005a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a84:	787b      	ldrb	r3, [r7, #1]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a8a:	887a      	ldrh	r2, [r7, #2]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a90:	e003      	b.n	8005a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a92:	887b      	ldrh	r3, [r7, #2]
 8005a94:	041a      	lsls	r2, r3, #16
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	619a      	str	r2, [r3, #24]
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
	...

08005aa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005ab2:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ab4:	695a      	ldr	r2, [r3, #20]
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d006      	beq.n	8005acc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005abe:	4a05      	ldr	r2, [pc, #20]	; (8005ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
 8005ac2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ac4:	88fb      	ldrh	r3, [r7, #6]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fc f8cc 	bl	8001c64 <HAL_GPIO_EXTI_Callback>
  }
}
 8005acc:	bf00      	nop
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	40013c00 	.word	0x40013c00

08005ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e12b      	b.n	8005d42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fe fda8 	bl	8004654 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2224      	movs	r2, #36	; 0x24
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0201 	bic.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b3c:	f002 fb66 	bl	800820c <HAL_RCC_GetPCLK1Freq>
 8005b40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	4a81      	ldr	r2, [pc, #516]	; (8005d4c <HAL_I2C_Init+0x274>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d807      	bhi.n	8005b5c <HAL_I2C_Init+0x84>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4a80      	ldr	r2, [pc, #512]	; (8005d50 <HAL_I2C_Init+0x278>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	bf94      	ite	ls
 8005b54:	2301      	movls	r3, #1
 8005b56:	2300      	movhi	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	e006      	b.n	8005b6a <HAL_I2C_Init+0x92>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4a7d      	ldr	r2, [pc, #500]	; (8005d54 <HAL_I2C_Init+0x27c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	bf94      	ite	ls
 8005b64:	2301      	movls	r3, #1
 8005b66:	2300      	movhi	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e0e7      	b.n	8005d42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4a78      	ldr	r2, [pc, #480]	; (8005d58 <HAL_I2C_Init+0x280>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	0c9b      	lsrs	r3, r3, #18
 8005b7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	4a6a      	ldr	r2, [pc, #424]	; (8005d4c <HAL_I2C_Init+0x274>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d802      	bhi.n	8005bac <HAL_I2C_Init+0xd4>
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	e009      	b.n	8005bc0 <HAL_I2C_Init+0xe8>
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005bb2:	fb02 f303 	mul.w	r3, r2, r3
 8005bb6:	4a69      	ldr	r2, [pc, #420]	; (8005d5c <HAL_I2C_Init+0x284>)
 8005bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbc:	099b      	lsrs	r3, r3, #6
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6812      	ldr	r2, [r2, #0]
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005bd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	495c      	ldr	r1, [pc, #368]	; (8005d4c <HAL_I2C_Init+0x274>)
 8005bdc:	428b      	cmp	r3, r1
 8005bde:	d819      	bhi.n	8005c14 <HAL_I2C_Init+0x13c>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	1e59      	subs	r1, r3, #1
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bee:	1c59      	adds	r1, r3, #1
 8005bf0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bf4:	400b      	ands	r3, r1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <HAL_I2C_Init+0x138>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	1e59      	subs	r1, r3, #1
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c08:	3301      	adds	r3, #1
 8005c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c0e:	e051      	b.n	8005cb4 <HAL_I2C_Init+0x1dc>
 8005c10:	2304      	movs	r3, #4
 8005c12:	e04f      	b.n	8005cb4 <HAL_I2C_Init+0x1dc>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d111      	bne.n	8005c40 <HAL_I2C_Init+0x168>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	1e58      	subs	r0, r3, #1
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6859      	ldr	r1, [r3, #4]
 8005c24:	460b      	mov	r3, r1
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	440b      	add	r3, r1
 8005c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c2e:	3301      	adds	r3, #1
 8005c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	bf0c      	ite	eq
 8005c38:	2301      	moveq	r3, #1
 8005c3a:	2300      	movne	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	e012      	b.n	8005c66 <HAL_I2C_Init+0x18e>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	1e58      	subs	r0, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6859      	ldr	r1, [r3, #4]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	0099      	lsls	r1, r3, #2
 8005c50:	440b      	add	r3, r1
 8005c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c56:	3301      	adds	r3, #1
 8005c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bf0c      	ite	eq
 8005c60:	2301      	moveq	r3, #1
 8005c62:	2300      	movne	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <HAL_I2C_Init+0x196>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e022      	b.n	8005cb4 <HAL_I2C_Init+0x1dc>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10e      	bne.n	8005c94 <HAL_I2C_Init+0x1bc>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	1e58      	subs	r0, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6859      	ldr	r1, [r3, #4]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	440b      	add	r3, r1
 8005c84:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c88:	3301      	adds	r3, #1
 8005c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c92:	e00f      	b.n	8005cb4 <HAL_I2C_Init+0x1dc>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	1e58      	subs	r0, r3, #1
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6859      	ldr	r1, [r3, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	440b      	add	r3, r1
 8005ca2:	0099      	lsls	r1, r3, #2
 8005ca4:	440b      	add	r3, r1
 8005ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005caa:	3301      	adds	r3, #1
 8005cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cb4:	6879      	ldr	r1, [r7, #4]
 8005cb6:	6809      	ldr	r1, [r1, #0]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69da      	ldr	r2, [r3, #28]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ce2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6911      	ldr	r1, [r2, #16]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	68d2      	ldr	r2, [r2, #12]
 8005cee:	4311      	orrs	r1, r2
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6812      	ldr	r2, [r2, #0]
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695a      	ldr	r2, [r3, #20]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0201 	orr.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	000186a0 	.word	0x000186a0
 8005d50:	001e847f 	.word	0x001e847f
 8005d54:	003d08ff 	.word	0x003d08ff
 8005d58:	431bde83 	.word	0x431bde83
 8005d5c:	10624dd3 	.word	0x10624dd3

08005d60 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	607a      	str	r2, [r7, #4]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	817b      	strh	r3, [r7, #10]
 8005d70:	4613      	mov	r3, r2
 8005d72:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	f040 8085 	bne.w	8005e90 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d86:	4b46      	ldr	r3, [pc, #280]	; (8005ea0 <HAL_I2C_Master_Transmit_IT+0x140>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	08db      	lsrs	r3, r3, #3
 8005d8c:	4a45      	ldr	r2, [pc, #276]	; (8005ea4 <HAL_I2C_Master_Transmit_IT+0x144>)
 8005d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d92:	0a1a      	lsrs	r2, r3, #8
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	009a      	lsls	r2, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d116      	bne.n	8005dda <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2220      	movs	r2, #32
 8005db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f043 0220 	orr.w	r2, r3, #32
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e05b      	b.n	8005e92 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d0db      	beq.n	8005da0 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_I2C_Master_Transmit_IT+0x96>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e04d      	b.n	8005e92 <HAL_I2C_Master_Transmit_IT+0x132>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d007      	beq.n	8005e1c <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2221      	movs	r2, #33	; 0x21
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2210      	movs	r2, #16
 8005e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	893a      	ldrh	r2, [r7, #8]
 8005e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4a13      	ldr	r2, [pc, #76]	; (8005ea8 <HAL_I2C_Master_Transmit_IT+0x148>)
 8005e5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005e5e:	897a      	ldrh	r2, [r7, #10]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e72:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005e8a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e000      	b.n	8005e92 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8005e90:	2302      	movs	r3, #2
  }
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	371c      	adds	r7, #28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	20000018 	.word	0x20000018
 8005ea4:	14f8b589 	.word	0x14f8b589
 8005ea8:	ffff0000 	.word	0xffff0000

08005eac <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	607a      	str	r2, [r7, #4]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	460b      	mov	r3, r1
 8005eba:	817b      	strh	r3, [r7, #10]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b20      	cmp	r3, #32
 8005ece:	f040 808d 	bne.w	8005fec <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ed2:	4b4a      	ldr	r3, [pc, #296]	; (8005ffc <HAL_I2C_Master_Receive_IT+0x150>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	08db      	lsrs	r3, r3, #3
 8005ed8:	4a49      	ldr	r2, [pc, #292]	; (8006000 <HAL_I2C_Master_Receive_IT+0x154>)
 8005eda:	fba2 2303 	umull	r2, r3, r2, r3
 8005ede:	0a1a      	lsrs	r2, r3, #8
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009a      	lsls	r2, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d116      	bne.n	8005f26 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	f043 0220 	orr.w	r2, r3, #32
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e063      	b.n	8005fee <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d0db      	beq.n	8005eec <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <HAL_I2C_Master_Receive_IT+0x96>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e055      	b.n	8005fee <HAL_I2C_Master_Receive_IT+0x142>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d007      	beq.n	8005f68 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0201 	orr.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2222      	movs	r2, #34	; 0x22
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2210      	movs	r2, #16
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	893a      	ldrh	r2, [r7, #8]
 8005f98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4a17      	ldr	r2, [pc, #92]	; (8006004 <HAL_I2C_Master_Receive_IT+0x158>)
 8005fa8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005faa:	897a      	ldrh	r2, [r7, #10]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fbe:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fce:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005fe6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e000      	b.n	8005fee <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8005fec:	2302      	movs	r3, #2
  }
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	20000018 	.word	0x20000018
 8006000:	14f8b589 	.word	0x14f8b589
 8006004:	ffff0000 	.word	0xffff0000

08006008 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006028:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006030:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	2b10      	cmp	r3, #16
 8006036:	d003      	beq.n	8006040 <HAL_I2C_EV_IRQHandler+0x38>
 8006038:	7bfb      	ldrb	r3, [r7, #15]
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	f040 80bd 	bne.w	80061ba <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10d      	bne.n	8006076 <HAL_I2C_EV_IRQHandler+0x6e>
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006060:	d003      	beq.n	800606a <HAL_I2C_EV_IRQHandler+0x62>
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006068:	d101      	bne.n	800606e <HAL_I2C_EV_IRQHandler+0x66>
 800606a:	2301      	movs	r3, #1
 800606c:	e000      	b.n	8006070 <HAL_I2C_EV_IRQHandler+0x68>
 800606e:	2300      	movs	r3, #0
 8006070:	2b01      	cmp	r3, #1
 8006072:	f000 812e 	beq.w	80062d2 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00c      	beq.n	800609a <HAL_I2C_EV_IRQHandler+0x92>
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	0a5b      	lsrs	r3, r3, #9
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d006      	beq.n	800609a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f001 fc55 	bl	800793c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fd62 	bl	8006b5c <I2C_Master_SB>
 8006098:	e08e      	b.n	80061b8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	08db      	lsrs	r3, r3, #3
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d009      	beq.n	80060ba <HAL_I2C_EV_IRQHandler+0xb2>
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	0a5b      	lsrs	r3, r3, #9
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fdd8 	bl	8006c68 <I2C_Master_ADD10>
 80060b8:	e07e      	b.n	80061b8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	085b      	lsrs	r3, r3, #1
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d009      	beq.n	80060da <HAL_I2C_EV_IRQHandler+0xd2>
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	0a5b      	lsrs	r3, r3, #9
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fdf2 	bl	8006cbc <I2C_Master_ADDR>
 80060d8:	e06e      	b.n	80061b8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	089b      	lsrs	r3, r3, #2
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d037      	beq.n	8006156 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f4:	f000 80ef 	beq.w	80062d6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	09db      	lsrs	r3, r3, #7
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00f      	beq.n	8006124 <HAL_I2C_EV_IRQHandler+0x11c>
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	0a9b      	lsrs	r3, r3, #10
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	d009      	beq.n	8006124 <HAL_I2C_EV_IRQHandler+0x11c>
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	089b      	lsrs	r3, r3, #2
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d103      	bne.n	8006124 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f9ef 	bl	8006500 <I2C_MasterTransmit_TXE>
 8006122:	e049      	b.n	80061b8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	089b      	lsrs	r3, r3, #2
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 80d2 	beq.w	80062d6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	0a5b      	lsrs	r3, r3, #9
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 80cb 	beq.w	80062d6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	2b10      	cmp	r3, #16
 8006144:	d103      	bne.n	800614e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fa76 	bl	8006638 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800614c:	e0c3      	b.n	80062d6 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fada 	bl	8006708 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006154:	e0bf      	b.n	80062d6 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006164:	f000 80b7 	beq.w	80062d6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	099b      	lsrs	r3, r3, #6
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00f      	beq.n	8006194 <HAL_I2C_EV_IRQHandler+0x18c>
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	0a9b      	lsrs	r3, r3, #10
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d009      	beq.n	8006194 <HAL_I2C_EV_IRQHandler+0x18c>
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	089b      	lsrs	r3, r3, #2
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d103      	bne.n	8006194 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fb4a 	bl	8006826 <I2C_MasterReceive_RXNE>
 8006192:	e011      	b.n	80061b8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	089b      	lsrs	r3, r3, #2
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 809a 	beq.w	80062d6 <HAL_I2C_EV_IRQHandler+0x2ce>
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	0a5b      	lsrs	r3, r3, #9
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 8093 	beq.w	80062d6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fbe9 	bl	8006988 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061b6:	e08e      	b.n	80062d6 <HAL_I2C_EV_IRQHandler+0x2ce>
 80061b8:	e08d      	b.n	80062d6 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d004      	beq.n	80061cc <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	61fb      	str	r3, [r7, #28]
 80061ca:	e007      	b.n	80061dc <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	085b      	lsrs	r3, r3, #1
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d012      	beq.n	800620e <HAL_I2C_EV_IRQHandler+0x206>
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	0a5b      	lsrs	r3, r3, #9
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00c      	beq.n	800620e <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006204:	69b9      	ldr	r1, [r7, #24]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 ffa7 	bl	800715a <I2C_Slave_ADDR>
 800620c:	e066      	b.n	80062dc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	091b      	lsrs	r3, r3, #4
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d009      	beq.n	800622e <HAL_I2C_EV_IRQHandler+0x226>
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	0a5b      	lsrs	r3, r3, #9
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 ffdc 	bl	80071e4 <I2C_Slave_STOPF>
 800622c:	e056      	b.n	80062dc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800622e:	7bbb      	ldrb	r3, [r7, #14]
 8006230:	2b21      	cmp	r3, #33	; 0x21
 8006232:	d002      	beq.n	800623a <HAL_I2C_EV_IRQHandler+0x232>
 8006234:	7bbb      	ldrb	r3, [r7, #14]
 8006236:	2b29      	cmp	r3, #41	; 0x29
 8006238:	d125      	bne.n	8006286 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	09db      	lsrs	r3, r3, #7
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00f      	beq.n	8006266 <HAL_I2C_EV_IRQHandler+0x25e>
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	0a9b      	lsrs	r3, r3, #10
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d009      	beq.n	8006266 <HAL_I2C_EV_IRQHandler+0x25e>
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	089b      	lsrs	r3, r3, #2
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d103      	bne.n	8006266 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 febd 	bl	8006fde <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006264:	e039      	b.n	80062da <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	089b      	lsrs	r3, r3, #2
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d033      	beq.n	80062da <HAL_I2C_EV_IRQHandler+0x2d2>
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	0a5b      	lsrs	r3, r3, #9
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d02d      	beq.n	80062da <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 feea 	bl	8007058 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006284:	e029      	b.n	80062da <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	099b      	lsrs	r3, r3, #6
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00f      	beq.n	80062b2 <HAL_I2C_EV_IRQHandler+0x2aa>
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	0a9b      	lsrs	r3, r3, #10
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <HAL_I2C_EV_IRQHandler+0x2aa>
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	089b      	lsrs	r3, r3, #2
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d103      	bne.n	80062b2 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fef5 	bl	800709a <I2C_SlaveReceive_RXNE>
 80062b0:	e014      	b.n	80062dc <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	089b      	lsrs	r3, r3, #2
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00e      	beq.n	80062dc <HAL_I2C_EV_IRQHandler+0x2d4>
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	0a5b      	lsrs	r3, r3, #9
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d008      	beq.n	80062dc <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 ff23 	bl	8007116 <I2C_SlaveReceive_BTF>
 80062d0:	e004      	b.n	80062dc <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80062d2:	bf00      	nop
 80062d4:	e002      	b.n	80062dc <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062d6:	bf00      	nop
 80062d8:	e000      	b.n	80062dc <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062da:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80062dc:	3720      	adds	r7, #32
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b08a      	sub	sp, #40	; 0x28
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80062fa:	2300      	movs	r3, #0
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006304:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	0a1b      	lsrs	r3, r3, #8
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00e      	beq.n	8006330 <HAL_I2C_ER_IRQHandler+0x4e>
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	0a1b      	lsrs	r3, r3, #8
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d008      	beq.n	8006330 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	f043 0301 	orr.w	r3, r3, #1
 8006324:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800632e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	0a5b      	lsrs	r3, r3, #9
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00e      	beq.n	800635a <HAL_I2C_ER_IRQHandler+0x78>
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	0a1b      	lsrs	r3, r3, #8
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d008      	beq.n	800635a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	f043 0302 	orr.w	r3, r3, #2
 800634e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006358:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	0a9b      	lsrs	r3, r3, #10
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d03f      	beq.n	80063e6 <HAL_I2C_ER_IRQHandler+0x104>
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	0a1b      	lsrs	r3, r3, #8
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d039      	beq.n	80063e6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006372:	7efb      	ldrb	r3, [r7, #27]
 8006374:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637a:	b29b      	uxth	r3, r3
 800637c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006384:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800638c:	7ebb      	ldrb	r3, [r7, #26]
 800638e:	2b20      	cmp	r3, #32
 8006390:	d112      	bne.n	80063b8 <HAL_I2C_ER_IRQHandler+0xd6>
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10f      	bne.n	80063b8 <HAL_I2C_ER_IRQHandler+0xd6>
 8006398:	7cfb      	ldrb	r3, [r7, #19]
 800639a:	2b21      	cmp	r3, #33	; 0x21
 800639c:	d008      	beq.n	80063b0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800639e:	7cfb      	ldrb	r3, [r7, #19]
 80063a0:	2b29      	cmp	r3, #41	; 0x29
 80063a2:	d005      	beq.n	80063b0 <HAL_I2C_ER_IRQHandler+0xce>
 80063a4:	7cfb      	ldrb	r3, [r7, #19]
 80063a6:	2b28      	cmp	r3, #40	; 0x28
 80063a8:	d106      	bne.n	80063b8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b21      	cmp	r3, #33	; 0x21
 80063ae:	d103      	bne.n	80063b8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 f847 	bl	8007444 <I2C_Slave_AF>
 80063b6:	e016      	b.n	80063e6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063c0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	f043 0304 	orr.w	r3, r3, #4
 80063c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80063ca:	7efb      	ldrb	r3, [r7, #27]
 80063cc:	2b10      	cmp	r3, #16
 80063ce:	d002      	beq.n	80063d6 <HAL_I2C_ER_IRQHandler+0xf4>
 80063d0:	7efb      	ldrb	r3, [r7, #27]
 80063d2:	2b40      	cmp	r3, #64	; 0x40
 80063d4:	d107      	bne.n	80063e6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	0adb      	lsrs	r3, r3, #11
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00e      	beq.n	8006410 <HAL_I2C_ER_IRQHandler+0x12e>
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	0a1b      	lsrs	r3, r3, #8
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d008      	beq.n	8006410 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	f043 0308 	orr.w	r3, r3, #8
 8006404:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800640e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	2b00      	cmp	r3, #0
 8006414:	d008      	beq.n	8006428 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	431a      	orrs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 f87e 	bl	8007524 <I2C_ITError>
  }
}
 8006428:	bf00      	nop
 800642a:	3728      	adds	r7, #40	; 0x28
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
 800648c:	4613      	mov	r3, r2
 800648e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006516:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006522:	2b00      	cmp	r3, #0
 8006524:	d150      	bne.n	80065c8 <I2C_MasterTransmit_TXE+0xc8>
 8006526:	7bfb      	ldrb	r3, [r7, #15]
 8006528:	2b21      	cmp	r3, #33	; 0x21
 800652a:	d14d      	bne.n	80065c8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2b08      	cmp	r3, #8
 8006530:	d01d      	beq.n	800656e <I2C_MasterTransmit_TXE+0x6e>
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2b20      	cmp	r3, #32
 8006536:	d01a      	beq.n	800656e <I2C_MasterTransmit_TXE+0x6e>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800653e:	d016      	beq.n	800656e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800654e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2211      	movs	r2, #17
 8006554:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7ff ff62 	bl	8006430 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800656c:	e060      	b.n	8006630 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800657c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800658c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2220      	movs	r2, #32
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b40      	cmp	r3, #64	; 0x40
 80065a6:	d107      	bne.n	80065b8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff ff7d 	bl	80064b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065b6:	e03b      	b.n	8006630 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7ff ff35 	bl	8006430 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065c6:	e033      	b.n	8006630 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	2b21      	cmp	r3, #33	; 0x21
 80065cc:	d005      	beq.n	80065da <I2C_MasterTransmit_TXE+0xda>
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	2b40      	cmp	r3, #64	; 0x40
 80065d2:	d12d      	bne.n	8006630 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	2b22      	cmp	r3, #34	; 0x22
 80065d8:	d12a      	bne.n	8006630 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d108      	bne.n	80065f6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065f2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80065f4:	e01c      	b.n	8006630 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b40      	cmp	r3, #64	; 0x40
 8006600:	d103      	bne.n	800660a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f880 	bl	8006708 <I2C_MemoryTransmit_TXE_BTF>
}
 8006608:	e012      	b.n	8006630 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	781a      	ldrb	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006624:	b29b      	uxth	r3, r3
 8006626:	3b01      	subs	r3, #1
 8006628:	b29a      	uxth	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800662e:	e7ff      	b.n	8006630 <I2C_MasterTransmit_TXE+0x130>
 8006630:	bf00      	nop
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b21      	cmp	r3, #33	; 0x21
 8006650:	d156      	bne.n	8006700 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006656:	b29b      	uxth	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d012      	beq.n	8006682 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	781a      	ldrb	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006680:	e03e      	b.n	8006700 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b08      	cmp	r3, #8
 8006686:	d01d      	beq.n	80066c4 <I2C_MasterTransmit_BTF+0x8c>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b20      	cmp	r3, #32
 800668c:	d01a      	beq.n	80066c4 <I2C_MasterTransmit_BTF+0x8c>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006694:	d016      	beq.n	80066c4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066a4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2211      	movs	r2, #17
 80066aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2220      	movs	r2, #32
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff feb7 	bl	8006430 <HAL_I2C_MasterTxCpltCallback>
}
 80066c2:	e01d      	b.n	8006700 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066d2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2220      	movs	r2, #32
 80066ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7ff fe98 	bl	8006430 <HAL_I2C_MasterTxCpltCallback>
}
 8006700:	bf00      	nop
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006716:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800671c:	2b00      	cmp	r3, #0
 800671e:	d11d      	bne.n	800675c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006724:	2b01      	cmp	r3, #1
 8006726:	d10b      	bne.n	8006740 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800672c:	b2da      	uxtb	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006738:	1c9a      	adds	r2, r3, #2
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800673e:	e06e      	b.n	800681e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006744:	b29b      	uxth	r3, r3
 8006746:	121b      	asrs	r3, r3, #8
 8006748:	b2da      	uxtb	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	651a      	str	r2, [r3, #80]	; 0x50
}
 800675a:	e060      	b.n	800681e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006760:	2b01      	cmp	r3, #1
 8006762:	d10b      	bne.n	800677c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006768:	b2da      	uxtb	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	651a      	str	r2, [r3, #80]	; 0x50
}
 800677a:	e050      	b.n	800681e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006780:	2b02      	cmp	r3, #2
 8006782:	d14c      	bne.n	800681e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006784:	7bfb      	ldrb	r3, [r7, #15]
 8006786:	2b22      	cmp	r3, #34	; 0x22
 8006788:	d108      	bne.n	800679c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006798:	601a      	str	r2, [r3, #0]
}
 800679a:	e040      	b.n	800681e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d015      	beq.n	80067d2 <I2C_MemoryTransmit_TXE_BTF+0xca>
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	2b21      	cmp	r3, #33	; 0x21
 80067aa:	d112      	bne.n	80067d2 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	781a      	ldrb	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80067d0:	e025      	b.n	800681e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d120      	bne.n	800681e <I2C_MemoryTransmit_TXE_BTF+0x116>
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	2b21      	cmp	r3, #33	; 0x21
 80067e0:	d11d      	bne.n	800681e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067f0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006800:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff fe49 	bl	80064b0 <HAL_I2C_MemTxCpltCallback>
}
 800681e:	bf00      	nop
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b22      	cmp	r3, #34	; 0x22
 8006838:	f040 80a2 	bne.w	8006980 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006840:	b29b      	uxth	r3, r3
 8006842:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b03      	cmp	r3, #3
 8006848:	d921      	bls.n	800688e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691a      	ldr	r2, [r3, #16]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b03      	cmp	r3, #3
 8006878:	f040 8082 	bne.w	8006980 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800688a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800688c:	e078      	b.n	8006980 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006892:	2b02      	cmp	r3, #2
 8006894:	d074      	beq.n	8006980 <I2C_MasterReceive_RXNE+0x15a>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d002      	beq.n	80068a2 <I2C_MasterReceive_RXNE+0x7c>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d16e      	bne.n	8006980 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 f818 	bl	80078d8 <I2C_WaitOnSTOPRequestThroughIT>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d142      	bne.n	8006934 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068bc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068cc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	b2d2      	uxtb	r2, r2
 80068da:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	3b01      	subs	r3, #1
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2220      	movs	r2, #32
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	d10a      	bne.n	800691e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7ff fdd4 	bl	80064c4 <HAL_I2C_MemRxCpltCallback>
}
 800691c:	e030      	b.n	8006980 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2212      	movs	r2, #18
 800692a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7ff fd89 	bl	8006444 <HAL_I2C_MasterRxCpltCallback>
}
 8006932:	e025      	b.n	8006980 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006942:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691a      	ldr	r2, [r3, #16]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006960:	b29b      	uxth	r3, r3
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2220      	movs	r2, #32
 800696e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff fdac 	bl	80064d8 <HAL_I2C_ErrorCallback>
}
 8006980:	bf00      	nop
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006994:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699a:	b29b      	uxth	r3, r3
 800699c:	2b04      	cmp	r3, #4
 800699e:	d11b      	bne.n	80069d8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ae:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	691a      	ldr	r2, [r3, #16]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ba:	b2d2      	uxtb	r2, r2
 80069bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80069d6:	e0bd      	b.n	8006b54 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d129      	bne.n	8006a36 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069f0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	d00a      	beq.n	8006a0e <I2C_MasterReceive_BTF+0x86>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d007      	beq.n	8006a0e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a0c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691a      	ldr	r2, [r3, #16]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	b2d2      	uxtb	r2, r2
 8006a1a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a34:	e08e      	b.n	8006b54 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d176      	bne.n	8006b2e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d002      	beq.n	8006a4c <I2C_MasterReceive_BTF+0xc4>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2b10      	cmp	r3, #16
 8006a4a:	d108      	bne.n	8006a5e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	e019      	b.n	8006a92 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d002      	beq.n	8006a6a <I2C_MasterReceive_BTF+0xe2>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d108      	bne.n	8006a7c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	e00a      	b.n	8006a92 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b10      	cmp	r3, #16
 8006a80:	d007      	beq.n	8006a92 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a90:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	691a      	ldr	r2, [r3, #16]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	691a      	ldr	r2, [r3, #16]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	b2d2      	uxtb	r2, r2
 8006ac4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006aec:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b40      	cmp	r3, #64	; 0x40
 8006b00:	d10a      	bne.n	8006b18 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7ff fcd7 	bl	80064c4 <HAL_I2C_MemRxCpltCallback>
}
 8006b16:	e01d      	b.n	8006b54 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2212      	movs	r2, #18
 8006b24:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7ff fc8c 	bl	8006444 <HAL_I2C_MasterRxCpltCallback>
}
 8006b2c:	e012      	b.n	8006b54 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	691a      	ldr	r2, [r3, #16]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b38:	b2d2      	uxtb	r2, r2
 8006b3a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b54:	bf00      	nop
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b40      	cmp	r3, #64	; 0x40
 8006b6e:	d117      	bne.n	8006ba0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d109      	bne.n	8006b8c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	461a      	mov	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b88:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006b8a:	e067      	b.n	8006c5c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	f043 0301 	orr.w	r3, r3, #1
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	611a      	str	r2, [r3, #16]
}
 8006b9e:	e05d      	b.n	8006c5c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ba8:	d133      	bne.n	8006c12 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b21      	cmp	r3, #33	; 0x21
 8006bb4:	d109      	bne.n	8006bca <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bc6:	611a      	str	r2, [r3, #16]
 8006bc8:	e008      	b.n	8006bdc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	f043 0301 	orr.w	r3, r3, #1
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d004      	beq.n	8006bee <I2C_Master_SB+0x92>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d108      	bne.n	8006c00 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d032      	beq.n	8006c5c <I2C_Master_SB+0x100>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d02d      	beq.n	8006c5c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c0e:	605a      	str	r2, [r3, #4]
}
 8006c10:	e024      	b.n	8006c5c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10e      	bne.n	8006c38 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	11db      	asrs	r3, r3, #7
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	f003 0306 	and.w	r3, r3, #6
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	f063 030f 	orn	r3, r3, #15
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	611a      	str	r2, [r3, #16]
}
 8006c36:	e011      	b.n	8006c5c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d10d      	bne.n	8006c5c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	11db      	asrs	r3, r3, #7
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	f003 0306 	and.w	r3, r3, #6
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	f063 030e 	orn	r3, r3, #14
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	611a      	str	r2, [r3, #16]
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d004      	beq.n	8006c8e <I2C_Master_ADD10+0x26>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d108      	bne.n	8006ca0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00c      	beq.n	8006cb0 <I2C_Master_ADD10+0x48>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d007      	beq.n	8006cb0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cae:	605a      	str	r2, [r3, #4]
  }
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b091      	sub	sp, #68	; 0x44
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b22      	cmp	r3, #34	; 0x22
 8006ce4:	f040 8169 	bne.w	8006fba <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10f      	bne.n	8006d10 <I2C_Master_ADDR+0x54>
 8006cf0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006cf4:	2b40      	cmp	r3, #64	; 0x40
 8006cf6:	d10b      	bne.n	8006d10 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	633b      	str	r3, [r7, #48]	; 0x30
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	633b      	str	r3, [r7, #48]	; 0x30
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	e160      	b.n	8006fd2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d11d      	bne.n	8006d54 <I2C_Master_ADDR+0x98>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d20:	d118      	bne.n	8006d54 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d22:	2300      	movs	r3, #0
 8006d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d46:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	651a      	str	r2, [r3, #80]	; 0x50
 8006d52:	e13e      	b.n	8006fd2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d113      	bne.n	8006d86 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d5e:	2300      	movs	r3, #0
 8006d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d72:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	e115      	b.n	8006fb2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	f040 808a 	bne.w	8006ea6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d98:	d137      	bne.n	8006e0a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006da8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006db8:	d113      	bne.n	8006de2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dca:	2300      	movs	r3, #0
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	e0e7      	b.n	8006fb2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006de2:	2300      	movs	r3, #0
 8006de4:	623b      	str	r3, [r7, #32]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	623b      	str	r3, [r7, #32]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	623b      	str	r3, [r7, #32]
 8006df6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	e0d3      	b.n	8006fb2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0c:	2b08      	cmp	r3, #8
 8006e0e:	d02e      	beq.n	8006e6e <I2C_Master_ADDR+0x1b2>
 8006e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e12:	2b20      	cmp	r3, #32
 8006e14:	d02b      	beq.n	8006e6e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e18:	2b12      	cmp	r3, #18
 8006e1a:	d102      	bne.n	8006e22 <I2C_Master_ADDR+0x166>
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d125      	bne.n	8006e6e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e24:	2b04      	cmp	r3, #4
 8006e26:	d00e      	beq.n	8006e46 <I2C_Master_ADDR+0x18a>
 8006e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d00b      	beq.n	8006e46 <I2C_Master_ADDR+0x18a>
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e30:	2b10      	cmp	r3, #16
 8006e32:	d008      	beq.n	8006e46 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	e007      	b.n	8006e56 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e54:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e56:	2300      	movs	r3, #0
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	61fb      	str	r3, [r7, #28]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	61fb      	str	r3, [r7, #28]
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	e0a1      	b.n	8006fb2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e7c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e7e:	2300      	movs	r3, #0
 8006e80:	61bb      	str	r3, [r7, #24]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	61bb      	str	r3, [r7, #24]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	61bb      	str	r3, [r7, #24]
 8006e92:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	e085      	b.n	8006fb2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d14d      	bne.n	8006f4c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d016      	beq.n	8006ee4 <I2C_Master_ADDR+0x228>
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d013      	beq.n	8006ee4 <I2C_Master_ADDR+0x228>
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebe:	2b10      	cmp	r3, #16
 8006ec0:	d010      	beq.n	8006ee4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ed0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	e007      	b.n	8006ef4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ef2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f02:	d117      	bne.n	8006f34 <I2C_Master_ADDR+0x278>
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f0a:	d00b      	beq.n	8006f24 <I2C_Master_ADDR+0x268>
 8006f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d008      	beq.n	8006f24 <I2C_Master_ADDR+0x268>
 8006f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d005      	beq.n	8006f24 <I2C_Master_ADDR+0x268>
 8006f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1a:	2b10      	cmp	r3, #16
 8006f1c:	d002      	beq.n	8006f24 <I2C_Master_ADDR+0x268>
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f20:	2b20      	cmp	r3, #32
 8006f22:	d107      	bne.n	8006f34 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f32:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f34:	2300      	movs	r3, #0
 8006f36:	617b      	str	r3, [r7, #20]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	e032      	b.n	8006fb2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f5a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f6a:	d117      	bne.n	8006f9c <I2C_Master_ADDR+0x2e0>
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f72:	d00b      	beq.n	8006f8c <I2C_Master_ADDR+0x2d0>
 8006f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d008      	beq.n	8006f8c <I2C_Master_ADDR+0x2d0>
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d005      	beq.n	8006f8c <I2C_Master_ADDR+0x2d0>
 8006f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f82:	2b10      	cmp	r3, #16
 8006f84:	d002      	beq.n	8006f8c <I2C_Master_ADDR+0x2d0>
 8006f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	d107      	bne.n	8006f9c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f9a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	613b      	str	r3, [r7, #16]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	613b      	str	r3, [r7, #16]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	613b      	str	r3, [r7, #16]
 8006fb0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006fb8:	e00b      	b.n	8006fd2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	60fb      	str	r3, [r7, #12]
 8006fce:	68fb      	ldr	r3, [r7, #12]
}
 8006fd0:	e7ff      	b.n	8006fd2 <I2C_Master_ADDR+0x316>
 8006fd2:	bf00      	nop
 8006fd4:	3744      	adds	r7, #68	; 0x44
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d02b      	beq.n	8007050 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	781a      	ldrb	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007012:	b29b      	uxth	r3, r3
 8007014:	3b01      	subs	r3, #1
 8007016:	b29a      	uxth	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007020:	b29b      	uxth	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d114      	bne.n	8007050 <I2C_SlaveTransmit_TXE+0x72>
 8007026:	7bfb      	ldrb	r3, [r7, #15]
 8007028:	2b29      	cmp	r3, #41	; 0x29
 800702a:	d111      	bne.n	8007050 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800703a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2221      	movs	r2, #33	; 0x21
 8007040:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2228      	movs	r2, #40	; 0x28
 8007046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7ff fa04 	bl	8006458 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007050:	bf00      	nop
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007064:	b29b      	uxth	r3, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	d011      	beq.n	800708e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706e:	781a      	ldrb	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b29a      	uxth	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800708e:	bf00      	nop
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b084      	sub	sp, #16
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d02c      	beq.n	800710e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691a      	ldr	r2, [r3, #16]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3b01      	subs	r3, #1
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070de:	b29b      	uxth	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d114      	bne.n	800710e <I2C_SlaveReceive_RXNE+0x74>
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	2b2a      	cmp	r3, #42	; 0x2a
 80070e8:	d111      	bne.n	800710e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070f8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2222      	movs	r2, #34	; 0x22
 80070fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2228      	movs	r2, #40	; 0x28
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff f9af 	bl	800646c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800710e:	bf00      	nop
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007122:	b29b      	uxth	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	d012      	beq.n	800714e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	691a      	ldr	r2, [r3, #16]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007132:	b2d2      	uxtb	r2, r2
 8007134:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007144:	b29b      	uxth	r3, r3
 8007146:	3b01      	subs	r3, #1
 8007148:	b29a      	uxth	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007164:	2300      	movs	r3, #0
 8007166:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800716e:	b2db      	uxtb	r3, r3
 8007170:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007174:	2b28      	cmp	r3, #40	; 0x28
 8007176:	d127      	bne.n	80071c8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007186:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	089b      	lsrs	r3, r3, #2
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007194:	2301      	movs	r3, #1
 8007196:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	09db      	lsrs	r3, r3, #7
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d103      	bne.n	80071ac <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	81bb      	strh	r3, [r7, #12]
 80071aa:	e002      	b.n	80071b2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80071ba:	89ba      	ldrh	r2, [r7, #12]
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff f95d 	bl	8006480 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80071c6:	e008      	b.n	80071da <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f06f 0202 	mvn.w	r2, #2
 80071d0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80071da:	bf00      	nop
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071f2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007202:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007204:	2300      	movs	r3, #0
 8007206:	60bb      	str	r3, [r7, #8]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	60bb      	str	r3, [r7, #8]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0201 	orr.w	r2, r2, #1
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007230:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800723c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007240:	d172      	bne.n	8007328 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	2b22      	cmp	r3, #34	; 0x22
 8007246:	d002      	beq.n	800724e <I2C_Slave_STOPF+0x6a>
 8007248:	7bfb      	ldrb	r3, [r7, #15]
 800724a:	2b2a      	cmp	r3, #42	; 0x2a
 800724c:	d135      	bne.n	80072ba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	b29a      	uxth	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007260:	b29b      	uxth	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d005      	beq.n	8007272 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	f043 0204 	orr.w	r2, r3, #4
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007280:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007286:	4618      	mov	r0, r3
 8007288:	f7fe f96a 	bl	8005560 <HAL_DMA_GetState>
 800728c:	4603      	mov	r3, r0
 800728e:	2b01      	cmp	r3, #1
 8007290:	d049      	beq.n	8007326 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007296:	4a69      	ldr	r2, [pc, #420]	; (800743c <I2C_Slave_STOPF+0x258>)
 8007298:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fd ffb2 	bl	8005208 <HAL_DMA_Abort_IT>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d03d      	beq.n	8007326 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072b4:	4610      	mov	r0, r2
 80072b6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072b8:	e035      	b.n	8007326 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d005      	beq.n	80072de <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	f043 0204 	orr.w	r2, r3, #4
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fe f934 	bl	8005560 <HAL_DMA_GetState>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d014      	beq.n	8007328 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007302:	4a4e      	ldr	r2, [pc, #312]	; (800743c <I2C_Slave_STOPF+0x258>)
 8007304:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730a:	4618      	mov	r0, r3
 800730c:	f7fd ff7c 	bl	8005208 <HAL_DMA_Abort_IT>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d008      	beq.n	8007328 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007320:	4610      	mov	r0, r2
 8007322:	4798      	blx	r3
 8007324:	e000      	b.n	8007328 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007326:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732c:	b29b      	uxth	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d03e      	beq.n	80073b0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b04      	cmp	r3, #4
 800733e:	d112      	bne.n	8007366 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	691a      	ldr	r2, [r3, #16]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	b2d2      	uxtb	r2, r2
 800734c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735c:	b29b      	uxth	r3, r3
 800735e:	3b01      	subs	r3, #1
 8007360:	b29a      	uxth	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007370:	2b40      	cmp	r3, #64	; 0x40
 8007372:	d112      	bne.n	800739a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691a      	ldr	r2, [r3, #16]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007390:	b29b      	uxth	r3, r3
 8007392:	3b01      	subs	r3, #1
 8007394:	b29a      	uxth	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739e:	b29b      	uxth	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d005      	beq.n	80073b0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a8:	f043 0204 	orr.w	r2, r3, #4
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d003      	beq.n	80073c0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f8b3 	bl	8007524 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80073be:	e039      	b.n	8007434 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	2b2a      	cmp	r3, #42	; 0x2a
 80073c4:	d109      	bne.n	80073da <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2228      	movs	r2, #40	; 0x28
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7ff f849 	bl	800646c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b28      	cmp	r3, #40	; 0x28
 80073e4:	d111      	bne.n	800740a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a15      	ldr	r2, [pc, #84]	; (8007440 <I2C_Slave_STOPF+0x25c>)
 80073ea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2220      	movs	r2, #32
 80073f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff f84a 	bl	800649c <HAL_I2C_ListenCpltCallback>
}
 8007408:	e014      	b.n	8007434 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740e:	2b22      	cmp	r3, #34	; 0x22
 8007410:	d002      	beq.n	8007418 <I2C_Slave_STOPF+0x234>
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	2b22      	cmp	r3, #34	; 0x22
 8007416:	d10d      	bne.n	8007434 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2220      	movs	r2, #32
 8007422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7ff f81c 	bl	800646c <HAL_I2C_SlaveRxCpltCallback>
}
 8007434:	bf00      	nop
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	08007789 	.word	0x08007789
 8007440:	ffff0000 	.word	0xffff0000

08007444 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007452:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2b08      	cmp	r3, #8
 800745e:	d002      	beq.n	8007466 <I2C_Slave_AF+0x22>
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b20      	cmp	r3, #32
 8007464:	d129      	bne.n	80074ba <I2C_Slave_AF+0x76>
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	2b28      	cmp	r3, #40	; 0x28
 800746a:	d126      	bne.n	80074ba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a2c      	ldr	r2, [pc, #176]	; (8007520 <I2C_Slave_AF+0xdc>)
 8007470:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007480:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800748a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800749a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7fe fff2 	bl	800649c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80074b8:	e02e      	b.n	8007518 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	2b21      	cmp	r3, #33	; 0x21
 80074be:	d126      	bne.n	800750e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a17      	ldr	r2, [pc, #92]	; (8007520 <I2C_Slave_AF+0xdc>)
 80074c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2221      	movs	r2, #33	; 0x21
 80074ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074ea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074f4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007504:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7fe ffa6 	bl	8006458 <HAL_I2C_SlaveTxCpltCallback>
}
 800750c:	e004      	b.n	8007518 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007516:	615a      	str	r2, [r3, #20]
}
 8007518:	bf00      	nop
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	ffff0000 	.word	0xffff0000

08007524 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007532:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800753a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800753c:	7bbb      	ldrb	r3, [r7, #14]
 800753e:	2b10      	cmp	r3, #16
 8007540:	d002      	beq.n	8007548 <I2C_ITError+0x24>
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	2b40      	cmp	r3, #64	; 0x40
 8007546:	d10a      	bne.n	800755e <I2C_ITError+0x3a>
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	2b22      	cmp	r3, #34	; 0x22
 800754c:	d107      	bne.n	800755e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800755c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800755e:	7bfb      	ldrb	r3, [r7, #15]
 8007560:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007564:	2b28      	cmp	r3, #40	; 0x28
 8007566:	d107      	bne.n	8007578 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2228      	movs	r2, #40	; 0x28
 8007572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007576:	e015      	b.n	80075a4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007586:	d00a      	beq.n	800759e <I2C_ITError+0x7a>
 8007588:	7bfb      	ldrb	r3, [r7, #15]
 800758a:	2b60      	cmp	r3, #96	; 0x60
 800758c:	d007      	beq.n	800759e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075b2:	d162      	bne.n	800767a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075c2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d020      	beq.n	8007614 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d6:	4a6a      	ldr	r2, [pc, #424]	; (8007780 <I2C_ITError+0x25c>)
 80075d8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fd fe12 	bl	8005208 <HAL_DMA_Abort_IT>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f000 8089 	beq.w	80076fe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 0201 	bic.w	r2, r2, #1
 80075fa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800760e:	4610      	mov	r0, r2
 8007610:	4798      	blx	r3
 8007612:	e074      	b.n	80076fe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007618:	4a59      	ldr	r2, [pc, #356]	; (8007780 <I2C_ITError+0x25c>)
 800761a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007620:	4618      	mov	r0, r3
 8007622:	f7fd fdf1 	bl	8005208 <HAL_DMA_Abort_IT>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d068      	beq.n	80076fe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007636:	2b40      	cmp	r3, #64	; 0x40
 8007638:	d10b      	bne.n	8007652 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	691a      	ldr	r2, [r3, #16]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	b2d2      	uxtb	r2, r2
 8007646:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 0201 	bic.w	r2, r2, #1
 8007660:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2220      	movs	r2, #32
 8007666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007674:	4610      	mov	r0, r2
 8007676:	4798      	blx	r3
 8007678:	e041      	b.n	80076fe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b60      	cmp	r3, #96	; 0x60
 8007684:	d125      	bne.n	80076d2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2220      	movs	r2, #32
 800768a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769e:	2b40      	cmp	r3, #64	; 0x40
 80076a0:	d10b      	bne.n	80076ba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	691a      	ldr	r2, [r3, #16]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ac:	b2d2      	uxtb	r2, r2
 80076ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	1c5a      	adds	r2, r3, #1
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f022 0201 	bic.w	r2, r2, #1
 80076c8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7fe ff0e 	bl	80064ec <HAL_I2C_AbortCpltCallback>
 80076d0:	e015      	b.n	80076fe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076dc:	2b40      	cmp	r3, #64	; 0x40
 80076de:	d10b      	bne.n	80076f8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	691a      	ldr	r2, [r3, #16]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	b2d2      	uxtb	r2, r2
 80076ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7fe feed 	bl	80064d8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10e      	bne.n	800772c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007714:	2b00      	cmp	r3, #0
 8007716:	d109      	bne.n	800772c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800771e:	2b00      	cmp	r3, #0
 8007720:	d104      	bne.n	800772c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007728:	2b00      	cmp	r3, #0
 800772a:	d007      	beq.n	800773c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800773a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007742:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b04      	cmp	r3, #4
 800774e:	d113      	bne.n	8007778 <I2C_ITError+0x254>
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	2b28      	cmp	r3, #40	; 0x28
 8007754:	d110      	bne.n	8007778 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a0a      	ldr	r2, [pc, #40]	; (8007784 <I2C_ITError+0x260>)
 800775a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2220      	movs	r2, #32
 8007766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7fe fe92 	bl	800649c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007778:	bf00      	nop
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	08007789 	.word	0x08007789
 8007784:	ffff0000 	.word	0xffff0000

08007788 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007798:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80077a2:	4b4b      	ldr	r3, [pc, #300]	; (80078d0 <I2C_DMAAbort+0x148>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	08db      	lsrs	r3, r3, #3
 80077a8:	4a4a      	ldr	r2, [pc, #296]	; (80078d4 <I2C_DMAAbort+0x14c>)
 80077aa:	fba2 2303 	umull	r2, r3, r2, r3
 80077ae:	0a1a      	lsrs	r2, r3, #8
 80077b0:	4613      	mov	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	00da      	lsls	r2, r3, #3
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d106      	bne.n	80077d0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	f043 0220 	orr.w	r2, r3, #32
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80077ce:	e00a      	b.n	80077e6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077e4:	d0ea      	beq.n	80077bc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f2:	2200      	movs	r2, #0
 80077f4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007802:	2200      	movs	r2, #0
 8007804:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007814:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	2200      	movs	r2, #0
 800781a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007820:	2b00      	cmp	r3, #0
 8007822:	d003      	beq.n	800782c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007828:	2200      	movs	r2, #0
 800782a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007830:	2b00      	cmp	r3, #0
 8007832:	d003      	beq.n	800783c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007838:	2200      	movs	r2, #0
 800783a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0201 	bic.w	r2, r2, #1
 800784a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b60      	cmp	r3, #96	; 0x60
 8007856:	d10e      	bne.n	8007876 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	2220      	movs	r2, #32
 800785c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	2200      	movs	r2, #0
 800786c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800786e:	6978      	ldr	r0, [r7, #20]
 8007870:	f7fe fe3c 	bl	80064ec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007874:	e027      	b.n	80078c6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007876:	7cfb      	ldrb	r3, [r7, #19]
 8007878:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800787c:	2b28      	cmp	r3, #40	; 0x28
 800787e:	d117      	bne.n	80078b0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f042 0201 	orr.w	r2, r2, #1
 800788e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800789e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	2200      	movs	r2, #0
 80078a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2228      	movs	r2, #40	; 0x28
 80078aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80078ae:	e007      	b.n	80078c0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2220      	movs	r2, #32
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80078c0:	6978      	ldr	r0, [r7, #20]
 80078c2:	f7fe fe09 	bl	80064d8 <HAL_I2C_ErrorCallback>
}
 80078c6:	bf00      	nop
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	20000018 	.word	0x20000018
 80078d4:	14f8b589 	.word	0x14f8b589

080078d8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80078e4:	4b13      	ldr	r3, [pc, #76]	; (8007934 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	08db      	lsrs	r3, r3, #3
 80078ea:	4a13      	ldr	r2, [pc, #76]	; (8007938 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80078ec:	fba2 2303 	umull	r2, r3, r2, r3
 80078f0:	0a1a      	lsrs	r2, r3, #8
 80078f2:	4613      	mov	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d107      	bne.n	8007916 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790a:	f043 0220 	orr.w	r2, r3, #32
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e008      	b.n	8007928 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007924:	d0e9      	beq.n	80078fa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3714      	adds	r7, #20
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr
 8007934:	20000018 	.word	0x20000018
 8007938:	14f8b589 	.word	0x14f8b589

0800793c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007948:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800794c:	d103      	bne.n	8007956 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007954:	e007      	b.n	8007966 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800795e:	d102      	bne.n	8007966 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2208      	movs	r2, #8
 8007964:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
	...

08007974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e264      	b.n	8007e50 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	2b00      	cmp	r3, #0
 8007990:	d075      	beq.n	8007a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007992:	4ba3      	ldr	r3, [pc, #652]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f003 030c 	and.w	r3, r3, #12
 800799a:	2b04      	cmp	r3, #4
 800799c:	d00c      	beq.n	80079b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800799e:	4ba0      	ldr	r3, [pc, #640]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80079a6:	2b08      	cmp	r3, #8
 80079a8:	d112      	bne.n	80079d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079aa:	4b9d      	ldr	r3, [pc, #628]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079b6:	d10b      	bne.n	80079d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079b8:	4b99      	ldr	r3, [pc, #612]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d05b      	beq.n	8007a7c <HAL_RCC_OscConfig+0x108>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d157      	bne.n	8007a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e23f      	b.n	8007e50 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079d8:	d106      	bne.n	80079e8 <HAL_RCC_OscConfig+0x74>
 80079da:	4b91      	ldr	r3, [pc, #580]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a90      	ldr	r2, [pc, #576]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 80079e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079e4:	6013      	str	r3, [r2, #0]
 80079e6:	e01d      	b.n	8007a24 <HAL_RCC_OscConfig+0xb0>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079f0:	d10c      	bne.n	8007a0c <HAL_RCC_OscConfig+0x98>
 80079f2:	4b8b      	ldr	r3, [pc, #556]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a8a      	ldr	r2, [pc, #552]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 80079f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079fc:	6013      	str	r3, [r2, #0]
 80079fe:	4b88      	ldr	r3, [pc, #544]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a87      	ldr	r2, [pc, #540]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	e00b      	b.n	8007a24 <HAL_RCC_OscConfig+0xb0>
 8007a0c:	4b84      	ldr	r3, [pc, #528]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a83      	ldr	r2, [pc, #524]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	4b81      	ldr	r3, [pc, #516]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a80      	ldr	r2, [pc, #512]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d013      	beq.n	8007a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a2c:	f7fd f934 	bl	8004c98 <HAL_GetTick>
 8007a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a32:	e008      	b.n	8007a46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a34:	f7fd f930 	bl	8004c98 <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b64      	cmp	r3, #100	; 0x64
 8007a40:	d901      	bls.n	8007a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e204      	b.n	8007e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a46:	4b76      	ldr	r3, [pc, #472]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d0f0      	beq.n	8007a34 <HAL_RCC_OscConfig+0xc0>
 8007a52:	e014      	b.n	8007a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a54:	f7fd f920 	bl	8004c98 <HAL_GetTick>
 8007a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a5a:	e008      	b.n	8007a6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a5c:	f7fd f91c 	bl	8004c98 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	2b64      	cmp	r3, #100	; 0x64
 8007a68:	d901      	bls.n	8007a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e1f0      	b.n	8007e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a6e:	4b6c      	ldr	r3, [pc, #432]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1f0      	bne.n	8007a5c <HAL_RCC_OscConfig+0xe8>
 8007a7a:	e000      	b.n	8007a7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d063      	beq.n	8007b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a8a:	4b65      	ldr	r3, [pc, #404]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f003 030c 	and.w	r3, r3, #12
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00b      	beq.n	8007aae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a96:	4b62      	ldr	r3, [pc, #392]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a9e:	2b08      	cmp	r3, #8
 8007aa0:	d11c      	bne.n	8007adc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007aa2:	4b5f      	ldr	r3, [pc, #380]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d116      	bne.n	8007adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007aae:	4b5c      	ldr	r3, [pc, #368]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d005      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x152>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d001      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e1c4      	b.n	8007e50 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ac6:	4b56      	ldr	r3, [pc, #344]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	00db      	lsls	r3, r3, #3
 8007ad4:	4952      	ldr	r1, [pc, #328]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ada:	e03a      	b.n	8007b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d020      	beq.n	8007b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ae4:	4b4f      	ldr	r3, [pc, #316]	; (8007c24 <HAL_RCC_OscConfig+0x2b0>)
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aea:	f7fd f8d5 	bl	8004c98 <HAL_GetTick>
 8007aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007af0:	e008      	b.n	8007b04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007af2:	f7fd f8d1 	bl	8004c98 <HAL_GetTick>
 8007af6:	4602      	mov	r2, r0
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d901      	bls.n	8007b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e1a5      	b.n	8007e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b04:	4b46      	ldr	r3, [pc, #280]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0302 	and.w	r3, r3, #2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d0f0      	beq.n	8007af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b10:	4b43      	ldr	r3, [pc, #268]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	00db      	lsls	r3, r3, #3
 8007b1e:	4940      	ldr	r1, [pc, #256]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	600b      	str	r3, [r1, #0]
 8007b24:	e015      	b.n	8007b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b26:	4b3f      	ldr	r3, [pc, #252]	; (8007c24 <HAL_RCC_OscConfig+0x2b0>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b2c:	f7fd f8b4 	bl	8004c98 <HAL_GetTick>
 8007b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b32:	e008      	b.n	8007b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b34:	f7fd f8b0 	bl	8004c98 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d901      	bls.n	8007b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e184      	b.n	8007e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b46:	4b36      	ldr	r3, [pc, #216]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1f0      	bne.n	8007b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0308 	and.w	r3, r3, #8
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d030      	beq.n	8007bc0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d016      	beq.n	8007b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b66:	4b30      	ldr	r3, [pc, #192]	; (8007c28 <HAL_RCC_OscConfig+0x2b4>)
 8007b68:	2201      	movs	r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b6c:	f7fd f894 	bl	8004c98 <HAL_GetTick>
 8007b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b72:	e008      	b.n	8007b86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b74:	f7fd f890 	bl	8004c98 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e164      	b.n	8007e50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b86:	4b26      	ldr	r3, [pc, #152]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0f0      	beq.n	8007b74 <HAL_RCC_OscConfig+0x200>
 8007b92:	e015      	b.n	8007bc0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b94:	4b24      	ldr	r3, [pc, #144]	; (8007c28 <HAL_RCC_OscConfig+0x2b4>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b9a:	f7fd f87d 	bl	8004c98 <HAL_GetTick>
 8007b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ba0:	e008      	b.n	8007bb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ba2:	f7fd f879 	bl	8004c98 <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d901      	bls.n	8007bb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e14d      	b.n	8007e50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bb4:	4b1a      	ldr	r3, [pc, #104]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1f0      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0304 	and.w	r3, r3, #4
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 80a0 	beq.w	8007d0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bd2:	4b13      	ldr	r3, [pc, #76]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10f      	bne.n	8007bfe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bde:	2300      	movs	r3, #0
 8007be0:	60bb      	str	r3, [r7, #8]
 8007be2:	4b0f      	ldr	r3, [pc, #60]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be6:	4a0e      	ldr	r2, [pc, #56]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bec:	6413      	str	r3, [r2, #64]	; 0x40
 8007bee:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <HAL_RCC_OscConfig+0x2ac>)
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf6:	60bb      	str	r3, [r7, #8]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bfe:	4b0b      	ldr	r3, [pc, #44]	; (8007c2c <HAL_RCC_OscConfig+0x2b8>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d121      	bne.n	8007c4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c0a:	4b08      	ldr	r3, [pc, #32]	; (8007c2c <HAL_RCC_OscConfig+0x2b8>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a07      	ldr	r2, [pc, #28]	; (8007c2c <HAL_RCC_OscConfig+0x2b8>)
 8007c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c16:	f7fd f83f 	bl	8004c98 <HAL_GetTick>
 8007c1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c1c:	e011      	b.n	8007c42 <HAL_RCC_OscConfig+0x2ce>
 8007c1e:	bf00      	nop
 8007c20:	40023800 	.word	0x40023800
 8007c24:	42470000 	.word	0x42470000
 8007c28:	42470e80 	.word	0x42470e80
 8007c2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c30:	f7fd f832 	bl	8004c98 <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d901      	bls.n	8007c42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e106      	b.n	8007e50 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c42:	4b85      	ldr	r3, [pc, #532]	; (8007e58 <HAL_RCC_OscConfig+0x4e4>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0f0      	beq.n	8007c30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d106      	bne.n	8007c64 <HAL_RCC_OscConfig+0x2f0>
 8007c56:	4b81      	ldr	r3, [pc, #516]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5a:	4a80      	ldr	r2, [pc, #512]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007c5c:	f043 0301 	orr.w	r3, r3, #1
 8007c60:	6713      	str	r3, [r2, #112]	; 0x70
 8007c62:	e01c      	b.n	8007c9e <HAL_RCC_OscConfig+0x32a>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	2b05      	cmp	r3, #5
 8007c6a:	d10c      	bne.n	8007c86 <HAL_RCC_OscConfig+0x312>
 8007c6c:	4b7b      	ldr	r3, [pc, #492]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c70:	4a7a      	ldr	r2, [pc, #488]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007c72:	f043 0304 	orr.w	r3, r3, #4
 8007c76:	6713      	str	r3, [r2, #112]	; 0x70
 8007c78:	4b78      	ldr	r3, [pc, #480]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c7c:	4a77      	ldr	r2, [pc, #476]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007c7e:	f043 0301 	orr.w	r3, r3, #1
 8007c82:	6713      	str	r3, [r2, #112]	; 0x70
 8007c84:	e00b      	b.n	8007c9e <HAL_RCC_OscConfig+0x32a>
 8007c86:	4b75      	ldr	r3, [pc, #468]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c8a:	4a74      	ldr	r2, [pc, #464]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007c8c:	f023 0301 	bic.w	r3, r3, #1
 8007c90:	6713      	str	r3, [r2, #112]	; 0x70
 8007c92:	4b72      	ldr	r3, [pc, #456]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c96:	4a71      	ldr	r2, [pc, #452]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007c98:	f023 0304 	bic.w	r3, r3, #4
 8007c9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d015      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ca6:	f7fc fff7 	bl	8004c98 <HAL_GetTick>
 8007caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cac:	e00a      	b.n	8007cc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cae:	f7fc fff3 	bl	8004c98 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d901      	bls.n	8007cc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e0c5      	b.n	8007e50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cc4:	4b65      	ldr	r3, [pc, #404]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d0ee      	beq.n	8007cae <HAL_RCC_OscConfig+0x33a>
 8007cd0:	e014      	b.n	8007cfc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cd2:	f7fc ffe1 	bl	8004c98 <HAL_GetTick>
 8007cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cd8:	e00a      	b.n	8007cf0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cda:	f7fc ffdd 	bl	8004c98 <HAL_GetTick>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d901      	bls.n	8007cf0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e0af      	b.n	8007e50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cf0:	4b5a      	ldr	r3, [pc, #360]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1ee      	bne.n	8007cda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d105      	bne.n	8007d0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d02:	4b56      	ldr	r3, [pc, #344]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d06:	4a55      	ldr	r2, [pc, #340]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f000 809b 	beq.w	8007e4e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d18:	4b50      	ldr	r3, [pc, #320]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	f003 030c 	and.w	r3, r3, #12
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	d05c      	beq.n	8007dde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d141      	bne.n	8007db0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d2c:	4b4c      	ldr	r3, [pc, #304]	; (8007e60 <HAL_RCC_OscConfig+0x4ec>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d32:	f7fc ffb1 	bl	8004c98 <HAL_GetTick>
 8007d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d38:	e008      	b.n	8007d4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d3a:	f7fc ffad 	bl	8004c98 <HAL_GetTick>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d901      	bls.n	8007d4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e081      	b.n	8007e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d4c:	4b43      	ldr	r3, [pc, #268]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1f0      	bne.n	8007d3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	69da      	ldr	r2, [r3, #28]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a1b      	ldr	r3, [r3, #32]
 8007d60:	431a      	orrs	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	019b      	lsls	r3, r3, #6
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6e:	085b      	lsrs	r3, r3, #1
 8007d70:	3b01      	subs	r3, #1
 8007d72:	041b      	lsls	r3, r3, #16
 8007d74:	431a      	orrs	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7a:	061b      	lsls	r3, r3, #24
 8007d7c:	4937      	ldr	r1, [pc, #220]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d82:	4b37      	ldr	r3, [pc, #220]	; (8007e60 <HAL_RCC_OscConfig+0x4ec>)
 8007d84:	2201      	movs	r2, #1
 8007d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d88:	f7fc ff86 	bl	8004c98 <HAL_GetTick>
 8007d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d8e:	e008      	b.n	8007da2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d90:	f7fc ff82 	bl	8004c98 <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d901      	bls.n	8007da2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e056      	b.n	8007e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007da2:	4b2e      	ldr	r3, [pc, #184]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0f0      	beq.n	8007d90 <HAL_RCC_OscConfig+0x41c>
 8007dae:	e04e      	b.n	8007e4e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007db0:	4b2b      	ldr	r3, [pc, #172]	; (8007e60 <HAL_RCC_OscConfig+0x4ec>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007db6:	f7fc ff6f 	bl	8004c98 <HAL_GetTick>
 8007dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dbc:	e008      	b.n	8007dd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dbe:	f7fc ff6b 	bl	8004c98 <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d901      	bls.n	8007dd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e03f      	b.n	8007e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dd0:	4b22      	ldr	r3, [pc, #136]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1f0      	bne.n	8007dbe <HAL_RCC_OscConfig+0x44a>
 8007ddc:	e037      	b.n	8007e4e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d101      	bne.n	8007dea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e032      	b.n	8007e50 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007dea:	4b1c      	ldr	r3, [pc, #112]	; (8007e5c <HAL_RCC_OscConfig+0x4e8>)
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d028      	beq.n	8007e4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d121      	bne.n	8007e4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d11a      	bne.n	8007e4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e20:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d111      	bne.n	8007e4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e30:	085b      	lsrs	r3, r3, #1
 8007e32:	3b01      	subs	r3, #1
 8007e34:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d107      	bne.n	8007e4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e44:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d001      	beq.n	8007e4e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e000      	b.n	8007e50 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	40007000 	.word	0x40007000
 8007e5c:	40023800 	.word	0x40023800
 8007e60:	42470060 	.word	0x42470060

08007e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e0cc      	b.n	8008012 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e78:	4b68      	ldr	r3, [pc, #416]	; (800801c <HAL_RCC_ClockConfig+0x1b8>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0307 	and.w	r3, r3, #7
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d90c      	bls.n	8007ea0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e86:	4b65      	ldr	r3, [pc, #404]	; (800801c <HAL_RCC_ClockConfig+0x1b8>)
 8007e88:	683a      	ldr	r2, [r7, #0]
 8007e8a:	b2d2      	uxtb	r2, r2
 8007e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e8e:	4b63      	ldr	r3, [pc, #396]	; (800801c <HAL_RCC_ClockConfig+0x1b8>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 0307 	and.w	r3, r3, #7
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d001      	beq.n	8007ea0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e0b8      	b.n	8008012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0302 	and.w	r3, r3, #2
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d020      	beq.n	8007eee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0304 	and.w	r3, r3, #4
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d005      	beq.n	8007ec4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007eb8:	4b59      	ldr	r3, [pc, #356]	; (8008020 <HAL_RCC_ClockConfig+0x1bc>)
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	4a58      	ldr	r2, [pc, #352]	; (8008020 <HAL_RCC_ClockConfig+0x1bc>)
 8007ebe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ec2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0308 	and.w	r3, r3, #8
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d005      	beq.n	8007edc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ed0:	4b53      	ldr	r3, [pc, #332]	; (8008020 <HAL_RCC_ClockConfig+0x1bc>)
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	4a52      	ldr	r2, [pc, #328]	; (8008020 <HAL_RCC_ClockConfig+0x1bc>)
 8007ed6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007eda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007edc:	4b50      	ldr	r3, [pc, #320]	; (8008020 <HAL_RCC_ClockConfig+0x1bc>)
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	494d      	ldr	r1, [pc, #308]	; (8008020 <HAL_RCC_ClockConfig+0x1bc>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d044      	beq.n	8007f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d107      	bne.n	8007f12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f02:	4b47      	ldr	r3, [pc, #284]	; (8008020 <HAL_RCC_ClockConfig+0x1bc>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d119      	bne.n	8007f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e07f      	b.n	8008012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d003      	beq.n	8007f22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d107      	bne.n	8007f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f22:	4b3f      	ldr	r3, [pc, #252]	; (8008020 <HAL_RCC_ClockConfig+0x1bc>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d109      	bne.n	8007f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e06f      	b.n	8008012 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f32:	4b3b      	ldr	r3, [pc, #236]	; (8008020 <HAL_RCC_ClockConfig+0x1bc>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0302 	and.w	r3, r3, #2
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d101      	bne.n	8007f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e067      	b.n	8008012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f42:	4b37      	ldr	r3, [pc, #220]	; (8008020 <HAL_RCC_ClockConfig+0x1bc>)
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f023 0203 	bic.w	r2, r3, #3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	4934      	ldr	r1, [pc, #208]	; (8008020 <HAL_RCC_ClockConfig+0x1bc>)
 8007f50:	4313      	orrs	r3, r2
 8007f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f54:	f7fc fea0 	bl	8004c98 <HAL_GetTick>
 8007f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f5a:	e00a      	b.n	8007f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f5c:	f7fc fe9c 	bl	8004c98 <HAL_GetTick>
 8007f60:	4602      	mov	r2, r0
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d901      	bls.n	8007f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e04f      	b.n	8008012 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f72:	4b2b      	ldr	r3, [pc, #172]	; (8008020 <HAL_RCC_ClockConfig+0x1bc>)
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f003 020c 	and.w	r2, r3, #12
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d1eb      	bne.n	8007f5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f84:	4b25      	ldr	r3, [pc, #148]	; (800801c <HAL_RCC_ClockConfig+0x1b8>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0307 	and.w	r3, r3, #7
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d20c      	bcs.n	8007fac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f92:	4b22      	ldr	r3, [pc, #136]	; (800801c <HAL_RCC_ClockConfig+0x1b8>)
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	b2d2      	uxtb	r2, r2
 8007f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f9a:	4b20      	ldr	r3, [pc, #128]	; (800801c <HAL_RCC_ClockConfig+0x1b8>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0307 	and.w	r3, r3, #7
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d001      	beq.n	8007fac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e032      	b.n	8008012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d008      	beq.n	8007fca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fb8:	4b19      	ldr	r3, [pc, #100]	; (8008020 <HAL_RCC_ClockConfig+0x1bc>)
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	4916      	ldr	r1, [pc, #88]	; (8008020 <HAL_RCC_ClockConfig+0x1bc>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0308 	and.w	r3, r3, #8
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d009      	beq.n	8007fea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007fd6:	4b12      	ldr	r3, [pc, #72]	; (8008020 <HAL_RCC_ClockConfig+0x1bc>)
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	00db      	lsls	r3, r3, #3
 8007fe4:	490e      	ldr	r1, [pc, #56]	; (8008020 <HAL_RCC_ClockConfig+0x1bc>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007fea:	f000 f821 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	4b0b      	ldr	r3, [pc, #44]	; (8008020 <HAL_RCC_ClockConfig+0x1bc>)
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	091b      	lsrs	r3, r3, #4
 8007ff6:	f003 030f 	and.w	r3, r3, #15
 8007ffa:	490a      	ldr	r1, [pc, #40]	; (8008024 <HAL_RCC_ClockConfig+0x1c0>)
 8007ffc:	5ccb      	ldrb	r3, [r1, r3]
 8007ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8008002:	4a09      	ldr	r2, [pc, #36]	; (8008028 <HAL_RCC_ClockConfig+0x1c4>)
 8008004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008006:	4b09      	ldr	r3, [pc, #36]	; (800802c <HAL_RCC_ClockConfig+0x1c8>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4618      	mov	r0, r3
 800800c:	f7fc fe00 	bl	8004c10 <HAL_InitTick>

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	40023c00 	.word	0x40023c00
 8008020:	40023800 	.word	0x40023800
 8008024:	0800a70c 	.word	0x0800a70c
 8008028:	20000018 	.word	0x20000018
 800802c:	2000001c 	.word	0x2000001c

08008030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008030:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008038:	2300      	movs	r3, #0
 800803a:	607b      	str	r3, [r7, #4]
 800803c:	2300      	movs	r3, #0
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	2300      	movs	r3, #0
 8008042:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008044:	2300      	movs	r3, #0
 8008046:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008048:	4b67      	ldr	r3, [pc, #412]	; (80081e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f003 030c 	and.w	r3, r3, #12
 8008050:	2b08      	cmp	r3, #8
 8008052:	d00d      	beq.n	8008070 <HAL_RCC_GetSysClockFreq+0x40>
 8008054:	2b08      	cmp	r3, #8
 8008056:	f200 80bd 	bhi.w	80081d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <HAL_RCC_GetSysClockFreq+0x34>
 800805e:	2b04      	cmp	r3, #4
 8008060:	d003      	beq.n	800806a <HAL_RCC_GetSysClockFreq+0x3a>
 8008062:	e0b7      	b.n	80081d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008064:	4b61      	ldr	r3, [pc, #388]	; (80081ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008066:	60bb      	str	r3, [r7, #8]
       break;
 8008068:	e0b7      	b.n	80081da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800806a:	4b61      	ldr	r3, [pc, #388]	; (80081f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800806c:	60bb      	str	r3, [r7, #8]
      break;
 800806e:	e0b4      	b.n	80081da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008070:	4b5d      	ldr	r3, [pc, #372]	; (80081e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008078:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800807a:	4b5b      	ldr	r3, [pc, #364]	; (80081e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d04d      	beq.n	8008122 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008086:	4b58      	ldr	r3, [pc, #352]	; (80081e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	099b      	lsrs	r3, r3, #6
 800808c:	461a      	mov	r2, r3
 800808e:	f04f 0300 	mov.w	r3, #0
 8008092:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008096:	f04f 0100 	mov.w	r1, #0
 800809a:	ea02 0800 	and.w	r8, r2, r0
 800809e:	ea03 0901 	and.w	r9, r3, r1
 80080a2:	4640      	mov	r0, r8
 80080a4:	4649      	mov	r1, r9
 80080a6:	f04f 0200 	mov.w	r2, #0
 80080aa:	f04f 0300 	mov.w	r3, #0
 80080ae:	014b      	lsls	r3, r1, #5
 80080b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80080b4:	0142      	lsls	r2, r0, #5
 80080b6:	4610      	mov	r0, r2
 80080b8:	4619      	mov	r1, r3
 80080ba:	ebb0 0008 	subs.w	r0, r0, r8
 80080be:	eb61 0109 	sbc.w	r1, r1, r9
 80080c2:	f04f 0200 	mov.w	r2, #0
 80080c6:	f04f 0300 	mov.w	r3, #0
 80080ca:	018b      	lsls	r3, r1, #6
 80080cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80080d0:	0182      	lsls	r2, r0, #6
 80080d2:	1a12      	subs	r2, r2, r0
 80080d4:	eb63 0301 	sbc.w	r3, r3, r1
 80080d8:	f04f 0000 	mov.w	r0, #0
 80080dc:	f04f 0100 	mov.w	r1, #0
 80080e0:	00d9      	lsls	r1, r3, #3
 80080e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80080e6:	00d0      	lsls	r0, r2, #3
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	eb12 0208 	adds.w	r2, r2, r8
 80080f0:	eb43 0309 	adc.w	r3, r3, r9
 80080f4:	f04f 0000 	mov.w	r0, #0
 80080f8:	f04f 0100 	mov.w	r1, #0
 80080fc:	0259      	lsls	r1, r3, #9
 80080fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008102:	0250      	lsls	r0, r2, #9
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	4610      	mov	r0, r2
 800810a:	4619      	mov	r1, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	461a      	mov	r2, r3
 8008110:	f04f 0300 	mov.w	r3, #0
 8008114:	f7f8 fe4a 	bl	8000dac <__aeabi_uldivmod>
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	4613      	mov	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	e04a      	b.n	80081b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008122:	4b31      	ldr	r3, [pc, #196]	; (80081e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	099b      	lsrs	r3, r3, #6
 8008128:	461a      	mov	r2, r3
 800812a:	f04f 0300 	mov.w	r3, #0
 800812e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008132:	f04f 0100 	mov.w	r1, #0
 8008136:	ea02 0400 	and.w	r4, r2, r0
 800813a:	ea03 0501 	and.w	r5, r3, r1
 800813e:	4620      	mov	r0, r4
 8008140:	4629      	mov	r1, r5
 8008142:	f04f 0200 	mov.w	r2, #0
 8008146:	f04f 0300 	mov.w	r3, #0
 800814a:	014b      	lsls	r3, r1, #5
 800814c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008150:	0142      	lsls	r2, r0, #5
 8008152:	4610      	mov	r0, r2
 8008154:	4619      	mov	r1, r3
 8008156:	1b00      	subs	r0, r0, r4
 8008158:	eb61 0105 	sbc.w	r1, r1, r5
 800815c:	f04f 0200 	mov.w	r2, #0
 8008160:	f04f 0300 	mov.w	r3, #0
 8008164:	018b      	lsls	r3, r1, #6
 8008166:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800816a:	0182      	lsls	r2, r0, #6
 800816c:	1a12      	subs	r2, r2, r0
 800816e:	eb63 0301 	sbc.w	r3, r3, r1
 8008172:	f04f 0000 	mov.w	r0, #0
 8008176:	f04f 0100 	mov.w	r1, #0
 800817a:	00d9      	lsls	r1, r3, #3
 800817c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008180:	00d0      	lsls	r0, r2, #3
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	1912      	adds	r2, r2, r4
 8008188:	eb45 0303 	adc.w	r3, r5, r3
 800818c:	f04f 0000 	mov.w	r0, #0
 8008190:	f04f 0100 	mov.w	r1, #0
 8008194:	0299      	lsls	r1, r3, #10
 8008196:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800819a:	0290      	lsls	r0, r2, #10
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4610      	mov	r0, r2
 80081a2:	4619      	mov	r1, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	461a      	mov	r2, r3
 80081a8:	f04f 0300 	mov.w	r3, #0
 80081ac:	f7f8 fdfe 	bl	8000dac <__aeabi_uldivmod>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	4613      	mov	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80081b8:	4b0b      	ldr	r3, [pc, #44]	; (80081e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	0c1b      	lsrs	r3, r3, #16
 80081be:	f003 0303 	and.w	r3, r3, #3
 80081c2:	3301      	adds	r3, #1
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d0:	60bb      	str	r3, [r7, #8]
      break;
 80081d2:	e002      	b.n	80081da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081d4:	4b05      	ldr	r3, [pc, #20]	; (80081ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80081d6:	60bb      	str	r3, [r7, #8]
      break;
 80081d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081da:	68bb      	ldr	r3, [r7, #8]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80081e6:	bf00      	nop
 80081e8:	40023800 	.word	0x40023800
 80081ec:	00f42400 	.word	0x00f42400
 80081f0:	007a1200 	.word	0x007a1200

080081f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081f4:	b480      	push	{r7}
 80081f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081f8:	4b03      	ldr	r3, [pc, #12]	; (8008208 <HAL_RCC_GetHCLKFreq+0x14>)
 80081fa:	681b      	ldr	r3, [r3, #0]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	20000018 	.word	0x20000018

0800820c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008210:	f7ff fff0 	bl	80081f4 <HAL_RCC_GetHCLKFreq>
 8008214:	4602      	mov	r2, r0
 8008216:	4b05      	ldr	r3, [pc, #20]	; (800822c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	0a9b      	lsrs	r3, r3, #10
 800821c:	f003 0307 	and.w	r3, r3, #7
 8008220:	4903      	ldr	r1, [pc, #12]	; (8008230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008222:	5ccb      	ldrb	r3, [r1, r3]
 8008224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008228:	4618      	mov	r0, r3
 800822a:	bd80      	pop	{r7, pc}
 800822c:	40023800 	.word	0x40023800
 8008230:	0800a71c 	.word	0x0800a71c

08008234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008238:	f7ff ffdc 	bl	80081f4 <HAL_RCC_GetHCLKFreq>
 800823c:	4602      	mov	r2, r0
 800823e:	4b05      	ldr	r3, [pc, #20]	; (8008254 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	0b5b      	lsrs	r3, r3, #13
 8008244:	f003 0307 	and.w	r3, r3, #7
 8008248:	4903      	ldr	r1, [pc, #12]	; (8008258 <HAL_RCC_GetPCLK2Freq+0x24>)
 800824a:	5ccb      	ldrb	r3, [r1, r3]
 800824c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008250:	4618      	mov	r0, r3
 8008252:	bd80      	pop	{r7, pc}
 8008254:	40023800 	.word	0x40023800
 8008258:	0800a71c 	.word	0x0800a71c

0800825c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e041      	b.n	80082f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	d106      	bne.n	8008288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7fc fa86 	bl	8004794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2202      	movs	r2, #2
 800828c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3304      	adds	r3, #4
 8008298:	4619      	mov	r1, r3
 800829a:	4610      	mov	r0, r2
 800829c:	f000 fdda 	bl	8008e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b01      	cmp	r3, #1
 800830e:	d001      	beq.n	8008314 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e03c      	b.n	800838e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a1e      	ldr	r2, [pc, #120]	; (800839c <HAL_TIM_Base_Start+0xa0>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d018      	beq.n	8008358 <HAL_TIM_Base_Start+0x5c>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800832e:	d013      	beq.n	8008358 <HAL_TIM_Base_Start+0x5c>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a1a      	ldr	r2, [pc, #104]	; (80083a0 <HAL_TIM_Base_Start+0xa4>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d00e      	beq.n	8008358 <HAL_TIM_Base_Start+0x5c>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a19      	ldr	r2, [pc, #100]	; (80083a4 <HAL_TIM_Base_Start+0xa8>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d009      	beq.n	8008358 <HAL_TIM_Base_Start+0x5c>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a17      	ldr	r2, [pc, #92]	; (80083a8 <HAL_TIM_Base_Start+0xac>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d004      	beq.n	8008358 <HAL_TIM_Base_Start+0x5c>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a16      	ldr	r2, [pc, #88]	; (80083ac <HAL_TIM_Base_Start+0xb0>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d111      	bne.n	800837c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f003 0307 	and.w	r3, r3, #7
 8008362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b06      	cmp	r3, #6
 8008368:	d010      	beq.n	800838c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f042 0201 	orr.w	r2, r2, #1
 8008378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800837a:	e007      	b.n	800838c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0201 	orr.w	r2, r2, #1
 800838a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	40010000 	.word	0x40010000
 80083a0:	40000400 	.word	0x40000400
 80083a4:	40000800 	.word	0x40000800
 80083a8:	40000c00 	.word	0x40000c00
 80083ac:	40014000 	.word	0x40014000

080083b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d001      	beq.n	80083c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	e044      	b.n	8008452 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2202      	movs	r2, #2
 80083cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68da      	ldr	r2, [r3, #12]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f042 0201 	orr.w	r2, r2, #1
 80083de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a1e      	ldr	r2, [pc, #120]	; (8008460 <HAL_TIM_Base_Start_IT+0xb0>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d018      	beq.n	800841c <HAL_TIM_Base_Start_IT+0x6c>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083f2:	d013      	beq.n	800841c <HAL_TIM_Base_Start_IT+0x6c>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a1a      	ldr	r2, [pc, #104]	; (8008464 <HAL_TIM_Base_Start_IT+0xb4>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d00e      	beq.n	800841c <HAL_TIM_Base_Start_IT+0x6c>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a19      	ldr	r2, [pc, #100]	; (8008468 <HAL_TIM_Base_Start_IT+0xb8>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d009      	beq.n	800841c <HAL_TIM_Base_Start_IT+0x6c>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a17      	ldr	r2, [pc, #92]	; (800846c <HAL_TIM_Base_Start_IT+0xbc>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d004      	beq.n	800841c <HAL_TIM_Base_Start_IT+0x6c>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a16      	ldr	r2, [pc, #88]	; (8008470 <HAL_TIM_Base_Start_IT+0xc0>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d111      	bne.n	8008440 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2b06      	cmp	r3, #6
 800842c:	d010      	beq.n	8008450 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f042 0201 	orr.w	r2, r2, #1
 800843c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800843e:	e007      	b.n	8008450 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f042 0201 	orr.w	r2, r2, #1
 800844e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	40010000 	.word	0x40010000
 8008464:	40000400 	.word	0x40000400
 8008468:	40000800 	.word	0x40000800
 800846c:	40000c00 	.word	0x40000c00
 8008470:	40014000 	.word	0x40014000

08008474 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e041      	b.n	800850a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d106      	bne.n	80084a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f839 	bl	8008512 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2202      	movs	r2, #2
 80084a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	3304      	adds	r3, #4
 80084b0:	4619      	mov	r1, r3
 80084b2:	4610      	mov	r0, r2
 80084b4:	f000 fcce 	bl	8008e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008512:	b480      	push	{r7}
 8008514:	b083      	sub	sp, #12
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800851a:	bf00      	nop
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
	...

08008528 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d109      	bne.n	800854c <HAL_TIM_PWM_Start+0x24>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b01      	cmp	r3, #1
 8008542:	bf14      	ite	ne
 8008544:	2301      	movne	r3, #1
 8008546:	2300      	moveq	r3, #0
 8008548:	b2db      	uxtb	r3, r3
 800854a:	e022      	b.n	8008592 <HAL_TIM_PWM_Start+0x6a>
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2b04      	cmp	r3, #4
 8008550:	d109      	bne.n	8008566 <HAL_TIM_PWM_Start+0x3e>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b01      	cmp	r3, #1
 800855c:	bf14      	ite	ne
 800855e:	2301      	movne	r3, #1
 8008560:	2300      	moveq	r3, #0
 8008562:	b2db      	uxtb	r3, r3
 8008564:	e015      	b.n	8008592 <HAL_TIM_PWM_Start+0x6a>
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	2b08      	cmp	r3, #8
 800856a:	d109      	bne.n	8008580 <HAL_TIM_PWM_Start+0x58>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008572:	b2db      	uxtb	r3, r3
 8008574:	2b01      	cmp	r3, #1
 8008576:	bf14      	ite	ne
 8008578:	2301      	movne	r3, #1
 800857a:	2300      	moveq	r3, #0
 800857c:	b2db      	uxtb	r3, r3
 800857e:	e008      	b.n	8008592 <HAL_TIM_PWM_Start+0x6a>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008586:	b2db      	uxtb	r3, r3
 8008588:	2b01      	cmp	r3, #1
 800858a:	bf14      	ite	ne
 800858c:	2301      	movne	r3, #1
 800858e:	2300      	moveq	r3, #0
 8008590:	b2db      	uxtb	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e068      	b.n	800866c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d104      	bne.n	80085aa <HAL_TIM_PWM_Start+0x82>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2202      	movs	r2, #2
 80085a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085a8:	e013      	b.n	80085d2 <HAL_TIM_PWM_Start+0xaa>
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2b04      	cmp	r3, #4
 80085ae:	d104      	bne.n	80085ba <HAL_TIM_PWM_Start+0x92>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2202      	movs	r2, #2
 80085b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085b8:	e00b      	b.n	80085d2 <HAL_TIM_PWM_Start+0xaa>
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2b08      	cmp	r3, #8
 80085be:	d104      	bne.n	80085ca <HAL_TIM_PWM_Start+0xa2>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2202      	movs	r2, #2
 80085c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085c8:	e003      	b.n	80085d2 <HAL_TIM_PWM_Start+0xaa>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2202      	movs	r2, #2
 80085ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2201      	movs	r2, #1
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 fee0 	bl	80093a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a23      	ldr	r2, [pc, #140]	; (8008674 <HAL_TIM_PWM_Start+0x14c>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d107      	bne.n	80085fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a1d      	ldr	r2, [pc, #116]	; (8008674 <HAL_TIM_PWM_Start+0x14c>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d018      	beq.n	8008636 <HAL_TIM_PWM_Start+0x10e>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800860c:	d013      	beq.n	8008636 <HAL_TIM_PWM_Start+0x10e>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a19      	ldr	r2, [pc, #100]	; (8008678 <HAL_TIM_PWM_Start+0x150>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d00e      	beq.n	8008636 <HAL_TIM_PWM_Start+0x10e>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a17      	ldr	r2, [pc, #92]	; (800867c <HAL_TIM_PWM_Start+0x154>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d009      	beq.n	8008636 <HAL_TIM_PWM_Start+0x10e>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a16      	ldr	r2, [pc, #88]	; (8008680 <HAL_TIM_PWM_Start+0x158>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d004      	beq.n	8008636 <HAL_TIM_PWM_Start+0x10e>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a14      	ldr	r2, [pc, #80]	; (8008684 <HAL_TIM_PWM_Start+0x15c>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d111      	bne.n	800865a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f003 0307 	and.w	r3, r3, #7
 8008640:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b06      	cmp	r3, #6
 8008646:	d010      	beq.n	800866a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f042 0201 	orr.w	r2, r2, #1
 8008656:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008658:	e007      	b.n	800866a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f042 0201 	orr.w	r2, r2, #1
 8008668:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	40010000 	.word	0x40010000
 8008678:	40000400 	.word	0x40000400
 800867c:	40000800 	.word	0x40000800
 8008680:	40000c00 	.word	0x40000c00
 8008684:	40014000 	.word	0x40014000

08008688 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e097      	b.n	80087cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d106      	bne.n	80086b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7fc f827 	bl	8004704 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2202      	movs	r2, #2
 80086ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	6812      	ldr	r2, [r2, #0]
 80086c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086cc:	f023 0307 	bic.w	r3, r3, #7
 80086d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	3304      	adds	r3, #4
 80086da:	4619      	mov	r1, r3
 80086dc:	4610      	mov	r0, r2
 80086de:	f000 fbb9 	bl	8008e54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6a1b      	ldr	r3, [r3, #32]
 80086f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	4313      	orrs	r3, r2
 8008702:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800870a:	f023 0303 	bic.w	r3, r3, #3
 800870e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	689a      	ldr	r2, [r3, #8]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	021b      	lsls	r3, r3, #8
 800871a:	4313      	orrs	r3, r2
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	4313      	orrs	r3, r2
 8008720:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008728:	f023 030c 	bic.w	r3, r3, #12
 800872c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008734:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008738:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	68da      	ldr	r2, [r3, #12]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	69db      	ldr	r3, [r3, #28]
 8008742:	021b      	lsls	r3, r3, #8
 8008744:	4313      	orrs	r3, r2
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	4313      	orrs	r3, r2
 800874a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	011a      	lsls	r2, r3, #4
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	031b      	lsls	r3, r3, #12
 8008758:	4313      	orrs	r3, r2
 800875a:	693a      	ldr	r2, [r7, #16]
 800875c:	4313      	orrs	r3, r2
 800875e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008766:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800876e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	011b      	lsls	r3, r3, #4
 800877a:	4313      	orrs	r3, r2
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	4313      	orrs	r3, r2
 8008780:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2201      	movs	r2, #1
 800879e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80087fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d110      	bne.n	8008826 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d102      	bne.n	8008810 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800880a:	7b7b      	ldrb	r3, [r7, #13]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d001      	beq.n	8008814 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e069      	b.n	80088e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2202      	movs	r2, #2
 8008818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2202      	movs	r2, #2
 8008820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008824:	e031      	b.n	800888a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b04      	cmp	r3, #4
 800882a:	d110      	bne.n	800884e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800882c:	7bbb      	ldrb	r3, [r7, #14]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d102      	bne.n	8008838 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008832:	7b3b      	ldrb	r3, [r7, #12]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d001      	beq.n	800883c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e055      	b.n	80088e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2202      	movs	r2, #2
 8008840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2202      	movs	r2, #2
 8008848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800884c:	e01d      	b.n	800888a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800884e:	7bfb      	ldrb	r3, [r7, #15]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d108      	bne.n	8008866 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008854:	7bbb      	ldrb	r3, [r7, #14]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d105      	bne.n	8008866 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800885a:	7b7b      	ldrb	r3, [r7, #13]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d102      	bne.n	8008866 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008860:	7b3b      	ldrb	r3, [r7, #12]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d001      	beq.n	800886a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e03e      	b.n	80088e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2202      	movs	r2, #2
 800886e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2202      	movs	r2, #2
 8008876:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2202      	movs	r2, #2
 800887e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2202      	movs	r2, #2
 8008886:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d003      	beq.n	8008898 <HAL_TIM_Encoder_Start+0xc4>
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	2b04      	cmp	r3, #4
 8008894:	d008      	beq.n	80088a8 <HAL_TIM_Encoder_Start+0xd4>
 8008896:	e00f      	b.n	80088b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2201      	movs	r2, #1
 800889e:	2100      	movs	r1, #0
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 fd7d 	bl	80093a0 <TIM_CCxChannelCmd>
      break;
 80088a6:	e016      	b.n	80088d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2201      	movs	r2, #1
 80088ae:	2104      	movs	r1, #4
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 fd75 	bl	80093a0 <TIM_CCxChannelCmd>
      break;
 80088b6:	e00e      	b.n	80088d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2201      	movs	r2, #1
 80088be:	2100      	movs	r1, #0
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 fd6d 	bl	80093a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2201      	movs	r2, #1
 80088cc:	2104      	movs	r1, #4
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 fd66 	bl	80093a0 <TIM_CCxChannelCmd>
      break;
 80088d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f042 0201 	orr.w	r2, r2, #1
 80088e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b02      	cmp	r3, #2
 8008904:	d122      	bne.n	800894c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	f003 0302 	and.w	r3, r3, #2
 8008910:	2b02      	cmp	r3, #2
 8008912:	d11b      	bne.n	800894c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f06f 0202 	mvn.w	r2, #2
 800891c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	f003 0303 	and.w	r3, r3, #3
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fa70 	bl	8008e18 <HAL_TIM_IC_CaptureCallback>
 8008938:	e005      	b.n	8008946 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fa62 	bl	8008e04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fa73 	bl	8008e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	f003 0304 	and.w	r3, r3, #4
 8008956:	2b04      	cmp	r3, #4
 8008958:	d122      	bne.n	80089a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	f003 0304 	and.w	r3, r3, #4
 8008964:	2b04      	cmp	r3, #4
 8008966:	d11b      	bne.n	80089a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f06f 0204 	mvn.w	r2, #4
 8008970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2202      	movs	r2, #2
 8008976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008982:	2b00      	cmp	r3, #0
 8008984:	d003      	beq.n	800898e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fa46 	bl	8008e18 <HAL_TIM_IC_CaptureCallback>
 800898c:	e005      	b.n	800899a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fa38 	bl	8008e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fa49 	bl	8008e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	f003 0308 	and.w	r3, r3, #8
 80089aa:	2b08      	cmp	r3, #8
 80089ac:	d122      	bne.n	80089f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	f003 0308 	and.w	r3, r3, #8
 80089b8:	2b08      	cmp	r3, #8
 80089ba:	d11b      	bne.n	80089f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f06f 0208 	mvn.w	r2, #8
 80089c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2204      	movs	r2, #4
 80089ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	f003 0303 	and.w	r3, r3, #3
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fa1c 	bl	8008e18 <HAL_TIM_IC_CaptureCallback>
 80089e0:	e005      	b.n	80089ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fa0e 	bl	8008e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fa1f 	bl	8008e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	f003 0310 	and.w	r3, r3, #16
 80089fe:	2b10      	cmp	r3, #16
 8008a00:	d122      	bne.n	8008a48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f003 0310 	and.w	r3, r3, #16
 8008a0c:	2b10      	cmp	r3, #16
 8008a0e:	d11b      	bne.n	8008a48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f06f 0210 	mvn.w	r2, #16
 8008a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2208      	movs	r2, #8
 8008a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	69db      	ldr	r3, [r3, #28]
 8008a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f9f2 	bl	8008e18 <HAL_TIM_IC_CaptureCallback>
 8008a34:	e005      	b.n	8008a42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f9e4 	bl	8008e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f9f5 	bl	8008e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d10e      	bne.n	8008a74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f003 0301 	and.w	r3, r3, #1
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d107      	bne.n	8008a74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f06f 0201 	mvn.w	r2, #1
 8008a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7f9 f8dc 	bl	8001c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a7e:	2b80      	cmp	r3, #128	; 0x80
 8008a80:	d10e      	bne.n	8008aa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a8c:	2b80      	cmp	r3, #128	; 0x80
 8008a8e:	d107      	bne.n	8008aa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fd1e 	bl	80094dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aaa:	2b40      	cmp	r3, #64	; 0x40
 8008aac:	d10e      	bne.n	8008acc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab8:	2b40      	cmp	r3, #64	; 0x40
 8008aba:	d107      	bne.n	8008acc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f9ba 	bl	8008e40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	f003 0320 	and.w	r3, r3, #32
 8008ad6:	2b20      	cmp	r3, #32
 8008ad8:	d10e      	bne.n	8008af8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f003 0320 	and.w	r3, r3, #32
 8008ae4:	2b20      	cmp	r3, #32
 8008ae6:	d107      	bne.n	8008af8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f06f 0220 	mvn.w	r2, #32
 8008af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fce8 	bl	80094c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008af8:	bf00      	nop
 8008afa:	3708      	adds	r7, #8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d101      	bne.n	8008b1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008b16:	2302      	movs	r3, #2
 8008b18:	e0ac      	b.n	8008c74 <HAL_TIM_PWM_ConfigChannel+0x174>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b0c      	cmp	r3, #12
 8008b26:	f200 809f 	bhi.w	8008c68 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008b2a:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b30:	08008b65 	.word	0x08008b65
 8008b34:	08008c69 	.word	0x08008c69
 8008b38:	08008c69 	.word	0x08008c69
 8008b3c:	08008c69 	.word	0x08008c69
 8008b40:	08008ba5 	.word	0x08008ba5
 8008b44:	08008c69 	.word	0x08008c69
 8008b48:	08008c69 	.word	0x08008c69
 8008b4c:	08008c69 	.word	0x08008c69
 8008b50:	08008be7 	.word	0x08008be7
 8008b54:	08008c69 	.word	0x08008c69
 8008b58:	08008c69 	.word	0x08008c69
 8008b5c:	08008c69 	.word	0x08008c69
 8008b60:	08008c27 	.word	0x08008c27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68b9      	ldr	r1, [r7, #8]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 f9f2 	bl	8008f54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	699a      	ldr	r2, [r3, #24]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f042 0208 	orr.w	r2, r2, #8
 8008b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	699a      	ldr	r2, [r3, #24]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f022 0204 	bic.w	r2, r2, #4
 8008b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6999      	ldr	r1, [r3, #24]
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	691a      	ldr	r2, [r3, #16]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	430a      	orrs	r2, r1
 8008ba0:	619a      	str	r2, [r3, #24]
      break;
 8008ba2:	e062      	b.n	8008c6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68b9      	ldr	r1, [r7, #8]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fa38 	bl	8009020 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	699a      	ldr	r2, [r3, #24]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	699a      	ldr	r2, [r3, #24]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6999      	ldr	r1, [r3, #24]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	021a      	lsls	r2, r3, #8
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	430a      	orrs	r2, r1
 8008be2:	619a      	str	r2, [r3, #24]
      break;
 8008be4:	e041      	b.n	8008c6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68b9      	ldr	r1, [r7, #8]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 fa83 	bl	80090f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	69da      	ldr	r2, [r3, #28]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f042 0208 	orr.w	r2, r2, #8
 8008c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69da      	ldr	r2, [r3, #28]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f022 0204 	bic.w	r2, r2, #4
 8008c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	69d9      	ldr	r1, [r3, #28]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	691a      	ldr	r2, [r3, #16]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	430a      	orrs	r2, r1
 8008c22:	61da      	str	r2, [r3, #28]
      break;
 8008c24:	e021      	b.n	8008c6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68b9      	ldr	r1, [r7, #8]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f000 facd 	bl	80091cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	69da      	ldr	r2, [r3, #28]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	69da      	ldr	r2, [r3, #28]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	69d9      	ldr	r1, [r3, #28]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	021a      	lsls	r2, r3, #8
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	430a      	orrs	r2, r1
 8008c64:	61da      	str	r2, [r3, #28]
      break;
 8008c66:	e000      	b.n	8008c6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008c68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d101      	bne.n	8008c94 <HAL_TIM_ConfigClockSource+0x18>
 8008c90:	2302      	movs	r3, #2
 8008c92:	e0b3      	b.n	8008dfc <HAL_TIM_ConfigClockSource+0x180>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008cb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ccc:	d03e      	beq.n	8008d4c <HAL_TIM_ConfigClockSource+0xd0>
 8008cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cd2:	f200 8087 	bhi.w	8008de4 <HAL_TIM_ConfigClockSource+0x168>
 8008cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cda:	f000 8085 	beq.w	8008de8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ce2:	d87f      	bhi.n	8008de4 <HAL_TIM_ConfigClockSource+0x168>
 8008ce4:	2b70      	cmp	r3, #112	; 0x70
 8008ce6:	d01a      	beq.n	8008d1e <HAL_TIM_ConfigClockSource+0xa2>
 8008ce8:	2b70      	cmp	r3, #112	; 0x70
 8008cea:	d87b      	bhi.n	8008de4 <HAL_TIM_ConfigClockSource+0x168>
 8008cec:	2b60      	cmp	r3, #96	; 0x60
 8008cee:	d050      	beq.n	8008d92 <HAL_TIM_ConfigClockSource+0x116>
 8008cf0:	2b60      	cmp	r3, #96	; 0x60
 8008cf2:	d877      	bhi.n	8008de4 <HAL_TIM_ConfigClockSource+0x168>
 8008cf4:	2b50      	cmp	r3, #80	; 0x50
 8008cf6:	d03c      	beq.n	8008d72 <HAL_TIM_ConfigClockSource+0xf6>
 8008cf8:	2b50      	cmp	r3, #80	; 0x50
 8008cfa:	d873      	bhi.n	8008de4 <HAL_TIM_ConfigClockSource+0x168>
 8008cfc:	2b40      	cmp	r3, #64	; 0x40
 8008cfe:	d058      	beq.n	8008db2 <HAL_TIM_ConfigClockSource+0x136>
 8008d00:	2b40      	cmp	r3, #64	; 0x40
 8008d02:	d86f      	bhi.n	8008de4 <HAL_TIM_ConfigClockSource+0x168>
 8008d04:	2b30      	cmp	r3, #48	; 0x30
 8008d06:	d064      	beq.n	8008dd2 <HAL_TIM_ConfigClockSource+0x156>
 8008d08:	2b30      	cmp	r3, #48	; 0x30
 8008d0a:	d86b      	bhi.n	8008de4 <HAL_TIM_ConfigClockSource+0x168>
 8008d0c:	2b20      	cmp	r3, #32
 8008d0e:	d060      	beq.n	8008dd2 <HAL_TIM_ConfigClockSource+0x156>
 8008d10:	2b20      	cmp	r3, #32
 8008d12:	d867      	bhi.n	8008de4 <HAL_TIM_ConfigClockSource+0x168>
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d05c      	beq.n	8008dd2 <HAL_TIM_ConfigClockSource+0x156>
 8008d18:	2b10      	cmp	r3, #16
 8008d1a:	d05a      	beq.n	8008dd2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008d1c:	e062      	b.n	8008de4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6818      	ldr	r0, [r3, #0]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	6899      	ldr	r1, [r3, #8]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	f000 fb17 	bl	8009360 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	609a      	str	r2, [r3, #8]
      break;
 8008d4a:	e04e      	b.n	8008dea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6818      	ldr	r0, [r3, #0]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	6899      	ldr	r1, [r3, #8]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	f000 fb00 	bl	8009360 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	689a      	ldr	r2, [r3, #8]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d6e:	609a      	str	r2, [r3, #8]
      break;
 8008d70:	e03b      	b.n	8008dea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6818      	ldr	r0, [r3, #0]
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	6859      	ldr	r1, [r3, #4]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	f000 fa74 	bl	800926c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2150      	movs	r1, #80	; 0x50
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f000 facd 	bl	800932a <TIM_ITRx_SetConfig>
      break;
 8008d90:	e02b      	b.n	8008dea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6818      	ldr	r0, [r3, #0]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	6859      	ldr	r1, [r3, #4]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	f000 fa93 	bl	80092ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2160      	movs	r1, #96	; 0x60
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 fabd 	bl	800932a <TIM_ITRx_SetConfig>
      break;
 8008db0:	e01b      	b.n	8008dea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6818      	ldr	r0, [r3, #0]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	6859      	ldr	r1, [r3, #4]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	f000 fa54 	bl	800926c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2140      	movs	r1, #64	; 0x40
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f000 faad 	bl	800932a <TIM_ITRx_SetConfig>
      break;
 8008dd0:	e00b      	b.n	8008dea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4619      	mov	r1, r3
 8008ddc:	4610      	mov	r0, r2
 8008dde:	f000 faa4 	bl	800932a <TIM_ITRx_SetConfig>
        break;
 8008de2:	e002      	b.n	8008dea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008de4:	bf00      	nop
 8008de6:	e000      	b.n	8008dea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008de8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e34:	bf00      	nop
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a34      	ldr	r2, [pc, #208]	; (8008f38 <TIM_Base_SetConfig+0xe4>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d00f      	beq.n	8008e8c <TIM_Base_SetConfig+0x38>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e72:	d00b      	beq.n	8008e8c <TIM_Base_SetConfig+0x38>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a31      	ldr	r2, [pc, #196]	; (8008f3c <TIM_Base_SetConfig+0xe8>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d007      	beq.n	8008e8c <TIM_Base_SetConfig+0x38>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a30      	ldr	r2, [pc, #192]	; (8008f40 <TIM_Base_SetConfig+0xec>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d003      	beq.n	8008e8c <TIM_Base_SetConfig+0x38>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a2f      	ldr	r2, [pc, #188]	; (8008f44 <TIM_Base_SetConfig+0xf0>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d108      	bne.n	8008e9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a25      	ldr	r2, [pc, #148]	; (8008f38 <TIM_Base_SetConfig+0xe4>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d01b      	beq.n	8008ede <TIM_Base_SetConfig+0x8a>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eac:	d017      	beq.n	8008ede <TIM_Base_SetConfig+0x8a>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a22      	ldr	r2, [pc, #136]	; (8008f3c <TIM_Base_SetConfig+0xe8>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d013      	beq.n	8008ede <TIM_Base_SetConfig+0x8a>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a21      	ldr	r2, [pc, #132]	; (8008f40 <TIM_Base_SetConfig+0xec>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d00f      	beq.n	8008ede <TIM_Base_SetConfig+0x8a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a20      	ldr	r2, [pc, #128]	; (8008f44 <TIM_Base_SetConfig+0xf0>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d00b      	beq.n	8008ede <TIM_Base_SetConfig+0x8a>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a1f      	ldr	r2, [pc, #124]	; (8008f48 <TIM_Base_SetConfig+0xf4>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d007      	beq.n	8008ede <TIM_Base_SetConfig+0x8a>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a1e      	ldr	r2, [pc, #120]	; (8008f4c <TIM_Base_SetConfig+0xf8>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d003      	beq.n	8008ede <TIM_Base_SetConfig+0x8a>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a1d      	ldr	r2, [pc, #116]	; (8008f50 <TIM_Base_SetConfig+0xfc>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d108      	bne.n	8008ef0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	689a      	ldr	r2, [r3, #8]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a08      	ldr	r2, [pc, #32]	; (8008f38 <TIM_Base_SetConfig+0xe4>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d103      	bne.n	8008f24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	691a      	ldr	r2, [r3, #16]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	615a      	str	r2, [r3, #20]
}
 8008f2a:	bf00      	nop
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	40010000 	.word	0x40010000
 8008f3c:	40000400 	.word	0x40000400
 8008f40:	40000800 	.word	0x40000800
 8008f44:	40000c00 	.word	0x40000c00
 8008f48:	40014000 	.word	0x40014000
 8008f4c:	40014400 	.word	0x40014400
 8008f50:	40014800 	.word	0x40014800

08008f54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b087      	sub	sp, #28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a1b      	ldr	r3, [r3, #32]
 8008f62:	f023 0201 	bic.w	r2, r3, #1
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f023 0303 	bic.w	r3, r3, #3
 8008f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	f023 0302 	bic.w	r3, r3, #2
 8008f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a1c      	ldr	r2, [pc, #112]	; (800901c <TIM_OC1_SetConfig+0xc8>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d10c      	bne.n	8008fca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	f023 0308 	bic.w	r3, r3, #8
 8008fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	697a      	ldr	r2, [r7, #20]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	f023 0304 	bic.w	r3, r3, #4
 8008fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a13      	ldr	r2, [pc, #76]	; (800901c <TIM_OC1_SetConfig+0xc8>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d111      	bne.n	8008ff6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	621a      	str	r2, [r3, #32]
}
 8009010:	bf00      	nop
 8009012:	371c      	adds	r7, #28
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	40010000 	.word	0x40010000

08009020 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009020:	b480      	push	{r7}
 8009022:	b087      	sub	sp, #28
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	f023 0210 	bic.w	r2, r3, #16
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a1b      	ldr	r3, [r3, #32]
 800903a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800904e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	021b      	lsls	r3, r3, #8
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	4313      	orrs	r3, r2
 8009062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f023 0320 	bic.w	r3, r3, #32
 800906a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	011b      	lsls	r3, r3, #4
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	4313      	orrs	r3, r2
 8009076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a1e      	ldr	r2, [pc, #120]	; (80090f4 <TIM_OC2_SetConfig+0xd4>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d10d      	bne.n	800909c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	011b      	lsls	r3, r3, #4
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	4313      	orrs	r3, r2
 8009092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800909a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a15      	ldr	r2, [pc, #84]	; (80090f4 <TIM_OC2_SetConfig+0xd4>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d113      	bne.n	80090cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	693a      	ldr	r2, [r7, #16]
 80090bc:	4313      	orrs	r3, r2
 80090be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	685a      	ldr	r2, [r3, #4]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	621a      	str	r2, [r3, #32]
}
 80090e6:	bf00      	nop
 80090e8:	371c      	adds	r7, #28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	40010000 	.word	0x40010000

080090f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b087      	sub	sp, #28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f023 0303 	bic.w	r3, r3, #3
 800912e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	4313      	orrs	r3, r2
 8009138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	021b      	lsls	r3, r3, #8
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	4313      	orrs	r3, r2
 800914c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a1d      	ldr	r2, [pc, #116]	; (80091c8 <TIM_OC3_SetConfig+0xd0>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d10d      	bne.n	8009172 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800915c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	021b      	lsls	r3, r3, #8
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	4313      	orrs	r3, r2
 8009168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a14      	ldr	r2, [pc, #80]	; (80091c8 <TIM_OC3_SetConfig+0xd0>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d113      	bne.n	80091a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	011b      	lsls	r3, r3, #4
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	4313      	orrs	r3, r2
 8009194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	011b      	lsls	r3, r3, #4
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	4313      	orrs	r3, r2
 80091a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	621a      	str	r2, [r3, #32]
}
 80091bc:	bf00      	nop
 80091be:	371c      	adds	r7, #28
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr
 80091c8:	40010000 	.word	0x40010000

080091cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b087      	sub	sp, #28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	69db      	ldr	r3, [r3, #28]
 80091f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	021b      	lsls	r3, r3, #8
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	4313      	orrs	r3, r2
 800920e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	031b      	lsls	r3, r3, #12
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	4313      	orrs	r3, r2
 8009222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a10      	ldr	r2, [pc, #64]	; (8009268 <TIM_OC4_SetConfig+0x9c>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d109      	bne.n	8009240 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	695b      	ldr	r3, [r3, #20]
 8009238:	019b      	lsls	r3, r3, #6
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	4313      	orrs	r3, r2
 800923e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	685a      	ldr	r2, [r3, #4]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	693a      	ldr	r2, [r7, #16]
 8009258:	621a      	str	r2, [r3, #32]
}
 800925a:	bf00      	nop
 800925c:	371c      	adds	r7, #28
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	40010000 	.word	0x40010000

0800926c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800926c:	b480      	push	{r7}
 800926e:	b087      	sub	sp, #28
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6a1b      	ldr	r3, [r3, #32]
 800927c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	f023 0201 	bic.w	r2, r3, #1
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	011b      	lsls	r3, r3, #4
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	4313      	orrs	r3, r2
 80092a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	f023 030a 	bic.w	r3, r3, #10
 80092a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	693a      	ldr	r2, [r7, #16]
 80092b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	697a      	ldr	r2, [r7, #20]
 80092bc:	621a      	str	r2, [r3, #32]
}
 80092be:	bf00      	nop
 80092c0:	371c      	adds	r7, #28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b087      	sub	sp, #28
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	60f8      	str	r0, [r7, #12]
 80092d2:	60b9      	str	r1, [r7, #8]
 80092d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	f023 0210 	bic.w	r2, r3, #16
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	031b      	lsls	r3, r3, #12
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009306:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	011b      	lsls	r3, r3, #4
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	4313      	orrs	r3, r2
 8009310:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	693a      	ldr	r2, [r7, #16]
 800931c:	621a      	str	r2, [r3, #32]
}
 800931e:	bf00      	nop
 8009320:	371c      	adds	r7, #28
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800932a:	b480      	push	{r7}
 800932c:	b085      	sub	sp, #20
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009340:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	4313      	orrs	r3, r2
 8009348:	f043 0307 	orr.w	r3, r3, #7
 800934c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	609a      	str	r2, [r3, #8]
}
 8009354:	bf00      	nop
 8009356:	3714      	adds	r7, #20
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009360:	b480      	push	{r7}
 8009362:	b087      	sub	sp, #28
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
 800936c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800937a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	021a      	lsls	r2, r3, #8
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	431a      	orrs	r2, r3
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	4313      	orrs	r3, r2
 8009388:	697a      	ldr	r2, [r7, #20]
 800938a:	4313      	orrs	r3, r2
 800938c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	609a      	str	r2, [r3, #8]
}
 8009394:	bf00      	nop
 8009396:	371c      	adds	r7, #28
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b087      	sub	sp, #28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	f003 031f 	and.w	r3, r3, #31
 80093b2:	2201      	movs	r2, #1
 80093b4:	fa02 f303 	lsl.w	r3, r2, r3
 80093b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6a1a      	ldr	r2, [r3, #32]
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	43db      	mvns	r3, r3
 80093c2:	401a      	ands	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6a1a      	ldr	r2, [r3, #32]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	f003 031f 	and.w	r3, r3, #31
 80093d2:	6879      	ldr	r1, [r7, #4]
 80093d4:	fa01 f303 	lsl.w	r3, r1, r3
 80093d8:	431a      	orrs	r2, r3
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	621a      	str	r2, [r3, #32]
}
 80093de:	bf00      	nop
 80093e0:	371c      	adds	r7, #28
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
	...

080093ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d101      	bne.n	8009404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009400:	2302      	movs	r3, #2
 8009402:	e050      	b.n	80094a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2202      	movs	r2, #2
 8009410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800942a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	4313      	orrs	r3, r2
 8009434:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a1c      	ldr	r2, [pc, #112]	; (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d018      	beq.n	800947a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009450:	d013      	beq.n	800947a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a18      	ldr	r2, [pc, #96]	; (80094b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d00e      	beq.n	800947a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a16      	ldr	r2, [pc, #88]	; (80094bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d009      	beq.n	800947a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a15      	ldr	r2, [pc, #84]	; (80094c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d004      	beq.n	800947a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a13      	ldr	r2, [pc, #76]	; (80094c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d10c      	bne.n	8009494 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009480:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	4313      	orrs	r3, r2
 800948a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	40010000 	.word	0x40010000
 80094b8:	40000400 	.word	0x40000400
 80094bc:	40000800 	.word	0x40000800
 80094c0:	40000c00 	.word	0x40000c00
 80094c4:	40014000 	.word	0x40014000

080094c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d101      	bne.n	8009502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	e03f      	b.n	8009582 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2b00      	cmp	r3, #0
 800950c:	d106      	bne.n	800951c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7fb f9b2 	bl	8004880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2224      	movs	r2, #36	; 0x24
 8009520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68da      	ldr	r2, [r3, #12]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009532:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fd51 	bl	8009fdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	691a      	ldr	r2, [r3, #16]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009548:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	695a      	ldr	r2, [r3, #20]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009558:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68da      	ldr	r2, [r3, #12]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009568:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2220      	movs	r2, #32
 8009574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2220      	movs	r2, #32
 800957c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
	...

0800958c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	4613      	mov	r3, r2
 8009598:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b20      	cmp	r3, #32
 80095a4:	d153      	bne.n	800964e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <HAL_UART_Transmit_DMA+0x26>
 80095ac:	88fb      	ldrh	r3, [r7, #6]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e04c      	b.n	8009650 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d101      	bne.n	80095c4 <HAL_UART_Transmit_DMA+0x38>
 80095c0:	2302      	movs	r3, #2
 80095c2:	e045      	b.n	8009650 <HAL_UART_Transmit_DMA+0xc4>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	88fa      	ldrh	r2, [r7, #6]
 80095d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	88fa      	ldrh	r2, [r7, #6]
 80095dc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2221      	movs	r2, #33	; 0x21
 80095e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f0:	4a19      	ldr	r2, [pc, #100]	; (8009658 <HAL_UART_Transmit_DMA+0xcc>)
 80095f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f8:	4a18      	ldr	r2, [pc, #96]	; (800965c <HAL_UART_Transmit_DMA+0xd0>)
 80095fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009600:	4a17      	ldr	r2, [pc, #92]	; (8009660 <HAL_UART_Transmit_DMA+0xd4>)
 8009602:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009608:	2200      	movs	r2, #0
 800960a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800960c:	f107 0308 	add.w	r3, r7, #8
 8009610:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	6819      	ldr	r1, [r3, #0]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	3304      	adds	r3, #4
 8009620:	461a      	mov	r2, r3
 8009622:	88fb      	ldrh	r3, [r7, #6]
 8009624:	f7fb fd28 	bl	8005078 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009630:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	695a      	ldr	r2, [r3, #20]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009648:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	e000      	b.n	8009650 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800964e:	2302      	movs	r3, #2
  }
}
 8009650:	4618      	mov	r0, r3
 8009652:	3718      	adds	r7, #24
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	08009a99 	.word	0x08009a99
 800965c:	08009aeb 	.word	0x08009aeb
 8009660:	08009bd3 	.word	0x08009bd3

08009664 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	4613      	mov	r3, r2
 8009670:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b20      	cmp	r3, #32
 800967c:	d11d      	bne.n	80096ba <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <HAL_UART_Receive_DMA+0x26>
 8009684:	88fb      	ldrh	r3, [r7, #6]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d101      	bne.n	800968e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	e016      	b.n	80096bc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009694:	2b01      	cmp	r3, #1
 8009696:	d101      	bne.n	800969c <HAL_UART_Receive_DMA+0x38>
 8009698:	2302      	movs	r3, #2
 800969a:	e00f      	b.n	80096bc <HAL_UART_Receive_DMA+0x58>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80096aa:	88fb      	ldrh	r3, [r7, #6]
 80096ac:	461a      	mov	r2, r3
 80096ae:	68b9      	ldr	r1, [r7, #8]
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f000 fad9 	bl	8009c68 <UART_Start_Receive_DMA>
 80096b6:	4603      	mov	r3, r0
 80096b8:	e000      	b.n	80096bc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80096ba:	2302      	movs	r3, #2
  }
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b08a      	sub	sp, #40	; 0x28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	695b      	ldr	r3, [r3, #20]
 80096e2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80096e4:	2300      	movs	r3, #0
 80096e6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80096e8:	2300      	movs	r3, #0
 80096ea:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80096ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ee:	f003 030f 	and.w	r3, r3, #15
 80096f2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10d      	bne.n	8009716 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fc:	f003 0320 	and.w	r3, r3, #32
 8009700:	2b00      	cmp	r3, #0
 8009702:	d008      	beq.n	8009716 <HAL_UART_IRQHandler+0x52>
 8009704:	6a3b      	ldr	r3, [r7, #32]
 8009706:	f003 0320 	and.w	r3, r3, #32
 800970a:	2b00      	cmp	r3, #0
 800970c:	d003      	beq.n	8009716 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fbcd 	bl	8009eae <UART_Receive_IT>
      return;
 8009714:	e17c      	b.n	8009a10 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	2b00      	cmp	r3, #0
 800971a:	f000 80b1 	beq.w	8009880 <HAL_UART_IRQHandler+0x1bc>
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	2b00      	cmp	r3, #0
 8009726:	d105      	bne.n	8009734 <HAL_UART_IRQHandler+0x70>
 8009728:	6a3b      	ldr	r3, [r7, #32]
 800972a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 80a6 	beq.w	8009880 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00a      	beq.n	8009754 <HAL_UART_IRQHandler+0x90>
 800973e:	6a3b      	ldr	r3, [r7, #32]
 8009740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009744:	2b00      	cmp	r3, #0
 8009746:	d005      	beq.n	8009754 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974c:	f043 0201 	orr.w	r2, r3, #1
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	f003 0304 	and.w	r3, r3, #4
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00a      	beq.n	8009774 <HAL_UART_IRQHandler+0xb0>
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	2b00      	cmp	r3, #0
 8009766:	d005      	beq.n	8009774 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976c:	f043 0202 	orr.w	r2, r3, #2
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00a      	beq.n	8009794 <HAL_UART_IRQHandler+0xd0>
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	2b00      	cmp	r3, #0
 8009786:	d005      	beq.n	8009794 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978c:	f043 0204 	orr.w	r2, r3, #4
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	f003 0308 	and.w	r3, r3, #8
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00f      	beq.n	80097be <HAL_UART_IRQHandler+0xfa>
 800979e:	6a3b      	ldr	r3, [r7, #32]
 80097a0:	f003 0320 	and.w	r3, r3, #32
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d104      	bne.n	80097b2 <HAL_UART_IRQHandler+0xee>
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	f003 0301 	and.w	r3, r3, #1
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d005      	beq.n	80097be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b6:	f043 0208 	orr.w	r2, r3, #8
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f000 811f 	beq.w	8009a06 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	f003 0320 	and.w	r3, r3, #32
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d007      	beq.n	80097e2 <HAL_UART_IRQHandler+0x11e>
 80097d2:	6a3b      	ldr	r3, [r7, #32]
 80097d4:	f003 0320 	and.w	r3, r3, #32
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d002      	beq.n	80097e2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fb66 	bl	8009eae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	695b      	ldr	r3, [r3, #20]
 80097e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ec:	2b40      	cmp	r3, #64	; 0x40
 80097ee:	bf0c      	ite	eq
 80097f0:	2301      	moveq	r3, #1
 80097f2:	2300      	movne	r3, #0
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fc:	f003 0308 	and.w	r3, r3, #8
 8009800:	2b00      	cmp	r3, #0
 8009802:	d102      	bne.n	800980a <HAL_UART_IRQHandler+0x146>
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d031      	beq.n	800986e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 faa6 	bl	8009d5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	695b      	ldr	r3, [r3, #20]
 8009816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800981a:	2b40      	cmp	r3, #64	; 0x40
 800981c:	d123      	bne.n	8009866 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	695a      	ldr	r2, [r3, #20]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800982c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009832:	2b00      	cmp	r3, #0
 8009834:	d013      	beq.n	800985e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983a:	4a77      	ldr	r2, [pc, #476]	; (8009a18 <HAL_UART_IRQHandler+0x354>)
 800983c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009842:	4618      	mov	r0, r3
 8009844:	f7fb fce0 	bl	8005208 <HAL_DMA_Abort_IT>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d016      	beq.n	800987c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009858:	4610      	mov	r0, r2
 800985a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800985c:	e00e      	b.n	800987c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f904 	bl	8009a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009864:	e00a      	b.n	800987c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f900 	bl	8009a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800986c:	e006      	b.n	800987c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f8fc 	bl	8009a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800987a:	e0c4      	b.n	8009a06 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800987c:	bf00      	nop
    return;
 800987e:	e0c2      	b.n	8009a06 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009884:	2b01      	cmp	r3, #1
 8009886:	f040 80a2 	bne.w	80099ce <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	f003 0310 	and.w	r3, r3, #16
 8009890:	2b00      	cmp	r3, #0
 8009892:	f000 809c 	beq.w	80099ce <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009896:	6a3b      	ldr	r3, [r7, #32]
 8009898:	f003 0310 	and.w	r3, r3, #16
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 8096 	beq.w	80099ce <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80098a2:	2300      	movs	r3, #0
 80098a4:	60fb      	str	r3, [r7, #12]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	60fb      	str	r3, [r7, #12]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	60fb      	str	r3, [r7, #12]
 80098b6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	695b      	ldr	r3, [r3, #20]
 80098be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c2:	2b40      	cmp	r3, #64	; 0x40
 80098c4:	d14f      	bne.n	8009966 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80098d0:	8a3b      	ldrh	r3, [r7, #16]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f000 8099 	beq.w	8009a0a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098dc:	8a3a      	ldrh	r2, [r7, #16]
 80098de:	429a      	cmp	r2, r3
 80098e0:	f080 8093 	bcs.w	8009a0a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	8a3a      	ldrh	r2, [r7, #16]
 80098e8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ee:	69db      	ldr	r3, [r3, #28]
 80098f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098f4:	d02b      	beq.n	800994e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68da      	ldr	r2, [r3, #12]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009904:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	695a      	ldr	r2, [r3, #20]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f022 0201 	bic.w	r2, r2, #1
 8009914:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	695a      	ldr	r2, [r3, #20]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009924:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2220      	movs	r2, #32
 800992a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f022 0210 	bic.w	r2, r2, #16
 8009942:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009948:	4618      	mov	r0, r3
 800994a:	f7fb fbed 	bl	8005128 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009956:	b29b      	uxth	r3, r3
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	b29b      	uxth	r3, r3
 800995c:	4619      	mov	r1, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f88e 	bl	8009a80 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009964:	e051      	b.n	8009a0a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800996e:	b29b      	uxth	r3, r3
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009978:	b29b      	uxth	r3, r3
 800997a:	2b00      	cmp	r3, #0
 800997c:	d047      	beq.n	8009a0e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800997e:	8a7b      	ldrh	r3, [r7, #18]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d044      	beq.n	8009a0e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68da      	ldr	r2, [r3, #12]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009992:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	695a      	ldr	r2, [r3, #20]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f022 0201 	bic.w	r2, r2, #1
 80099a2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2220      	movs	r2, #32
 80099a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	68da      	ldr	r2, [r3, #12]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f022 0210 	bic.w	r2, r2, #16
 80099c0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099c2:	8a7b      	ldrh	r3, [r7, #18]
 80099c4:	4619      	mov	r1, r3
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 f85a 	bl	8009a80 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80099cc:	e01f      	b.n	8009a0e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d008      	beq.n	80099ea <HAL_UART_IRQHandler+0x326>
 80099d8:	6a3b      	ldr	r3, [r7, #32]
 80099da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f9fb 	bl	8009dde <UART_Transmit_IT>
    return;
 80099e8:	e012      	b.n	8009a10 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00d      	beq.n	8009a10 <HAL_UART_IRQHandler+0x34c>
 80099f4:	6a3b      	ldr	r3, [r7, #32]
 80099f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d008      	beq.n	8009a10 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 fa3d 	bl	8009e7e <UART_EndTransmit_IT>
    return;
 8009a04:	e004      	b.n	8009a10 <HAL_UART_IRQHandler+0x34c>
    return;
 8009a06:	bf00      	nop
 8009a08:	e002      	b.n	8009a10 <HAL_UART_IRQHandler+0x34c>
      return;
 8009a0a:	bf00      	nop
 8009a0c:	e000      	b.n	8009a10 <HAL_UART_IRQHandler+0x34c>
      return;
 8009a0e:	bf00      	nop
  }
}
 8009a10:	3728      	adds	r7, #40	; 0x28
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	08009db7 	.word	0x08009db7

08009a1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009a4c:	bf00      	nop
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a8c:	bf00      	nop
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d113      	bne.n	8009adc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	695a      	ldr	r2, [r3, #20]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ac8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68da      	ldr	r2, [r3, #12]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ad8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ada:	e002      	b.n	8009ae2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f7ff ff9d 	bl	8009a1c <HAL_UART_TxCpltCallback>
}
 8009ae2:	bf00      	nop
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b084      	sub	sp, #16
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f7ff ff99 	bl	8009a30 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009afe:	bf00      	nop
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b084      	sub	sp, #16
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b12:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d12a      	bne.n	8009b78 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2200      	movs	r2, #0
 8009b26:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68da      	ldr	r2, [r3, #12]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b36:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	695a      	ldr	r2, [r3, #20]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f022 0201 	bic.w	r2, r2, #1
 8009b46:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	695a      	ldr	r2, [r3, #20]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b56:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2220      	movs	r2, #32
 8009b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d107      	bne.n	8009b78 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68da      	ldr	r2, [r3, #12]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f022 0210 	bic.w	r2, r2, #16
 8009b76:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d106      	bne.n	8009b8e <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b84:	4619      	mov	r1, r3
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f7ff ff7a 	bl	8009a80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b8c:	e002      	b.n	8009b94 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f7ff ff58 	bl	8009a44 <HAL_UART_RxCpltCallback>
}
 8009b94:	bf00      	nop
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d108      	bne.n	8009bc4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bb6:	085b      	lsrs	r3, r3, #1
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	4619      	mov	r1, r3
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f7ff ff5f 	bl	8009a80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009bc2:	e002      	b.n	8009bca <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f7ff ff47 	bl	8009a58 <HAL_UART_RxHalfCpltCallback>
}
 8009bca:	bf00      	nop
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b084      	sub	sp, #16
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	695b      	ldr	r3, [r3, #20]
 8009bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bee:	2b80      	cmp	r3, #128	; 0x80
 8009bf0:	bf0c      	ite	eq
 8009bf2:	2301      	moveq	r3, #1
 8009bf4:	2300      	movne	r3, #0
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b21      	cmp	r3, #33	; 0x21
 8009c04:	d108      	bne.n	8009c18 <UART_DMAError+0x46>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d005      	beq.n	8009c18 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009c12:	68b8      	ldr	r0, [r7, #8]
 8009c14:	f000 f88c 	bl	8009d30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	695b      	ldr	r3, [r3, #20]
 8009c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c22:	2b40      	cmp	r3, #64	; 0x40
 8009c24:	bf0c      	ite	eq
 8009c26:	2301      	moveq	r3, #1
 8009c28:	2300      	movne	r3, #0
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	2b22      	cmp	r3, #34	; 0x22
 8009c38:	d108      	bne.n	8009c4c <UART_DMAError+0x7a>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d005      	beq.n	8009c4c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	2200      	movs	r2, #0
 8009c44:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009c46:	68b8      	ldr	r0, [r7, #8]
 8009c48:	f000 f888 	bl	8009d5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c50:	f043 0210 	orr.w	r2, r3, #16
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c58:	68b8      	ldr	r0, [r7, #8]
 8009c5a:	f7ff ff07 	bl	8009a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c5e:	bf00      	nop
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
	...

08009c68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	4613      	mov	r3, r2
 8009c74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	88fa      	ldrh	r2, [r7, #6]
 8009c80:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2200      	movs	r2, #0
 8009c86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2222      	movs	r2, #34	; 0x22
 8009c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c94:	4a23      	ldr	r2, [pc, #140]	; (8009d24 <UART_Start_Receive_DMA+0xbc>)
 8009c96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9c:	4a22      	ldr	r2, [pc, #136]	; (8009d28 <UART_Start_Receive_DMA+0xc0>)
 8009c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca4:	4a21      	ldr	r2, [pc, #132]	; (8009d2c <UART_Start_Receive_DMA+0xc4>)
 8009ca6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cac:	2200      	movs	r2, #0
 8009cae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009cb0:	f107 0308 	add.w	r3, r7, #8
 8009cb4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	3304      	adds	r3, #4
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	88fb      	ldrh	r3, [r7, #6]
 8009cc8:	f7fb f9d6 	bl	8005078 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009ccc:	2300      	movs	r3, #0
 8009cce:	613b      	str	r3, [r7, #16]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	613b      	str	r3, [r7, #16]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	613b      	str	r3, [r7, #16]
 8009ce0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68da      	ldr	r2, [r3, #12]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cf8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	695a      	ldr	r2, [r3, #20]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f042 0201 	orr.w	r2, r2, #1
 8009d08:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	695a      	ldr	r2, [r3, #20]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d18:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	08009b07 	.word	0x08009b07
 8009d28:	08009b9d 	.word	0x08009b9d
 8009d2c:	08009bd3 	.word	0x08009bd3

08009d30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68da      	ldr	r2, [r3, #12]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009d46:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68da      	ldr	r2, [r3, #12]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009d72:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	695a      	ldr	r2, [r3, #20]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f022 0201 	bic.w	r2, r2, #1
 8009d82:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d107      	bne.n	8009d9c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68da      	ldr	r2, [r3, #12]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f022 0210 	bic.w	r2, r2, #16
 8009d9a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2220      	movs	r2, #32
 8009da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009daa:	bf00      	nop
 8009dac:	370c      	adds	r7, #12
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b084      	sub	sp, #16
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f7ff fe4b 	bl	8009a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dd6:	bf00      	nop
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009dde:	b480      	push	{r7}
 8009de0:	b085      	sub	sp, #20
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b21      	cmp	r3, #33	; 0x21
 8009df0:	d13e      	bne.n	8009e70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dfa:	d114      	bne.n	8009e26 <UART_Transmit_IT+0x48>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d110      	bne.n	8009e26 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a1b      	ldr	r3, [r3, #32]
 8009e08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	881b      	ldrh	r3, [r3, #0]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a1b      	ldr	r3, [r3, #32]
 8009e1e:	1c9a      	adds	r2, r3, #2
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	621a      	str	r2, [r3, #32]
 8009e24:	e008      	b.n	8009e38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a1b      	ldr	r3, [r3, #32]
 8009e2a:	1c59      	adds	r1, r3, #1
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	6211      	str	r1, [r2, #32]
 8009e30:	781a      	ldrb	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	4619      	mov	r1, r3
 8009e46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10f      	bne.n	8009e6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68da      	ldr	r2, [r3, #12]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68da      	ldr	r2, [r3, #12]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	e000      	b.n	8009e72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009e70:	2302      	movs	r3, #2
  }
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b082      	sub	sp, #8
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68da      	ldr	r2, [r3, #12]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2220      	movs	r2, #32
 8009e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7ff fdbc 	bl	8009a1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	2b22      	cmp	r3, #34	; 0x22
 8009ec0:	f040 8087 	bne.w	8009fd2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ecc:	d117      	bne.n	8009efe <UART_Receive_IT+0x50>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d113      	bne.n	8009efe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ede:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef6:	1c9a      	adds	r2, r3, #2
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	629a      	str	r2, [r3, #40]	; 0x28
 8009efc:	e026      	b.n	8009f4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f02:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009f04:	2300      	movs	r3, #0
 8009f06:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f10:	d007      	beq.n	8009f22 <UART_Receive_IT+0x74>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10a      	bne.n	8009f30 <UART_Receive_IT+0x82>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d106      	bne.n	8009f30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	b2da      	uxtb	r2, r3
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	701a      	strb	r2, [r3, #0]
 8009f2e:	e008      	b.n	8009f42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f46:	1c5a      	adds	r2, r3, #1
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	3b01      	subs	r3, #1
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	4619      	mov	r1, r3
 8009f5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d136      	bne.n	8009fce <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68da      	ldr	r2, [r3, #12]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f022 0220 	bic.w	r2, r2, #32
 8009f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68da      	ldr	r2, [r3, #12]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	695a      	ldr	r2, [r3, #20]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f022 0201 	bic.w	r2, r2, #1
 8009f8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2220      	movs	r2, #32
 8009f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d10e      	bne.n	8009fbe <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68da      	ldr	r2, [r3, #12]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f022 0210 	bic.w	r2, r2, #16
 8009fae:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7ff fd62 	bl	8009a80 <HAL_UARTEx_RxEventCallback>
 8009fbc:	e002      	b.n	8009fc4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f7ff fd40 	bl	8009a44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	e002      	b.n	8009fd4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	e000      	b.n	8009fd4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009fd2:	2302      	movs	r3, #2
  }
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe0:	b09f      	sub	sp, #124	; 0x7c
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ff2:	68d9      	ldr	r1, [r3, #12]
 8009ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	ea40 0301 	orr.w	r3, r0, r1
 8009ffc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a000:	689a      	ldr	r2, [r3, #8]
 800a002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	431a      	orrs	r2, r3
 800a008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a00a:	695b      	ldr	r3, [r3, #20]
 800a00c:	431a      	orrs	r2, r3
 800a00e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a010:	69db      	ldr	r3, [r3, #28]
 800a012:	4313      	orrs	r3, r2
 800a014:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a020:	f021 010c 	bic.w	r1, r1, #12
 800a024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a02a:	430b      	orrs	r3, r1
 800a02c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a02e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	695b      	ldr	r3, [r3, #20]
 800a034:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a03a:	6999      	ldr	r1, [r3, #24]
 800a03c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	ea40 0301 	orr.w	r3, r0, r1
 800a044:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	4bc5      	ldr	r3, [pc, #788]	; (800a360 <UART_SetConfig+0x384>)
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d004      	beq.n	800a05a <UART_SetConfig+0x7e>
 800a050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	4bc3      	ldr	r3, [pc, #780]	; (800a364 <UART_SetConfig+0x388>)
 800a056:	429a      	cmp	r2, r3
 800a058:	d103      	bne.n	800a062 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a05a:	f7fe f8eb 	bl	8008234 <HAL_RCC_GetPCLK2Freq>
 800a05e:	6778      	str	r0, [r7, #116]	; 0x74
 800a060:	e002      	b.n	800a068 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a062:	f7fe f8d3 	bl	800820c <HAL_RCC_GetPCLK1Freq>
 800a066:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a06a:	69db      	ldr	r3, [r3, #28]
 800a06c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a070:	f040 80b6 	bne.w	800a1e0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a076:	461c      	mov	r4, r3
 800a078:	f04f 0500 	mov.w	r5, #0
 800a07c:	4622      	mov	r2, r4
 800a07e:	462b      	mov	r3, r5
 800a080:	1891      	adds	r1, r2, r2
 800a082:	6439      	str	r1, [r7, #64]	; 0x40
 800a084:	415b      	adcs	r3, r3
 800a086:	647b      	str	r3, [r7, #68]	; 0x44
 800a088:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a08c:	1912      	adds	r2, r2, r4
 800a08e:	eb45 0303 	adc.w	r3, r5, r3
 800a092:	f04f 0000 	mov.w	r0, #0
 800a096:	f04f 0100 	mov.w	r1, #0
 800a09a:	00d9      	lsls	r1, r3, #3
 800a09c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a0a0:	00d0      	lsls	r0, r2, #3
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	1911      	adds	r1, r2, r4
 800a0a8:	6639      	str	r1, [r7, #96]	; 0x60
 800a0aa:	416b      	adcs	r3, r5
 800a0ac:	667b      	str	r3, [r7, #100]	; 0x64
 800a0ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	f04f 0300 	mov.w	r3, #0
 800a0b8:	1891      	adds	r1, r2, r2
 800a0ba:	63b9      	str	r1, [r7, #56]	; 0x38
 800a0bc:	415b      	adcs	r3, r3
 800a0be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a0c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a0c8:	f7f6 fe70 	bl	8000dac <__aeabi_uldivmod>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4ba5      	ldr	r3, [pc, #660]	; (800a368 <UART_SetConfig+0x38c>)
 800a0d2:	fba3 2302 	umull	r2, r3, r3, r2
 800a0d6:	095b      	lsrs	r3, r3, #5
 800a0d8:	011e      	lsls	r6, r3, #4
 800a0da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0dc:	461c      	mov	r4, r3
 800a0de:	f04f 0500 	mov.w	r5, #0
 800a0e2:	4622      	mov	r2, r4
 800a0e4:	462b      	mov	r3, r5
 800a0e6:	1891      	adds	r1, r2, r2
 800a0e8:	6339      	str	r1, [r7, #48]	; 0x30
 800a0ea:	415b      	adcs	r3, r3
 800a0ec:	637b      	str	r3, [r7, #52]	; 0x34
 800a0ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a0f2:	1912      	adds	r2, r2, r4
 800a0f4:	eb45 0303 	adc.w	r3, r5, r3
 800a0f8:	f04f 0000 	mov.w	r0, #0
 800a0fc:	f04f 0100 	mov.w	r1, #0
 800a100:	00d9      	lsls	r1, r3, #3
 800a102:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a106:	00d0      	lsls	r0, r2, #3
 800a108:	4602      	mov	r2, r0
 800a10a:	460b      	mov	r3, r1
 800a10c:	1911      	adds	r1, r2, r4
 800a10e:	65b9      	str	r1, [r7, #88]	; 0x58
 800a110:	416b      	adcs	r3, r5
 800a112:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	461a      	mov	r2, r3
 800a11a:	f04f 0300 	mov.w	r3, #0
 800a11e:	1891      	adds	r1, r2, r2
 800a120:	62b9      	str	r1, [r7, #40]	; 0x28
 800a122:	415b      	adcs	r3, r3
 800a124:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a126:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a12a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a12e:	f7f6 fe3d 	bl	8000dac <__aeabi_uldivmod>
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	4b8c      	ldr	r3, [pc, #560]	; (800a368 <UART_SetConfig+0x38c>)
 800a138:	fba3 1302 	umull	r1, r3, r3, r2
 800a13c:	095b      	lsrs	r3, r3, #5
 800a13e:	2164      	movs	r1, #100	; 0x64
 800a140:	fb01 f303 	mul.w	r3, r1, r3
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	00db      	lsls	r3, r3, #3
 800a148:	3332      	adds	r3, #50	; 0x32
 800a14a:	4a87      	ldr	r2, [pc, #540]	; (800a368 <UART_SetConfig+0x38c>)
 800a14c:	fba2 2303 	umull	r2, r3, r2, r3
 800a150:	095b      	lsrs	r3, r3, #5
 800a152:	005b      	lsls	r3, r3, #1
 800a154:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a158:	441e      	add	r6, r3
 800a15a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a15c:	4618      	mov	r0, r3
 800a15e:	f04f 0100 	mov.w	r1, #0
 800a162:	4602      	mov	r2, r0
 800a164:	460b      	mov	r3, r1
 800a166:	1894      	adds	r4, r2, r2
 800a168:	623c      	str	r4, [r7, #32]
 800a16a:	415b      	adcs	r3, r3
 800a16c:	627b      	str	r3, [r7, #36]	; 0x24
 800a16e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a172:	1812      	adds	r2, r2, r0
 800a174:	eb41 0303 	adc.w	r3, r1, r3
 800a178:	f04f 0400 	mov.w	r4, #0
 800a17c:	f04f 0500 	mov.w	r5, #0
 800a180:	00dd      	lsls	r5, r3, #3
 800a182:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a186:	00d4      	lsls	r4, r2, #3
 800a188:	4622      	mov	r2, r4
 800a18a:	462b      	mov	r3, r5
 800a18c:	1814      	adds	r4, r2, r0
 800a18e:	653c      	str	r4, [r7, #80]	; 0x50
 800a190:	414b      	adcs	r3, r1
 800a192:	657b      	str	r3, [r7, #84]	; 0x54
 800a194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	461a      	mov	r2, r3
 800a19a:	f04f 0300 	mov.w	r3, #0
 800a19e:	1891      	adds	r1, r2, r2
 800a1a0:	61b9      	str	r1, [r7, #24]
 800a1a2:	415b      	adcs	r3, r3
 800a1a4:	61fb      	str	r3, [r7, #28]
 800a1a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a1aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a1ae:	f7f6 fdfd 	bl	8000dac <__aeabi_uldivmod>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	4b6c      	ldr	r3, [pc, #432]	; (800a368 <UART_SetConfig+0x38c>)
 800a1b8:	fba3 1302 	umull	r1, r3, r3, r2
 800a1bc:	095b      	lsrs	r3, r3, #5
 800a1be:	2164      	movs	r1, #100	; 0x64
 800a1c0:	fb01 f303 	mul.w	r3, r1, r3
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	00db      	lsls	r3, r3, #3
 800a1c8:	3332      	adds	r3, #50	; 0x32
 800a1ca:	4a67      	ldr	r2, [pc, #412]	; (800a368 <UART_SetConfig+0x38c>)
 800a1cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a1d0:	095b      	lsrs	r3, r3, #5
 800a1d2:	f003 0207 	and.w	r2, r3, #7
 800a1d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4432      	add	r2, r6
 800a1dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a1de:	e0b9      	b.n	800a354 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a1e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1e2:	461c      	mov	r4, r3
 800a1e4:	f04f 0500 	mov.w	r5, #0
 800a1e8:	4622      	mov	r2, r4
 800a1ea:	462b      	mov	r3, r5
 800a1ec:	1891      	adds	r1, r2, r2
 800a1ee:	6139      	str	r1, [r7, #16]
 800a1f0:	415b      	adcs	r3, r3
 800a1f2:	617b      	str	r3, [r7, #20]
 800a1f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a1f8:	1912      	adds	r2, r2, r4
 800a1fa:	eb45 0303 	adc.w	r3, r5, r3
 800a1fe:	f04f 0000 	mov.w	r0, #0
 800a202:	f04f 0100 	mov.w	r1, #0
 800a206:	00d9      	lsls	r1, r3, #3
 800a208:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a20c:	00d0      	lsls	r0, r2, #3
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	eb12 0804 	adds.w	r8, r2, r4
 800a216:	eb43 0905 	adc.w	r9, r3, r5
 800a21a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	4618      	mov	r0, r3
 800a220:	f04f 0100 	mov.w	r1, #0
 800a224:	f04f 0200 	mov.w	r2, #0
 800a228:	f04f 0300 	mov.w	r3, #0
 800a22c:	008b      	lsls	r3, r1, #2
 800a22e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a232:	0082      	lsls	r2, r0, #2
 800a234:	4640      	mov	r0, r8
 800a236:	4649      	mov	r1, r9
 800a238:	f7f6 fdb8 	bl	8000dac <__aeabi_uldivmod>
 800a23c:	4602      	mov	r2, r0
 800a23e:	460b      	mov	r3, r1
 800a240:	4b49      	ldr	r3, [pc, #292]	; (800a368 <UART_SetConfig+0x38c>)
 800a242:	fba3 2302 	umull	r2, r3, r3, r2
 800a246:	095b      	lsrs	r3, r3, #5
 800a248:	011e      	lsls	r6, r3, #4
 800a24a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a24c:	4618      	mov	r0, r3
 800a24e:	f04f 0100 	mov.w	r1, #0
 800a252:	4602      	mov	r2, r0
 800a254:	460b      	mov	r3, r1
 800a256:	1894      	adds	r4, r2, r2
 800a258:	60bc      	str	r4, [r7, #8]
 800a25a:	415b      	adcs	r3, r3
 800a25c:	60fb      	str	r3, [r7, #12]
 800a25e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a262:	1812      	adds	r2, r2, r0
 800a264:	eb41 0303 	adc.w	r3, r1, r3
 800a268:	f04f 0400 	mov.w	r4, #0
 800a26c:	f04f 0500 	mov.w	r5, #0
 800a270:	00dd      	lsls	r5, r3, #3
 800a272:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a276:	00d4      	lsls	r4, r2, #3
 800a278:	4622      	mov	r2, r4
 800a27a:	462b      	mov	r3, r5
 800a27c:	1814      	adds	r4, r2, r0
 800a27e:	64bc      	str	r4, [r7, #72]	; 0x48
 800a280:	414b      	adcs	r3, r1
 800a282:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	4618      	mov	r0, r3
 800a28a:	f04f 0100 	mov.w	r1, #0
 800a28e:	f04f 0200 	mov.w	r2, #0
 800a292:	f04f 0300 	mov.w	r3, #0
 800a296:	008b      	lsls	r3, r1, #2
 800a298:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a29c:	0082      	lsls	r2, r0, #2
 800a29e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a2a2:	f7f6 fd83 	bl	8000dac <__aeabi_uldivmod>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	4b2f      	ldr	r3, [pc, #188]	; (800a368 <UART_SetConfig+0x38c>)
 800a2ac:	fba3 1302 	umull	r1, r3, r3, r2
 800a2b0:	095b      	lsrs	r3, r3, #5
 800a2b2:	2164      	movs	r1, #100	; 0x64
 800a2b4:	fb01 f303 	mul.w	r3, r1, r3
 800a2b8:	1ad3      	subs	r3, r2, r3
 800a2ba:	011b      	lsls	r3, r3, #4
 800a2bc:	3332      	adds	r3, #50	; 0x32
 800a2be:	4a2a      	ldr	r2, [pc, #168]	; (800a368 <UART_SetConfig+0x38c>)
 800a2c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c4:	095b      	lsrs	r3, r3, #5
 800a2c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2ca:	441e      	add	r6, r3
 800a2cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f04f 0100 	mov.w	r1, #0
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	1894      	adds	r4, r2, r2
 800a2da:	603c      	str	r4, [r7, #0]
 800a2dc:	415b      	adcs	r3, r3
 800a2de:	607b      	str	r3, [r7, #4]
 800a2e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2e4:	1812      	adds	r2, r2, r0
 800a2e6:	eb41 0303 	adc.w	r3, r1, r3
 800a2ea:	f04f 0400 	mov.w	r4, #0
 800a2ee:	f04f 0500 	mov.w	r5, #0
 800a2f2:	00dd      	lsls	r5, r3, #3
 800a2f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a2f8:	00d4      	lsls	r4, r2, #3
 800a2fa:	4622      	mov	r2, r4
 800a2fc:	462b      	mov	r3, r5
 800a2fe:	eb12 0a00 	adds.w	sl, r2, r0
 800a302:	eb43 0b01 	adc.w	fp, r3, r1
 800a306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f04f 0100 	mov.w	r1, #0
 800a310:	f04f 0200 	mov.w	r2, #0
 800a314:	f04f 0300 	mov.w	r3, #0
 800a318:	008b      	lsls	r3, r1, #2
 800a31a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a31e:	0082      	lsls	r2, r0, #2
 800a320:	4650      	mov	r0, sl
 800a322:	4659      	mov	r1, fp
 800a324:	f7f6 fd42 	bl	8000dac <__aeabi_uldivmod>
 800a328:	4602      	mov	r2, r0
 800a32a:	460b      	mov	r3, r1
 800a32c:	4b0e      	ldr	r3, [pc, #56]	; (800a368 <UART_SetConfig+0x38c>)
 800a32e:	fba3 1302 	umull	r1, r3, r3, r2
 800a332:	095b      	lsrs	r3, r3, #5
 800a334:	2164      	movs	r1, #100	; 0x64
 800a336:	fb01 f303 	mul.w	r3, r1, r3
 800a33a:	1ad3      	subs	r3, r2, r3
 800a33c:	011b      	lsls	r3, r3, #4
 800a33e:	3332      	adds	r3, #50	; 0x32
 800a340:	4a09      	ldr	r2, [pc, #36]	; (800a368 <UART_SetConfig+0x38c>)
 800a342:	fba2 2303 	umull	r2, r3, r2, r3
 800a346:	095b      	lsrs	r3, r3, #5
 800a348:	f003 020f 	and.w	r2, r3, #15
 800a34c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4432      	add	r2, r6
 800a352:	609a      	str	r2, [r3, #8]
}
 800a354:	bf00      	nop
 800a356:	377c      	adds	r7, #124	; 0x7c
 800a358:	46bd      	mov	sp, r7
 800a35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35e:	bf00      	nop
 800a360:	40011000 	.word	0x40011000
 800a364:	40011400 	.word	0x40011400
 800a368:	51eb851f 	.word	0x51eb851f

0800a36c <calloc>:
 800a36c:	4b02      	ldr	r3, [pc, #8]	; (800a378 <calloc+0xc>)
 800a36e:	460a      	mov	r2, r1
 800a370:	4601      	mov	r1, r0
 800a372:	6818      	ldr	r0, [r3, #0]
 800a374:	f000 b842 	b.w	800a3fc <_calloc_r>
 800a378:	20000024 	.word	0x20000024

0800a37c <__errno>:
 800a37c:	4b01      	ldr	r3, [pc, #4]	; (800a384 <__errno+0x8>)
 800a37e:	6818      	ldr	r0, [r3, #0]
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	20000024 	.word	0x20000024

0800a388 <__libc_init_array>:
 800a388:	b570      	push	{r4, r5, r6, lr}
 800a38a:	4d0d      	ldr	r5, [pc, #52]	; (800a3c0 <__libc_init_array+0x38>)
 800a38c:	4c0d      	ldr	r4, [pc, #52]	; (800a3c4 <__libc_init_array+0x3c>)
 800a38e:	1b64      	subs	r4, r4, r5
 800a390:	10a4      	asrs	r4, r4, #2
 800a392:	2600      	movs	r6, #0
 800a394:	42a6      	cmp	r6, r4
 800a396:	d109      	bne.n	800a3ac <__libc_init_array+0x24>
 800a398:	4d0b      	ldr	r5, [pc, #44]	; (800a3c8 <__libc_init_array+0x40>)
 800a39a:	4c0c      	ldr	r4, [pc, #48]	; (800a3cc <__libc_init_array+0x44>)
 800a39c:	f000 f99e 	bl	800a6dc <_init>
 800a3a0:	1b64      	subs	r4, r4, r5
 800a3a2:	10a4      	asrs	r4, r4, #2
 800a3a4:	2600      	movs	r6, #0
 800a3a6:	42a6      	cmp	r6, r4
 800a3a8:	d105      	bne.n	800a3b6 <__libc_init_array+0x2e>
 800a3aa:	bd70      	pop	{r4, r5, r6, pc}
 800a3ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3b0:	4798      	blx	r3
 800a3b2:	3601      	adds	r6, #1
 800a3b4:	e7ee      	b.n	800a394 <__libc_init_array+0xc>
 800a3b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3ba:	4798      	blx	r3
 800a3bc:	3601      	adds	r6, #1
 800a3be:	e7f2      	b.n	800a3a6 <__libc_init_array+0x1e>
 800a3c0:	0800a734 	.word	0x0800a734
 800a3c4:	0800a734 	.word	0x0800a734
 800a3c8:	0800a734 	.word	0x0800a734
 800a3cc:	0800a738 	.word	0x0800a738

0800a3d0 <memcpy>:
 800a3d0:	440a      	add	r2, r1
 800a3d2:	4291      	cmp	r1, r2
 800a3d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3d8:	d100      	bne.n	800a3dc <memcpy+0xc>
 800a3da:	4770      	bx	lr
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3e6:	4291      	cmp	r1, r2
 800a3e8:	d1f9      	bne.n	800a3de <memcpy+0xe>
 800a3ea:	bd10      	pop	{r4, pc}

0800a3ec <memset>:
 800a3ec:	4402      	add	r2, r0
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d100      	bne.n	800a3f6 <memset+0xa>
 800a3f4:	4770      	bx	lr
 800a3f6:	f803 1b01 	strb.w	r1, [r3], #1
 800a3fa:	e7f9      	b.n	800a3f0 <memset+0x4>

0800a3fc <_calloc_r>:
 800a3fc:	b513      	push	{r0, r1, r4, lr}
 800a3fe:	434a      	muls	r2, r1
 800a400:	4611      	mov	r1, r2
 800a402:	9201      	str	r2, [sp, #4]
 800a404:	f000 f80a 	bl	800a41c <_malloc_r>
 800a408:	4604      	mov	r4, r0
 800a40a:	b118      	cbz	r0, 800a414 <_calloc_r+0x18>
 800a40c:	9a01      	ldr	r2, [sp, #4]
 800a40e:	2100      	movs	r1, #0
 800a410:	f7ff ffec 	bl	800a3ec <memset>
 800a414:	4620      	mov	r0, r4
 800a416:	b002      	add	sp, #8
 800a418:	bd10      	pop	{r4, pc}
	...

0800a41c <_malloc_r>:
 800a41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41e:	1ccd      	adds	r5, r1, #3
 800a420:	f025 0503 	bic.w	r5, r5, #3
 800a424:	3508      	adds	r5, #8
 800a426:	2d0c      	cmp	r5, #12
 800a428:	bf38      	it	cc
 800a42a:	250c      	movcc	r5, #12
 800a42c:	2d00      	cmp	r5, #0
 800a42e:	4606      	mov	r6, r0
 800a430:	db01      	blt.n	800a436 <_malloc_r+0x1a>
 800a432:	42a9      	cmp	r1, r5
 800a434:	d903      	bls.n	800a43e <_malloc_r+0x22>
 800a436:	230c      	movs	r3, #12
 800a438:	6033      	str	r3, [r6, #0]
 800a43a:	2000      	movs	r0, #0
 800a43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a43e:	f000 f857 	bl	800a4f0 <__malloc_lock>
 800a442:	4921      	ldr	r1, [pc, #132]	; (800a4c8 <_malloc_r+0xac>)
 800a444:	680a      	ldr	r2, [r1, #0]
 800a446:	4614      	mov	r4, r2
 800a448:	b99c      	cbnz	r4, 800a472 <_malloc_r+0x56>
 800a44a:	4f20      	ldr	r7, [pc, #128]	; (800a4cc <_malloc_r+0xb0>)
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	b923      	cbnz	r3, 800a45a <_malloc_r+0x3e>
 800a450:	4621      	mov	r1, r4
 800a452:	4630      	mov	r0, r6
 800a454:	f000 f83c 	bl	800a4d0 <_sbrk_r>
 800a458:	6038      	str	r0, [r7, #0]
 800a45a:	4629      	mov	r1, r5
 800a45c:	4630      	mov	r0, r6
 800a45e:	f000 f837 	bl	800a4d0 <_sbrk_r>
 800a462:	1c43      	adds	r3, r0, #1
 800a464:	d123      	bne.n	800a4ae <_malloc_r+0x92>
 800a466:	230c      	movs	r3, #12
 800a468:	6033      	str	r3, [r6, #0]
 800a46a:	4630      	mov	r0, r6
 800a46c:	f000 f846 	bl	800a4fc <__malloc_unlock>
 800a470:	e7e3      	b.n	800a43a <_malloc_r+0x1e>
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	1b5b      	subs	r3, r3, r5
 800a476:	d417      	bmi.n	800a4a8 <_malloc_r+0x8c>
 800a478:	2b0b      	cmp	r3, #11
 800a47a:	d903      	bls.n	800a484 <_malloc_r+0x68>
 800a47c:	6023      	str	r3, [r4, #0]
 800a47e:	441c      	add	r4, r3
 800a480:	6025      	str	r5, [r4, #0]
 800a482:	e004      	b.n	800a48e <_malloc_r+0x72>
 800a484:	6863      	ldr	r3, [r4, #4]
 800a486:	42a2      	cmp	r2, r4
 800a488:	bf0c      	ite	eq
 800a48a:	600b      	streq	r3, [r1, #0]
 800a48c:	6053      	strne	r3, [r2, #4]
 800a48e:	4630      	mov	r0, r6
 800a490:	f000 f834 	bl	800a4fc <__malloc_unlock>
 800a494:	f104 000b 	add.w	r0, r4, #11
 800a498:	1d23      	adds	r3, r4, #4
 800a49a:	f020 0007 	bic.w	r0, r0, #7
 800a49e:	1ac2      	subs	r2, r0, r3
 800a4a0:	d0cc      	beq.n	800a43c <_malloc_r+0x20>
 800a4a2:	1a1b      	subs	r3, r3, r0
 800a4a4:	50a3      	str	r3, [r4, r2]
 800a4a6:	e7c9      	b.n	800a43c <_malloc_r+0x20>
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	6864      	ldr	r4, [r4, #4]
 800a4ac:	e7cc      	b.n	800a448 <_malloc_r+0x2c>
 800a4ae:	1cc4      	adds	r4, r0, #3
 800a4b0:	f024 0403 	bic.w	r4, r4, #3
 800a4b4:	42a0      	cmp	r0, r4
 800a4b6:	d0e3      	beq.n	800a480 <_malloc_r+0x64>
 800a4b8:	1a21      	subs	r1, r4, r0
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	f000 f808 	bl	800a4d0 <_sbrk_r>
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	d1dd      	bne.n	800a480 <_malloc_r+0x64>
 800a4c4:	e7cf      	b.n	800a466 <_malloc_r+0x4a>
 800a4c6:	bf00      	nop
 800a4c8:	200004e8 	.word	0x200004e8
 800a4cc:	200004ec 	.word	0x200004ec

0800a4d0 <_sbrk_r>:
 800a4d0:	b538      	push	{r3, r4, r5, lr}
 800a4d2:	4d06      	ldr	r5, [pc, #24]	; (800a4ec <_sbrk_r+0x1c>)
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	4608      	mov	r0, r1
 800a4da:	602b      	str	r3, [r5, #0]
 800a4dc:	f7fa fb00 	bl	8004ae0 <_sbrk>
 800a4e0:	1c43      	adds	r3, r0, #1
 800a4e2:	d102      	bne.n	800a4ea <_sbrk_r+0x1a>
 800a4e4:	682b      	ldr	r3, [r5, #0]
 800a4e6:	b103      	cbz	r3, 800a4ea <_sbrk_r+0x1a>
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	bd38      	pop	{r3, r4, r5, pc}
 800a4ec:	20000724 	.word	0x20000724

0800a4f0 <__malloc_lock>:
 800a4f0:	4801      	ldr	r0, [pc, #4]	; (800a4f8 <__malloc_lock+0x8>)
 800a4f2:	f000 b809 	b.w	800a508 <__retarget_lock_acquire_recursive>
 800a4f6:	bf00      	nop
 800a4f8:	2000072c 	.word	0x2000072c

0800a4fc <__malloc_unlock>:
 800a4fc:	4801      	ldr	r0, [pc, #4]	; (800a504 <__malloc_unlock+0x8>)
 800a4fe:	f000 b804 	b.w	800a50a <__retarget_lock_release_recursive>
 800a502:	bf00      	nop
 800a504:	2000072c 	.word	0x2000072c

0800a508 <__retarget_lock_acquire_recursive>:
 800a508:	4770      	bx	lr

0800a50a <__retarget_lock_release_recursive>:
 800a50a:	4770      	bx	lr

0800a50c <sqrt>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	ed2d 8b02 	vpush	{d8}
 800a512:	ec55 4b10 	vmov	r4, r5, d0
 800a516:	f000 f82d 	bl	800a574 <__ieee754_sqrt>
 800a51a:	4b15      	ldr	r3, [pc, #84]	; (800a570 <sqrt+0x64>)
 800a51c:	eeb0 8a40 	vmov.f32	s16, s0
 800a520:	eef0 8a60 	vmov.f32	s17, s1
 800a524:	f993 3000 	ldrsb.w	r3, [r3]
 800a528:	3301      	adds	r3, #1
 800a52a:	d019      	beq.n	800a560 <sqrt+0x54>
 800a52c:	4622      	mov	r2, r4
 800a52e:	462b      	mov	r3, r5
 800a530:	4620      	mov	r0, r4
 800a532:	4629      	mov	r1, r5
 800a534:	f7f6 faa6 	bl	8000a84 <__aeabi_dcmpun>
 800a538:	b990      	cbnz	r0, 800a560 <sqrt+0x54>
 800a53a:	2200      	movs	r2, #0
 800a53c:	2300      	movs	r3, #0
 800a53e:	4620      	mov	r0, r4
 800a540:	4629      	mov	r1, r5
 800a542:	f7f6 fa77 	bl	8000a34 <__aeabi_dcmplt>
 800a546:	b158      	cbz	r0, 800a560 <sqrt+0x54>
 800a548:	f7ff ff18 	bl	800a37c <__errno>
 800a54c:	2321      	movs	r3, #33	; 0x21
 800a54e:	6003      	str	r3, [r0, #0]
 800a550:	2200      	movs	r2, #0
 800a552:	2300      	movs	r3, #0
 800a554:	4610      	mov	r0, r2
 800a556:	4619      	mov	r1, r3
 800a558:	f7f6 f924 	bl	80007a4 <__aeabi_ddiv>
 800a55c:	ec41 0b18 	vmov	d8, r0, r1
 800a560:	eeb0 0a48 	vmov.f32	s0, s16
 800a564:	eef0 0a68 	vmov.f32	s1, s17
 800a568:	ecbd 8b02 	vpop	{d8}
 800a56c:	bd38      	pop	{r3, r4, r5, pc}
 800a56e:	bf00      	nop
 800a570:	20000088 	.word	0x20000088

0800a574 <__ieee754_sqrt>:
 800a574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a578:	ec55 4b10 	vmov	r4, r5, d0
 800a57c:	4e56      	ldr	r6, [pc, #344]	; (800a6d8 <__ieee754_sqrt+0x164>)
 800a57e:	43ae      	bics	r6, r5
 800a580:	ee10 0a10 	vmov	r0, s0
 800a584:	ee10 3a10 	vmov	r3, s0
 800a588:	4629      	mov	r1, r5
 800a58a:	462a      	mov	r2, r5
 800a58c:	d110      	bne.n	800a5b0 <__ieee754_sqrt+0x3c>
 800a58e:	ee10 2a10 	vmov	r2, s0
 800a592:	462b      	mov	r3, r5
 800a594:	f7f5 ffdc 	bl	8000550 <__aeabi_dmul>
 800a598:	4602      	mov	r2, r0
 800a59a:	460b      	mov	r3, r1
 800a59c:	4620      	mov	r0, r4
 800a59e:	4629      	mov	r1, r5
 800a5a0:	f7f5 fe20 	bl	80001e4 <__adddf3>
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	460d      	mov	r5, r1
 800a5a8:	ec45 4b10 	vmov	d0, r4, r5
 800a5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b0:	2d00      	cmp	r5, #0
 800a5b2:	dc10      	bgt.n	800a5d6 <__ieee754_sqrt+0x62>
 800a5b4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a5b8:	4330      	orrs	r0, r6
 800a5ba:	d0f5      	beq.n	800a5a8 <__ieee754_sqrt+0x34>
 800a5bc:	b15d      	cbz	r5, 800a5d6 <__ieee754_sqrt+0x62>
 800a5be:	ee10 2a10 	vmov	r2, s0
 800a5c2:	462b      	mov	r3, r5
 800a5c4:	ee10 0a10 	vmov	r0, s0
 800a5c8:	f7f5 fe0a 	bl	80001e0 <__aeabi_dsub>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	f7f6 f8e8 	bl	80007a4 <__aeabi_ddiv>
 800a5d4:	e7e6      	b.n	800a5a4 <__ieee754_sqrt+0x30>
 800a5d6:	1509      	asrs	r1, r1, #20
 800a5d8:	d076      	beq.n	800a6c8 <__ieee754_sqrt+0x154>
 800a5da:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a5de:	07ce      	lsls	r6, r1, #31
 800a5e0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a5e4:	bf5e      	ittt	pl
 800a5e6:	0fda      	lsrpl	r2, r3, #31
 800a5e8:	005b      	lslpl	r3, r3, #1
 800a5ea:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a5ee:	0fda      	lsrs	r2, r3, #31
 800a5f0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a5f4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	106d      	asrs	r5, r5, #1
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	f04f 0e16 	mov.w	lr, #22
 800a602:	4684      	mov	ip, r0
 800a604:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a608:	eb0c 0401 	add.w	r4, ip, r1
 800a60c:	4294      	cmp	r4, r2
 800a60e:	bfde      	ittt	le
 800a610:	1b12      	suble	r2, r2, r4
 800a612:	eb04 0c01 	addle.w	ip, r4, r1
 800a616:	1840      	addle	r0, r0, r1
 800a618:	0052      	lsls	r2, r2, #1
 800a61a:	f1be 0e01 	subs.w	lr, lr, #1
 800a61e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a622:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a626:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a62a:	d1ed      	bne.n	800a608 <__ieee754_sqrt+0x94>
 800a62c:	4671      	mov	r1, lr
 800a62e:	2720      	movs	r7, #32
 800a630:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a634:	4562      	cmp	r2, ip
 800a636:	eb04 060e 	add.w	r6, r4, lr
 800a63a:	dc02      	bgt.n	800a642 <__ieee754_sqrt+0xce>
 800a63c:	d113      	bne.n	800a666 <__ieee754_sqrt+0xf2>
 800a63e:	429e      	cmp	r6, r3
 800a640:	d811      	bhi.n	800a666 <__ieee754_sqrt+0xf2>
 800a642:	2e00      	cmp	r6, #0
 800a644:	eb06 0e04 	add.w	lr, r6, r4
 800a648:	da43      	bge.n	800a6d2 <__ieee754_sqrt+0x15e>
 800a64a:	f1be 0f00 	cmp.w	lr, #0
 800a64e:	db40      	blt.n	800a6d2 <__ieee754_sqrt+0x15e>
 800a650:	f10c 0801 	add.w	r8, ip, #1
 800a654:	eba2 020c 	sub.w	r2, r2, ip
 800a658:	429e      	cmp	r6, r3
 800a65a:	bf88      	it	hi
 800a65c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a660:	1b9b      	subs	r3, r3, r6
 800a662:	4421      	add	r1, r4
 800a664:	46c4      	mov	ip, r8
 800a666:	0052      	lsls	r2, r2, #1
 800a668:	3f01      	subs	r7, #1
 800a66a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a66e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a672:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a676:	d1dd      	bne.n	800a634 <__ieee754_sqrt+0xc0>
 800a678:	4313      	orrs	r3, r2
 800a67a:	d006      	beq.n	800a68a <__ieee754_sqrt+0x116>
 800a67c:	1c4c      	adds	r4, r1, #1
 800a67e:	bf13      	iteet	ne
 800a680:	3101      	addne	r1, #1
 800a682:	3001      	addeq	r0, #1
 800a684:	4639      	moveq	r1, r7
 800a686:	f021 0101 	bicne.w	r1, r1, #1
 800a68a:	1043      	asrs	r3, r0, #1
 800a68c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a690:	0849      	lsrs	r1, r1, #1
 800a692:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a696:	07c2      	lsls	r2, r0, #31
 800a698:	bf48      	it	mi
 800a69a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a69e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a6a2:	460c      	mov	r4, r1
 800a6a4:	463d      	mov	r5, r7
 800a6a6:	e77f      	b.n	800a5a8 <__ieee754_sqrt+0x34>
 800a6a8:	0ada      	lsrs	r2, r3, #11
 800a6aa:	3815      	subs	r0, #21
 800a6ac:	055b      	lsls	r3, r3, #21
 800a6ae:	2a00      	cmp	r2, #0
 800a6b0:	d0fa      	beq.n	800a6a8 <__ieee754_sqrt+0x134>
 800a6b2:	02d7      	lsls	r7, r2, #11
 800a6b4:	d50a      	bpl.n	800a6cc <__ieee754_sqrt+0x158>
 800a6b6:	f1c1 0420 	rsb	r4, r1, #32
 800a6ba:	fa23 f404 	lsr.w	r4, r3, r4
 800a6be:	1e4d      	subs	r5, r1, #1
 800a6c0:	408b      	lsls	r3, r1
 800a6c2:	4322      	orrs	r2, r4
 800a6c4:	1b41      	subs	r1, r0, r5
 800a6c6:	e788      	b.n	800a5da <__ieee754_sqrt+0x66>
 800a6c8:	4608      	mov	r0, r1
 800a6ca:	e7f0      	b.n	800a6ae <__ieee754_sqrt+0x13a>
 800a6cc:	0052      	lsls	r2, r2, #1
 800a6ce:	3101      	adds	r1, #1
 800a6d0:	e7ef      	b.n	800a6b2 <__ieee754_sqrt+0x13e>
 800a6d2:	46e0      	mov	r8, ip
 800a6d4:	e7be      	b.n	800a654 <__ieee754_sqrt+0xe0>
 800a6d6:	bf00      	nop
 800a6d8:	7ff00000 	.word	0x7ff00000

0800a6dc <_init>:
 800a6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6de:	bf00      	nop
 800a6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e2:	bc08      	pop	{r3}
 800a6e4:	469e      	mov	lr, r3
 800a6e6:	4770      	bx	lr

0800a6e8 <_fini>:
 800a6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ea:	bf00      	nop
 800a6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ee:	bc08      	pop	{r3}
 800a6f0:	469e      	mov	lr, r3
 800a6f2:	4770      	bx	lr
