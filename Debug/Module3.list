
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1ac  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800a344  0800a344  0001a344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a37c  0800a37c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a37c  0800a37c  0001a37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a384  0800a384  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a384  0800a384  0001a384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a388  0800a388  0001a388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800a38c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  20000090  0800a418  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  0800a418  00020724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110c5  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201f  00000000  00000000  00031181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  000331a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  00034208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f71  00000000  00000000  000351e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012015  00000000  00000000  0004c151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f13  00000000  00000000  0005e166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0079  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba4  00000000  00000000  000f00cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a32c 	.word	0x0800a32c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800a32c 	.word	0x0800a32c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b96e 	b.w	80010a0 <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f806 	bl	8000ddc <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	4604      	mov	r4, r0
 8000de4:	468c      	mov	ip, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 8083 	bne.w	8000ef2 <__udivmoddi4+0x116>
 8000dec:	428a      	cmp	r2, r1
 8000dee:	4617      	mov	r7, r2
 8000df0:	d947      	bls.n	8000e82 <__udivmoddi4+0xa6>
 8000df2:	fab2 f282 	clz	r2, r2
 8000df6:	b142      	cbz	r2, 8000e0a <__udivmoddi4+0x2e>
 8000df8:	f1c2 0020 	rsb	r0, r2, #32
 8000dfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4097      	lsls	r7, r2
 8000e04:	ea40 0c01 	orr.w	ip, r0, r1
 8000e08:	4094      	lsls	r4, r2
 8000e0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e0e:	0c23      	lsrs	r3, r4, #16
 8000e10:	fbbc f6f8 	udiv	r6, ip, r8
 8000e14:	fa1f fe87 	uxth.w	lr, r7
 8000e18:	fb08 c116 	mls	r1, r8, r6, ip
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f10e 	mul.w	r1, r6, lr
 8000e24:	4299      	cmp	r1, r3
 8000e26:	d909      	bls.n	8000e3c <__udivmoddi4+0x60>
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 8119 	bcs.w	8001064 <__udivmoddi4+0x288>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 8116 	bls.w	8001064 <__udivmoddi4+0x288>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	443b      	add	r3, r7
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x8c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	f080 8105 	bcs.w	8001068 <__udivmoddi4+0x28c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8102 	bls.w	8001068 <__udivmoddi4+0x28c>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6c:	eba4 040e 	sub.w	r4, r4, lr
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa0>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	b902      	cbnz	r2, 8000e86 <__udivmoddi4+0xaa>
 8000e84:	deff      	udf	#255	; 0xff
 8000e86:	fab2 f282 	clz	r2, r2
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d150      	bne.n	8000f30 <__udivmoddi4+0x154>
 8000e8e:	1bcb      	subs	r3, r1, r7
 8000e90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	2601      	movs	r6, #1
 8000e9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e9e:	0c21      	lsrs	r1, r4, #16
 8000ea0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb08 f30c 	mul.w	r3, r8, ip
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d907      	bls.n	8000ec0 <__udivmoddi4+0xe4>
 8000eb0:	1879      	adds	r1, r7, r1
 8000eb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0xe2>
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	f200 80e9 	bhi.w	8001090 <__udivmoddi4+0x2b4>
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	1ac9      	subs	r1, r1, r3
 8000ec2:	b2a3      	uxth	r3, r4
 8000ec4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ecc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed0:	fb08 f800 	mul.w	r8, r8, r0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x10c>
 8000ed8:	193c      	adds	r4, r7, r4
 8000eda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x10a>
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	f200 80d9 	bhi.w	8001098 <__udivmoddi4+0x2bc>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	eba4 0408 	sub.w	r4, r4, r8
 8000eec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef0:	e7bf      	b.n	8000e72 <__udivmoddi4+0x96>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d909      	bls.n	8000f0a <__udivmoddi4+0x12e>
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	f000 80b1 	beq.w	800105e <__udivmoddi4+0x282>
 8000efc:	2600      	movs	r6, #0
 8000efe:	e9c5 0100 	strd	r0, r1, [r5]
 8000f02:	4630      	mov	r0, r6
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	fab3 f683 	clz	r6, r3
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d14a      	bne.n	8000fa8 <__udivmoddi4+0x1cc>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d302      	bcc.n	8000f1c <__udivmoddi4+0x140>
 8000f16:	4282      	cmp	r2, r0
 8000f18:	f200 80b8 	bhi.w	800108c <__udivmoddi4+0x2b0>
 8000f1c:	1a84      	subs	r4, r0, r2
 8000f1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000f22:	2001      	movs	r0, #1
 8000f24:	468c      	mov	ip, r1
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d0a8      	beq.n	8000e7c <__udivmoddi4+0xa0>
 8000f2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f2e:	e7a5      	b.n	8000e7c <__udivmoddi4+0xa0>
 8000f30:	f1c2 0320 	rsb	r3, r2, #32
 8000f34:	fa20 f603 	lsr.w	r6, r0, r3
 8000f38:	4097      	lsls	r7, r2
 8000f3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000f3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f42:	40d9      	lsrs	r1, r3
 8000f44:	4330      	orrs	r0, r6
 8000f46:	0c03      	lsrs	r3, r0, #16
 8000f48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f4c:	fa1f f887 	uxth.w	r8, r7
 8000f50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f58:	fb06 f108 	mul.w	r1, r6, r8
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f62:	d909      	bls.n	8000f78 <__udivmoddi4+0x19c>
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f6a:	f080 808d 	bcs.w	8001088 <__udivmoddi4+0x2ac>
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	f240 808a 	bls.w	8001088 <__udivmoddi4+0x2ac>
 8000f74:	3e02      	subs	r6, #2
 8000f76:	443b      	add	r3, r7
 8000f78:	1a5b      	subs	r3, r3, r1
 8000f7a:	b281      	uxth	r1, r0
 8000f7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f88:	fb00 f308 	mul.w	r3, r0, r8
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d907      	bls.n	8000fa0 <__udivmoddi4+0x1c4>
 8000f90:	1879      	adds	r1, r7, r1
 8000f92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f96:	d273      	bcs.n	8001080 <__udivmoddi4+0x2a4>
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d971      	bls.n	8001080 <__udivmoddi4+0x2a4>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4439      	add	r1, r7
 8000fa0:	1acb      	subs	r3, r1, r3
 8000fa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fa6:	e778      	b.n	8000e9a <__udivmoddi4+0xbe>
 8000fa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000fac:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fb4:	431c      	orrs	r4, r3
 8000fb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fba:	fa01 f306 	lsl.w	r3, r1, r6
 8000fbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fc6:	431f      	orrs	r7, r3
 8000fc8:	0c3b      	lsrs	r3, r7, #16
 8000fca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fce:	fa1f f884 	uxth.w	r8, r4
 8000fd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fda:	fb09 fa08 	mul.w	sl, r9, r8
 8000fde:	458a      	cmp	sl, r1
 8000fe0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fe4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0x220>
 8000fea:	1861      	adds	r1, r4, r1
 8000fec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff0:	d248      	bcs.n	8001084 <__udivmoddi4+0x2a8>
 8000ff2:	458a      	cmp	sl, r1
 8000ff4:	d946      	bls.n	8001084 <__udivmoddi4+0x2a8>
 8000ff6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ffa:	4421      	add	r1, r4
 8000ffc:	eba1 010a 	sub.w	r1, r1, sl
 8001000:	b2bf      	uxth	r7, r7
 8001002:	fbb1 f0fe 	udiv	r0, r1, lr
 8001006:	fb0e 1110 	mls	r1, lr, r0, r1
 800100a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800100e:	fb00 f808 	mul.w	r8, r0, r8
 8001012:	45b8      	cmp	r8, r7
 8001014:	d907      	bls.n	8001026 <__udivmoddi4+0x24a>
 8001016:	19e7      	adds	r7, r4, r7
 8001018:	f100 31ff 	add.w	r1, r0, #4294967295
 800101c:	d22e      	bcs.n	800107c <__udivmoddi4+0x2a0>
 800101e:	45b8      	cmp	r8, r7
 8001020:	d92c      	bls.n	800107c <__udivmoddi4+0x2a0>
 8001022:	3802      	subs	r0, #2
 8001024:	4427      	add	r7, r4
 8001026:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800102a:	eba7 0708 	sub.w	r7, r7, r8
 800102e:	fba0 8902 	umull	r8, r9, r0, r2
 8001032:	454f      	cmp	r7, r9
 8001034:	46c6      	mov	lr, r8
 8001036:	4649      	mov	r1, r9
 8001038:	d31a      	bcc.n	8001070 <__udivmoddi4+0x294>
 800103a:	d017      	beq.n	800106c <__udivmoddi4+0x290>
 800103c:	b15d      	cbz	r5, 8001056 <__udivmoddi4+0x27a>
 800103e:	ebb3 020e 	subs.w	r2, r3, lr
 8001042:	eb67 0701 	sbc.w	r7, r7, r1
 8001046:	fa07 fc0c 	lsl.w	ip, r7, ip
 800104a:	40f2      	lsrs	r2, r6
 800104c:	ea4c 0202 	orr.w	r2, ip, r2
 8001050:	40f7      	lsrs	r7, r6
 8001052:	e9c5 2700 	strd	r2, r7, [r5]
 8001056:	2600      	movs	r6, #0
 8001058:	4631      	mov	r1, r6
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105e:	462e      	mov	r6, r5
 8001060:	4628      	mov	r0, r5
 8001062:	e70b      	b.n	8000e7c <__udivmoddi4+0xa0>
 8001064:	4606      	mov	r6, r0
 8001066:	e6e9      	b.n	8000e3c <__udivmoddi4+0x60>
 8001068:	4618      	mov	r0, r3
 800106a:	e6fd      	b.n	8000e68 <__udivmoddi4+0x8c>
 800106c:	4543      	cmp	r3, r8
 800106e:	d2e5      	bcs.n	800103c <__udivmoddi4+0x260>
 8001070:	ebb8 0e02 	subs.w	lr, r8, r2
 8001074:	eb69 0104 	sbc.w	r1, r9, r4
 8001078:	3801      	subs	r0, #1
 800107a:	e7df      	b.n	800103c <__udivmoddi4+0x260>
 800107c:	4608      	mov	r0, r1
 800107e:	e7d2      	b.n	8001026 <__udivmoddi4+0x24a>
 8001080:	4660      	mov	r0, ip
 8001082:	e78d      	b.n	8000fa0 <__udivmoddi4+0x1c4>
 8001084:	4681      	mov	r9, r0
 8001086:	e7b9      	b.n	8000ffc <__udivmoddi4+0x220>
 8001088:	4666      	mov	r6, ip
 800108a:	e775      	b.n	8000f78 <__udivmoddi4+0x19c>
 800108c:	4630      	mov	r0, r6
 800108e:	e74a      	b.n	8000f26 <__udivmoddi4+0x14a>
 8001090:	f1ac 0c02 	sub.w	ip, ip, #2
 8001094:	4439      	add	r1, r7
 8001096:	e713      	b.n	8000ec0 <__udivmoddi4+0xe4>
 8001098:	3802      	subs	r0, #2
 800109a:	443c      	add	r4, r7
 800109c:	e724      	b.n	8000ee8 <__udivmoddi4+0x10c>
 800109e:	bf00      	nop

080010a0 <__aeabi_idiv0>:
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	0000      	movs	r0, r0
	...

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b0:	f003 fbd8 	bl	8004864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b4:	f000 f9e8 	bl	8001488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b8:	f000 fbea 	bl	8001890 <MX_GPIO_Init>
  MX_DMA_Init();
 80010bc:	f000 fbc0 	bl	8001840 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010c0:	f000 fb92 	bl	80017e8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010c4:	f000 fa76 	bl	80015b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010c8:	f000 facc 	bl	8001664 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010cc:	f000 fb16 	bl	80016fc <MX_TIM3_Init>
  MX_I2C1_Init();
 80010d0:	f000 fa42 	bl	8001558 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80010d4:	48be      	ldr	r0, [pc, #760]	; (80013d0 <main+0x328>)
 80010d6:	f006 ff93 	bl	8008000 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010da:	213c      	movs	r1, #60	; 0x3c
 80010dc:	48bd      	ldr	r0, [pc, #756]	; (80013d4 <main+0x32c>)
 80010de:	f007 f9a1 	bl	8008424 <HAL_TIM_Encoder_Start>

	// start PWM
  HAL_TIM_Base_Start(&htim3);
 80010e2:	48bd      	ldr	r0, [pc, #756]	; (80013d8 <main+0x330>)
 80010e4:	f006 ff32 	bl	8007f4c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010e8:	2100      	movs	r1, #0
 80010ea:	48bb      	ldr	r0, [pc, #748]	; (80013d8 <main+0x330>)
 80010ec:	f007 f844 	bl	8008178 <HAL_TIM_PWM_Start>

  ///Init Data
  ConverterUnitSystemStructureInit(&CUSSStruc);
 80010f0:	48ba      	ldr	r0, [pc, #744]	; (80013dc <main+0x334>)
 80010f2:	f000 fdcd 	bl	8001c90 <ConverterUnitSystemStructureInit>
  TrajectoryGenerationStructureInit(&TrjStruc, &CUSSStruc);
 80010f6:	49b9      	ldr	r1, [pc, #740]	; (80013dc <main+0x334>)
 80010f8:	48b9      	ldr	r0, [pc, #740]	; (80013e0 <main+0x338>)
 80010fa:	f000 fde1 	bl	8001cc0 <TrajectoryGenerationStructureInit>

  StabilizerPIDLoad();
 80010fe:	f000 fedb 	bl	8001eb8 <StabilizerPIDLoad>
  LinkMovingPIDLoad();
 8001102:	f000 fe81 	bl	8001e08 <LinkMovingPIDLoad>
  VelocityPurePIDLoad();
 8001106:	f000 ff0b 	bl	8001f20 <VelocityPurePIDLoad>

  Encoder_SetHome_Position();
 800110a:	f000 fd4d 	bl	8001ba8 <Encoder_SetHome_Position>

  ///UART init
  UART2.huart = &huart2;
 800110e:	4bb5      	ldr	r3, [pc, #724]	; (80013e4 <main+0x33c>)
 8001110:	4ab5      	ldr	r2, [pc, #724]	; (80013e8 <main+0x340>)
 8001112:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 8001114:	4bb3      	ldr	r3, [pc, #716]	; (80013e4 <main+0x33c>)
 8001116:	22ff      	movs	r2, #255	; 0xff
 8001118:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 800111a:	4bb2      	ldr	r3, [pc, #712]	; (80013e4 <main+0x33c>)
 800111c:	22ff      	movs	r2, #255	; 0xff
 800111e:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 8001120:	48b0      	ldr	r0, [pc, #704]	; (80013e4 <main+0x33c>)
 8001122:	f001 ff73 	bl	800300c <UARTInit>
  UARTResetStart(&UART2);
 8001126:	48af      	ldr	r0, [pc, #700]	; (80013e4 <main+0x33c>)
 8001128:	f001 ff98 	bl	800305c <UARTResetStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int16_t inputChar = UARTReadChar(&UART2);
 800112c:	48ad      	ldr	r0, [pc, #692]	; (80013e4 <main+0x33c>)
 800112e:	f001 ffb9 	bl	80030a4 <UARTReadChar>
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
	  if (inputChar != -1)
 8001136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113e:	d005      	beq.n	800114c <main+0xa4>
	  {
		  Munmunbot_Protocol(inputChar, &UART2);
 8001140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001144:	49a7      	ldr	r1, [pc, #668]	; (80013e4 <main+0x33c>)
 8001146:	4618      	mov	r0, r3
 8001148:	f002 f892 	bl	8003270 <Munmunbot_Protocol>

	  }

	  switch (Munmunbot_State)
 800114c:	4ba7      	ldr	r3, [pc, #668]	; (80013ec <main+0x344>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b08      	cmp	r3, #8
 8001152:	f200 8173 	bhi.w	800143c <main+0x394>
 8001156:	a201      	add	r2, pc, #4	; (adr r2, 800115c <main+0xb4>)
 8001158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115c:	08001181 	.word	0x08001181
 8001160:	080011af 	.word	0x080011af
 8001164:	080011cb 	.word	0x080011cb
 8001168:	080011e5 	.word	0x080011e5
 800116c:	080011ff 	.word	0x080011ff
 8001170:	08001247 	.word	0x08001247
 8001174:	080012d5 	.word	0x080012d5
 8001178:	08001415 	.word	0x08001415
 800117c:	08001423 	.word	0x08001423
	  {
	  	  case STATE_Disconnected:
	  		  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0)
 8001180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001184:	489a      	ldr	r0, [pc, #616]	; (80013f0 <main+0x348>)
 8001186:	f004 fa85 	bl	8005694 <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d103      	bne.n	8001198 <main+0xf0>
	  		  {
	  			  LAMP_ON(0);
 8001190:	2000      	movs	r0, #0
 8001192:	f002 fd3b 	bl	8003c0c <LAMP_ON>
 8001196:	e002      	b.n	800119e <main+0xf6>
	  		  }
	  		  else
	  		  {
	  			  LAMP_ON(4);
 8001198:	2004      	movs	r0, #4
 800119a:	f002 fd37 	bl	8003c0c <LAMP_ON>
	  		  }
	  		  UpdateMunmunBotState();
 800119e:	f002 ff7f 	bl	80040a0 <UpdateMunmunBotState>
	  		  sethomeTrigger = 0;
 80011a2:	4b94      	ldr	r3, [pc, #592]	; (80013f4 <main+0x34c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
	  		  Emergency_switch_trigger();
 80011a8:	f002 fda0 	bl	8003cec <Emergency_switch_trigger>
	  		  break;
 80011ac:	e146      	b.n	800143c <main+0x394>

	  	  case STATE_Idle:
	  		  LAMP_ON(1);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f002 fd2c 	bl	8003c0c <LAMP_ON>
	  		  UpdateMunmunBotState();
 80011b4:	f002 ff74 	bl	80040a0 <UpdateMunmunBotState>
//	  		  Stabilizing_the_LINK( StabilizePosition );
//	  		  Controlling_the_LINK_Velo( StabilizeVelocity );
	  		  if ( sethomeTrigger == 1 )
 80011b8:	4b8e      	ldr	r3, [pc, #568]	; (80013f4 <main+0x34c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d101      	bne.n	80011c4 <main+0x11c>
	  		  {
	  			  Encoder_SetHome_Position();
 80011c0:	f000 fcf2 	bl	8001ba8 <Encoder_SetHome_Position>
	  		  }
	  		  Emergency_switch_trigger();
 80011c4:	f002 fd92 	bl	8003cec <Emergency_switch_trigger>
		  	  break;
 80011c8:	e138      	b.n	800143c <main+0x394>

	  	  case STATE_PrepareDATA:
	  		  sethomeTrigger = 0;
 80011ca:	4b8a      	ldr	r3, [pc, #552]	; (80013f4 <main+0x34c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
	  		  UpdateMunmunBotState();
 80011d0:	f002 ff66 	bl	80040a0 <UpdateMunmunBotState>
	  		  LAMP_ON(2);
 80011d4:	2002      	movs	r0, #2
 80011d6:	f002 fd19 	bl	8003c0c <LAMP_ON>
	  		  TrajectoryGenerationPrepareDATA();
 80011da:	f000 ff0d 	bl	8001ff8 <TrajectoryGenerationPrepareDATA>
	  		  Emergency_switch_trigger();
 80011de:	f002 fd85 	bl	8003cec <Emergency_switch_trigger>
		  	  break;
 80011e2:	e12b      	b.n	800143c <main+0x394>

	  	  case STATE_Calculation:
	  		  LAMP_ON(2);
 80011e4:	2002      	movs	r0, #2
 80011e6:	f002 fd11 	bl	8003c0c <LAMP_ON>
	  		  UpdateMunmunBotState();
 80011ea:	f002 ff59 	bl	80040a0 <UpdateMunmunBotState>
	  		  TrajectoryGenerationCalculation();
 80011ee:	f001 f85f 	bl	80022b0 <TrajectoryGenerationCalculation>
	  		  Munmunbot_State = STATE_Link_Moving;
 80011f2:	4b7e      	ldr	r3, [pc, #504]	; (80013ec <main+0x344>)
 80011f4:	2204      	movs	r2, #4
 80011f6:	701a      	strb	r2, [r3, #0]
	  		  Emergency_switch_trigger();
 80011f8:	f002 fd78 	bl	8003cec <Emergency_switch_trigger>
	  		  break;
 80011fc:	e11e      	b.n	800143c <main+0x394>

	   	  case STATE_Link_Moving:
	   		  LAMP_ON(2);
 80011fe:	2002      	movs	r0, #2
 8001200:	f002 fd04 	bl	8003c0c <LAMP_ON>
	   		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8001204:	f000 fd2a 	bl	8001c5c <micros>
 8001208:	4b75      	ldr	r3, [pc, #468]	; (80013e0 <main+0x338>)
 800120a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800120e:	1a84      	subs	r4, r0, r2
 8001210:	eb61 0503 	sbc.w	r5, r1, r3
 8001214:	4b72      	ldr	r3, [pc, #456]	; (80013e0 <main+0x338>)
 8001216:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800121a:	429d      	cmp	r5, r3
 800121c:	bf08      	it	eq
 800121e:	4294      	cmpeq	r4, r2
 8001220:	d30e      	bcc.n	8001240 <main+0x198>
	   		  {
	   			  Controlling_the_LINK();
 8001222:	f002 fdbd 	bl	8003da0 <Controlling_the_LINK>


				  if (Moving_Link_Task_Flag == 1)
 8001226:	4b74      	ldr	r3, [pc, #464]	; (80013f8 <main+0x350>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d108      	bne.n	8001240 <main+0x198>
				  {
					  Munmunbot_State = STATE_Stabilized_Link;
 800122e:	4b6f      	ldr	r3, [pc, #444]	; (80013ec <main+0x344>)
 8001230:	2205      	movs	r2, #5
 8001232:	701a      	strb	r2, [r3, #0]
					  StabilizePosition = TrjStruc.Desire_Theta;
 8001234:	4b6a      	ldr	r3, [pc, #424]	; (80013e0 <main+0x338>)
 8001236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001238:	4a70      	ldr	r2, [pc, #448]	; (80013fc <main+0x354>)
 800123a:	6013      	str	r3, [r2, #0]
					  PID_Reset();
 800123c:	f002 fc76 	bl	8003b2c <PID_Reset>
				  }
	   		  }
	  		  Emergency_switch_trigger();
 8001240:	f002 fd54 	bl	8003cec <Emergency_switch_trigger>
	  		  break;
 8001244:	e0fa      	b.n	800143c <main+0x394>

	   	  case STATE_Stabilized_Link:
	   		  LAMP_ON(3);
 8001246:	2003      	movs	r0, #3
 8001248:	f002 fce0 	bl	8003c0c <LAMP_ON>
//	   		  Stabilizing_the_LINK( StabilizePosition );
	   		  HackTheLink( StabilizePosition );
 800124c:	4b6b      	ldr	r3, [pc, #428]	; (80013fc <main+0x354>)
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	eeb0 0a67 	vmov.f32	s0, s15
 8001256:	f002 fe0b 	bl	8003e70 <HackTheLink>
			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 800125a:	4b69      	ldr	r3, [pc, #420]	; (8001400 <main+0x358>)
 800125c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001260:	4b5f      	ldr	r3, [pc, #380]	; (80013e0 <main+0x338>)
 8001262:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8001266:	4b67      	ldr	r3, [pc, #412]	; (8001404 <main+0x35c>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127e:	d826      	bhi.n	80012ce <main+0x226>
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8001280:	4b5f      	ldr	r3, [pc, #380]	; (8001400 <main+0x358>)
 8001282:	ed93 7a08 	vldr	s14, [r3, #32]
 8001286:	4b56      	ldr	r3, [pc, #344]	; (80013e0 <main+0x338>)
 8001288:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800128c:	4b5d      	ldr	r3, [pc, #372]	; (8001404 <main+0x35c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001298:	ee76 7ae7 	vsub.f32	s15, s13, s15
			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 800129c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a4:	db13      	blt.n	80012ce <main+0x226>
					  (Moving_Link_Task_Flag == 1))
 80012a6:	4b54      	ldr	r3, [pc, #336]	; (80013f8 <main+0x350>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d10f      	bne.n	80012ce <main+0x226>
			  {
				    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80012ae:	4b4a      	ldr	r3, [pc, #296]	; (80013d8 <main+0x330>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2200      	movs	r2, #0
 80012b4:	635a      	str	r2, [r3, #52]	; 0x34
					Munmunbot_State = STATE_Verified;
 80012b6:	4b4d      	ldr	r3, [pc, #308]	; (80013ec <main+0x344>)
 80012b8:	2206      	movs	r2, #6
 80012ba:	701a      	strb	r2, [r3, #0]
					Verified_Timestamp = micros();
 80012bc:	f000 fcce 	bl	8001c5c <micros>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4950      	ldr	r1, [pc, #320]	; (8001408 <main+0x360>)
 80012c6:	e9c1 2300 	strd	r2, r3, [r1]
					PID_Reset();
 80012ca:	f002 fc2f 	bl	8003b2c <PID_Reset>
			  }
	   		  Emergency_switch_trigger();
 80012ce:	f002 fd0d 	bl	8003cec <Emergency_switch_trigger>
	   		  break;
 80012d2:	e0b3      	b.n	800143c <main+0x394>
	   	  case STATE_Verified:
	   	  {
	   		  LAMP_ON(3);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f002 fc99 	bl	8003c0c <LAMP_ON>
	   		  UpdateMunmunBotState();
 80012da:	f002 fee1 	bl	80040a0 <UpdateMunmunBotState>
	   		  if ( micros()-Verified_Timestamp >= 0.5*1000000  )
 80012de:	f000 fcbd 	bl	8001c5c <micros>
 80012e2:	4b49      	ldr	r3, [pc, #292]	; (8001408 <main+0x360>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	ebb0 0802 	subs.w	r8, r0, r2
 80012ec:	eb61 0903 	sbc.w	r9, r1, r3
 80012f0:	4640      	mov	r0, r8
 80012f2:	4649      	mov	r1, r9
 80012f4:	f7ff f8f6 	bl	80004e4 <__aeabi_ul2d>
 80012f8:	a333      	add	r3, pc, #204	; (adr r3, 80013c8 <main+0x320>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f7ff fbad 	bl	8000a5c <__aeabi_dcmpge>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d05c      	beq.n	80013c2 <main+0x31a>
	   		  {

				  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 8001308:	4b3d      	ldr	r3, [pc, #244]	; (8001400 <main+0x358>)
 800130a:	ed93 7a08 	vldr	s14, [r3, #32]
 800130e:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <main+0x338>)
 8001310:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8001314:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <main+0x35c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	ee07 3a90 	vmov	s15, r3
 800131c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001320:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	d846      	bhi.n	80013bc <main+0x314>
						  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 800132e:	4b34      	ldr	r3, [pc, #208]	; (8001400 <main+0x358>)
 8001330:	ed93 7a08 	vldr	s14, [r3, #32]
 8001334:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <main+0x338>)
 8001336:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800133a:	4b32      	ldr	r3, [pc, #200]	; (8001404 <main+0x35c>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001346:	ee76 7ae7 	vsub.f32	s15, s13, s15
				  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 800134a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001352:	db33      	blt.n	80013bc <main+0x314>
						  (Moving_Link_Task_Flag == 1))
 8001354:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <main+0x350>)
 8001356:	781b      	ldrb	r3, [r3, #0]
						  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8001358:	2b01      	cmp	r3, #1
 800135a:	d12f      	bne.n	80013bc <main+0x314>
				  {
					  if(MovingLinkMode == LMM_Set_Pos_Directly)
 800135c:	4b2b      	ldr	r3, [pc, #172]	; (800140c <main+0x364>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d10f      	bne.n	8001384 <main+0x2dc>
					  {
						Munmunbot_State = STATE_Idle;
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <main+0x344>)
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
						MovingLinkMode = LMM_Not_Set;
 800136a:	4b28      	ldr	r3, [pc, #160]	; (800140c <main+0x364>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
						StabilizePosition = TrjStruc.Desire_Theta;
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <main+0x338>)
 8001372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001374:	4a21      	ldr	r2, [pc, #132]	; (80013fc <main+0x354>)
 8001376:	6013      	str	r3, [r2, #0]
						PID_Reset();
 8001378:	f002 fbd8 	bl	8003b2c <PID_Reset>
						ACK2Return(&UART2);
 800137c:	4819      	ldr	r0, [pc, #100]	; (80013e4 <main+0x33c>)
 800137e:	f001 ff65 	bl	800324c <ACK2Return>
 8001382:	e013      	b.n	80013ac <main+0x304>
					  }

					  else if ((MovingLinkMode == LMM_Set_Goal_1_Station) || (MovingLinkMode == LMM_Set_Goal_n_Station))
 8001384:	4b21      	ldr	r3, [pc, #132]	; (800140c <main+0x364>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d003      	beq.n	8001394 <main+0x2ec>
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <main+0x364>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b03      	cmp	r3, #3
 8001392:	d10b      	bne.n	80013ac <main+0x304>
					  {
						Munmunbot_State = STATE_End_Effector_Working;
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <main+0x344>)
 8001396:	2207      	movs	r2, #7
 8001398:	701a      	strb	r2, [r3, #0]
						GripperState = 0;
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <main+0x368>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
						StabilizePosition = TrjStruc.Desire_Theta;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <main+0x338>)
 80013a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013a4:	4a15      	ldr	r2, [pc, #84]	; (80013fc <main+0x354>)
 80013a6:	6013      	str	r3, [r2, #0]
						PID_Reset();
 80013a8:	f002 fbc0 	bl	8003b2c <PID_Reset>
					  }
					 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <main+0x330>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2200      	movs	r2, #0
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
					 Moving_Link_Task_Flag = 0;
 80013b4:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <main+0x350>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
 80013ba:	e002      	b.n	80013c2 <main+0x31a>
				  }
				  else
				  {
					  Munmunbot_State =  STATE_Stabilized_Link;
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <main+0x344>)
 80013be:	2205      	movs	r2, #5
 80013c0:	701a      	strb	r2, [r3, #0]
				  }
	   		  }
	   		  Emergency_switch_trigger();
 80013c2:	f002 fc93 	bl	8003cec <Emergency_switch_trigger>
	   		  break;
 80013c6:	e039      	b.n	800143c <main+0x394>
 80013c8:	00000000 	.word	0x00000000
 80013cc:	411e8480 	.word	0x411e8480
 80013d0:	20000684 	.word	0x20000684
 80013d4:	2000063c 	.word	0x2000063c
 80013d8:	20000594 	.word	0x20000594
 80013dc:	20000398 	.word	0x20000398
 80013e0:	20000308 	.word	0x20000308
 80013e4:	200000b8 	.word	0x200000b8
 80013e8:	200006cc 	.word	0x200006cc
 80013ec:	200000d9 	.word	0x200000d9
 80013f0:	40020400 	.word	0x40020400
 80013f4:	200001e9 	.word	0x200001e9
 80013f8:	200001e8 	.word	0x200001e8
 80013fc:	200001f8 	.word	0x200001f8
 8001400:	20000208 	.word	0x20000208
 8001404:	20000014 	.word	0x20000014
 8001408:	20000200 	.word	0x20000200
 800140c:	200001de 	.word	0x200001de
 8001410:	200001eb 	.word	0x200001eb
	   	  }
	  	  case STATE_End_Effector_Working:
	  		  UpdateMunmunBotState();
 8001414:	f002 fe44 	bl	80040a0 <UpdateMunmunBotState>
	  		  EndEffectorWorkingState();
 8001418:	f002 fe62 	bl	80040e0 <EndEffectorWorkingState>
	  		  Emergency_switch_trigger();
 800141c:	f002 fc66 	bl	8003cec <Emergency_switch_trigger>
	  		  break;
 8001420:	e00c      	b.n	800143c <main+0x394>

	  	  case STATE_SetHome:
	  		  sethomeTrigger = 0;
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <main+0x3c8>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
	  		  LAMP_ON(2);
 8001428:	2002      	movs	r0, #2
 800142a:	f002 fbef 	bl	8003c0c <LAMP_ON>
	  		  UpdateMunmunBotState();
 800142e:	f002 fe37 	bl	80040a0 <UpdateMunmunBotState>
	  		  SETHOME_StateMachine_Function();
 8001432:	f002 fde9 	bl	8004008 <SETHOME_StateMachine_Function>
	  		  Emergency_switch_trigger();
 8001436:	f002 fc59 	bl	8003cec <Emergency_switch_trigger>
	  		  break;
 800143a:	bf00      	nop

	  }

	  if ( pidSetZeroFlag != 0 )
 800143c:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <main+0x3cc>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d010      	beq.n	8001466 <main+0x3be>
	  {
		  pidSetZeroFlag = 0;
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <main+0x3cc>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <main+0x3d0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2200      	movs	r2, #0
 8001450:	635a      	str	r2, [r3, #52]	; 0x34
		  TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <main+0x3d4>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <main+0x3d8>)
 8001458:	66d3      	str	r3, [r2, #108]	; 0x6c
		  TrjStruc.AngularVelocityDesire = 0;
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <main+0x3d8>)
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	625a      	str	r2, [r3, #36]	; 0x24
		  PID_Reset();
 8001462:	f002 fb63 	bl	8003b2c <PID_Reset>
	  }



	  UARTTxDumpBuffer(&UART2);
 8001466:	4807      	ldr	r0, [pc, #28]	; (8001484 <main+0x3dc>)
 8001468:	f001 fe46 	bl	80030f8 <UARTTxDumpBuffer>
  {
 800146c:	e65e      	b.n	800112c <main+0x84>
 800146e:	bf00      	nop
 8001470:	200001e9 	.word	0x200001e9
 8001474:	200000ac 	.word	0x200000ac
 8001478:	20000594 	.word	0x20000594
 800147c:	20000208 	.word	0x20000208
 8001480:	20000308 	.word	0x20000308
 8001484:	200000b8 	.word	0x200000b8

08001488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b094      	sub	sp, #80	; 0x50
 800148c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148e:	f107 0320 	add.w	r3, r7, #32
 8001492:	2230      	movs	r2, #48	; 0x30
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f008 fdd0 	bl	800a03c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <SystemClock_Config+0xc8>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	4a26      	ldr	r2, [pc, #152]	; (8001550 <SystemClock_Config+0xc8>)
 80014b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ba:	6413      	str	r3, [r2, #64]	; 0x40
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <SystemClock_Config+0xc8>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	4b21      	ldr	r3, [pc, #132]	; (8001554 <SystemClock_Config+0xcc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a20      	ldr	r2, [pc, #128]	; (8001554 <SystemClock_Config+0xcc>)
 80014d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <SystemClock_Config+0xcc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014e4:	2302      	movs	r3, #2
 80014e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e8:	2301      	movs	r3, #1
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ec:	2310      	movs	r3, #16
 80014ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f0:	2302      	movs	r3, #2
 80014f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014f4:	2300      	movs	r3, #0
 80014f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014f8:	2308      	movs	r3, #8
 80014fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80014fc:	2364      	movs	r3, #100	; 0x64
 80014fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001500:	2302      	movs	r3, #2
 8001502:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001504:	2304      	movs	r3, #4
 8001506:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001508:	f107 0320 	add.w	r3, r7, #32
 800150c:	4618      	mov	r0, r3
 800150e:	f006 f859 	bl	80075c4 <HAL_RCC_OscConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001518:	f002 feba 	bl	8004290 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151c:	230f      	movs	r3, #15
 800151e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001520:	2302      	movs	r3, #2
 8001522:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	2103      	movs	r1, #3
 8001538:	4618      	mov	r0, r3
 800153a:	f006 fabb 	bl	8007ab4 <HAL_RCC_ClockConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001544:	f002 fea4 	bl	8004290 <Error_Handler>
  }
}
 8001548:	bf00      	nop
 800154a:	3750      	adds	r7, #80	; 0x50
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800
 8001554:	40007000 	.word	0x40007000

08001558 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <MX_I2C1_Init+0x54>)
 800155e:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <MX_I2C1_Init+0x58>)
 8001560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <MX_I2C1_Init+0x54>)
 8001564:	f242 7210 	movw	r2, #10000	; 0x2710
 8001568:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_I2C1_Init+0x54>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_I2C1_Init+0x54>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <MX_I2C1_Init+0x54>)
 8001578:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_I2C1_Init+0x54>)
 8001580:	2200      	movs	r2, #0
 8001582:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_I2C1_Init+0x54>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_I2C1_Init+0x54>)
 800158c:	2200      	movs	r2, #0
 800158e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_I2C1_Init+0x54>)
 8001592:	2200      	movs	r2, #0
 8001594:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_I2C1_Init+0x54>)
 8001598:	f004 f8c6 	bl	8005728 <HAL_I2C_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80015a2:	f002 fe75 	bl	8004290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000540 	.word	0x20000540
 80015b0:	40005400 	.word	0x40005400

080015b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08c      	sub	sp, #48	; 0x30
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	2224      	movs	r2, #36	; 0x24
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f008 fd3a 	bl	800a03c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <MX_TIM1_Init+0xa8>)
 80015d2:	4a23      	ldr	r2, [pc, #140]	; (8001660 <MX_TIM1_Init+0xac>)
 80015d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015d6:	4b21      	ldr	r3, [pc, #132]	; (800165c <MX_TIM1_Init+0xa8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <MX_TIM1_Init+0xa8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24575;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_TIM1_Init+0xa8>)
 80015e4:	f645 72ff 	movw	r2, #24575	; 0x5fff
 80015e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <MX_TIM1_Init+0xa8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_TIM1_Init+0xa8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <MX_TIM1_Init+0xa8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015fc:	2303      	movs	r3, #3
 80015fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001604:	2301      	movs	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800160c:	2302      	movs	r3, #2
 800160e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001614:	2301      	movs	r3, #1
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	4619      	mov	r1, r3
 8001626:	480d      	ldr	r0, [pc, #52]	; (800165c <MX_TIM1_Init+0xa8>)
 8001628:	f006 fe56 	bl	80082d8 <HAL_TIM_Encoder_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001632:	f002 fe2d 	bl	8004290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	4619      	mov	r1, r3
 8001642:	4806      	ldr	r0, [pc, #24]	; (800165c <MX_TIM1_Init+0xa8>)
 8001644:	f007 fcfa 	bl	800903c <HAL_TIMEx_MasterConfigSynchronization>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800164e:	f002 fe1f 	bl	8004290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	3730      	adds	r7, #48	; 0x30
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000063c 	.word	0x2000063c
 8001660:	40010000 	.word	0x40010000

08001664 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	463b      	mov	r3, r7
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <MX_TIM2_Init+0x94>)
 8001682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001686:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <MX_TIM2_Init+0x94>)
 800168a:	2263      	movs	r2, #99	; 0x63
 800168c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_TIM2_Init+0x94>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <MX_TIM2_Init+0x94>)
 8001696:	f04f 32ff 	mov.w	r2, #4294967295
 800169a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <MX_TIM2_Init+0x94>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MX_TIM2_Init+0x94>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016a8:	4813      	ldr	r0, [pc, #76]	; (80016f8 <MX_TIM2_Init+0x94>)
 80016aa:	f006 fbff 	bl	8007eac <HAL_TIM_Base_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016b4:	f002 fdec 	bl	8004290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	4619      	mov	r1, r3
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <MX_TIM2_Init+0x94>)
 80016c6:	f007 f901 	bl	80088cc <HAL_TIM_ConfigClockSource>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016d0:	f002 fdde 	bl	8004290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_TIM2_Init+0x94>)
 80016e2:	f007 fcab 	bl	800903c <HAL_TIMEx_MasterConfigSynchronization>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016ec:	f002 fdd0 	bl	8004290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000684 	.word	0x20000684

080016fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08e      	sub	sp, #56	; 0x38
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	f107 0320 	add.w	r3, r7, #32
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	615a      	str	r2, [r3, #20]
 800172a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800172c:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <MX_TIM3_Init+0xe4>)
 800172e:	4a2d      	ldr	r2, [pc, #180]	; (80017e4 <MX_TIM3_Init+0xe8>)
 8001730:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001732:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <MX_TIM3_Init+0xe4>)
 8001734:	2200      	movs	r2, #0
 8001736:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <MX_TIM3_Init+0xe4>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <MX_TIM3_Init+0xe4>)
 8001740:	f242 7210 	movw	r2, #10000	; 0x2710
 8001744:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <MX_TIM3_Init+0xe4>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174c:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <MX_TIM3_Init+0xe4>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001752:	4823      	ldr	r0, [pc, #140]	; (80017e0 <MX_TIM3_Init+0xe4>)
 8001754:	f006 fbaa 	bl	8007eac <HAL_TIM_Base_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800175e:	f002 fd97 	bl	8004290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001768:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800176c:	4619      	mov	r1, r3
 800176e:	481c      	ldr	r0, [pc, #112]	; (80017e0 <MX_TIM3_Init+0xe4>)
 8001770:	f007 f8ac 	bl	80088cc <HAL_TIM_ConfigClockSource>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800177a:	f002 fd89 	bl	8004290 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800177e:	4818      	ldr	r0, [pc, #96]	; (80017e0 <MX_TIM3_Init+0xe4>)
 8001780:	f006 fca0 	bl	80080c4 <HAL_TIM_PWM_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800178a:	f002 fd81 	bl	8004290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	4619      	mov	r1, r3
 800179c:	4810      	ldr	r0, [pc, #64]	; (80017e0 <MX_TIM3_Init+0xe4>)
 800179e:	f007 fc4d 	bl	800903c <HAL_TIMEx_MasterConfigSynchronization>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80017a8:	f002 fd72 	bl	8004290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ac:	2360      	movs	r3, #96	; 0x60
 80017ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	4619      	mov	r1, r3
 80017c2:	4807      	ldr	r0, [pc, #28]	; (80017e0 <MX_TIM3_Init+0xe4>)
 80017c4:	f006 ffc4 	bl	8008750 <HAL_TIM_PWM_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80017ce:	f002 fd5f 	bl	8004290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017d2:	4803      	ldr	r0, [pc, #12]	; (80017e0 <MX_TIM3_Init+0xe4>)
 80017d4:	f002 fe66 	bl	80044a4 <HAL_TIM_MspPostInit>

}
 80017d8:	bf00      	nop
 80017da:	3738      	adds	r7, #56	; 0x38
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000594 	.word	0x20000594
 80017e4:	40000400 	.word	0x40000400

080017e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <MX_USART2_UART_Init+0x50>)
 80017ee:	4a13      	ldr	r2, [pc, #76]	; (800183c <MX_USART2_UART_Init+0x54>)
 80017f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_USART2_UART_Init+0x50>)
 80017f4:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80017f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <MX_USART2_UART_Init+0x50>)
 80017fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001800:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <MX_USART2_UART_Init+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <MX_USART2_UART_Init+0x50>)
 800180a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800180e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_USART2_UART_Init+0x50>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <MX_USART2_UART_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_USART2_UART_Init+0x50>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_USART2_UART_Init+0x50>)
 8001824:	f007 fc8c 	bl	8009140 <HAL_UART_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800182e:	f002 fd2f 	bl	8004290 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200006cc 	.word	0x200006cc
 800183c:	40004400 	.word	0x40004400

08001840 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <MX_DMA_Init+0x4c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a0f      	ldr	r2, [pc, #60]	; (800188c <MX_DMA_Init+0x4c>)
 8001850:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <MX_DMA_Init+0x4c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	2010      	movs	r0, #16
 8001868:	f003 f949 	bl	8004afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800186c:	2010      	movs	r0, #16
 800186e:	f003 f962 	bl	8004b36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2011      	movs	r0, #17
 8001878:	f003 f941 	bl	8004afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800187c:	2011      	movs	r0, #17
 800187e:	f003 f95a 	bl	8004b36 <HAL_NVIC_EnableIRQ>

}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800

08001890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <MX_GPIO_Init+0x198>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a5e      	ldr	r2, [pc, #376]	; (8001a28 <MX_GPIO_Init+0x198>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b5c      	ldr	r3, [pc, #368]	; (8001a28 <MX_GPIO_Init+0x198>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b58      	ldr	r3, [pc, #352]	; (8001a28 <MX_GPIO_Init+0x198>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a57      	ldr	r2, [pc, #348]	; (8001a28 <MX_GPIO_Init+0x198>)
 80018cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b55      	ldr	r3, [pc, #340]	; (8001a28 <MX_GPIO_Init+0x198>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	4b51      	ldr	r3, [pc, #324]	; (8001a28 <MX_GPIO_Init+0x198>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a50      	ldr	r2, [pc, #320]	; (8001a28 <MX_GPIO_Init+0x198>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b4e      	ldr	r3, [pc, #312]	; (8001a28 <MX_GPIO_Init+0x198>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	4b4a      	ldr	r3, [pc, #296]	; (8001a28 <MX_GPIO_Init+0x198>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a49      	ldr	r2, [pc, #292]	; (8001a28 <MX_GPIO_Init+0x198>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <MX_GPIO_Init+0x198>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	2120      	movs	r1, #32
 800191a:	4844      	ldr	r0, [pc, #272]	; (8001a2c <MX_GPIO_Init+0x19c>)
 800191c:	f003 fed2 	bl	80056c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Lamp1_Pin|Lamp2_Pin, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	2106      	movs	r1, #6
 8001924:	4842      	ldr	r0, [pc, #264]	; (8001a30 <MX_GPIO_Init+0x1a0>)
 8001926:	f003 fecd 	bl	80056c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	2180      	movs	r1, #128	; 0x80
 800192e:	4841      	ldr	r0, [pc, #260]	; (8001a34 <MX_GPIO_Init+0x1a4>)
 8001930:	f003 fec8 	bl	80056c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Lamp3_GPIO_Port, Lamp3_Pin, GPIO_PIN_SET);
 8001934:	2201      	movs	r2, #1
 8001936:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800193a:	483c      	ldr	r0, [pc, #240]	; (8001a2c <MX_GPIO_Init+0x19c>)
 800193c:	f003 fec2 	bl	80056c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001946:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <MX_GPIO_Init+0x1a8>)
 8001948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	4837      	ldr	r0, [pc, #220]	; (8001a34 <MX_GPIO_Init+0x1a4>)
 8001956:	f003 fd19 	bl	800538c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Lamp3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Lamp3_Pin;
 800195a:	f44f 6302 	mov.w	r3, #2080	; 0x820
 800195e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4619      	mov	r1, r3
 8001972:	482e      	ldr	r0, [pc, #184]	; (8001a2c <MX_GPIO_Init+0x19c>)
 8001974:	f003 fd0a 	bl	800538c <HAL_GPIO_Init>

  /*Configure GPIO pins : Lamp1_Pin Lamp2_Pin */
  GPIO_InitStruct.Pin = Lamp1_Pin|Lamp2_Pin;
 8001978:	2306      	movs	r3, #6
 800197a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2301      	movs	r3, #1
 800197e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4828      	ldr	r0, [pc, #160]	; (8001a30 <MX_GPIO_Init+0x1a0>)
 8001990:	f003 fcfc 	bl	800538c <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Switch_Signal_Pin */
  GPIO_InitStruct.Pin = Emergency_Switch_Signal_Pin;
 8001994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800199e:	2302      	movs	r3, #2
 80019a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Switch_Signal_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	4821      	ldr	r0, [pc, #132]	; (8001a30 <MX_GPIO_Init+0x1a0>)
 80019aa:	f003 fcef 	bl	800538c <HAL_GPIO_Init>

  /*Configure GPIO pin : Index_Signal_Pin */
  GPIO_InitStruct.Pin = Index_Signal_Pin;
 80019ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019b4:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <MX_GPIO_Init+0x1ac>)
 80019b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Index_Signal_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	481b      	ldr	r0, [pc, #108]	; (8001a30 <MX_GPIO_Init+0x1a0>)
 80019c4:	f003 fce2 	bl	800538c <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	4815      	ldr	r0, [pc, #84]	; (8001a34 <MX_GPIO_Init+0x1a4>)
 80019e0:	f003 fcd4 	bl	800538c <HAL_GPIO_Init>

  /*Configure GPIO pin : LimitSwitchSignal_Pin */
  GPIO_InitStruct.Pin = LimitSwitchSignal_Pin;
 80019e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <MX_GPIO_Init+0x1ac>)
 80019ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LimitSwitchSignal_GPIO_Port, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	480e      	ldr	r0, [pc, #56]	; (8001a34 <MX_GPIO_Init+0x1a4>)
 80019fa:	f003 fcc7 	bl	800538c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2017      	movs	r0, #23
 8001a04:	f003 f87b 	bl	8004afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a08:	2017      	movs	r0, #23
 8001a0a:	f003 f894 	bl	8004b36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	2028      	movs	r0, #40	; 0x28
 8001a14:	f003 f873 	bl	8004afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a18:	2028      	movs	r0, #40	; 0x28
 8001a1a:	f003 f88c 	bl	8004b36 <HAL_NVIC_EnableIRQ>

}
 8001a1e:	bf00      	nop
 8001a20:	3728      	adds	r7, #40	; 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	40020400 	.word	0x40020400
 8001a34:	40020800 	.word	0x40020800
 8001a38:	10210000 	.word	0x10210000
 8001a3c:	10110000 	.word	0x10110000

08001a40 <EncoderVelocityAndPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 12288
#define  MAX_ENCODER_PERIOD 24576

void EncoderVelocityAndPosition_Update()
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	ed2d 8b02 	vpush	{d8}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af00      	add	r7, sp, #0

	static float EncoderLastVelocity = 0;
	static float Velocity_Output = 0;
	static float Acceration_Output = 0;
	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8001a4a:	4b49      	ldr	r3, [pc, #292]	; (8001b70 <EncoderVelocityAndPosition_Update+0x130>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
	uint64_t EncoderNowTimestamp = micros();
 8001a52:	f000 f903 	bl	8001c5c <micros>
 8001a56:	e9c7 0106 	strd	r0, r1, [r7, #24]

	int32_t EncoderPositionDiff;
	float EncoderVelocityDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8001a5a:	4b46      	ldr	r3, [pc, #280]	; (8001b74 <EncoderVelocityAndPosition_Update+0x134>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a64:	1a84      	subs	r4, r0, r2
 8001a66:	eb61 0503 	sbc.w	r5, r1, r3
 8001a6a:	e9c7 4504 	strd	r4, r5, [r7, #16]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8001a6e:	4b42      	ldr	r3, [pc, #264]	; (8001b78 <EncoderVelocityAndPosition_Update+0x138>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	60fb      	str	r3, [r7, #12]

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8001a78:	4a3f      	ldr	r2, [pc, #252]	; (8001b78 <EncoderVelocityAndPosition_Update+0x138>)
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8001a7e:	493d      	ldr	r1, [pc, #244]	; (8001b74 <EncoderVelocityAndPosition_Update+0x134>)
 8001a80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a84:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity and Encoder Pos
	PositionPIDController.OutputFeedback = EncoderNowPosition;
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a92:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <EncoderVelocityAndPosition_Update+0x13c>)
 8001a94:	edc3 7a08 	vstr	s15, [r3, #32]
	StabilizerPIDController.OutputFeedback = EncoderNowPosition;
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aa2:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <EncoderVelocityAndPosition_Update+0x140>)
 8001aa4:	edc3 7a08 	vstr	s15, [r3, #32]
	// LPF
	Velocity_Output = (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;  /// Pulse per second
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4a36      	ldr	r2, [pc, #216]	; (8001b84 <EncoderVelocityAndPosition_Update+0x144>)
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	ee07 3a90 	vmov	s15, r3
 8001ab4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001ab8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001abc:	f7ff f930 	bl	8000d20 <__aeabi_ul2f>
 8001ac0:	ee07 0a10 	vmov	s14, r0
 8001ac4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <EncoderVelocityAndPosition_Update+0x148>)
 8001aca:	edc3 7a00 	vstr	s15, [r3]
	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*299))/300.0;
 8001ace:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <EncoderVelocityAndPosition_Update+0x14c>)
 8001ad0:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ad4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001b90 <EncoderVelocityAndPosition_Update+0x150>
 8001ad8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001adc:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <EncoderVelocityAndPosition_Update+0x148>)
 8001ade:	edd3 7a00 	vldr	s15, [r3]
 8001ae2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ae6:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001b94 <EncoderVelocityAndPosition_Update+0x154>
 8001aea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aee:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <EncoderVelocityAndPosition_Update+0x14c>)
 8001af0:	edc3 7a08 	vstr	s15, [r3, #32]
//	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*49))/50.0;

	float EncoderNowVelocity = VelocityPIDController.OutputFeedback;
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <EncoderVelocityAndPosition_Update+0x14c>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	60bb      	str	r3, [r7, #8]

	EncoderVelocityDiff = EncoderNowVelocity - EncoderLastVelocity;
 8001afa:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <EncoderVelocityAndPosition_Update+0x158>)
 8001afc:	edd3 7a00 	vldr	s15, [r3]
 8001b00:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b08:	edc7 7a01 	vstr	s15, [r7, #4]
	EncoderLastVelocity = VelocityPIDController.OutputFeedback;
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <EncoderVelocityAndPosition_Update+0x14c>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	4a21      	ldr	r2, [pc, #132]	; (8001b98 <EncoderVelocityAndPosition_Update+0x158>)
 8001b12:	6013      	str	r3, [r2, #0]

	Acceration_Output = ( EncoderVelocityDiff * 1000000)  / (float) EncoderTimeDiff;
 8001b14:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b18:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001b9c <EncoderVelocityAndPosition_Update+0x15c>
 8001b1c:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001b20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b24:	f7ff f8fc 	bl	8000d20 <__aeabi_ul2f>
 8001b28:	ee07 0a10 	vmov	s14, r0
 8001b2c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001b30:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <EncoderVelocityAndPosition_Update+0x160>)
 8001b32:	edc3 7a00 	vstr	s15, [r3]
	Acceration_Output = (Acceration_Output + (EstimatedAngularAcceration*299))/300.0;
 8001b36:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <EncoderVelocityAndPosition_Update+0x164>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001b90 <EncoderVelocityAndPosition_Update+0x150>
 8001b40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b44:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <EncoderVelocityAndPosition_Update+0x160>)
 8001b46:	edd3 7a00 	vldr	s15, [r3]
 8001b4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b4e:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001b94 <EncoderVelocityAndPosition_Update+0x154>
 8001b52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <EncoderVelocityAndPosition_Update+0x160>)
 8001b58:	edc3 7a00 	vstr	s15, [r3]
//	Acceration_Output = (Acceration_Output + (EstimatedAngularAcceration*49))/50.0;
	EstimatedAngularAcceration = ( Acceration_Output );
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <EncoderVelocityAndPosition_Update+0x160>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <EncoderVelocityAndPosition_Update+0x164>)
 8001b62:	6013      	str	r3, [r2, #0]

}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	; 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	ecbd 8b02 	vpop	{d8}
 8001b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b70:	2000063c 	.word	0x2000063c
 8001b74:	200003a8 	.word	0x200003a8
 8001b78:	200003b0 	.word	0x200003b0
 8001b7c:	20000208 	.word	0x20000208
 8001b80:	200002c8 	.word	0x200002c8
 8001b84:	000f4240 	.word	0x000f4240
 8001b88:	200003b4 	.word	0x200003b4
 8001b8c:	20000248 	.word	0x20000248
 8001b90:	43958000 	.word	0x43958000
 8001b94:	43960000 	.word	0x43960000
 8001b98:	200003b8 	.word	0x200003b8
 8001b9c:	49742400 	.word	0x49742400
 8001ba0:	200003bc 	.word	0x200003bc
 8001ba4:	200003a4 	.word	0x200003a4

08001ba8 <Encoder_SetHome_Position>:


void Encoder_SetHome_Position()
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
	HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <Encoder_SetHome_Position+0x2c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <Encoder_SetHome_Position+0x30>)
 8001bb2:	6852      	ldr	r2, [r2, #4]
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24
	StabilizePosition = CUSSStruc.PPRxQEI;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <Encoder_SetHome_Position+0x30>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	ee07 3a90 	vmov	s15, r3
 8001bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <Encoder_SetHome_Position+0x34>)
 8001bc4:	edc3 7a00 	vstr	s15, [r3]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	2000063c 	.word	0x2000063c
 8001bd8:	20000398 	.word	0x20000398
 8001bdc:	200001f8 	.word	0x200001f8

08001be0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001be0:	b4b0      	push	{r4, r5, r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d109      	bne.n	8001c04 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	f112 34ff 	adds.w	r4, r2, #4294967295
 8001bfa:	f143 0500 	adc.w	r5, r3, #0
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001c00:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bcb0      	pop	{r4, r5, r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000684 	.word	0x20000684
 8001c14:	200000b0 	.word	0x200000b0

08001c18 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
    if ((GPIO_Pin == GPIO_PIN_13) || (GPIO_Pin == GPIO_PIN_8))  //13 -> BlueButton, 8 -> Limitswitch
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_EXTI_Callback+0x1a>
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c30:	d10a      	bne.n	8001c48 <HAL_GPIO_EXTI_Callback+0x30>
	{
    	if (Munmunbot_State == STATE_SetHome)
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d106      	bne.n	8001c48 <HAL_GPIO_EXTI_Callback+0x30>
    	{
    		if (SethomeMode == SetHomeState_1)
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <HAL_GPIO_EXTI_Callback+0x40>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d102      	bne.n	8001c48 <HAL_GPIO_EXTI_Callback+0x30>
    		{
//    			Encoder_SetHome_Position();
    			SethomeMode = SetHomeState_2;
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_GPIO_EXTI_Callback+0x40>)
 8001c44:	2202      	movs	r2, #2
 8001c46:	701a      	strb	r2, [r3, #0]
//				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
    		}
    	}
	}

}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	200000d9 	.word	0x200000d9
 8001c58:	200000da 	.word	0x200000da

08001c5c <micros>:

uint64_t micros()
{
 8001c5c:	b4b0      	push	{r4, r5, r7}
 8001c5e:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <micros+0x2c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	4618      	mov	r0, r3
 8001c68:	f04f 0100 	mov.w	r1, #0
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <micros+0x30>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	1884      	adds	r4, r0, r2
 8001c74:	eb41 0503 	adc.w	r5, r1, r3
 8001c78:	4622      	mov	r2, r4
 8001c7a:	462b      	mov	r3, r5
}
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bcb0      	pop	{r4, r5, r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000684 	.word	0x20000684
 8001c8c:	200000b0 	.word	0x200000b0

08001c90 <ConverterUnitSystemStructureInit>:

void ConverterUnitSystemStructureInit(ConverterUnitSystemStructure *CUSSvar)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	CUSSvar->PPR = 2048;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c9e:	601a      	str	r2, [r3, #0]
	CUSSvar->PPRxQEI = CUSSvar->PPR * 4;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	009a      	lsls	r2, r3, #2
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	605a      	str	r2, [r3, #4]
	CUSSvar->RPMp = 10;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a03      	ldr	r2, [pc, #12]	; (8001cbc <ConverterUnitSystemStructureInit+0x2c>)
 8001cae:	609a      	str	r2, [r3, #8]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	41200000 	.word	0x41200000

08001cc0 <TrajectoryGenerationStructureInit>:

void TrajectoryGenerationStructureInit(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
	TGSvar->AngularAccerationMax_Setting = (0.4*(CUSSvar->PPRxQEI))/(3.1416*2.0);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fbc4 	bl	800045c <__aeabi_ui2d>
 8001cd4:	a347      	add	r3, pc, #284	; (adr r3, 8001df4 <TrajectoryGenerationStructureInit+0x134>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	f7fe fc39 	bl	8000550 <__aeabi_dmul>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	a345      	add	r3, pc, #276	; (adr r3, 8001dfc <TrajectoryGenerationStructureInit+0x13c>)
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	f7fe fd5a 	bl	80007a4 <__aeabi_ddiv>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f7fe fefa 	bl	8000af0 <__aeabi_d2f>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	615a      	str	r2, [r3, #20]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*10)/(60.0);  //pps
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fba4 	bl	800045c <__aeabi_ui2d>
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <TrajectoryGenerationStructureInit+0x128>)
 8001d1a:	f7fe fd43 	bl	80007a4 <__aeabi_ddiv>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7fe fee3 	bl	8000af0 <__aeabi_d2f>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	611a      	str	r2, [r3, #16]
	TGSvar->Start_Theta = CUSSStruc.PPRxQEI;  /// PPRxQEI == 0 degree
 8001d30:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <TrajectoryGenerationStructureInit+0x12c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	ee07 3a90 	vmov	s15, r3
 8001d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	TGSvar->Mode = 0;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	TGSvar->Submode = 0;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	TGSvar->Loop_Freq = 1000;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d58:	659a      	str	r2, [r3, #88]	; 0x58
	TGSvar->Loop_Period = 1000000/(TGSvar->Loop_Freq);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	4a24      	ldr	r2, [pc, #144]	; (8001df0 <TrajectoryGenerationStructureInit+0x130>)
 8001d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	edd3 6a04 	vldr	s13, [r3, #16]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	edc3 7a03 	vstr	s15, [r3, #12]
	TGSvar->AngularVelocityFinalMin = 0*1.8*(CUSSvar->PPRxQEI)/60.0;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fb5b 	bl	800045c <__aeabi_ui2d>
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	f7fe fbcf 	bl	8000550 <__aeabi_dmul>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <TrajectoryGenerationStructureInit+0x128>)
 8001dc0:	f7fe fcf0 	bl	80007a4 <__aeabi_ddiv>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f7fe fe90 	bl	8000af0 <__aeabi_d2f>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	679a      	str	r2, [r3, #120]	; 0x78
	TGSvar->Alpha = 1;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ddc:	67da      	str	r2, [r3, #124]	; 0x7c

}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	404e0000 	.word	0x404e0000
 8001dec:	20000398 	.word	0x20000398
 8001df0:	000f4240 	.word	0x000f4240
 8001df4:	9999999a 	.word	0x9999999a
 8001df8:	3fd99999 	.word	0x3fd99999
 8001dfc:	2e48e8a7 	.word	0x2e48e8a7
 8001e00:	401921ff 	.word	0x401921ff
 8001e04:	00000000 	.word	0x00000000

08001e08 <LinkMovingPIDLoad>:

void LinkMovingPIDLoad()
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
	PositionPIDController.Kp = 0;
 8001e0c:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <LinkMovingPIDLoad+0x90>)
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
	PositionPIDController.Ki = 0;
 8001e14:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <LinkMovingPIDLoad+0x90>)
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	605a      	str	r2, [r3, #4]
	PositionPIDController.Kd = 0;
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <LinkMovingPIDLoad+0x90>)
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
	PositionPIDController.offSet = 0;
 8001e24:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <LinkMovingPIDLoad+0x90>)
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
	PositionPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <LinkMovingPIDLoad+0x94>)
 8001e2e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7fe fb55 	bl	80004e4 <__aeabi_ul2d>
 8001e3a:	a315      	add	r3, pc, #84	; (adr r3, 8001e90 <LinkMovingPIDLoad+0x88>)
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	f7fe fcb0 	bl	80007a4 <__aeabi_ddiv>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4913      	ldr	r1, [pc, #76]	; (8001e98 <LinkMovingPIDLoad+0x90>)
 8001e4a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	VelocityPIDController.Kp = 6;
 8001e4e:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <LinkMovingPIDLoad+0x98>)
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <LinkMovingPIDLoad+0x9c>)
 8001e52:	601a      	str	r2, [r3, #0]
	VelocityPIDController.Ki = 10;
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <LinkMovingPIDLoad+0x98>)
 8001e56:	4a14      	ldr	r2, [pc, #80]	; (8001ea8 <LinkMovingPIDLoad+0xa0>)
 8001e58:	605a      	str	r2, [r3, #4]
	VelocityPIDController.Kd = 0.00005;
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <LinkMovingPIDLoad+0x98>)
 8001e5c:	4a13      	ldr	r2, [pc, #76]	; (8001eac <LinkMovingPIDLoad+0xa4>)
 8001e5e:	609a      	str	r2, [r3, #8]
	VelocityPIDController.offSet = 1500;
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <LinkMovingPIDLoad+0x98>)
 8001e62:	4a13      	ldr	r2, [pc, #76]	; (8001eb0 <LinkMovingPIDLoad+0xa8>)
 8001e64:	611a      	str	r2, [r3, #16]
	VelocityPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <LinkMovingPIDLoad+0x94>)
 8001e68:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7fe fb38 	bl	80004e4 <__aeabi_ul2d>
 8001e74:	a306      	add	r3, pc, #24	; (adr r3, 8001e90 <LinkMovingPIDLoad+0x88>)
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	f7fe fc93 	bl	80007a4 <__aeabi_ddiv>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4907      	ldr	r1, [pc, #28]	; (8001ea0 <LinkMovingPIDLoad+0x98>)
 8001e84:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	f3af 8000 	nop.w
 8001e90:	00000000 	.word	0x00000000
 8001e94:	412e8480 	.word	0x412e8480
 8001e98:	20000208 	.word	0x20000208
 8001e9c:	20000308 	.word	0x20000308
 8001ea0:	20000248 	.word	0x20000248
 8001ea4:	40c00000 	.word	0x40c00000
 8001ea8:	41200000 	.word	0x41200000
 8001eac:	3851b717 	.word	0x3851b717
 8001eb0:	44bb8000 	.word	0x44bb8000
 8001eb4:	00000000 	.word	0x00000000

08001eb8 <StabilizerPIDLoad>:
	VelocityPIDController.offSet = 1500;
	VelocityPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
}

void StabilizerPIDLoad()
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
//	StabilizerPIDController.Kp = 35;
//	StabilizerPIDController.Ki = 17;
	StabilizerPIDController.Kp = 0.0000000000001;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <StabilizerPIDLoad+0x50>)
 8001ebe:	4a13      	ldr	r2, [pc, #76]	; (8001f0c <StabilizerPIDLoad+0x54>)
 8001ec0:	601a      	str	r2, [r3, #0]
	StabilizerPIDController.Ki = 1.3;
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <StabilizerPIDLoad+0x50>)
 8001ec4:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <StabilizerPIDLoad+0x58>)
 8001ec6:	605a      	str	r2, [r3, #4]
	StabilizerPIDController.Kd = 0;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <StabilizerPIDLoad+0x50>)
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
	StabilizerPIDController.offSet = 1200;
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <StabilizerPIDLoad+0x50>)
 8001ed2:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <StabilizerPIDLoad+0x5c>)
 8001ed4:	611a      	str	r2, [r3, #16]
	StabilizerPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <StabilizerPIDLoad+0x60>)
 8001ed8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f7fe fb00 	bl	80004e4 <__aeabi_ul2d>
 8001ee4:	a306      	add	r3, pc, #24	; (adr r3, 8001f00 <StabilizerPIDLoad+0x48>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe fc5b 	bl	80007a4 <__aeabi_ddiv>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4905      	ldr	r1, [pc, #20]	; (8001f08 <StabilizerPIDLoad+0x50>)
 8001ef4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	f3af 8000 	nop.w
 8001f00:	00000000 	.word	0x00000000
 8001f04:	412e8480 	.word	0x412e8480
 8001f08:	200002c8 	.word	0x200002c8
 8001f0c:	29e12e13 	.word	0x29e12e13
 8001f10:	3fa66666 	.word	0x3fa66666
 8001f14:	44960000 	.word	0x44960000
 8001f18:	20000308 	.word	0x20000308
 8001f1c:	00000000 	.word	0x00000000

08001f20 <VelocityPurePIDLoad>:

void VelocityPurePIDLoad()
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	PureVelocityPIDController.Kp = 5;
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <VelocityPurePIDLoad+0x50>)
 8001f26:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <VelocityPurePIDLoad+0x54>)
 8001f28:	601a      	str	r2, [r3, #0]
	PureVelocityPIDController.Ki = 15;
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <VelocityPurePIDLoad+0x50>)
 8001f2c:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <VelocityPurePIDLoad+0x58>)
 8001f2e:	605a      	str	r2, [r3, #4]
	PureVelocityPIDController.Kd = 0.00005;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <VelocityPurePIDLoad+0x50>)
 8001f32:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <VelocityPurePIDLoad+0x5c>)
 8001f34:	609a      	str	r2, [r3, #8]
	PureVelocityPIDController.offSet = 1500;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <VelocityPurePIDLoad+0x50>)
 8001f38:	4a11      	ldr	r2, [pc, #68]	; (8001f80 <VelocityPurePIDLoad+0x60>)
 8001f3a:	611a      	str	r2, [r3, #16]
	PureVelocityPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <VelocityPurePIDLoad+0x64>)
 8001f3e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	f7fe facd 	bl	80004e4 <__aeabi_ul2d>
 8001f4a:	a307      	add	r3, pc, #28	; (adr r3, 8001f68 <VelocityPurePIDLoad+0x48>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	f7fe fc28 	bl	80007a4 <__aeabi_ddiv>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4905      	ldr	r1, [pc, #20]	; (8001f70 <VelocityPurePIDLoad+0x50>)
 8001f5a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	f3af 8000 	nop.w
 8001f68:	00000000 	.word	0x00000000
 8001f6c:	412e8480 	.word	0x412e8480
 8001f70:	20000288 	.word	0x20000288
 8001f74:	40a00000 	.word	0x40a00000
 8001f78:	41700000 	.word	0x41700000
 8001f7c:	3851b717 	.word	0x3851b717
 8001f80:	44bb8000 	.word	0x44bb8000
 8001f84:	20000308 	.word	0x20000308

08001f88 <TrajectoryGenerationVelocityMaxSetting>:


void TrajectoryGenerationVelocityMaxSetting(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*(CUSSvar->RPMp))/(60.0);   ///RPM to pps
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	ee07 3a90 	vmov	s15, r3
 8001f9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa8:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001ff0 <TrajectoryGenerationVelocityMaxSetting+0x68>
 8001fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	edc3 7a04 	vstr	s15, [r3, #16]
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	edd3 6a04 	vldr	s13, [r3, #16]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	ed93 7a05 	vldr	s14, [r3, #20]
 8001fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	ed93 7a04 	vldr	s14, [r3, #16]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	edd3 7a00 	vldr	s15, [r3]
 8001fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	42700000 	.word	0x42700000
 8001ff4:	00000000 	.word	0x00000000

08001ff8 <TrajectoryGenerationPrepareDATA>:

void TrajectoryGenerationPrepareDATA()
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	// fix start position base on Encoder
	TrjStruc.Start_Theta = htim1.Instance->CNT;
 8001ffc:	4b9e      	ldr	r3, [pc, #632]	; (8002278 <TrajectoryGenerationPrepareDATA+0x280>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	ee07 3a90 	vmov	s15, r3
 8002006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200a:	4b9c      	ldr	r3, [pc, #624]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 800200c:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

	if (MovingLinkMode == LMM_Set_Pos_Directly)
 8002010:	4b9b      	ldr	r3, [pc, #620]	; (8002280 <TrajectoryGenerationPrepareDATA+0x288>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d165      	bne.n	80020e4 <TrajectoryGenerationPrepareDATA+0xec>
	  {
		  TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(10000.0*2.0*3.14159));  //pulse
 8002018:	4b9a      	ldr	r3, [pc, #616]	; (8002284 <TrajectoryGenerationPrepareDATA+0x28c>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	4b9a      	ldr	r3, [pc, #616]	; (8002288 <TrajectoryGenerationPrepareDATA+0x290>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	fb03 f302 	mul.w	r3, r3, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fa18 	bl	800045c <__aeabi_ui2d>
 800202c:	a390      	add	r3, pc, #576	; (adr r3, 8002270 <TrajectoryGenerationPrepareDATA+0x278>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	f7fe fbb7 	bl	80007a4 <__aeabi_ddiv>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	f7fe fd57 	bl	8000af0 <__aeabi_d2f>
 8002042:	4603      	mov	r3, r0
 8002044:	4a8d      	ldr	r2, [pc, #564]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 8002046:	6693      	str	r3, [r2, #104]	; 0x68
		  if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)   ///wrap input into 1 revolute.
 8002048:	4b8c      	ldr	r3, [pc, #560]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 800204a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800204e:	4b8e      	ldr	r3, [pc, #568]	; (8002288 <TrajectoryGenerationPrepareDATA+0x290>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	ee07 3a90 	vmov	s15, r3
 8002056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800205a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800205e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002062:	db0d      	blt.n	8002080 <TrajectoryGenerationPrepareDATA+0x88>
		  {
			 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8002064:	4b85      	ldr	r3, [pc, #532]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 8002066:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800206a:	4b87      	ldr	r3, [pc, #540]	; (8002288 <TrajectoryGenerationPrepareDATA+0x290>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002076:	ee77 7a67 	vsub.f32	s15, s14, s15
 800207a:	4b80      	ldr	r3, [pc, #512]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 800207c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		  }
		  TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8002080:	4b7e      	ldr	r3, [pc, #504]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 8002082:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002086:	4b80      	ldr	r3, [pc, #512]	; (8002288 <TrajectoryGenerationPrepareDATA+0x290>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	ee07 3a90 	vmov	s15, r3
 800208e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002096:	4b79      	ldr	r3, [pc, #484]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 8002098:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

		  if (TrjStruc.Desire_Theta != TrjStruc.Start_Theta)
 800209c:	4b77      	ldr	r3, [pc, #476]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 800209e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80020a2:	4b76      	ldr	r3, [pc, #472]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 80020a4:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80020a8:	eeb4 7a67 	vcmp.f32	s14, s15
 80020ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b0:	d00e      	beq.n	80020d0 <TrajectoryGenerationPrepareDATA+0xd8>
		  {
			  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 80020b2:	4b72      	ldr	r3, [pc, #456]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 80020b4:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80020b8:	4b70      	ldr	r3, [pc, #448]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 80020ba:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80020be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c2:	4b6e      	ldr	r3, [pc, #440]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 80020c4:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
			  Munmunbot_State = STATE_Calculation;
 80020c8:	4b70      	ldr	r3, [pc, #448]	; (800228c <TrajectoryGenerationPrepareDATA+0x294>)
 80020ca:	2203      	movs	r2, #3
 80020cc:	701a      	strb	r2, [r3, #0]
	  {
		MovingLinkMode = LMM_Not_Set;
		Munmunbot_State = STATE_Idle;
		ACK2Return(&UART2);
	  }
}
 80020ce:	e0cd      	b.n	800226c <TrajectoryGenerationPrepareDATA+0x274>
			Munmunbot_State = STATE_Idle;
 80020d0:	4b6e      	ldr	r3, [pc, #440]	; (800228c <TrajectoryGenerationPrepareDATA+0x294>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 80020d6:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <TrajectoryGenerationPrepareDATA+0x288>)
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
			ACK2Return(&UART2);
 80020dc:	486c      	ldr	r0, [pc, #432]	; (8002290 <TrajectoryGenerationPrepareDATA+0x298>)
 80020de:	f001 f8b5 	bl	800324c <ACK2Return>
}
 80020e2:	e0c3      	b.n	800226c <TrajectoryGenerationPrepareDATA+0x274>
	else if (MovingLinkMode == LMM_Set_Goal_1_Station || MovingLinkMode == LMM_Set_Goal_n_Station )
 80020e4:	4b66      	ldr	r3, [pc, #408]	; (8002280 <TrajectoryGenerationPrepareDATA+0x288>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d004      	beq.n	80020f6 <TrajectoryGenerationPrepareDATA+0xfe>
 80020ec:	4b64      	ldr	r3, [pc, #400]	; (8002280 <TrajectoryGenerationPrepareDATA+0x288>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	f040 80b1 	bne.w	8002258 <TrajectoryGenerationPrepareDATA+0x260>
		  if (NumberOfStationToGo == 0)
 80020f6:	4b67      	ldr	r3, [pc, #412]	; (8002294 <TrajectoryGenerationPrepareDATA+0x29c>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10f      	bne.n	800211e <TrajectoryGenerationPrepareDATA+0x126>
				Munmunbot_State = STATE_Idle;
 80020fe:	4b63      	ldr	r3, [pc, #396]	; (800228c <TrajectoryGenerationPrepareDATA+0x294>)
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
				NumberOfStationPTR = 0;
 8002104:	4b64      	ldr	r3, [pc, #400]	; (8002298 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo = 0;
 800210a:	4b62      	ldr	r3, [pc, #392]	; (8002294 <TrajectoryGenerationPrepareDATA+0x29c>)
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
				MovingLinkMode = LMM_Not_Set;
 8002110:	4b5b      	ldr	r3, [pc, #364]	; (8002280 <TrajectoryGenerationPrepareDATA+0x288>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
				ACK2Return(&UART2);
 8002116:	485e      	ldr	r0, [pc, #376]	; (8002290 <TrajectoryGenerationPrepareDATA+0x298>)
 8002118:	f001 f898 	bl	800324c <ACK2Return>
		  if (NumberOfStationToGo == 0)
 800211c:	e0a6      	b.n	800226c <TrajectoryGenerationPrepareDATA+0x274>
			Current_Station = Angularpos_InputArray[NumberOfStationPTR];
 800211e:	4b5e      	ldr	r3, [pc, #376]	; (8002298 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	4b5d      	ldr	r3, [pc, #372]	; (800229c <TrajectoryGenerationPrepareDATA+0x2a4>)
 8002126:	5c9a      	ldrb	r2, [r3, r2]
 8002128:	4b5d      	ldr	r3, [pc, #372]	; (80022a0 <TrajectoryGenerationPrepareDATA+0x2a8>)
 800212a:	701a      	strb	r2, [r3, #0]
			if (Current_Station > 10)   //pass input
 800212c:	4b5c      	ldr	r3, [pc, #368]	; (80022a0 <TrajectoryGenerationPrepareDATA+0x2a8>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b0a      	cmp	r3, #10
 8002132:	d90c      	bls.n	800214e <TrajectoryGenerationPrepareDATA+0x156>
				NumberOfStationPTR += 1;
 8002134:	4b58      	ldr	r3, [pc, #352]	; (8002298 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	b2da      	uxtb	r2, r3
 800213c:	4b56      	ldr	r3, [pc, #344]	; (8002298 <TrajectoryGenerationPrepareDATA+0x2a0>)
 800213e:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo -= 1;
 8002140:	4b54      	ldr	r3, [pc, #336]	; (8002294 <TrajectoryGenerationPrepareDATA+0x29c>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	3b01      	subs	r3, #1
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b52      	ldr	r3, [pc, #328]	; (8002294 <TrajectoryGenerationPrepareDATA+0x29c>)
 800214a:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 800214c:	e08e      	b.n	800226c <TrajectoryGenerationPrepareDATA+0x274>
				TrjStruc.Desire_Theta = (StationPos[Current_Station-1]*CUSSStruc.PPRxQEI/(360.0))*5.0;   ///fix this if change algorithm
 800214e:	4b54      	ldr	r3, [pc, #336]	; (80022a0 <TrajectoryGenerationPrepareDATA+0x2a8>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	3b01      	subs	r3, #1
 8002154:	4a53      	ldr	r2, [pc, #332]	; (80022a4 <TrajectoryGenerationPrepareDATA+0x2ac>)
 8002156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800215a:	461a      	mov	r2, r3
 800215c:	4b4a      	ldr	r3, [pc, #296]	; (8002288 <TrajectoryGenerationPrepareDATA+0x290>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	fb03 f302 	mul.w	r3, r3, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe f979 	bl	800045c <__aeabi_ui2d>
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	4b4e      	ldr	r3, [pc, #312]	; (80022a8 <TrajectoryGenerationPrepareDATA+0x2b0>)
 8002170:	f7fe fb18 	bl	80007a4 <__aeabi_ddiv>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	4b4a      	ldr	r3, [pc, #296]	; (80022ac <TrajectoryGenerationPrepareDATA+0x2b4>)
 8002182:	f7fe f9e5 	bl	8000550 <__aeabi_dmul>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f7fe fcaf 	bl	8000af0 <__aeabi_d2f>
 8002192:	4603      	mov	r3, r0
 8002194:	4a39      	ldr	r2, [pc, #228]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 8002196:	6693      	str	r3, [r2, #104]	; 0x68
				if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)  ///wrap input into 1 revolute. ///shouldn't happen
 8002198:	4b38      	ldr	r3, [pc, #224]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 800219a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800219e:	4b3a      	ldr	r3, [pc, #232]	; (8002288 <TrajectoryGenerationPrepareDATA+0x290>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b2:	db0d      	blt.n	80021d0 <TrajectoryGenerationPrepareDATA+0x1d8>
					TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 80021b4:	4b31      	ldr	r3, [pc, #196]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 80021b6:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80021ba:	4b33      	ldr	r3, [pc, #204]	; (8002288 <TrajectoryGenerationPrepareDATA+0x290>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ca:	4b2c      	ldr	r3, [pc, #176]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 80021cc:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
				TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 80021d0:	4b2a      	ldr	r3, [pc, #168]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 80021d2:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80021d6:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <TrajectoryGenerationPrepareDATA+0x290>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	ee07 3a90 	vmov	s15, r3
 80021de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e6:	4b25      	ldr	r3, [pc, #148]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 80021e8:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
				if (TrjStruc.Desire_Theta == TrjStruc.Start_Theta)
 80021ec:	4b23      	ldr	r3, [pc, #140]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 80021ee:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80021f2:	4b22      	ldr	r3, [pc, #136]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 80021f4:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80021f8:	eeb4 7a67 	vcmp.f32	s14, s15
 80021fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002200:	d10f      	bne.n	8002222 <TrajectoryGenerationPrepareDATA+0x22a>
					NumberOfStationPTR += 1;
 8002202:	4b25      	ldr	r3, [pc, #148]	; (8002298 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	3301      	adds	r3, #1
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4b23      	ldr	r3, [pc, #140]	; (8002298 <TrajectoryGenerationPrepareDATA+0x2a0>)
 800220c:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 800220e:	4b21      	ldr	r3, [pc, #132]	; (8002294 <TrajectoryGenerationPrepareDATA+0x29c>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	3b01      	subs	r3, #1
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <TrajectoryGenerationPrepareDATA+0x29c>)
 8002218:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_End_Effector_Working;
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <TrajectoryGenerationPrepareDATA+0x294>)
 800221c:	2207      	movs	r2, #7
 800221e:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8002220:	e024      	b.n	800226c <TrajectoryGenerationPrepareDATA+0x274>
					TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 8002222:	4b16      	ldr	r3, [pc, #88]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 8002224:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002228:	4b14      	ldr	r3, [pc, #80]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 800222a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800222e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <TrajectoryGenerationPrepareDATA+0x284>)
 8002234:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
					Munmunbot_State = STATE_Calculation;
 8002238:	4b14      	ldr	r3, [pc, #80]	; (800228c <TrajectoryGenerationPrepareDATA+0x294>)
 800223a:	2203      	movs	r2, #3
 800223c:	701a      	strb	r2, [r3, #0]
					NumberOfStationPTR += 1;
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	3301      	adds	r3, #1
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4b14      	ldr	r3, [pc, #80]	; (8002298 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002248:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <TrajectoryGenerationPrepareDATA+0x29c>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	3b01      	subs	r3, #1
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <TrajectoryGenerationPrepareDATA+0x29c>)
 8002254:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8002256:	e009      	b.n	800226c <TrajectoryGenerationPrepareDATA+0x274>
		MovingLinkMode = LMM_Not_Set;
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <TrajectoryGenerationPrepareDATA+0x288>)
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
		Munmunbot_State = STATE_Idle;
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <TrajectoryGenerationPrepareDATA+0x294>)
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
		ACK2Return(&UART2);
 8002264:	480a      	ldr	r0, [pc, #40]	; (8002290 <TrajectoryGenerationPrepareDATA+0x298>)
 8002266:	f000 fff1 	bl	800324c <ACK2Return>
}
 800226a:	e7ff      	b.n	800226c <TrajectoryGenerationPrepareDATA+0x274>
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	99999999 	.word	0x99999999
 8002274:	40eeadf9 	.word	0x40eeadf9
 8002278:	2000063c 	.word	0x2000063c
 800227c:	20000308 	.word	0x20000308
 8002280:	200001de 	.word	0x200001de
 8002284:	200001dc 	.word	0x200001dc
 8002288:	20000398 	.word	0x20000398
 800228c:	200000d9 	.word	0x200000d9
 8002290:	200000b8 	.word	0x200000b8
 8002294:	200001e0 	.word	0x200001e0
 8002298:	200001e1 	.word	0x200001e1
 800229c:	200000dc 	.word	0x200000dc
 80022a0:	200001df 	.word	0x200001df
 80022a4:	20000000 	.word	0x20000000
 80022a8:	40768000 	.word	0x40768000
 80022ac:	40140000 	.word	0x40140000

080022b0 <TrajectoryGenerationCalculation>:

void TrajectoryGenerationCalculation()
{
 80022b0:	b5b0      	push	{r4, r5, r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	if (TrjStruc.Delta_Theta < 0)
 80022b4:	4b8d      	ldr	r3, [pc, #564]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80022b6:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80022ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c2:	d51b      	bpl.n	80022fc <TrajectoryGenerationCalculation+0x4c>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting * -1;
 80022c4:	4b89      	ldr	r3, [pc, #548]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80022c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80022ca:	eef1 7a67 	vneg.f32	s15, s15
 80022ce:	4b87      	ldr	r3, [pc, #540]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80022d0:	edc3 7a07 	vstr	s15, [r3, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting *-1;
 80022d4:	4b85      	ldr	r3, [pc, #532]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80022d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80022da:	eef1 7a67 	vneg.f32	s15, s15
 80022de:	4b83      	ldr	r3, [pc, #524]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80022e0:	edc3 7a06 	vstr	s15, [r3, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta * -1;
 80022e4:	4b81      	ldr	r3, [pc, #516]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80022e6:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80022ea:	eef1 7a67 	vneg.f32	s15, s15
 80022ee:	4b7f      	ldr	r3, [pc, #508]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80022f0:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
		 TrjStruc.Alpha = -1;
 80022f4:	4b7d      	ldr	r3, [pc, #500]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80022f6:	4a7e      	ldr	r2, [pc, #504]	; (80024f0 <TrajectoryGenerationCalculation+0x240>)
 80022f8:	67da      	str	r2, [r3, #124]	; 0x7c
 80022fa:	e017      	b.n	800232c <TrajectoryGenerationCalculation+0x7c>
	  }
	  else if (TrjStruc.Delta_Theta > 0)
 80022fc:	4b7b      	ldr	r3, [pc, #492]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80022fe:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002302:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230a:	dd0f      	ble.n	800232c <TrajectoryGenerationCalculation+0x7c>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting;
 800230c:	4b77      	ldr	r3, [pc, #476]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	4a76      	ldr	r2, [pc, #472]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002312:	61d3      	str	r3, [r2, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting;
 8002314:	4b75      	ldr	r3, [pc, #468]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	4a74      	ldr	r2, [pc, #464]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 800231a:	6193      	str	r3, [r2, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta;
 800231c:	4b73      	ldr	r3, [pc, #460]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002320:	4a72      	ldr	r2, [pc, #456]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002322:	6753      	str	r3, [r2, #116]	; 0x74
		 TrjStruc.Alpha = 1;
 8002324:	4b71      	ldr	r3, [pc, #452]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002326:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800232a:	67da      	str	r2, [r3, #124]	; 0x7c
	  }

	  if (TrjStruc.Abs_Delta_Theta < TrjStruc.Theta_min_for_LSPB)   ///Triangular mode0
 800232c:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 800232e:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002332:	4b6e      	ldr	r3, [pc, #440]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002334:	edd3 7a03 	vldr	s15, [r3, #12]
 8002338:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800233c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002340:	d55a      	bpl.n	80023f8 <TrajectoryGenerationCalculation+0x148>
	  {
		 TrjStruc.BlendTimeTriangular = sqrt(TrjStruc.Abs_Delta_Theta/TrjStruc.AngularAccerationMax_Setting);
 8002342:	4b6a      	ldr	r3, [pc, #424]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002344:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002348:	4b68      	ldr	r3, [pc, #416]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 800234a:	edd3 7a05 	vldr	s15, [r3, #20]
 800234e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002352:	ee16 0a90 	vmov	r0, s13
 8002356:	f7fe f8a3 	bl	80004a0 <__aeabi_f2d>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	ec43 2b10 	vmov	d0, r2, r3
 8002362:	f007 fefb 	bl	800a15c <sqrt>
 8002366:	ec53 2b10 	vmov	r2, r3, d0
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fbbf 	bl	8000af0 <__aeabi_d2f>
 8002372:	4603      	mov	r3, r0
 8002374:	4a5d      	ldr	r2, [pc, #372]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002376:	6053      	str	r3, [r2, #4]
		 TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 8002378:	4b5c      	ldr	r3, [pc, #368]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 800237a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800237c:	4a5b      	ldr	r2, [pc, #364]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 800237e:	6293      	str	r3, [r2, #40]	; 0x28
		 TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeTriangular*TrjStruc.BlendTimeTriangular))/2.0) + TrjStruc.Theta_Stamp_0;
 8002380:	4b5a      	ldr	r3, [pc, #360]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002382:	ed93 7a07 	vldr	s14, [r3, #28]
 8002386:	4b59      	ldr	r3, [pc, #356]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002388:	edd3 6a01 	vldr	s13, [r3, #4]
 800238c:	4b57      	ldr	r3, [pc, #348]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 800238e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239a:	ee17 0a90 	vmov	r0, s15
 800239e:	f7fe f87f 	bl	80004a0 <__aeabi_f2d>
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023aa:	f7fe f9fb 	bl	80007a4 <__aeabi_ddiv>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4614      	mov	r4, r2
 80023b4:	461d      	mov	r5, r3
 80023b6:	4b4d      	ldr	r3, [pc, #308]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80023b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f870 	bl	80004a0 <__aeabi_f2d>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4620      	mov	r0, r4
 80023c6:	4629      	mov	r1, r5
 80023c8:	f7fd ff0c 	bl	80001e4 <__adddf3>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	f7fe fb8c 	bl	8000af0 <__aeabi_d2f>
 80023d8:	4603      	mov	r3, r0
 80023da:	4a44      	ldr	r2, [pc, #272]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80023dc:	62d3      	str	r3, [r2, #44]	; 0x2c
		 TrjStruc.Mode = 0;
 80023de:	4b43      	ldr	r3, [pc, #268]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		 TrjStruc.Submode = 0;
 80023e6:	4b41      	ldr	r3, [pc, #260]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		 TrjStruc.Subsubmode = 0;
 80023ee:	4b3f      	ldr	r3, [pc, #252]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80023f6:	e069      	b.n	80024cc <TrajectoryGenerationCalculation+0x21c>
	  }
	  else if (TrjStruc.Abs_Delta_Theta >= TrjStruc.Theta_min_for_LSPB)  ///LSPB mode1
 80023f8:	4b3c      	ldr	r3, [pc, #240]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80023fa:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80023fe:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002400:	edd3 7a03 	vldr	s15, [r3, #12]
 8002404:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240c:	db5e      	blt.n	80024cc <TrajectoryGenerationCalculation+0x21c>
	  {
		  TrjStruc.LinearTimeLSPB = (TrjStruc.Abs_Delta_Theta-TrjStruc.Theta_min_for_LSPB)/TrjStruc.AngularVelocityMax_Setting;
 800240e:	4b37      	ldr	r3, [pc, #220]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002410:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002414:	4b35      	ldr	r3, [pc, #212]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002416:	edd3 7a03 	vldr	s15, [r3, #12]
 800241a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800241e:	4b33      	ldr	r3, [pc, #204]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002420:	ed93 7a04 	vldr	s14, [r3, #16]
 8002424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002428:	4b30      	ldr	r3, [pc, #192]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 800242a:	edc3 7a02 	vstr	s15, [r3, #8]
		  TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 800242e:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002432:	4a2e      	ldr	r2, [pc, #184]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002434:	6293      	str	r3, [r2, #40]	; 0x28
		  TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeLSPB*TrjStruc.BlendTimeLSPB))/2.0) + TrjStruc.Theta_Stamp_0;
 8002436:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002438:	ed93 7a07 	vldr	s14, [r3, #28]
 800243c:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 800243e:	edd3 6a00 	vldr	s13, [r3]
 8002442:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800244c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002450:	ee17 0a90 	vmov	r0, s15
 8002454:	f7fe f824 	bl	80004a0 <__aeabi_f2d>
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002460:	f7fe f9a0 	bl	80007a4 <__aeabi_ddiv>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4614      	mov	r4, r2
 800246a:	461d      	mov	r5, r3
 800246c:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe f815 	bl	80004a0 <__aeabi_f2d>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4620      	mov	r0, r4
 800247c:	4629      	mov	r1, r5
 800247e:	f7fd feb1 	bl	80001e4 <__adddf3>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	f7fe fb31 	bl	8000af0 <__aeabi_d2f>
 800248e:	4603      	mov	r3, r0
 8002490:	4a16      	ldr	r2, [pc, #88]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002492:	62d3      	str	r3, [r2, #44]	; 0x2c
		  TrjStruc.Theta_Stamp_2 = (TrjStruc.AngularVelocity*TrjStruc.LinearTimeLSPB) + TrjStruc.Theta_Stamp_1;
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 8002496:	ed93 7a06 	vldr	s14, [r3, #24]
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 800249c:	edd3 7a02 	vldr	s15, [r3, #8]
 80024a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80024a6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80024aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80024b0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		  TrjStruc.Mode = 1;
 80024b4:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		  TrjStruc.Submode = 0;
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		  TrjStruc.Subsubmode = 0;
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  }
	 TrjStruc.Equation_Timestamp = micros();
 80024cc:	f7ff fbc6 	bl	8001c5c <micros>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4905      	ldr	r1, [pc, #20]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80024d6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 TrjStruc.Loop_Timestamp = micros();
 80024da:	f7ff fbbf 	bl	8001c5c <micros>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4902      	ldr	r1, [pc, #8]	; (80024ec <TrajectoryGenerationCalculation+0x23c>)
 80024e4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80024e8:	bf00      	nop
 80024ea:	bdb0      	pop	{r4, r5, r7, pc}
 80024ec:	20000308 	.word	0x20000308
 80024f0:	bf800000 	.word	0xbf800000
 80024f4:	00000000 	.word	0x00000000

080024f8 <TrajectoryGenerationProcess>:

void TrajectoryGenerationProcess()
{
 80024f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024fc:	ed2d 8b02 	vpush	{d8}
 8002500:	b091      	sub	sp, #68	; 0x44
 8002502:	af00      	add	r7, sp, #0

	TrjStruc.Equation_Realtime_Sec = (micros()-TrjStruc.Equation_Timestamp)/1000000.0;
 8002504:	f7ff fbaa 	bl	8001c5c <micros>
 8002508:	4ba3      	ldr	r3, [pc, #652]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 800250a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800250e:	1a84      	subs	r4, r0, r2
 8002510:	eb61 0503 	sbc.w	r5, r1, r3
 8002514:	4620      	mov	r0, r4
 8002516:	4629      	mov	r1, r5
 8002518:	f7fd ffe4 	bl	80004e4 <__aeabi_ul2d>
 800251c:	a39c      	add	r3, pc, #624	; (adr r3, 8002790 <TrajectoryGenerationProcess+0x298>)
 800251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002522:	f7fe f93f 	bl	80007a4 <__aeabi_ddiv>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	4b9a      	ldr	r3, [pc, #616]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 8002530:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38

	 switch (TrjStruc.Mode)
 8002534:	4b98      	ldr	r3, [pc, #608]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 8002536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800253a:	2b02      	cmp	r3, #2
 800253c:	f000 83b0 	beq.w	8002ca0 <TrajectoryGenerationProcess+0x7a8>
 8002540:	2b02      	cmp	r3, #2
 8002542:	f200 83bc 	bhi.w	8002cbe <TrajectoryGenerationProcess+0x7c6>
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <TrajectoryGenerationProcess+0x5a>
 800254a:	2b01      	cmp	r3, #1
 800254c:	f000 81b8 	beq.w	80028c0 <TrajectoryGenerationProcess+0x3c8>
			  Moving_Link_Task_Flag = 1;
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
			  TrjStruc.AngularVelocityDesire = 0;
			  break;
		  }
}
 8002550:	e3b5      	b.n	8002cbe <TrajectoryGenerationProcess+0x7c6>
			  if (TrjStruc.Submode == 0)
 8002552:	4b91      	ldr	r3, [pc, #580]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 8002554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002558:	2b00      	cmp	r3, #0
 800255a:	d16f      	bne.n	800263c <TrajectoryGenerationProcess+0x144>
						  ((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 800255c:	4b8e      	ldr	r3, [pc, #568]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	4618      	mov	r0, r3
 8002562:	f7fd ff9d 	bl	80004a0 <__aeabi_f2d>
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	4b8c      	ldr	r3, [pc, #560]	; (800279c <TrajectoryGenerationProcess+0x2a4>)
 800256c:	f7fd fff0 	bl	8000550 <__aeabi_dmul>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4614      	mov	r4, r2
 8002576:	461d      	mov	r5, r3
 8002578:	4b87      	ldr	r3, [pc, #540]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 800257a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800257e:	4b86      	ldr	r3, [pc, #536]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 8002580:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002584:	f7fd ffe4 	bl	8000550 <__aeabi_dmul>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4620      	mov	r0, r4
 800258e:	4629      	mov	r1, r5
 8002590:	f7fd ffde 	bl	8000550 <__aeabi_dmul>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4614      	mov	r4, r2
 800259a:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_0;
 800259c:	4b7e      	ldr	r3, [pc, #504]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd ff7d 	bl	80004a0 <__aeabi_f2d>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4620      	mov	r0, r4
 80025ac:	4629      	mov	r1, r5
 80025ae:	f7fd fe19 	bl	80001e4 <__adddf3>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	f7fe fa99 	bl	8000af0 <__aeabi_d2f>
 80025be:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80025c0:	4a75      	ldr	r2, [pc, #468]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 80025c2:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularAcceration * TrjStruc.Equation_Realtime_Sec;
 80025c4:	4b74      	ldr	r3, [pc, #464]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fd ff69 	bl	80004a0 <__aeabi_f2d>
 80025ce:	4b72      	ldr	r3, [pc, #456]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 80025d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80025d4:	f7fd ffbc 	bl	8000550 <__aeabi_dmul>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	f7fe fa86 	bl	8000af0 <__aeabi_d2f>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4a6c      	ldr	r2, [pc, #432]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 80025e8:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 80025ea:	f7ff fb37 	bl	8001c5c <micros>
 80025ee:	4b6a      	ldr	r3, [pc, #424]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 80025f0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80025f4:	1a84      	subs	r4, r0, r2
 80025f6:	63bc      	str	r4, [r7, #56]	; 0x38
 80025f8:	eb61 0303 	sbc.w	r3, r1, r3
 80025fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002602:	f7fe fb8d 	bl	8000d20 <__aeabi_ul2f>
 8002606:	ee06 0a90 	vmov	s13, r0
 800260a:	4b63      	ldr	r3, [pc, #396]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 800260c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002610:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80027a0 <TrajectoryGenerationProcess+0x2a8>
 8002614:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002618:	eef4 6ae7 	vcmpe.f32	s13, s15
 800261c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002620:	da00      	bge.n	8002624 <TrajectoryGenerationProcess+0x12c>
			  break;
 8002622:	e349      	b.n	8002cb8 <TrajectoryGenerationProcess+0x7c0>
					  TrjStruc.Equation_Timestamp = micros();
 8002624:	f7ff fb1a 	bl	8001c5c <micros>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	495a      	ldr	r1, [pc, #360]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 800262e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 1;
 8002632:	4b59      	ldr	r3, [pc, #356]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 8002634:	2201      	movs	r2, #1
 8002636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 800263a:	e33d      	b.n	8002cb8 <TrajectoryGenerationProcess+0x7c0>
			  else if (TrjStruc.Submode == 1)
 800263c:	4b56      	ldr	r3, [pc, #344]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 800263e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002642:	2b01      	cmp	r3, #1
 8002644:	f040 8338 	bne.w	8002cb8 <TrajectoryGenerationProcess+0x7c0>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002648:	4b53      	ldr	r3, [pc, #332]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd ff27 	bl	80004a0 <__aeabi_f2d>
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	4b53      	ldr	r3, [pc, #332]	; (80027a4 <TrajectoryGenerationProcess+0x2ac>)
 8002658:	f7fd ff7a 	bl	8000550 <__aeabi_dmul>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4614      	mov	r4, r2
 8002662:	461d      	mov	r5, r3
 8002664:	4b4c      	ldr	r3, [pc, #304]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 8002666:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800266a:	4b4b      	ldr	r3, [pc, #300]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 800266c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002670:	f7fd ff6e 	bl	8000550 <__aeabi_dmul>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4620      	mov	r0, r4
 800267a:	4629      	mov	r1, r5
 800267c:	f7fd ff68 	bl	8000550 <__aeabi_dmul>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4614      	mov	r4, r2
 8002686:	461d      	mov	r5, r3
						  + (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular*(TrjStruc.Equation_Realtime_Sec))
 8002688:	4b43      	ldr	r3, [pc, #268]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 800268a:	ed93 7a07 	vldr	s14, [r3, #28]
 800268e:	4b42      	ldr	r3, [pc, #264]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 8002690:	edd3 7a01 	vldr	s15, [r3, #4]
 8002694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002698:	ee17 0a90 	vmov	r0, s15
 800269c:	f7fd ff00 	bl	80004a0 <__aeabi_f2d>
 80026a0:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 80026a2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80026a6:	f7fd ff53 	bl	8000550 <__aeabi_dmul>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4620      	mov	r0, r4
 80026b0:	4629      	mov	r1, r5
 80026b2:	f7fd fd97 	bl	80001e4 <__adddf3>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4614      	mov	r4, r2
 80026bc:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_1;
 80026be:	4b36      	ldr	r3, [pc, #216]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fd feec 	bl	80004a0 <__aeabi_f2d>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4620      	mov	r0, r4
 80026ce:	4629      	mov	r1, r5
 80026d0:	f7fd fd88 	bl	80001e4 <__adddf3>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4610      	mov	r0, r2
 80026da:	4619      	mov	r1, r3
 80026dc:	f7fe fa08 	bl	8000af0 <__aeabi_d2f>
 80026e0:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80026e2:	4a2d      	ldr	r2, [pc, #180]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 80026e4:	6213      	str	r3, [r2, #32]
				  if ( TrjStruc.Subsubmode == 0 )
 80026e6:	4b2c      	ldr	r3, [pc, #176]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d15b      	bne.n	80027a8 <TrajectoryGenerationProcess+0x2b0>
					  TrjStruc.AngularVelocityDesire = ( -1.0*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec ) +
 80026f0:	4b29      	ldr	r3, [pc, #164]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd fed3 	bl	80004a0 <__aeabi_f2d>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	633a      	str	r2, [r7, #48]	; 0x30
 8002700:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 8002708:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800270c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002710:	f7fd ff1e 	bl	8000550 <__aeabi_dmul>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4614      	mov	r4, r2
 800271a:	461d      	mov	r5, r3
													   (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular);
 800271c:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 800271e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002722:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 8002724:	edd3 7a01 	vldr	s15, [r3, #4]
 8002728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272c:	ee17 0a90 	vmov	r0, s15
 8002730:	f7fd feb6 	bl	80004a0 <__aeabi_f2d>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
					  TrjStruc.AngularVelocityDesire = ( -1.0*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec ) +
 8002738:	4620      	mov	r0, r4
 800273a:	4629      	mov	r1, r5
 800273c:	f7fd fd52 	bl	80001e4 <__adddf3>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4610      	mov	r0, r2
 8002746:	4619      	mov	r1, r3
 8002748:	f7fe f9d2 	bl	8000af0 <__aeabi_d2f>
 800274c:	4603      	mov	r3, r0
 800274e:	4a12      	ldr	r2, [pc, #72]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 8002750:	6253      	str	r3, [r2, #36]	; 0x24
					  if ( TrjStruc.Alpha * TrjStruc.AngularVelocityDesire <= TrjStruc.AngularVelocityFinalMin )
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 8002754:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 800275a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800275e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 8002764:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002768:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800276c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002770:	d875      	bhi.n	800285e <TrajectoryGenerationProcess+0x366>
						  TrjStruc.Subsubmode = 1;
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 8002774:	2201      	movs	r2, #1
 8002776:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						  TrjStruc.Velocity_Timestamp = micros();
 800277a:	f7ff fa6f 	bl	8001c5c <micros>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4905      	ldr	r1, [pc, #20]	; (8002798 <TrajectoryGenerationProcess+0x2a0>)
 8002784:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8002788:	e069      	b.n	800285e <TrajectoryGenerationProcess+0x366>
 800278a:	bf00      	nop
 800278c:	f3af 8000 	nop.w
 8002790:	00000000 	.word	0x00000000
 8002794:	412e8480 	.word	0x412e8480
 8002798:	20000308 	.word	0x20000308
 800279c:	3fe00000 	.word	0x3fe00000
 80027a0:	49742400 	.word	0x49742400
 80027a4:	bfe00000 	.word	0xbfe00000
				  else if ( TrjStruc.Subsubmode == 1 )
 80027a8:	4ba9      	ldr	r3, [pc, #676]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d14c      	bne.n	800284c <TrajectoryGenerationProcess+0x354>
					  TrjStruc.AngularVelocityDesire = TrjStruc.Alpha * TrjStruc.AngularVelocityFinalMin;
 80027b2:	4ba7      	ldr	r3, [pc, #668]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80027b4:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80027b8:	4ba5      	ldr	r3, [pc, #660]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80027ba:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80027be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c2:	4ba3      	ldr	r3, [pc, #652]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80027c4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					  if (micros()-TrjStruc.Velocity_Timestamp >= ((TrjStruc.BlendTimeTriangular*1000000)-(TrjStruc.Velocity_Timestamp - TrjStruc.Equation_Timestamp))/2.0)
 80027c8:	f7ff fa48 	bl	8001c5c <micros>
 80027cc:	4ba0      	ldr	r3, [pc, #640]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80027ce:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80027d2:	1a84      	subs	r4, r0, r2
 80027d4:	62bc      	str	r4, [r7, #40]	; 0x28
 80027d6:	eb61 0303 	sbc.w	r3, r1, r3
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027e0:	f7fd fe80 	bl	80004e4 <__aeabi_ul2d>
 80027e4:	4604      	mov	r4, r0
 80027e6:	460d      	mov	r5, r1
 80027e8:	4b99      	ldr	r3, [pc, #612]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80027ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80027ee:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8002a54 <TrajectoryGenerationProcess+0x55c>
 80027f2:	ee27 8a87 	vmul.f32	s16, s15, s14
 80027f6:	4b96      	ldr	r3, [pc, #600]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80027f8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80027fc:	4b94      	ldr	r3, [pc, #592]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80027fe:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002802:	1a86      	subs	r6, r0, r2
 8002804:	623e      	str	r6, [r7, #32]
 8002806:	eb61 0303 	sbc.w	r3, r1, r3
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
 800280c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002810:	f7fe fa86 	bl	8000d20 <__aeabi_ul2f>
 8002814:	ee07 0a90 	vmov	s15, r0
 8002818:	ee78 7a67 	vsub.f32	s15, s16, s15
 800281c:	ee17 0a90 	vmov	r0, s15
 8002820:	f7fd fe3e 	bl	80004a0 <__aeabi_f2d>
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800282c:	f7fd ffba 	bl	80007a4 <__aeabi_ddiv>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4620      	mov	r0, r4
 8002836:	4629      	mov	r1, r5
 8002838:	f7fe f910 	bl	8000a5c <__aeabi_dcmpge>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00d      	beq.n	800285e <TrajectoryGenerationProcess+0x366>
						  TrjStruc.Subsubmode = 2;
 8002842:	4b83      	ldr	r3, [pc, #524]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 8002844:	2202      	movs	r2, #2
 8002846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800284a:	e008      	b.n	800285e <TrajectoryGenerationProcess+0x366>
				  else if ( TrjStruc.Subsubmode == 2 )
 800284c:	4b80      	ldr	r3, [pc, #512]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002852:	2b02      	cmp	r3, #2
 8002854:	d103      	bne.n	800285e <TrajectoryGenerationProcess+0x366>
					  TrjStruc.AngularVelocityDesire = 0;
 8002856:	4b7e      	ldr	r3, [pc, #504]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	625a      	str	r2, [r3, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 800285e:	f7ff f9fd 	bl	8001c5c <micros>
 8002862:	4b7b      	ldr	r3, [pc, #492]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 8002864:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002868:	1a84      	subs	r4, r0, r2
 800286a:	61bc      	str	r4, [r7, #24]
 800286c:	eb61 0303 	sbc.w	r3, r1, r3
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002876:	f7fe fa53 	bl	8000d20 <__aeabi_ul2f>
 800287a:	ee06 0a90 	vmov	s13, r0
 800287e:	4b74      	ldr	r3, [pc, #464]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 8002880:	edd3 7a01 	vldr	s15, [r3, #4]
 8002884:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002a54 <TrajectoryGenerationProcess+0x55c>
 8002888:	ee67 7a87 	vmul.f32	s15, s15, s14
 800288c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002894:	da00      	bge.n	8002898 <TrajectoryGenerationProcess+0x3a0>
			  break;
 8002896:	e20f      	b.n	8002cb8 <TrajectoryGenerationProcess+0x7c0>
					  TrjStruc.Equation_Timestamp = micros();
 8002898:	f7ff f9e0 	bl	8001c5c <micros>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	496b      	ldr	r1, [pc, #428]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80028a2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 0;
 80028a6:	4b6a      	ldr	r3, [pc, #424]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					  TrjStruc.Subsubmode = 0;
 80028ae:	4b68      	ldr	r3, [pc, #416]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					  TrjStruc.Mode = 2; ///Final Value Mode
 80028b6:	4b66      	ldr	r3, [pc, #408]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80028b8:	2202      	movs	r2, #2
 80028ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			  break;
 80028be:	e1fb      	b.n	8002cb8 <TrajectoryGenerationProcess+0x7c0>
			  if (TrjStruc.Submode == 0)
 80028c0:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80028c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d16e      	bne.n	80029a8 <TrajectoryGenerationProcess+0x4b0>
							((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 80028ca:	4b61      	ldr	r3, [pc, #388]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fd fde6 	bl	80004a0 <__aeabi_f2d>
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	4b5f      	ldr	r3, [pc, #380]	; (8002a58 <TrajectoryGenerationProcess+0x560>)
 80028da:	f7fd fe39 	bl	8000550 <__aeabi_dmul>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4614      	mov	r4, r2
 80028e4:	461d      	mov	r5, r3
 80028e6:	4b5a      	ldr	r3, [pc, #360]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80028e8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80028ec:	4b58      	ldr	r3, [pc, #352]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80028ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80028f2:	f7fd fe2d 	bl	8000550 <__aeabi_dmul>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4620      	mov	r0, r4
 80028fc:	4629      	mov	r1, r5
 80028fe:	f7fd fe27 	bl	8000550 <__aeabi_dmul>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4614      	mov	r4, r2
 8002908:	461d      	mov	r5, r3
							+TrjStruc.Theta_Stamp_0;
 800290a:	4b51      	ldr	r3, [pc, #324]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fdc6 	bl	80004a0 <__aeabi_f2d>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4620      	mov	r0, r4
 800291a:	4629      	mov	r1, r5
 800291c:	f7fd fc62 	bl	80001e4 <__adddf3>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4610      	mov	r0, r2
 8002926:	4619      	mov	r1, r3
 8002928:	f7fe f8e2 	bl	8000af0 <__aeabi_d2f>
 800292c:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 800292e:	4a48      	ldr	r2, [pc, #288]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 8002930:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularAcceration * TrjStruc.Equation_Realtime_Sec;
 8002932:	4b47      	ldr	r3, [pc, #284]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fd fdb2 	bl	80004a0 <__aeabi_f2d>
 800293c:	4b44      	ldr	r3, [pc, #272]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 800293e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002942:	f7fd fe05 	bl	8000550 <__aeabi_dmul>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4610      	mov	r0, r2
 800294c:	4619      	mov	r1, r3
 800294e:	f7fe f8cf 	bl	8000af0 <__aeabi_d2f>
 8002952:	4603      	mov	r3, r0
 8002954:	4a3e      	ldr	r2, [pc, #248]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 8002956:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 8002958:	f7ff f980 	bl	8001c5c <micros>
 800295c:	4b3c      	ldr	r3, [pc, #240]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 800295e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002962:	ebb0 0a02 	subs.w	sl, r0, r2
 8002966:	eb61 0b03 	sbc.w	fp, r1, r3
 800296a:	4650      	mov	r0, sl
 800296c:	4659      	mov	r1, fp
 800296e:	f7fe f9d7 	bl	8000d20 <__aeabi_ul2f>
 8002972:	ee06 0a90 	vmov	s13, r0
 8002976:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002a54 <TrajectoryGenerationProcess+0x55c>
 8002980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002984:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298c:	da00      	bge.n	8002990 <TrajectoryGenerationProcess+0x498>
			  break;
 800298e:	e195      	b.n	8002cbc <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002990:	f7ff f964 	bl	8001c5c <micros>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	492d      	ldr	r1, [pc, #180]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 800299a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 1;
 800299e:	4b2c      	ldr	r3, [pc, #176]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 80029a6:	e189      	b.n	8002cbc <TrajectoryGenerationProcess+0x7c4>
			  else if (TrjStruc.Submode == 1)
 80029a8:	4b29      	ldr	r3, [pc, #164]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80029aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d154      	bne.n	8002a5c <TrajectoryGenerationProcess+0x564>
						  (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 80029b2:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fd72 	bl	80004a0 <__aeabi_f2d>
 80029bc:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80029be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80029c2:	f7fd fdc5 	bl	8000550 <__aeabi_dmul>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4614      	mov	r4, r2
 80029cc:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_1;
 80029ce:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fd fd64 	bl	80004a0 <__aeabi_f2d>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4620      	mov	r0, r4
 80029de:	4629      	mov	r1, r5
 80029e0:	f7fd fc00 	bl	80001e4 <__adddf3>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f7fe f880 	bl	8000af0 <__aeabi_d2f>
 80029f0:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80029f2:	4a17      	ldr	r2, [pc, #92]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80029f4:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularVelocity;
 80029f6:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	4a15      	ldr	r2, [pc, #84]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 80029fc:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.LinearTimeLSPB*1000000)
 80029fe:	f7ff f92d 	bl	8001c5c <micros>
 8002a02:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 8002a04:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002a08:	ebb0 0802 	subs.w	r8, r0, r2
 8002a0c:	eb61 0903 	sbc.w	r9, r1, r3
 8002a10:	4640      	mov	r0, r8
 8002a12:	4649      	mov	r1, r9
 8002a14:	f7fe f984 	bl	8000d20 <__aeabi_ul2f>
 8002a18:	ee06 0a90 	vmov	s13, r0
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 8002a1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a22:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002a54 <TrajectoryGenerationProcess+0x55c>
 8002a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a32:	da00      	bge.n	8002a36 <TrajectoryGenerationProcess+0x53e>
			  break;
 8002a34:	e142      	b.n	8002cbc <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002a36:	f7ff f911 	bl	8001c5c <micros>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4904      	ldr	r1, [pc, #16]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 8002a40:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 2;
 8002a44:	4b02      	ldr	r3, [pc, #8]	; (8002a50 <TrajectoryGenerationProcess+0x558>)
 8002a46:	2202      	movs	r2, #2
 8002a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 8002a4c:	e136      	b.n	8002cbc <TrajectoryGenerationProcess+0x7c4>
 8002a4e:	bf00      	nop
 8002a50:	20000308 	.word	0x20000308
 8002a54:	49742400 	.word	0x49742400
 8002a58:	3fe00000 	.word	0x3fe00000
			  else if (TrjStruc.Submode == 2)
 8002a5c:	4b9b      	ldr	r3, [pc, #620]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	f040 812a 	bne.w	8002cbc <TrajectoryGenerationProcess+0x7c4>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002a68:	4b98      	ldr	r3, [pc, #608]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd17 	bl	80004a0 <__aeabi_f2d>
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	4b96      	ldr	r3, [pc, #600]	; (8002cd0 <TrajectoryGenerationProcess+0x7d8>)
 8002a78:	f7fd fd6a 	bl	8000550 <__aeabi_dmul>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4614      	mov	r4, r2
 8002a82:	461d      	mov	r5, r3
 8002a84:	4b91      	ldr	r3, [pc, #580]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002a86:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002a8a:	4b90      	ldr	r3, [pc, #576]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002a8c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002a90:	f7fd fd5e 	bl	8000550 <__aeabi_dmul>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4620      	mov	r0, r4
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	f7fd fd58 	bl	8000550 <__aeabi_dmul>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4614      	mov	r4, r2
 8002aa6:	461d      	mov	r5, r3
						  + (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8002aa8:	4b88      	ldr	r3, [pc, #544]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fd fcf7 	bl	80004a0 <__aeabi_f2d>
 8002ab2:	4b86      	ldr	r3, [pc, #536]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002ab4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002ab8:	f7fd fd4a 	bl	8000550 <__aeabi_dmul>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	4629      	mov	r1, r5
 8002ac4:	f7fd fb8e 	bl	80001e4 <__adddf3>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4614      	mov	r4, r2
 8002ace:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_2;
 8002ad0:	4b7e      	ldr	r3, [pc, #504]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd fce3 	bl	80004a0 <__aeabi_f2d>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4620      	mov	r0, r4
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	f7fd fb7f 	bl	80001e4 <__adddf3>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	f7fd ffff 	bl	8000af0 <__aeabi_d2f>
 8002af2:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002af4:	4a75      	ldr	r2, [pc, #468]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002af6:	6213      	str	r3, [r2, #32]
				  if ( TrjStruc.Subsubmode == 0 )
 8002af8:	4b74      	ldr	r3, [pc, #464]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d142      	bne.n	8002b88 <TrajectoryGenerationProcess+0x690>
					  TrjStruc.AngularVelocityDesire = ( -1*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec )
 8002b02:	4b72      	ldr	r3, [pc, #456]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002b04:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b08:	eef1 7a67 	vneg.f32	s15, s15
 8002b0c:	ee17 3a90 	vmov	r3, s15
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fd fcc5 	bl	80004a0 <__aeabi_f2d>
 8002b16:	4b6d      	ldr	r3, [pc, #436]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002b18:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002b1c:	f7fd fd18 	bl	8000550 <__aeabi_dmul>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4614      	mov	r4, r2
 8002b26:	461d      	mov	r5, r3
							                           + ( TrjStruc.AngularVelocity );
 8002b28:	4b68      	ldr	r3, [pc, #416]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fcb7 	bl	80004a0 <__aeabi_f2d>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4620      	mov	r0, r4
 8002b38:	4629      	mov	r1, r5
 8002b3a:	f7fd fb53 	bl	80001e4 <__adddf3>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	f7fd ffd3 	bl	8000af0 <__aeabi_d2f>
 8002b4a:	4603      	mov	r3, r0
					  TrjStruc.AngularVelocityDesire = ( -1*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec )
 8002b4c:	4a5f      	ldr	r2, [pc, #380]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002b4e:	6253      	str	r3, [r2, #36]	; 0x24
					  if (  TrjStruc.Alpha * TrjStruc.AngularVelocityDesire <=  TrjStruc.AngularVelocityFinalMin )
 8002b50:	4b5e      	ldr	r3, [pc, #376]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002b52:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002b56:	4b5d      	ldr	r3, [pc, #372]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002b58:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b60:	4b5a      	ldr	r3, [pc, #360]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002b62:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6e:	d866      	bhi.n	8002c3e <TrajectoryGenerationProcess+0x746>
						  TrjStruc.Subsubmode = 1;
 8002b70:	4b56      	ldr	r3, [pc, #344]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						  TrjStruc.Velocity_Timestamp = micros();
 8002b78:	f7ff f870 	bl	8001c5c <micros>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4952      	ldr	r1, [pc, #328]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002b82:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8002b86:	e05a      	b.n	8002c3e <TrajectoryGenerationProcess+0x746>
				  else if ( TrjStruc.Subsubmode == 1 )
 8002b88:	4b50      	ldr	r3, [pc, #320]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d14c      	bne.n	8002c2c <TrajectoryGenerationProcess+0x734>
					  TrjStruc.AngularVelocityDesire = TrjStruc.Alpha * TrjStruc.AngularVelocityFinalMin;
 8002b92:	4b4e      	ldr	r3, [pc, #312]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002b94:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002b98:	4b4c      	ldr	r3, [pc, #304]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002b9a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba2:	4b4a      	ldr	r3, [pc, #296]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002ba4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					  if (micros()-TrjStruc.Velocity_Timestamp >= ((TrjStruc.BlendTimeLSPB*1000000)-(TrjStruc.Velocity_Timestamp - TrjStruc.Equation_Timestamp))/2.0)
 8002ba8:	f7ff f858 	bl	8001c5c <micros>
 8002bac:	4b47      	ldr	r3, [pc, #284]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002bae:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002bb2:	1a84      	subs	r4, r0, r2
 8002bb4:	613c      	str	r4, [r7, #16]
 8002bb6:	eb61 0303 	sbc.w	r3, r1, r3
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bc0:	f7fd fc90 	bl	80004e4 <__aeabi_ul2d>
 8002bc4:	4604      	mov	r4, r0
 8002bc6:	460d      	mov	r5, r1
 8002bc8:	4b40      	ldr	r3, [pc, #256]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002bca:	edd3 7a00 	vldr	s15, [r3]
 8002bce:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002cd4 <TrajectoryGenerationProcess+0x7dc>
 8002bd2:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002bd8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002bdc:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002bde:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002be2:	1a86      	subs	r6, r0, r2
 8002be4:	60be      	str	r6, [r7, #8]
 8002be6:	eb61 0303 	sbc.w	r3, r1, r3
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bf0:	f7fe f896 	bl	8000d20 <__aeabi_ul2f>
 8002bf4:	ee07 0a90 	vmov	s15, r0
 8002bf8:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002bfc:	ee17 0a90 	vmov	r0, s15
 8002c00:	f7fd fc4e 	bl	80004a0 <__aeabi_f2d>
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c0c:	f7fd fdca 	bl	80007a4 <__aeabi_ddiv>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4620      	mov	r0, r4
 8002c16:	4629      	mov	r1, r5
 8002c18:	f7fd ff20 	bl	8000a5c <__aeabi_dcmpge>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <TrajectoryGenerationProcess+0x746>
						  TrjStruc.Subsubmode = 2;
 8002c22:	4b2a      	ldr	r3, [pc, #168]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002c24:	2202      	movs	r2, #2
 8002c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8002c2a:	e008      	b.n	8002c3e <TrajectoryGenerationProcess+0x746>
				  else if ( TrjStruc.Subsubmode == 2 )
 8002c2c:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d103      	bne.n	8002c3e <TrajectoryGenerationProcess+0x746>
					  TrjStruc.AngularVelocityDesire = 0;
 8002c36:	4b25      	ldr	r3, [pc, #148]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 8002c3e:	f7ff f80d 	bl	8001c5c <micros>
 8002c42:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002c44:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002c48:	1a84      	subs	r4, r0, r2
 8002c4a:	603c      	str	r4, [r7, #0]
 8002c4c:	eb61 0303 	sbc.w	r3, r1, r3
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c56:	f7fe f863 	bl	8000d20 <__aeabi_ul2f>
 8002c5a:	ee06 0a90 	vmov	s13, r0
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002c60:	edd3 7a00 	vldr	s15, [r3]
 8002c64:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002cd4 <TrajectoryGenerationProcess+0x7dc>
 8002c68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c6c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c74:	da00      	bge.n	8002c78 <TrajectoryGenerationProcess+0x780>
			  break;
 8002c76:	e021      	b.n	8002cbc <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002c78:	f7fe fff0 	bl	8001c5c <micros>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4912      	ldr	r1, [pc, #72]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002c82:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 0;
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					  TrjStruc.Subsubmode = 0;
 8002c8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					  TrjStruc.Mode = 2; ///Final Value Mode
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002c98:	2202      	movs	r2, #2
 8002c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			  break;
 8002c9e:	e00d      	b.n	8002cbc <TrajectoryGenerationProcess+0x7c4>
			  Moving_Link_Task_Flag = 1;
 8002ca0:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <TrajectoryGenerationProcess+0x7e0>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002ca8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002caa:	4a08      	ldr	r2, [pc, #32]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002cac:	6213      	str	r3, [r2, #32]
			  TrjStruc.AngularVelocityDesire = 0;
 8002cae:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <TrajectoryGenerationProcess+0x7d4>)
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24
			  break;
 8002cb6:	e002      	b.n	8002cbe <TrajectoryGenerationProcess+0x7c6>
			  break;
 8002cb8:	bf00      	nop
 8002cba:	e000      	b.n	8002cbe <TrajectoryGenerationProcess+0x7c6>
			  break;
 8002cbc:	bf00      	nop
}
 8002cbe:	bf00      	nop
 8002cc0:	3744      	adds	r7, #68	; 0x44
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	ecbd 8b02 	vpop	{d8}
 8002cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ccc:	20000308 	.word	0x20000308
 8002cd0:	bfe00000 	.word	0xbfe00000
 8002cd4:	49742400 	.word	0x49742400
 8002cd8:	200001e8 	.word	0x200001e8

08002cdc <PIDController2in1>:

void PIDController2in1()
{
 8002cdc:	b5b0      	push	{r4, r5, r7, lr}
 8002cde:	af00      	add	r7, sp, #0
	PositionPIDController.OutputDesire = TrjStruc.AngularDisplacementDesire;
 8002ce0:	4b7f      	ldr	r3, [pc, #508]	; (8002ee0 <PIDController2in1+0x204>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4a7f      	ldr	r2, [pc, #508]	; (8002ee4 <PIDController2in1+0x208>)
 8002ce6:	61d3      	str	r3, [r2, #28]
    PositionPIDController.NowError = PositionPIDController.OutputDesire - PositionPIDController.OutputFeedback;
 8002ce8:	4b7e      	ldr	r3, [pc, #504]	; (8002ee4 <PIDController2in1+0x208>)
 8002cea:	ed93 7a07 	vldr	s14, [r3, #28]
 8002cee:	4b7d      	ldr	r3, [pc, #500]	; (8002ee4 <PIDController2in1+0x208>)
 8002cf0:	edd3 7a08 	vldr	s15, [r3, #32]
 8002cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf8:	4b7a      	ldr	r3, [pc, #488]	; (8002ee4 <PIDController2in1+0x208>)
 8002cfa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    PositionPIDController.Integral_Value += PositionPIDController.NowError*PositionPIDController.SamplingTime;
 8002cfe:	4b79      	ldr	r3, [pc, #484]	; (8002ee4 <PIDController2in1+0x208>)
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fd fbcc 	bl	80004a0 <__aeabi_f2d>
 8002d08:	4604      	mov	r4, r0
 8002d0a:	460d      	mov	r5, r1
 8002d0c:	4b75      	ldr	r3, [pc, #468]	; (8002ee4 <PIDController2in1+0x208>)
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fbc5 	bl	80004a0 <__aeabi_f2d>
 8002d16:	4b73      	ldr	r3, [pc, #460]	; (8002ee4 <PIDController2in1+0x208>)
 8002d18:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002d1c:	f7fd fc18 	bl	8000550 <__aeabi_dmul>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4620      	mov	r0, r4
 8002d26:	4629      	mov	r1, r5
 8002d28:	f7fd fa5c 	bl	80001e4 <__adddf3>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4610      	mov	r0, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	f7fd fedc 	bl	8000af0 <__aeabi_d2f>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4a6a      	ldr	r2, [pc, #424]	; (8002ee4 <PIDController2in1+0x208>)
 8002d3c:	6253      	str	r3, [r2, #36]	; 0x24
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002d3e:	4b69      	ldr	r3, [pc, #420]	; (8002ee4 <PIDController2in1+0x208>)
 8002d40:	ed93 7a00 	vldr	s14, [r3]
 8002d44:	4b67      	ldr	r3, [pc, #412]	; (8002ee4 <PIDController2in1+0x208>)
 8002d46:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d4a:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(PositionPIDController.Ki * PositionPIDController.Integral_Value)
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <PIDController2in1+0x208>)
 8002d50:	edd3 6a01 	vldr	s13, [r3, #4]
 8002d54:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <PIDController2in1+0x208>)
 8002d56:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d62:	ee17 0a90 	vmov	r0, s15
 8002d66:	f7fd fb9b 	bl	80004a0 <__aeabi_f2d>
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	460d      	mov	r5, r1
					  +(PositionPIDController.Kd * (PositionPIDController.NowError-PositionPIDController.PreviousError)/PositionPIDController.SamplingTime);
 8002d6e:	4b5d      	ldr	r3, [pc, #372]	; (8002ee4 <PIDController2in1+0x208>)
 8002d70:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d74:	4b5b      	ldr	r3, [pc, #364]	; (8002ee4 <PIDController2in1+0x208>)
 8002d76:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002d7a:	4b5a      	ldr	r3, [pc, #360]	; (8002ee4 <PIDController2in1+0x208>)
 8002d7c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d80:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d88:	ee17 0a90 	vmov	r0, s15
 8002d8c:	f7fd fb88 	bl	80004a0 <__aeabi_f2d>
 8002d90:	4b54      	ldr	r3, [pc, #336]	; (8002ee4 <PIDController2in1+0x208>)
 8002d92:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002d96:	f7fd fd05 	bl	80007a4 <__aeabi_ddiv>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4620      	mov	r0, r4
 8002da0:	4629      	mov	r1, r5
 8002da2:	f7fd fa1f 	bl	80001e4 <__adddf3>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	f7fd fe9f 	bl	8000af0 <__aeabi_d2f>
 8002db2:	4603      	mov	r3, r0
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002db4:	4a4b      	ldr	r2, [pc, #300]	; (8002ee4 <PIDController2in1+0x208>)
 8002db6:	6153      	str	r3, [r2, #20]
    PositionPIDController.PreviousError = PositionPIDController.NowError;
 8002db8:	4b4a      	ldr	r3, [pc, #296]	; (8002ee4 <PIDController2in1+0x208>)
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	4a49      	ldr	r2, [pc, #292]	; (8002ee4 <PIDController2in1+0x208>)
 8002dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

    VelocityPIDController.OutputDesire = PositionPIDController.ControllerOutput + TrjStruc.AngularVelocityDesire;
 8002dc0:	4b48      	ldr	r3, [pc, #288]	; (8002ee4 <PIDController2in1+0x208>)
 8002dc2:	ed93 7a05 	vldr	s14, [r3, #20]
 8002dc6:	4b46      	ldr	r3, [pc, #280]	; (8002ee0 <PIDController2in1+0x204>)
 8002dc8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd0:	4b45      	ldr	r3, [pc, #276]	; (8002ee8 <PIDController2in1+0x20c>)
 8002dd2:	edc3 7a07 	vstr	s15, [r3, #28]
    VelocityPIDController.NowError = VelocityPIDController.OutputDesire - VelocityPIDController.OutputFeedback;
 8002dd6:	4b44      	ldr	r3, [pc, #272]	; (8002ee8 <PIDController2in1+0x20c>)
 8002dd8:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ddc:	4b42      	ldr	r3, [pc, #264]	; (8002ee8 <PIDController2in1+0x20c>)
 8002dde:	edd3 7a08 	vldr	s15, [r3, #32]
 8002de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002de6:	4b40      	ldr	r3, [pc, #256]	; (8002ee8 <PIDController2in1+0x20c>)
 8002de8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    VelocityPIDController.Integral_Value += VelocityPIDController.NowError*VelocityPIDController.SamplingTime;
 8002dec:	4b3e      	ldr	r3, [pc, #248]	; (8002ee8 <PIDController2in1+0x20c>)
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fb55 	bl	80004a0 <__aeabi_f2d>
 8002df6:	4604      	mov	r4, r0
 8002df8:	460d      	mov	r5, r1
 8002dfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <PIDController2in1+0x20c>)
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fb4e 	bl	80004a0 <__aeabi_f2d>
 8002e04:	4b38      	ldr	r3, [pc, #224]	; (8002ee8 <PIDController2in1+0x20c>)
 8002e06:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002e0a:	f7fd fba1 	bl	8000550 <__aeabi_dmul>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4620      	mov	r0, r4
 8002e14:	4629      	mov	r1, r5
 8002e16:	f7fd f9e5 	bl	80001e4 <__adddf3>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	f7fd fe65 	bl	8000af0 <__aeabi_d2f>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4a2f      	ldr	r2, [pc, #188]	; (8002ee8 <PIDController2in1+0x20c>)
 8002e2a:	6253      	str	r3, [r2, #36]	; 0x24
    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
 8002e2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ee8 <PIDController2in1+0x20c>)
 8002e2e:	ed93 7a00 	vldr	s14, [r3]
 8002e32:	4b2d      	ldr	r3, [pc, #180]	; (8002ee8 <PIDController2in1+0x20c>)
 8002e34:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e38:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(VelocityPIDController.Ki * VelocityPIDController.Integral_Value)
 8002e3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <PIDController2in1+0x20c>)
 8002e3e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e42:	4b29      	ldr	r3, [pc, #164]	; (8002ee8 <PIDController2in1+0x20c>)
 8002e44:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e50:	ee17 0a90 	vmov	r0, s15
 8002e54:	f7fd fb24 	bl	80004a0 <__aeabi_f2d>
 8002e58:	4604      	mov	r4, r0
 8002e5a:	460d      	mov	r5, r1
					  +(VelocityPIDController.Kd * (VelocityPIDController.NowError-VelocityPIDController.PreviousError)/VelocityPIDController.SamplingTime)
 8002e5c:	4b22      	ldr	r3, [pc, #136]	; (8002ee8 <PIDController2in1+0x20c>)
 8002e5e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e62:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <PIDController2in1+0x20c>)
 8002e64:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002e68:	4b1f      	ldr	r3, [pc, #124]	; (8002ee8 <PIDController2in1+0x20c>)
 8002e6a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002e6e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e76:	ee17 0a90 	vmov	r0, s15
 8002e7a:	f7fd fb11 	bl	80004a0 <__aeabi_f2d>
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <PIDController2in1+0x20c>)
 8002e80:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002e84:	f7fd fc8e 	bl	80007a4 <__aeabi_ddiv>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	4629      	mov	r1, r5
 8002e90:	f7fd f9a8 	bl	80001e4 <__adddf3>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4614      	mov	r4, r2
 8002e9a:	461d      	mov	r5, r3
					  +( TrjStruc.Alpha * VelocityPIDController.offSet );
 8002e9c:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <PIDController2in1+0x204>)
 8002e9e:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <PIDController2in1+0x20c>)
 8002ea4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eac:	ee17 0a90 	vmov	r0, s15
 8002eb0:	f7fd faf6 	bl	80004a0 <__aeabi_f2d>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4620      	mov	r0, r4
 8002eba:	4629      	mov	r1, r5
 8002ebc:	f7fd f992 	bl	80001e4 <__adddf3>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd fe12 	bl	8000af0 <__aeabi_d2f>
 8002ecc:	4603      	mov	r3, r0
    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
 8002ece:	4a06      	ldr	r2, [pc, #24]	; (8002ee8 <PIDController2in1+0x20c>)
 8002ed0:	6153      	str	r3, [r2, #20]
    VelocityPIDController.PreviousError = VelocityPIDController.NowError;
 8002ed2:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <PIDController2in1+0x20c>)
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	4a04      	ldr	r2, [pc, #16]	; (8002ee8 <PIDController2in1+0x20c>)
 8002ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

}
 8002eda:	bf00      	nop
 8002edc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000308 	.word	0x20000308
 8002ee4:	20000208 	.word	0x20000208
 8002ee8:	20000248 	.word	0x20000248

08002eec <PureVeloPID>:

	StabilizerPIDController.PreviousError = StabilizerPIDController.NowError;
}

void PureVeloPID()
{
 8002eec:	b5b0      	push	{r4, r5, r7, lr}
 8002eee:	af00      	add	r7, sp, #0
	PureVelocityPIDController.OutputDesire = TrjStruc.AngularVelocityDesire;
 8002ef0:	4b43      	ldr	r3, [pc, #268]	; (8003000 <PureVeloPID+0x114>)
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	4a43      	ldr	r2, [pc, #268]	; (8003004 <PureVeloPID+0x118>)
 8002ef6:	61d3      	str	r3, [r2, #28]
	PureVelocityPIDController.NowError = PureVelocityPIDController.OutputDesire - VelocityPIDController.OutputFeedback;
 8002ef8:	4b42      	ldr	r3, [pc, #264]	; (8003004 <PureVeloPID+0x118>)
 8002efa:	ed93 7a07 	vldr	s14, [r3, #28]
 8002efe:	4b42      	ldr	r3, [pc, #264]	; (8003008 <PureVeloPID+0x11c>)
 8002f00:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f08:	4b3e      	ldr	r3, [pc, #248]	; (8003004 <PureVeloPID+0x118>)
 8002f0a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	PureVelocityPIDController.Integral_Value += PureVelocityPIDController.NowError*PureVelocityPIDController.SamplingTime;
 8002f0e:	4b3d      	ldr	r3, [pc, #244]	; (8003004 <PureVeloPID+0x118>)
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd fac4 	bl	80004a0 <__aeabi_f2d>
 8002f18:	4604      	mov	r4, r0
 8002f1a:	460d      	mov	r5, r1
 8002f1c:	4b39      	ldr	r3, [pc, #228]	; (8003004 <PureVeloPID+0x118>)
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fabd 	bl	80004a0 <__aeabi_f2d>
 8002f26:	4b37      	ldr	r3, [pc, #220]	; (8003004 <PureVeloPID+0x118>)
 8002f28:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002f2c:	f7fd fb10 	bl	8000550 <__aeabi_dmul>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4620      	mov	r0, r4
 8002f36:	4629      	mov	r1, r5
 8002f38:	f7fd f954 	bl	80001e4 <__adddf3>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4610      	mov	r0, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	f7fd fdd4 	bl	8000af0 <__aeabi_d2f>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	4a2e      	ldr	r2, [pc, #184]	; (8003004 <PureVeloPID+0x118>)
 8002f4c:	6253      	str	r3, [r2, #36]	; 0x24
	PureVelocityPIDController.ControllerOutput = (PureVelocityPIDController.Kp*PureVelocityPIDController.NowError)
 8002f4e:	4b2d      	ldr	r3, [pc, #180]	; (8003004 <PureVeloPID+0x118>)
 8002f50:	ed93 7a00 	vldr	s14, [r3]
 8002f54:	4b2b      	ldr	r3, [pc, #172]	; (8003004 <PureVeloPID+0x118>)
 8002f56:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(PureVelocityPIDController.Ki * PureVelocityPIDController.Integral_Value)
 8002f5e:	4b29      	ldr	r3, [pc, #164]	; (8003004 <PureVeloPID+0x118>)
 8002f60:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f64:	4b27      	ldr	r3, [pc, #156]	; (8003004 <PureVeloPID+0x118>)
 8002f66:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f72:	ee17 0a90 	vmov	r0, s15
 8002f76:	f7fd fa93 	bl	80004a0 <__aeabi_f2d>
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	460d      	mov	r5, r1
					  +(PureVelocityPIDController.Kd * (PureVelocityPIDController.NowError-PureVelocityPIDController.PreviousError)/PureVelocityPIDController.SamplingTime)
 8002f7e:	4b21      	ldr	r3, [pc, #132]	; (8003004 <PureVeloPID+0x118>)
 8002f80:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f84:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <PureVeloPID+0x118>)
 8002f86:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002f8a:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <PureVeloPID+0x118>)
 8002f8c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002f90:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f98:	ee17 0a90 	vmov	r0, s15
 8002f9c:	f7fd fa80 	bl	80004a0 <__aeabi_f2d>
 8002fa0:	4b18      	ldr	r3, [pc, #96]	; (8003004 <PureVeloPID+0x118>)
 8002fa2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002fa6:	f7fd fbfd 	bl	80007a4 <__aeabi_ddiv>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4620      	mov	r0, r4
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	f7fd f917 	bl	80001e4 <__adddf3>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4614      	mov	r4, r2
 8002fbc:	461d      	mov	r5, r3
					  +( TrjStruc.Alpha * PureVelocityPIDController.offSet );
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <PureVeloPID+0x114>)
 8002fc0:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <PureVeloPID+0x118>)
 8002fc6:	edd3 7a04 	vldr	s15, [r3, #16]
 8002fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fce:	ee17 0a90 	vmov	r0, s15
 8002fd2:	f7fd fa65 	bl	80004a0 <__aeabi_f2d>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4620      	mov	r0, r4
 8002fdc:	4629      	mov	r1, r5
 8002fde:	f7fd f901 	bl	80001e4 <__adddf3>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	f7fd fd81 	bl	8000af0 <__aeabi_d2f>
 8002fee:	4603      	mov	r3, r0
	PureVelocityPIDController.ControllerOutput = (PureVelocityPIDController.Kp*PureVelocityPIDController.NowError)
 8002ff0:	4a04      	ldr	r2, [pc, #16]	; (8003004 <PureVeloPID+0x118>)
 8002ff2:	6153      	str	r3, [r2, #20]
	PureVelocityPIDController.PreviousError = PureVelocityPIDController.NowError;
 8002ff4:	4b03      	ldr	r3, [pc, #12]	; (8003004 <PureVeloPID+0x118>)
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	4a02      	ldr	r2, [pc, #8]	; (8003004 <PureVeloPID+0x118>)
 8002ffa:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002ffc:	bf00      	nop
 8002ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8003000:	20000308 	.word	0x20000308
 8003004:	20000288 	.word	0x20000288
 8003008:	20000248 	.word	0x20000248

0800300c <UARTInit>:



///UART ZONE
void UARTInit(UARTStucrture *uart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8003014:	4b10      	ldr	r3, [pc, #64]	; (8003058 <UARTInit+0x4c>)
 8003016:	88db      	ldrh	r3, [r3, #6]
 8003018:	4619      	mov	r1, r3
 800301a:	2001      	movs	r0, #1
 800301c:	f006 ffce 	bl	8009fbc <calloc>
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <UARTInit+0x4c>)
 800302a:	889b      	ldrh	r3, [r3, #4]
 800302c:	4619      	mov	r1, r3
 800302e:	2001      	movs	r0, #1
 8003030:	f006 ffc4 	bl	8009fbc <calloc>
 8003034:	4603      	mov	r3, r0
 8003036:	461a      	mov	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	81da      	strh	r2, [r3, #14]
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200000b8 	.word	0x200000b8

0800305c <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6919      	ldr	r1, [r3, #16]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	88db      	ldrh	r3, [r3, #6]
 8003070:	461a      	mov	r2, r3
 8003072:	f006 f91f 	bl	80092b4 <HAL_UART_Receive_DMA>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	88db      	ldrh	r3, [r3, #6]
 800308a:	461a      	mov	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	1ad3      	subs	r3, r2, r3
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 80030ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030b0:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	8a9b      	ldrh	r3, [r3, #20]
 80030b6:	461c      	mov	r4, r3
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff ffe0 	bl	800307e <UARTGetRxHead>
 80030be:	4603      	mov	r3, r0
 80030c0:	429c      	cmp	r4, r3
 80030c2:	d013      	beq.n	80030ec <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	8a92      	ldrh	r2, [r2, #20]
 80030cc:	4413      	add	r3, r2
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	8a9b      	ldrh	r3, [r3, #20]
 80030d6:	3301      	adds	r3, #1
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	88d2      	ldrh	r2, [r2, #6]
 80030dc:	fb93 f1f2 	sdiv	r1, r3, r2
 80030e0:	fb02 f201 	mul.w	r2, r2, r1
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 80030ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd90      	pop	{r4, r7, pc}

080030f8 <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b20      	cmp	r3, #32
 800310c:	d13d      	bne.n	800318a <UARTTxDumpBuffer+0x92>
 800310e:	4b21      	ldr	r3, [pc, #132]	; (8003194 <UARTTxDumpBuffer+0x9c>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d139      	bne.n	800318a <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 8003116:	4b1f      	ldr	r3, [pc, #124]	; (8003194 <UARTTxDumpBuffer+0x9c>)
 8003118:	2201      	movs	r2, #1
 800311a:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	89da      	ldrh	r2, [r3, #14]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	899b      	ldrh	r3, [r3, #12]
 8003124:	429a      	cmp	r2, r3
 8003126:	d02d      	beq.n	8003184 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	89da      	ldrh	r2, [r3, #14]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8003130:	429a      	cmp	r2, r3
 8003132:	d906      	bls.n	8003142 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	89da      	ldrh	r2, [r3, #14]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	b29b      	uxth	r3, r3
 8003140:	e005      	b.n	800314e <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	889a      	ldrh	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	b29b      	uxth	r3, r3
 800314e:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6818      	ldr	r0, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	8992      	ldrh	r2, [r2, #12]
 800315c:	4413      	add	r3, r2
 800315e:	89fa      	ldrh	r2, [r7, #14]
 8003160:	4619      	mov	r1, r3
 8003162:	f006 f83b 	bl	80091dc <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	899b      	ldrh	r3, [r3, #12]
 800316a:	461a      	mov	r2, r3
 800316c:	89fb      	ldrh	r3, [r7, #14]
 800316e:	4413      	add	r3, r2
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	8892      	ldrh	r2, [r2, #4]
 8003174:	fb93 f1f2 	sdiv	r1, r3, r2
 8003178:	fb02 f201 	mul.w	r2, r2, r1
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	b29a      	uxth	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <UARTTxDumpBuffer+0x9c>)
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
	}
}
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	200003c0 	.word	0x200003c0

08003198 <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	4613      	mov	r3, r2
 80031a4:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	889b      	ldrh	r3, [r3, #4]
 80031aa:	88fa      	ldrh	r2, [r7, #6]
 80031ac:	4293      	cmp	r3, r2
 80031ae:	bf28      	it	cs
 80031b0:	4613      	movcs	r3, r2
 80031b2:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80031b4:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	889b      	ldrh	r3, [r3, #4]
 80031ba:	4619      	mov	r1, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	89db      	ldrh	r3, [r3, #14]
 80031c0:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80031c2:	4293      	cmp	r3, r2
 80031c4:	bfa8      	it	ge
 80031c6:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 80031c8:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	89d2      	ldrh	r2, [r2, #14]
 80031d2:	4413      	add	r3, r2
 80031d4:	8aba      	ldrh	r2, [r7, #20]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	4618      	mov	r0, r3
 80031da:	f006 ff21 	bl	800a020 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	89db      	ldrh	r3, [r3, #14]
 80031e2:	461a      	mov	r2, r3
 80031e4:	8afb      	ldrh	r3, [r7, #22]
 80031e6:	4413      	add	r3, r2
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	8892      	ldrh	r2, [r2, #4]
 80031ec:	fb93 f1f2 	sdiv	r1, r3, r2
 80031f0:	fb02 f201 	mul.w	r2, r2, r1
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 80031fc:	8afa      	ldrh	r2, [r7, #22]
 80031fe:	8abb      	ldrh	r3, [r7, #20]
 8003200:	429a      	cmp	r2, r3
 8003202:	d00a      	beq.n	800321a <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6898      	ldr	r0, [r3, #8]
 8003208:	8abb      	ldrh	r3, [r7, #20]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 800320e:	8afa      	ldrh	r2, [r7, #22]
 8003210:	8abb      	ldrh	r3, [r7, #20]
 8003212:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8003214:	461a      	mov	r2, r3
 8003216:	f006 ff03 	bl	800a020 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f7ff ff6c 	bl	80030f8 <UARTTxDumpBuffer>

}
 8003220:	bf00      	nop
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <ACK1Return>:

void ACK1Return(UARTStucrture *uart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {0x58, 0b01110101};
 8003230:	f247 5358 	movw	r3, #30040	; 0x7558
 8003234:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 8003236:	f107 030c 	add.w	r3, r7, #12
 800323a:	2202      	movs	r2, #2
 800323c:	4619      	mov	r1, r3
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff ffaa 	bl	8003198 <UARTTxWrite>
	}
}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <ACK2Return>:

void ACK2Return(UARTStucrture *uart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {70, 110};
 8003254:	f646 6346 	movw	r3, #28230	; 0x6e46
 8003258:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 800325a:	f107 030c 	add.w	r3, r7, #12
 800325e:	2202      	movs	r2, #2
 8003260:	4619      	mov	r1, r3
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ff98 	bl	8003198 <UARTTxWrite>
	}
}
 8003268:	bf00      	nop
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <Munmunbot_Protocol>:
	UARTTxWrite(uart, temp, 2);
	}
}

void Munmunbot_Protocol(int16_t dataIn,UARTStucrture *uart)
{
 8003270:	b5b0      	push	{r4, r5, r7, lr}
 8003272:	b08e      	sub	sp, #56	; 0x38
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	6039      	str	r1, [r7, #0]
 800327a:	80fb      	strh	r3, [r7, #6]
	static uint8_t parameter_ptr = 0;
	static uint16_t Data_HAck = 0;
	static uint32_t CheckSum = 0;
	static uint16_t DataForReturn = 0;

	switch (Munmunbot_Protocol_State)
 800327c:	4b8b      	ldr	r3, [pc, #556]	; (80034ac <Munmunbot_Protocol+0x23c>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b05      	cmp	r3, #5
 8003282:	f200 841e 	bhi.w	8003ac2 <Munmunbot_Protocol+0x852>
 8003286:	a201      	add	r2, pc, #4	; (adr r2, 800328c <Munmunbot_Protocol+0x1c>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	080032a5 	.word	0x080032a5
 8003290:	08003359 	.word	0x08003359
 8003294:	0800339b 	.word	0x0800339b
 8003298:	080033e9 	.word	0x080033e9
 800329c:	0800340d 	.word	0x0800340d
 80032a0:	080034cd 	.word	0x080034cd
	{
		case PP_STARTandMode:
			if (((dataIn>>4) & 0b1111) == 0b1001)
 80032a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032a8:	111b      	asrs	r3, r3, #4
 80032aa:	b21b      	sxth	r3, r3
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	2b09      	cmp	r3, #9
 80032b4:	f040 8402 	bne.w	8003abc <Munmunbot_Protocol+0x84c>
			{
				CheckSum = dataIn;
 80032b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032bc:	4a7c      	ldr	r2, [pc, #496]	; (80034b0 <Munmunbot_Protocol+0x240>)
 80032be:	6013      	str	r3, [r2, #0]
				ProtocolMode = dataIn & 0b1111;
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4b7a      	ldr	r3, [pc, #488]	; (80034b4 <Munmunbot_Protocol+0x244>)
 80032cc:	701a      	strb	r2, [r3, #0]

				if (ProtocolMode == 7)
 80032ce:	4b79      	ldr	r3, [pc, #484]	; (80034b4 <Munmunbot_Protocol+0x244>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b07      	cmp	r3, #7
 80032d4:	d103      	bne.n	80032de <Munmunbot_Protocol+0x6e>
				{
					Munmunbot_Protocol_State = PP_Frame3_Data_0; ///Frame3
 80032d6:	4b75      	ldr	r3, [pc, #468]	; (80034ac <Munmunbot_Protocol+0x23c>)
 80032d8:	2203      	movs	r2, #3
 80032da:	701a      	strb	r2, [r3, #0]
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
				{
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
				}
			}
			break;
 80032dc:	e3ee      	b.n	8003abc <Munmunbot_Protocol+0x84c>
				else if (ProtocolMode == 1 || ProtocolMode == 4 || ProtocolMode == 5 ||ProtocolMode == 6)
 80032de:	4b75      	ldr	r3, [pc, #468]	; (80034b4 <Munmunbot_Protocol+0x244>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d00b      	beq.n	80032fe <Munmunbot_Protocol+0x8e>
 80032e6:	4b73      	ldr	r3, [pc, #460]	; (80034b4 <Munmunbot_Protocol+0x244>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d007      	beq.n	80032fe <Munmunbot_Protocol+0x8e>
 80032ee:	4b71      	ldr	r3, [pc, #452]	; (80034b4 <Munmunbot_Protocol+0x244>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b05      	cmp	r3, #5
 80032f4:	d003      	beq.n	80032fe <Munmunbot_Protocol+0x8e>
 80032f6:	4b6f      	ldr	r3, [pc, #444]	; (80034b4 <Munmunbot_Protocol+0x244>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b06      	cmp	r3, #6
 80032fc:	d103      	bne.n	8003306 <Munmunbot_Protocol+0x96>
					Munmunbot_Protocol_State = PP_Frame2_Data_0; //Frame2
 80032fe:	4b6b      	ldr	r3, [pc, #428]	; (80034ac <Munmunbot_Protocol+0x23c>)
 8003300:	2201      	movs	r2, #1
 8003302:	701a      	strb	r2, [r3, #0]
			break;
 8003304:	e3da      	b.n	8003abc <Munmunbot_Protocol+0x84c>
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 8003306:	4b6b      	ldr	r3, [pc, #428]	; (80034b4 <Munmunbot_Protocol+0x244>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d020      	beq.n	8003350 <Munmunbot_Protocol+0xe0>
 800330e:	4b69      	ldr	r3, [pc, #420]	; (80034b4 <Munmunbot_Protocol+0x244>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b03      	cmp	r3, #3
 8003314:	d01c      	beq.n	8003350 <Munmunbot_Protocol+0xe0>
 8003316:	4b67      	ldr	r3, [pc, #412]	; (80034b4 <Munmunbot_Protocol+0x244>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b08      	cmp	r3, #8
 800331c:	d018      	beq.n	8003350 <Munmunbot_Protocol+0xe0>
 800331e:	4b65      	ldr	r3, [pc, #404]	; (80034b4 <Munmunbot_Protocol+0x244>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b09      	cmp	r3, #9
 8003324:	d014      	beq.n	8003350 <Munmunbot_Protocol+0xe0>
 8003326:	4b63      	ldr	r3, [pc, #396]	; (80034b4 <Munmunbot_Protocol+0x244>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b0a      	cmp	r3, #10
 800332c:	d010      	beq.n	8003350 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 800332e:	4b61      	ldr	r3, [pc, #388]	; (80034b4 <Munmunbot_Protocol+0x244>)
 8003330:	781b      	ldrb	r3, [r3, #0]
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 8003332:	2b0b      	cmp	r3, #11
 8003334:	d00c      	beq.n	8003350 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 8003336:	4b5f      	ldr	r3, [pc, #380]	; (80034b4 <Munmunbot_Protocol+0x244>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b0c      	cmp	r3, #12
 800333c:	d008      	beq.n	8003350 <Munmunbot_Protocol+0xe0>
 800333e:	4b5d      	ldr	r3, [pc, #372]	; (80034b4 <Munmunbot_Protocol+0x244>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b0d      	cmp	r3, #13
 8003344:	d004      	beq.n	8003350 <Munmunbot_Protocol+0xe0>
 8003346:	4b5b      	ldr	r3, [pc, #364]	; (80034b4 <Munmunbot_Protocol+0x244>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b0e      	cmp	r3, #14
 800334c:	f040 83b6 	bne.w	8003abc <Munmunbot_Protocol+0x84c>
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
 8003350:	4b56      	ldr	r3, [pc, #344]	; (80034ac <Munmunbot_Protocol+0x23c>)
 8003352:	2205      	movs	r2, #5
 8003354:	701a      	strb	r2, [r3, #0]
			break;
 8003356:	e3b1      	b.n	8003abc <Munmunbot_Protocol+0x84c>
		case PP_Frame2_Data_0:
			 CheckSum += dataIn;
 8003358:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800335c:	4b54      	ldr	r3, [pc, #336]	; (80034b0 <Munmunbot_Protocol+0x240>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4413      	add	r3, r2
 8003362:	4a53      	ldr	r2, [pc, #332]	; (80034b0 <Munmunbot_Protocol+0x240>)
 8003364:	6013      	str	r3, [r2, #0]
			 Data_HAck = ((dataIn&0b11111111)<<8)&0b1111111100000000;
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	b29a      	uxth	r2, r3
 800336c:	4b52      	ldr	r3, [pc, #328]	; (80034b8 <Munmunbot_Protocol+0x248>)
 800336e:	801a      	strh	r2, [r3, #0]
			 parameter[0] = dataIn&0b1111;
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4b50      	ldr	r3, [pc, #320]	; (80034bc <Munmunbot_Protocol+0x24c>)
 800337c:	701a      	strb	r2, [r3, #0]
			 parameter[1] = (dataIn>>4)&0b1111;
 800337e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003382:	111b      	asrs	r3, r3, #4
 8003384:	b21b      	sxth	r3, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	b2da      	uxtb	r2, r3
 800338e:	4b4b      	ldr	r3, [pc, #300]	; (80034bc <Munmunbot_Protocol+0x24c>)
 8003390:	705a      	strb	r2, [r3, #1]
			 Munmunbot_Protocol_State = PP_Frame2_Data_1;
 8003392:	4b46      	ldr	r3, [pc, #280]	; (80034ac <Munmunbot_Protocol+0x23c>)
 8003394:	2202      	movs	r2, #2
 8003396:	701a      	strb	r2, [r3, #0]

			 break;
 8003398:	e393      	b.n	8003ac2 <Munmunbot_Protocol+0x852>
		case PP_Frame2_Data_1:
			 CheckSum += dataIn;
 800339a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800339e:	4b44      	ldr	r3, [pc, #272]	; (80034b0 <Munmunbot_Protocol+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	4a42      	ldr	r2, [pc, #264]	; (80034b0 <Munmunbot_Protocol+0x240>)
 80033a6:	6013      	str	r3, [r2, #0]
			 Data_HAck = (dataIn&0b11111111) | Data_HAck;
 80033a8:	88fb      	ldrh	r3, [r7, #6]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	b21a      	sxth	r2, r3
 80033ae:	4b42      	ldr	r3, [pc, #264]	; (80034b8 <Munmunbot_Protocol+0x248>)
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	b21b      	sxth	r3, r3
 80033b4:	4313      	orrs	r3, r2
 80033b6:	b21b      	sxth	r3, r3
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	4b3f      	ldr	r3, [pc, #252]	; (80034b8 <Munmunbot_Protocol+0x248>)
 80033bc:	801a      	strh	r2, [r3, #0]
			 parameter[2] = dataIn&0b1111;
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	4b3c      	ldr	r3, [pc, #240]	; (80034bc <Munmunbot_Protocol+0x24c>)
 80033ca:	709a      	strb	r2, [r3, #2]
			 parameter[3] = (dataIn>>4)&0b1111;
 80033cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033d0:	111b      	asrs	r3, r3, #4
 80033d2:	b21b      	sxth	r3, r3
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	4b37      	ldr	r3, [pc, #220]	; (80034bc <Munmunbot_Protocol+0x24c>)
 80033de:	70da      	strb	r2, [r3, #3]
			 Munmunbot_Protocol_State = PP_CheckSum;
 80033e0:	4b32      	ldr	r3, [pc, #200]	; (80034ac <Munmunbot_Protocol+0x23c>)
 80033e2:	2205      	movs	r2, #5
 80033e4:	701a      	strb	r2, [r3, #0]
			 break;
 80033e6:	e36c      	b.n	8003ac2 <Munmunbot_Protocol+0x852>

		case PP_Frame3_Data_0:
		     CheckSum += dataIn;
 80033e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033ec:	4b30      	ldr	r3, [pc, #192]	; (80034b0 <Munmunbot_Protocol+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4413      	add	r3, r2
 80033f2:	4a2f      	ldr	r2, [pc, #188]	; (80034b0 <Munmunbot_Protocol+0x240>)
 80033f4:	6013      	str	r3, [r2, #0]
		     n_station = dataIn;
 80033f6:	88fa      	ldrh	r2, [r7, #6]
 80033f8:	4b31      	ldr	r3, [pc, #196]	; (80034c0 <Munmunbot_Protocol+0x250>)
 80033fa:	801a      	strh	r2, [r3, #0]
		     n_station_mem = n_station;
 80033fc:	4b30      	ldr	r3, [pc, #192]	; (80034c0 <Munmunbot_Protocol+0x250>)
 80033fe:	881a      	ldrh	r2, [r3, #0]
 8003400:	4b30      	ldr	r3, [pc, #192]	; (80034c4 <Munmunbot_Protocol+0x254>)
 8003402:	801a      	strh	r2, [r3, #0]
		     Munmunbot_Protocol_State = PP_Frame3_Data_1;
 8003404:	4b29      	ldr	r3, [pc, #164]	; (80034ac <Munmunbot_Protocol+0x23c>)
 8003406:	2204      	movs	r2, #4
 8003408:	701a      	strb	r2, [r3, #0]

		   break;
 800340a:	e35a      	b.n	8003ac2 <Munmunbot_Protocol+0x852>

		case PP_Frame3_Data_1:
				CheckSum += dataIn;
 800340c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003410:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <Munmunbot_Protocol+0x240>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4413      	add	r3, r2
 8003416:	4a26      	ldr	r2, [pc, #152]	; (80034b0 <Munmunbot_Protocol+0x240>)
 8003418:	6013      	str	r3, [r2, #0]
				if (n_station >= 2)
 800341a:	4b29      	ldr	r3, [pc, #164]	; (80034c0 <Munmunbot_Protocol+0x250>)
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d927      	bls.n	8003472 <Munmunbot_Protocol+0x202>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	4a28      	ldr	r2, [pc, #160]	; (80034c8 <Munmunbot_Protocol+0x258>)
 8003428:	7812      	ldrb	r2, [r2, #0]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	b2d9      	uxtb	r1, r3
 8003430:	4b22      	ldr	r3, [pc, #136]	; (80034bc <Munmunbot_Protocol+0x24c>)
 8003432:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8003434:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <Munmunbot_Protocol+0x258>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	3301      	adds	r3, #1
 800343a:	b2da      	uxtb	r2, r3
 800343c:	4b22      	ldr	r3, [pc, #136]	; (80034c8 <Munmunbot_Protocol+0x258>)
 800343e:	701a      	strb	r2, [r3, #0]
					parameter[parameter_ptr] = (dataIn>>4)&0b1111;
 8003440:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003444:	111b      	asrs	r3, r3, #4
 8003446:	b21b      	sxth	r3, r3
 8003448:	b2db      	uxtb	r3, r3
 800344a:	4a1f      	ldr	r2, [pc, #124]	; (80034c8 <Munmunbot_Protocol+0x258>)
 800344c:	7812      	ldrb	r2, [r2, #0]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	b2d9      	uxtb	r1, r3
 8003454:	4b19      	ldr	r3, [pc, #100]	; (80034bc <Munmunbot_Protocol+0x24c>)
 8003456:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8003458:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <Munmunbot_Protocol+0x258>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	3301      	adds	r3, #1
 800345e:	b2da      	uxtb	r2, r3
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <Munmunbot_Protocol+0x258>)
 8003462:	701a      	strb	r2, [r3, #0]
					n_station -= 2;
 8003464:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <Munmunbot_Protocol+0x250>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	3b02      	subs	r3, #2
 800346a:	b29a      	uxth	r2, r3
 800346c:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <Munmunbot_Protocol+0x250>)
 800346e:	801a      	strh	r2, [r3, #0]
 8003470:	e012      	b.n	8003498 <Munmunbot_Protocol+0x228>
				}
				else if (n_station == 1)
 8003472:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <Munmunbot_Protocol+0x250>)
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d10e      	bne.n	8003498 <Munmunbot_Protocol+0x228>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	4a12      	ldr	r2, [pc, #72]	; (80034c8 <Munmunbot_Protocol+0x258>)
 8003480:	7812      	ldrb	r2, [r2, #0]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	b2d9      	uxtb	r1, r3
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <Munmunbot_Protocol+0x24c>)
 800348a:	5499      	strb	r1, [r3, r2]
					n_station -= 1;
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <Munmunbot_Protocol+0x250>)
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <Munmunbot_Protocol+0x250>)
 8003496:	801a      	strh	r2, [r3, #0]
				}
				if  (n_station == 0)
 8003498:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <Munmunbot_Protocol+0x250>)
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f040 830f 	bne.w	8003ac0 <Munmunbot_Protocol+0x850>
				{
					Munmunbot_Protocol_State = PP_CheckSum;
 80034a2:	4b02      	ldr	r3, [pc, #8]	; (80034ac <Munmunbot_Protocol+0x23c>)
 80034a4:	2205      	movs	r2, #5
 80034a6:	701a      	strb	r2, [r3, #0]
				}
				break;
 80034a8:	e30a      	b.n	8003ac0 <Munmunbot_Protocol+0x850>
 80034aa:	bf00      	nop
 80034ac:	200000d8 	.word	0x200000d8
 80034b0:	200003c4 	.word	0x200003c4
 80034b4:	200003c8 	.word	0x200003c8
 80034b8:	200003ca 	.word	0x200003ca
 80034bc:	200003cc 	.word	0x200003cc
 80034c0:	200004cc 	.word	0x200004cc
 80034c4:	200004ce 	.word	0x200004ce
 80034c8:	200004d0 	.word	0x200004d0

			case PP_CheckSum:
			{
				CheckSum = (~CheckSum) & 0xff;
 80034cc:	4bba      	ldr	r3, [pc, #744]	; (80037b8 <Munmunbot_Protocol+0x548>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	43db      	mvns	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	4ab8      	ldr	r2, [pc, #736]	; (80037b8 <Munmunbot_Protocol+0x548>)
 80034d6:	6013      	str	r3, [r2, #0]
				if (CheckSum == dataIn)
 80034d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034dc:	4bb6      	ldr	r3, [pc, #728]	; (80037b8 <Munmunbot_Protocol+0x548>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	f040 82d7 	bne.w	8003a94 <Munmunbot_Protocol+0x824>
				{

					switch (ProtocolMode)
 80034e6:	4bb5      	ldr	r3, [pc, #724]	; (80037bc <Munmunbot_Protocol+0x54c>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	2b0d      	cmp	r3, #13
 80034ee:	f200 82d2 	bhi.w	8003a96 <Munmunbot_Protocol+0x826>
 80034f2:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <Munmunbot_Protocol+0x288>)
 80034f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f8:	08003531 	.word	0x08003531
 80034fc:	080035a5 	.word	0x080035a5
 8003500:	080035bf 	.word	0x080035bf
 8003504:	080035d5 	.word	0x080035d5
 8003508:	08003637 	.word	0x08003637
 800350c:	08003655 	.word	0x08003655
 8003510:	08003679 	.word	0x08003679
 8003514:	080036c3 	.word	0x080036c3
 8003518:	080036f1 	.word	0x080036f1
 800351c:	080037fd 	.word	0x080037fd
 8003520:	0800390f 	.word	0x0800390f
 8003524:	08003a49 	.word	0x08003a49
 8003528:	08003a5f 	.word	0x08003a5f
 800352c:	08003a75 	.word	0x08003a75
					{
					case 1: ///Test Command ##Complete##
						{
						uint8_t temp[] =
 8003530:	2391      	movs	r3, #145	; 0x91
 8003532:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						{0b10010001,
						((parameter[1] & 0xff) << 4)  | (parameter[0]& 0xff),
 8003536:	4ba2      	ldr	r3, [pc, #648]	; (80037c0 <Munmunbot_Protocol+0x550>)
 8003538:	785b      	ldrb	r3, [r3, #1]
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	b25a      	sxtb	r2, r3
 800353e:	4ba0      	ldr	r3, [pc, #640]	; (80037c0 <Munmunbot_Protocol+0x550>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	b25b      	sxtb	r3, r3
 8003544:	4313      	orrs	r3, r2
 8003546:	b25b      	sxtb	r3, r3
 8003548:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 800354a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						((parameter[3] & 0xff) << 4)  | (parameter[2]& 0xff),
 800354e:	4b9c      	ldr	r3, [pc, #624]	; (80037c0 <Munmunbot_Protocol+0x550>)
 8003550:	78db      	ldrb	r3, [r3, #3]
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	b25a      	sxtb	r2, r3
 8003556:	4b9a      	ldr	r3, [pc, #616]	; (80037c0 <Munmunbot_Protocol+0x550>)
 8003558:	789b      	ldrb	r3, [r3, #2]
 800355a:	b25b      	sxtb	r3, r3
 800355c:	4313      	orrs	r3, r2
 800355e:	b25b      	sxtb	r3, r3
 8003560:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 8003562:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003566:	2300      	movs	r3, #0
 8003568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800356c:	2358      	movs	r3, #88	; 0x58
 800356e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003572:	2375      	movs	r3, #117	; 0x75
 8003574:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						0b0 , 0x58 ,0x75 };
						temp[3] = (~(temp[0]+temp[1]+temp[2]))& 0xff;
 8003578:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800357c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003580:	4413      	add	r3, r2
 8003582:	b2da      	uxtb	r2, r3
 8003584:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003588:	4413      	add	r3, r2
 800358a:	b2db      	uxtb	r3, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						UARTTxWrite(uart, temp, 6);
 8003594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003598:	2206      	movs	r2, #6
 800359a:	4619      	mov	r1, r3
 800359c:	6838      	ldr	r0, [r7, #0]
 800359e:	f7ff fdfb 	bl	8003198 <UARTTxWrite>
						}
						break;
 80035a2:	e278      	b.n	8003a96 <Munmunbot_Protocol+0x826>
					case 2: //Connect MCU ##Complete##
						if (Munmunbot_State == STATE_Disconnected)
 80035a4:	4b87      	ldr	r3, [pc, #540]	; (80037c4 <Munmunbot_Protocol+0x554>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d104      	bne.n	80035b6 <Munmunbot_Protocol+0x346>
						{
							Munmunbot_State = STATE_Idle;
 80035ac:	4b85      	ldr	r3, [pc, #532]	; (80037c4 <Munmunbot_Protocol+0x554>)
 80035ae:	2201      	movs	r2, #1
 80035b0:	701a      	strb	r2, [r3, #0]
							PID_Reset();
 80035b2:	f000 fabb 	bl	8003b2c <PID_Reset>
						}
						ACK1Return(uart);
 80035b6:	6838      	ldr	r0, [r7, #0]
 80035b8:	f7ff fe36 	bl	8003228 <ACK1Return>
						break;
 80035bc:	e26b      	b.n	8003a96 <Munmunbot_Protocol+0x826>
					case 3: //Disconnect MCU ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80035be:	4b81      	ldr	r3, [pc, #516]	; (80037c4 <Munmunbot_Protocol+0x554>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d102      	bne.n	80035cc <Munmunbot_Protocol+0x35c>
						{
							Munmunbot_State = STATE_Disconnected;
 80035c6:	4b7f      	ldr	r3, [pc, #508]	; (80037c4 <Munmunbot_Protocol+0x554>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80035cc:	6838      	ldr	r0, [r7, #0]
 80035ce:	f7ff fe2b 	bl	8003228 <ACK1Return>
						break;
 80035d2:	e260      	b.n	8003a96 <Munmunbot_Protocol+0x826>
					case 4: //Set Angular Velocity ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80035d4:	4b7b      	ldr	r3, [pc, #492]	; (80037c4 <Munmunbot_Protocol+0x554>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d128      	bne.n	800362e <Munmunbot_Protocol+0x3be>
						{
							CUSSStruc.RPMp = 0.925*(Data_HAck*10.0)/255.0;
 80035dc:	4b7a      	ldr	r3, [pc, #488]	; (80037c8 <Munmunbot_Protocol+0x558>)
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fc ff4b 	bl	800047c <__aeabi_i2d>
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	4b78      	ldr	r3, [pc, #480]	; (80037cc <Munmunbot_Protocol+0x55c>)
 80035ec:	f7fc ffb0 	bl	8000550 <__aeabi_dmul>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4610      	mov	r0, r2
 80035f6:	4619      	mov	r1, r3
 80035f8:	a36b      	add	r3, pc, #428	; (adr r3, 80037a8 <Munmunbot_Protocol+0x538>)
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	f7fc ffa7 	bl	8000550 <__aeabi_dmul>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4610      	mov	r0, r2
 8003608:	4619      	mov	r1, r3
 800360a:	a369      	add	r3, pc, #420	; (adr r3, 80037b0 <Munmunbot_Protocol+0x540>)
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f7fd f8c8 	bl	80007a4 <__aeabi_ddiv>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4610      	mov	r0, r2
 800361a:	4619      	mov	r1, r3
 800361c:	f7fd fa68 	bl	8000af0 <__aeabi_d2f>
 8003620:	4603      	mov	r3, r0
 8003622:	4a6b      	ldr	r2, [pc, #428]	; (80037d0 <Munmunbot_Protocol+0x560>)
 8003624:	6093      	str	r3, [r2, #8]
							TrajectoryGenerationVelocityMaxSetting(&TrjStruc , &CUSSStruc);
 8003626:	496a      	ldr	r1, [pc, #424]	; (80037d0 <Munmunbot_Protocol+0x560>)
 8003628:	486a      	ldr	r0, [pc, #424]	; (80037d4 <Munmunbot_Protocol+0x564>)
 800362a:	f7fe fcad 	bl	8001f88 <TrajectoryGenerationVelocityMaxSetting>
						}
						ACK1Return(uart);
 800362e:	6838      	ldr	r0, [r7, #0]
 8003630:	f7ff fdfa 	bl	8003228 <ACK1Return>
						break;
 8003634:	e22f      	b.n	8003a96 <Munmunbot_Protocol+0x826>
					case 5:   //Set Angular pos ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003636:	4b63      	ldr	r3, [pc, #396]	; (80037c4 <Munmunbot_Protocol+0x554>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d106      	bne.n	800364c <Munmunbot_Protocol+0x3dc>
						{
							Angularpos_InputNumber = Data_HAck;
 800363e:	4b62      	ldr	r3, [pc, #392]	; (80037c8 <Munmunbot_Protocol+0x558>)
 8003640:	881a      	ldrh	r2, [r3, #0]
 8003642:	4b65      	ldr	r3, [pc, #404]	; (80037d8 <Munmunbot_Protocol+0x568>)
 8003644:	801a      	strh	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Pos_Directly;
 8003646:	4b65      	ldr	r3, [pc, #404]	; (80037dc <Munmunbot_Protocol+0x56c>)
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 800364c:	6838      	ldr	r0, [r7, #0]
 800364e:	f7ff fdeb 	bl	8003228 <ACK1Return>
						break;
 8003652:	e220      	b.n	8003a96 <Munmunbot_Protocol+0x826>
					case 6:  /// Set 1 Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003654:	4b5b      	ldr	r3, [pc, #364]	; (80037c4 <Munmunbot_Protocol+0x554>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d109      	bne.n	8003670 <Munmunbot_Protocol+0x400>
						{
//							Angularpos_InputArray[0] = parameter[0];
							Angularpos_InputArray[0] = parameter[2];    //150 0x00 0x0A Checksum
 800365c:	4b58      	ldr	r3, [pc, #352]	; (80037c0 <Munmunbot_Protocol+0x550>)
 800365e:	789a      	ldrb	r2, [r3, #2]
 8003660:	4b5f      	ldr	r3, [pc, #380]	; (80037e0 <Munmunbot_Protocol+0x570>)
 8003662:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Goal_1_Station;
 8003664:	4b5d      	ldr	r3, [pc, #372]	; (80037dc <Munmunbot_Protocol+0x56c>)
 8003666:	2202      	movs	r2, #2
 8003668:	701a      	strb	r2, [r3, #0]
							NumberOfStationToGo = 1;
 800366a:	4b5e      	ldr	r3, [pc, #376]	; (80037e4 <Munmunbot_Protocol+0x574>)
 800366c:	2201      	movs	r2, #1
 800366e:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003670:	6838      	ldr	r0, [r7, #0]
 8003672:	f7ff fdd9 	bl	8003228 <ACK1Return>
						break;
 8003676:	e20e      	b.n	8003a96 <Munmunbot_Protocol+0x826>
					case 7:  /// Set n Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003678:	4b52      	ldr	r3, [pc, #328]	; (80037c4 <Munmunbot_Protocol+0x554>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d11c      	bne.n	80036ba <Munmunbot_Protocol+0x44a>
						{
							MovingLinkMode = LMM_Set_Goal_n_Station;
 8003680:	4b56      	ldr	r3, [pc, #344]	; (80037dc <Munmunbot_Protocol+0x56c>)
 8003682:	2203      	movs	r2, #3
 8003684:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8003686:	2300      	movs	r3, #0
 8003688:	637b      	str	r3, [r7, #52]	; 0x34
 800368a:	e00b      	b.n	80036a4 <Munmunbot_Protocol+0x434>
							{
								Angularpos_InputArray[i] = parameter[i];
 800368c:	4a4c      	ldr	r2, [pc, #304]	; (80037c0 <Munmunbot_Protocol+0x550>)
 800368e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003690:	4413      	add	r3, r2
 8003692:	7819      	ldrb	r1, [r3, #0]
 8003694:	4a52      	ldr	r2, [pc, #328]	; (80037e0 <Munmunbot_Protocol+0x570>)
 8003696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003698:	4413      	add	r3, r2
 800369a:	460a      	mov	r2, r1
 800369c:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 800369e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a0:	3301      	adds	r3, #1
 80036a2:	637b      	str	r3, [r7, #52]	; 0x34
 80036a4:	4b50      	ldr	r3, [pc, #320]	; (80037e8 <Munmunbot_Protocol+0x578>)
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	461a      	mov	r2, r3
 80036aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ac:	4293      	cmp	r3, r2
 80036ae:	dbed      	blt.n	800368c <Munmunbot_Protocol+0x41c>
							}
							NumberOfStationToGo = n_station_mem;
 80036b0:	4b4d      	ldr	r3, [pc, #308]	; (80037e8 <Munmunbot_Protocol+0x578>)
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	4b4b      	ldr	r3, [pc, #300]	; (80037e4 <Munmunbot_Protocol+0x574>)
 80036b8:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80036ba:	6838      	ldr	r0, [r7, #0]
 80036bc:	f7ff fdb4 	bl	8003228 <ACK1Return>
						break;
 80036c0:	e1e9      	b.n	8003a96 <Munmunbot_Protocol+0x826>
					case 8:  /// Go go ##Complete##  ///But must implement return ACK after it's done
						if (Munmunbot_State == STATE_Idle)
 80036c2:	4b40      	ldr	r3, [pc, #256]	; (80037c4 <Munmunbot_Protocol+0x554>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d108      	bne.n	80036dc <Munmunbot_Protocol+0x46c>
						{
							Munmunbot_State = STATE_PrepareDATA;
 80036ca:	4b3e      	ldr	r3, [pc, #248]	; (80037c4 <Munmunbot_Protocol+0x554>)
 80036cc:	2202      	movs	r2, #2
 80036ce:	701a      	strb	r2, [r3, #0]
							PID_Reset();
 80036d0:	f000 fa2c 	bl	8003b2c <PID_Reset>
							ACK1Return(uart);
 80036d4:	6838      	ldr	r0, [r7, #0]
 80036d6:	f7ff fda7 	bl	8003228 <ACK1Return>
								{0x58 ,  0x75 ,
										70,  110};  ///ACK1 + ACK2
								UARTTxWrite(uart, temp, 4);
							}
						}
						break;
 80036da:	e1dc      	b.n	8003a96 <Munmunbot_Protocol+0x826>
								uint8_t temp[] =
 80036dc:	4b43      	ldr	r3, [pc, #268]	; (80037ec <Munmunbot_Protocol+0x57c>)
 80036de:	623b      	str	r3, [r7, #32]
								UARTTxWrite(uart, temp, 4);
 80036e0:	f107 0320 	add.w	r3, r7, #32
 80036e4:	2204      	movs	r2, #4
 80036e6:	4619      	mov	r1, r3
 80036e8:	6838      	ldr	r0, [r7, #0]
 80036ea:	f7ff fd55 	bl	8003198 <UARTTxWrite>
						break;
 80036ee:	e1d2      	b.n	8003a96 <Munmunbot_Protocol+0x826>

					case 9:  /// Return Current Station   ##Complete##

						{
							uint8_t temp[] =
 80036f0:	4a3f      	ldr	r2, [pc, #252]	; (80037f0 <Munmunbot_Protocol+0x580>)
 80036f2:	f107 0318 	add.w	r3, r7, #24
 80036f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036fa:	6018      	str	r0, [r3, #0]
 80036fc:	3304      	adds	r3, #4
 80036fe:	8019      	strh	r1, [r3, #0]
							{0x58 ,  0x75 ,
									153,  0b0,  0b0, 0b0}; ///ACK1 + Mode 9
							uint8_t Shift = 2;
 8003700:	2302      	movs	r3, #2
 8003702:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
							DataForReturn = Current_Station&(0xff);
 8003706:	4b3b      	ldr	r3, [pc, #236]	; (80037f4 <Munmunbot_Protocol+0x584>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	b29a      	uxth	r2, r3
 800370c:	4b3a      	ldr	r3, [pc, #232]	; (80037f8 <Munmunbot_Protocol+0x588>)
 800370e:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8003710:	4b39      	ldr	r3, [pc, #228]	; (80037f8 <Munmunbot_Protocol+0x588>)
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	0a1b      	lsrs	r3, r3, #8
 8003716:	b29a      	uxth	r2, r3
 8003718:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800371c:	3301      	adds	r3, #1
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003724:	440b      	add	r3, r1
 8003726:	f803 2c20 	strb.w	r2, [r3, #-32]
							temp[2+Shift] = (DataForReturn)&(0xff);
 800372a:	4b33      	ldr	r3, [pc, #204]	; (80037f8 <Munmunbot_Protocol+0x588>)
 800372c:	881a      	ldrh	r2, [r3, #0]
 800372e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003732:	3302      	adds	r3, #2
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800373a:	440b      	add	r3, r1
 800373c:	f803 2c20 	strb.w	r2, [r3, #-32]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8003740:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003744:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003748:	4413      	add	r3, r2
 800374a:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 800374e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003752:	3301      	adds	r3, #1
 8003754:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003758:	440b      	add	r3, r1
 800375a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800375e:	4413      	add	r3, r2
 8003760:	b2da      	uxtb	r2, r3
 8003762:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003766:	3302      	adds	r3, #2
 8003768:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800376c:	440b      	add	r3, r1
 800376e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003772:	4413      	add	r3, r2
 8003774:	b2da      	uxtb	r2, r3
 8003776:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800377a:	3303      	adds	r3, #3
 800377c:	43d2      	mvns	r2, r2
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003784:	440b      	add	r3, r1
 8003786:	f803 2c20 	strb.w	r2, [r3, #-32]
							UARTTxWrite(uart, temp, 4+Shift);
 800378a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	3304      	adds	r3, #4
 8003792:	b29a      	uxth	r2, r3
 8003794:	f107 0318 	add.w	r3, r7, #24
 8003798:	4619      	mov	r1, r3
 800379a:	6838      	ldr	r0, [r7, #0]
 800379c:	f7ff fcfc 	bl	8003198 <UARTTxWrite>
						}

						break;
 80037a0:	e179      	b.n	8003a96 <Munmunbot_Protocol+0x826>
 80037a2:	bf00      	nop
 80037a4:	f3af 8000 	nop.w
 80037a8:	9999999a 	.word	0x9999999a
 80037ac:	3fed9999 	.word	0x3fed9999
 80037b0:	00000000 	.word	0x00000000
 80037b4:	406fe000 	.word	0x406fe000
 80037b8:	200003c4 	.word	0x200003c4
 80037bc:	200003c8 	.word	0x200003c8
 80037c0:	200003cc 	.word	0x200003cc
 80037c4:	200000d9 	.word	0x200000d9
 80037c8:	200003ca 	.word	0x200003ca
 80037cc:	40240000 	.word	0x40240000
 80037d0:	20000398 	.word	0x20000398
 80037d4:	20000308 	.word	0x20000308
 80037d8:	200001dc 	.word	0x200001dc
 80037dc:	200001de 	.word	0x200001de
 80037e0:	200000dc 	.word	0x200000dc
 80037e4:	200001e0 	.word	0x200001e0
 80037e8:	200004ce 	.word	0x200004ce
 80037ec:	6e467558 	.word	0x6e467558
 80037f0:	0800a344 	.word	0x0800a344
 80037f4:	200001df 	.word	0x200001df
 80037f8:	200004d2 	.word	0x200004d2

					case 10: /// Return Angular Position  ##Complete##
						{
							uint8_t temp[] =
 80037fc:	4aba      	ldr	r2, [pc, #744]	; (8003ae8 <Munmunbot_Protocol+0x878>)
 80037fe:	f107 0310 	add.w	r3, r7, #16
 8003802:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003806:	6018      	str	r0, [r3, #0]
 8003808:	3304      	adds	r3, #4
 800380a:	8019      	strh	r1, [r3, #0]
							{0x58 , 0x75 ,154, 0b0,  0b0, 0b0};
							uint8_t Shift = 2;
 800380c:	2302      	movs	r3, #2
 800380e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
							DataForReturn = ((((int) htim1.Instance->CNT) % (CUSSStruc.PPRxQEI))*2*3.141*10000)/(CUSSStruc.PPRxQEI);  ///pulse to (radian*10000)
 8003812:	4bb6      	ldr	r3, [pc, #728]	; (8003aec <Munmunbot_Protocol+0x87c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	4ab5      	ldr	r2, [pc, #724]	; (8003af0 <Munmunbot_Protocol+0x880>)
 800381a:	6852      	ldr	r2, [r2, #4]
 800381c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003820:	fb02 f201 	mul.w	r2, r2, r1
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	4618      	mov	r0, r3
 800382a:	f7fc fe17 	bl	800045c <__aeabi_ui2d>
 800382e:	a3a8      	add	r3, pc, #672	; (adr r3, 8003ad0 <Munmunbot_Protocol+0x860>)
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	f7fc fe8c 	bl	8000550 <__aeabi_dmul>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4610      	mov	r0, r2
 800383e:	4619      	mov	r1, r3
 8003840:	a3a5      	add	r3, pc, #660	; (adr r3, 8003ad8 <Munmunbot_Protocol+0x868>)
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	f7fc fe83 	bl	8000550 <__aeabi_dmul>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4614      	mov	r4, r2
 8003850:	461d      	mov	r5, r3
 8003852:	4ba7      	ldr	r3, [pc, #668]	; (8003af0 <Munmunbot_Protocol+0x880>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fc fe00 	bl	800045c <__aeabi_ui2d>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4620      	mov	r0, r4
 8003862:	4629      	mov	r1, r5
 8003864:	f7fc ff9e 	bl	80007a4 <__aeabi_ddiv>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4610      	mov	r0, r2
 800386e:	4619      	mov	r1, r3
 8003870:	f7fd f91e 	bl	8000ab0 <__aeabi_d2uiz>
 8003874:	4603      	mov	r3, r0
 8003876:	b29a      	uxth	r2, r3
 8003878:	4b9e      	ldr	r3, [pc, #632]	; (8003af4 <Munmunbot_Protocol+0x884>)
 800387a:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 800387c:	4b9d      	ldr	r3, [pc, #628]	; (8003af4 <Munmunbot_Protocol+0x884>)
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	0a1b      	lsrs	r3, r3, #8
 8003882:	b29a      	uxth	r2, r3
 8003884:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003888:	3301      	adds	r3, #1
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003890:	440b      	add	r3, r1
 8003892:	f803 2c28 	strb.w	r2, [r3, #-40]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8003896:	4b97      	ldr	r3, [pc, #604]	; (8003af4 <Munmunbot_Protocol+0x884>)
 8003898:	881a      	ldrh	r2, [r3, #0]
 800389a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800389e:	3302      	adds	r3, #2
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80038a6:	440b      	add	r3, r1
 80038a8:	f803 2c28 	strb.w	r2, [r3, #-40]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 80038ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038b4:	4413      	add	r3, r2
 80038b6:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 80038ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038be:	3301      	adds	r3, #1
 80038c0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80038c4:	440b      	add	r3, r1
 80038c6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038ca:	4413      	add	r3, r2
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038d2:	3302      	adds	r3, #2
 80038d4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80038d8:	440b      	add	r3, r1
 80038da:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038de:	4413      	add	r3, r2
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038e6:	3303      	adds	r3, #3
 80038e8:	43d2      	mvns	r2, r2
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80038f0:	440b      	add	r3, r1
 80038f2:	f803 2c28 	strb.w	r2, [r3, #-40]
							UARTTxWrite(uart, temp, 4+Shift);
 80038f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3304      	adds	r3, #4
 80038fe:	b29a      	uxth	r2, r3
 8003900:	f107 0310 	add.w	r3, r7, #16
 8003904:	4619      	mov	r1, r3
 8003906:	6838      	ldr	r0, [r7, #0]
 8003908:	f7ff fc46 	bl	8003198 <UARTTxWrite>
						}
						break;
 800390c:	e0c3      	b.n	8003a96 <Munmunbot_Protocol+0x826>

					case 11: /// Return Angular Velocity Max  ##Complete##
						{
							uint8_t temp[] =
 800390e:	4a7a      	ldr	r2, [pc, #488]	; (8003af8 <Munmunbot_Protocol+0x888>)
 8003910:	f107 0308 	add.w	r3, r7, #8
 8003914:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003918:	6018      	str	r0, [r3, #0]
 800391a:	3304      	adds	r3, #4
 800391c:	8019      	strh	r1, [r3, #0]
							{ 0x58, 0x75, 155, 0b0,  0b0, 0b0 };
							uint8_t Shift = 2;
 800391e:	2302      	movs	r3, #2
 8003920:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							float temp3 = ( abs( VelocityPIDController.OutputFeedback )*60.0 )/( ( float ) CUSSStruc.PPRxQEI );
 8003924:	4b75      	ldr	r3, [pc, #468]	; (8003afc <Munmunbot_Protocol+0x88c>)
 8003926:	edd3 7a08 	vldr	s15, [r3, #32]
 800392a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800392e:	ee17 3a90 	vmov	r3, s15
 8003932:	2b00      	cmp	r3, #0
 8003934:	bfb8      	it	lt
 8003936:	425b      	neglt	r3, r3
 8003938:	4618      	mov	r0, r3
 800393a:	f7fc fd9f 	bl	800047c <__aeabi_i2d>
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	4b6f      	ldr	r3, [pc, #444]	; (8003b00 <Munmunbot_Protocol+0x890>)
 8003944:	f7fc fe04 	bl	8000550 <__aeabi_dmul>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4614      	mov	r4, r2
 800394e:	461d      	mov	r5, r3
 8003950:	4b67      	ldr	r3, [pc, #412]	; (8003af0 <Munmunbot_Protocol+0x880>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	ee07 3a90 	vmov	s15, r3
 8003958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800395c:	ee17 0a90 	vmov	r0, s15
 8003960:	f7fc fd9e 	bl	80004a0 <__aeabi_f2d>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4620      	mov	r0, r4
 800396a:	4629      	mov	r1, r5
 800396c:	f7fc ff1a 	bl	80007a4 <__aeabi_ddiv>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4610      	mov	r0, r2
 8003976:	4619      	mov	r1, r3
 8003978:	f7fd f8ba 	bl	8000af0 <__aeabi_d2f>
 800397c:	4603      	mov	r3, r0
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
							DataForReturn = ( temp3 * 255.0 )/10.0;
 8003980:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003982:	f7fc fd8d 	bl	80004a0 <__aeabi_f2d>
 8003986:	a356      	add	r3, pc, #344	; (adr r3, 8003ae0 <Munmunbot_Protocol+0x870>)
 8003988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398c:	f7fc fde0 	bl	8000550 <__aeabi_dmul>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4610      	mov	r0, r2
 8003996:	4619      	mov	r1, r3
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	4b59      	ldr	r3, [pc, #356]	; (8003b04 <Munmunbot_Protocol+0x894>)
 800399e:	f7fc ff01 	bl	80007a4 <__aeabi_ddiv>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4610      	mov	r0, r2
 80039a8:	4619      	mov	r1, r3
 80039aa:	f7fd f881 	bl	8000ab0 <__aeabi_d2uiz>
 80039ae:	4603      	mov	r3, r0
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	4b50      	ldr	r3, [pc, #320]	; (8003af4 <Munmunbot_Protocol+0x884>)
 80039b4:	801a      	strh	r2, [r3, #0]
							temp[ 1+Shift ] = ( DataForReturn>>8 )&( 0xff );
 80039b6:	4b4f      	ldr	r3, [pc, #316]	; (8003af4 <Munmunbot_Protocol+0x884>)
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	b29a      	uxth	r2, r3
 80039be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039c2:	3301      	adds	r3, #1
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80039ca:	440b      	add	r3, r1
 80039cc:	f803 2c30 	strb.w	r2, [r3, #-48]
							temp[ 2+Shift ] = ( DataForReturn )&( 0xff );
 80039d0:	4b48      	ldr	r3, [pc, #288]	; (8003af4 <Munmunbot_Protocol+0x884>)
 80039d2:	881a      	ldrh	r2, [r3, #0]
 80039d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039d8:	3302      	adds	r3, #2
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80039e0:	440b      	add	r3, r1
 80039e2:	f803 2c30 	strb.w	r2, [r3, #-48]
							temp[ 3+Shift ] = ~( temp[ 0+Shift ]+temp[ 1+Shift ]+temp[ 2+Shift ] );
 80039e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039ea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80039ee:	4413      	add	r3, r2
 80039f0:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 80039f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039f8:	3301      	adds	r3, #1
 80039fa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80039fe:	440b      	add	r3, r1
 8003a00:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8003a04:	4413      	add	r3, r2
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a0c:	3302      	adds	r3, #2
 8003a0e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003a12:	440b      	add	r3, r1
 8003a14:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8003a18:	4413      	add	r3, r2
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a20:	3303      	adds	r3, #3
 8003a22:	43d2      	mvns	r2, r2
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003a2a:	440b      	add	r3, r1
 8003a2c:	f803 2c30 	strb.w	r2, [r3, #-48]
							UARTTxWrite( uart, temp, 4+Shift );
 8003a30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	3304      	adds	r3, #4
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	f107 0308 	add.w	r3, r7, #8
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6838      	ldr	r0, [r7, #0]
 8003a42:	f7ff fba9 	bl	8003198 <UARTTxWrite>
						}
						break;
 8003a46:	e026      	b.n	8003a96 <Munmunbot_Protocol+0x826>

					case 12:  //Enable Gripper
						if (Munmunbot_State == STATE_Idle)
 8003a48:	4b2f      	ldr	r3, [pc, #188]	; (8003b08 <Munmunbot_Protocol+0x898>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d102      	bne.n	8003a56 <Munmunbot_Protocol+0x7e6>
						{
							GripperEnable = 1;
 8003a50:	4b2e      	ldr	r3, [pc, #184]	; (8003b0c <Munmunbot_Protocol+0x89c>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003a56:	6838      	ldr	r0, [r7, #0]
 8003a58:	f7ff fbe6 	bl	8003228 <ACK1Return>
						break;
 8003a5c:	e01b      	b.n	8003a96 <Munmunbot_Protocol+0x826>
					case 13: //Disable Gripper
						if (Munmunbot_State == STATE_Idle)
 8003a5e:	4b2a      	ldr	r3, [pc, #168]	; (8003b08 <Munmunbot_Protocol+0x898>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d102      	bne.n	8003a6c <Munmunbot_Protocol+0x7fc>
						{
							GripperEnable = 0;
 8003a66:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <Munmunbot_Protocol+0x89c>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003a6c:	6838      	ldr	r0, [r7, #0]
 8003a6e:	f7ff fbdb 	bl	8003228 <ACK1Return>
						break;
 8003a72:	e010      	b.n	8003a96 <Munmunbot_Protocol+0x826>

					case 14: /// Sethome  ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003a74:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <Munmunbot_Protocol+0x898>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d107      	bne.n	8003a8c <Munmunbot_Protocol+0x81c>
						{
							Munmunbot_State = STATE_SetHome;
 8003a7c:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <Munmunbot_Protocol+0x898>)
 8003a7e:	2208      	movs	r2, #8
 8003a80:	701a      	strb	r2, [r3, #0]
							SethomeMode = SetHomeState_0;
 8003a82:	4b23      	ldr	r3, [pc, #140]	; (8003b10 <Munmunbot_Protocol+0x8a0>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
							PID_Reset();
 8003a88:	f000 f850 	bl	8003b2c <PID_Reset>
						}
						ACK1Return(uart);
 8003a8c:	6838      	ldr	r0, [r7, #0]
 8003a8e:	f7ff fbcb 	bl	8003228 <ACK1Return>
						break;
 8003a92:	e000      	b.n	8003a96 <Munmunbot_Protocol+0x826>
				    }
			   }
 8003a94:	bf00      	nop
			n_station = 0;
 8003a96:	4b1f      	ldr	r3, [pc, #124]	; (8003b14 <Munmunbot_Protocol+0x8a4>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	801a      	strh	r2, [r3, #0]
			ProtocolMode = 0;
 8003a9c:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <Munmunbot_Protocol+0x8a8>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	701a      	strb	r2, [r3, #0]
			parameter_ptr = 0;
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <Munmunbot_Protocol+0x8ac>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	701a      	strb	r2, [r3, #0]
			Data_HAck = 0;
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <Munmunbot_Protocol+0x8b0>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	801a      	strh	r2, [r3, #0]
			CheckSum = 0;
 8003aae:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <Munmunbot_Protocol+0x8b4>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
			Munmunbot_Protocol_State = PP_STARTandMode;
 8003ab4:	4b1c      	ldr	r3, [pc, #112]	; (8003b28 <Munmunbot_Protocol+0x8b8>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
			break;
 8003aba:	e002      	b.n	8003ac2 <Munmunbot_Protocol+0x852>
			break;
 8003abc:	bf00      	nop
 8003abe:	e000      	b.n	8003ac2 <Munmunbot_Protocol+0x852>
				break;
 8003ac0:	bf00      	nop
			}
	}
}
 8003ac2:	bf00      	nop
 8003ac4:	3738      	adds	r7, #56	; 0x38
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bdb0      	pop	{r4, r5, r7, pc}
 8003aca:	bf00      	nop
 8003acc:	f3af 8000 	nop.w
 8003ad0:	9ba5e354 	.word	0x9ba5e354
 8003ad4:	400920c4 	.word	0x400920c4
 8003ad8:	00000000 	.word	0x00000000
 8003adc:	40c38800 	.word	0x40c38800
 8003ae0:	00000000 	.word	0x00000000
 8003ae4:	406fe000 	.word	0x406fe000
 8003ae8:	0800a34c 	.word	0x0800a34c
 8003aec:	2000063c 	.word	0x2000063c
 8003af0:	20000398 	.word	0x20000398
 8003af4:	200004d2 	.word	0x200004d2
 8003af8:	0800a354 	.word	0x0800a354
 8003afc:	20000248 	.word	0x20000248
 8003b00:	404e0000 	.word	0x404e0000
 8003b04:	40240000 	.word	0x40240000
 8003b08:	200000d9 	.word	0x200000d9
 8003b0c:	200001ea 	.word	0x200001ea
 8003b10:	200000da 	.word	0x200000da
 8003b14:	200004cc 	.word	0x200004cc
 8003b18:	200003c8 	.word	0x200003c8
 8003b1c:	200004d0 	.word	0x200004d0
 8003b20:	200003ca 	.word	0x200003ca
 8003b24:	200003c4 	.word	0x200003c4
 8003b28:	200000d8 	.word	0x200000d8

08003b2c <PID_Reset>:

void PID_Reset()
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
	PositionPIDController.PreviousError = 0;
 8003b30:	4b32      	ldr	r3, [pc, #200]	; (8003bfc <PID_Reset+0xd0>)
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	62da      	str	r2, [r3, #44]	; 0x2c
	PositionPIDController.Integral_Value = 0;
 8003b38:	4b30      	ldr	r3, [pc, #192]	; (8003bfc <PID_Reset+0xd0>)
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	625a      	str	r2, [r3, #36]	; 0x24
	PositionPIDController.ControllerOutput = 0;
 8003b40:	4b2e      	ldr	r3, [pc, #184]	; (8003bfc <PID_Reset+0xd0>)
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	615a      	str	r2, [r3, #20]
	PositionPIDController.NowError = 0;
 8003b48:	4b2c      	ldr	r3, [pc, #176]	; (8003bfc <PID_Reset+0xd0>)
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28
	PositionPIDController.PreviousPreviousError = 0;
 8003b50:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <PID_Reset+0xd0>)
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
	PositionPIDController.PreviousControllerOutput = 0;
 8003b58:	4b28      	ldr	r3, [pc, #160]	; (8003bfc <PID_Reset+0xd0>)
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	619a      	str	r2, [r3, #24]


	VelocityPIDController.PreviousError = 0;
 8003b60:	4b27      	ldr	r3, [pc, #156]	; (8003c00 <PID_Reset+0xd4>)
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	62da      	str	r2, [r3, #44]	; 0x2c
	VelocityPIDController.Integral_Value = 0;
 8003b68:	4b25      	ldr	r3, [pc, #148]	; (8003c00 <PID_Reset+0xd4>)
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24
	VelocityPIDController.ControllerOutput = 0;
 8003b70:	4b23      	ldr	r3, [pc, #140]	; (8003c00 <PID_Reset+0xd4>)
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	615a      	str	r2, [r3, #20]
	VelocityPIDController.NowError = 0;
 8003b78:	4b21      	ldr	r3, [pc, #132]	; (8003c00 <PID_Reset+0xd4>)
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28
	VelocityPIDController.PreviousPreviousError = 0;
 8003b80:	4b1f      	ldr	r3, [pc, #124]	; (8003c00 <PID_Reset+0xd4>)
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
	VelocityPIDController.PreviousControllerOutput = 0;
 8003b88:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <PID_Reset+0xd4>)
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	619a      	str	r2, [r3, #24]

	StabilizerPIDController.PreviousError = 0;
 8003b90:	4b1c      	ldr	r3, [pc, #112]	; (8003c04 <PID_Reset+0xd8>)
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	62da      	str	r2, [r3, #44]	; 0x2c
	StabilizerPIDController.Integral_Value = 0;
 8003b98:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <PID_Reset+0xd8>)
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	625a      	str	r2, [r3, #36]	; 0x24
	StabilizerPIDController.ControllerOutput = 0;
 8003ba0:	4b18      	ldr	r3, [pc, #96]	; (8003c04 <PID_Reset+0xd8>)
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	615a      	str	r2, [r3, #20]
	StabilizerPIDController.NowError = 0;
 8003ba8:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <PID_Reset+0xd8>)
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	629a      	str	r2, [r3, #40]	; 0x28
	StabilizerPIDController.PreviousPreviousError = 0;
 8003bb0:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <PID_Reset+0xd8>)
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	631a      	str	r2, [r3, #48]	; 0x30
	StabilizerPIDController.PreviousControllerOutput = 0;
 8003bb8:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <PID_Reset+0xd8>)
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	619a      	str	r2, [r3, #24]

	PureVelocityPIDController.PreviousError = 0;
 8003bc0:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <PID_Reset+0xdc>)
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c
	PureVelocityPIDController.Integral_Value = 0;
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <PID_Reset+0xdc>)
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24
	PureVelocityPIDController.ControllerOutput = 0;
 8003bd0:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <PID_Reset+0xdc>)
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	615a      	str	r2, [r3, #20]
	PureVelocityPIDController.NowError = 0;
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <PID_Reset+0xdc>)
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	629a      	str	r2, [r3, #40]	; 0x28
	PureVelocityPIDController.PreviousPreviousError = 0;
 8003be0:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <PID_Reset+0xdc>)
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
	PureVelocityPIDController.PreviousControllerOutput = 0;
 8003be8:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <PID_Reset+0xdc>)
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	619a      	str	r2, [r3, #24]
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20000208 	.word	0x20000208
 8003c00:	20000248 	.word	0x20000248
 8003c04:	200002c8 	.word	0x200002c8
 8003c08:	20000288 	.word	0x20000288

08003c0c <LAMP_ON>:

void LAMP_ON(uint8_t lampnumber)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	71fb      	strb	r3, [r7, #7]
	if (lampnumber == 0)
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d110      	bne.n	8003c3e <LAMP_ON+0x32>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	2102      	movs	r1, #2
 8003c20:	4830      	ldr	r0, [pc, #192]	; (8003ce4 <LAMP_ON+0xd8>)
 8003c22:	f001 fd4f 	bl	80056c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003c26:	2201      	movs	r2, #1
 8003c28:	2104      	movs	r1, #4
 8003c2a:	482e      	ldr	r0, [pc, #184]	; (8003ce4 <LAMP_ON+0xd8>)
 8003c2c:	f001 fd4a 	bl	80056c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003c30:	2201      	movs	r2, #1
 8003c32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c36:	482c      	ldr	r0, [pc, #176]	; (8003ce8 <LAMP_ON+0xdc>)
 8003c38:	f001 fd44 	bl	80056c4 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
	}
}
 8003c3c:	e04e      	b.n	8003cdc <LAMP_ON+0xd0>
	else if (lampnumber == 1)
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d110      	bne.n	8003c66 <LAMP_ON+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8003c44:	2200      	movs	r2, #0
 8003c46:	2102      	movs	r1, #2
 8003c48:	4826      	ldr	r0, [pc, #152]	; (8003ce4 <LAMP_ON+0xd8>)
 8003c4a:	f001 fd3b 	bl	80056c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003c4e:	2201      	movs	r2, #1
 8003c50:	2104      	movs	r1, #4
 8003c52:	4824      	ldr	r0, [pc, #144]	; (8003ce4 <LAMP_ON+0xd8>)
 8003c54:	f001 fd36 	bl	80056c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c5e:	4822      	ldr	r0, [pc, #136]	; (8003ce8 <LAMP_ON+0xdc>)
 8003c60:	f001 fd30 	bl	80056c4 <HAL_GPIO_WritePin>
}
 8003c64:	e03a      	b.n	8003cdc <LAMP_ON+0xd0>
	else if (lampnumber == 2)
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d110      	bne.n	8003c8e <LAMP_ON+0x82>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	2102      	movs	r1, #2
 8003c70:	481c      	ldr	r0, [pc, #112]	; (8003ce4 <LAMP_ON+0xd8>)
 8003c72:	f001 fd27 	bl	80056c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8003c76:	2200      	movs	r2, #0
 8003c78:	2104      	movs	r1, #4
 8003c7a:	481a      	ldr	r0, [pc, #104]	; (8003ce4 <LAMP_ON+0xd8>)
 8003c7c:	f001 fd22 	bl	80056c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003c80:	2201      	movs	r2, #1
 8003c82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c86:	4818      	ldr	r0, [pc, #96]	; (8003ce8 <LAMP_ON+0xdc>)
 8003c88:	f001 fd1c 	bl	80056c4 <HAL_GPIO_WritePin>
}
 8003c8c:	e026      	b.n	8003cdc <LAMP_ON+0xd0>
	else if (lampnumber == 3)
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d110      	bne.n	8003cb6 <LAMP_ON+0xaa>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003c94:	2201      	movs	r2, #1
 8003c96:	2102      	movs	r1, #2
 8003c98:	4812      	ldr	r0, [pc, #72]	; (8003ce4 <LAMP_ON+0xd8>)
 8003c9a:	f001 fd13 	bl	80056c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	2104      	movs	r1, #4
 8003ca2:	4810      	ldr	r0, [pc, #64]	; (8003ce4 <LAMP_ON+0xd8>)
 8003ca4:	f001 fd0e 	bl	80056c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cae:	480e      	ldr	r0, [pc, #56]	; (8003ce8 <LAMP_ON+0xdc>)
 8003cb0:	f001 fd08 	bl	80056c4 <HAL_GPIO_WritePin>
}
 8003cb4:	e012      	b.n	8003cdc <LAMP_ON+0xd0>
	else if (lampnumber == 4)
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d10f      	bne.n	8003cdc <LAMP_ON+0xd0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2102      	movs	r1, #2
 8003cc0:	4808      	ldr	r0, [pc, #32]	; (8003ce4 <LAMP_ON+0xd8>)
 8003cc2:	f001 fcff 	bl	80056c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2104      	movs	r1, #4
 8003cca:	4806      	ldr	r0, [pc, #24]	; (8003ce4 <LAMP_ON+0xd8>)
 8003ccc:	f001 fcfa 	bl	80056c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cd6:	4804      	ldr	r0, [pc, #16]	; (8003ce8 <LAMP_ON+0xdc>)
 8003cd8:	f001 fcf4 	bl	80056c4 <HAL_GPIO_WritePin>
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40020400 	.word	0x40020400
 8003ce8:	40020000 	.word	0x40020000

08003cec <Emergency_switch_trigger>:

void Emergency_switch_trigger()
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1)
 8003cf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cf4:	481f      	ldr	r0, [pc, #124]	; (8003d74 <Emergency_switch_trigger+0x88>)
 8003cf6:	f001 fccd 	bl	8005694 <HAL_GPIO_ReadPin>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d136      	bne.n	8003d6e <Emergency_switch_trigger+0x82>
	{
		// Reset State Machine All
		Munmunbot_State = STATE_Disconnected;
 8003d00:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <Emergency_switch_trigger+0x8c>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	701a      	strb	r2, [r3, #0]
		MovingLinkMode = LMM_Not_Set;
 8003d06:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <Emergency_switch_trigger+0x90>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]
		SethomeMode = SetHomeState_0;
 8003d0c:	4b1c      	ldr	r3, [pc, #112]	; (8003d80 <Emergency_switch_trigger+0x94>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]
		TrjStruc.Mode = 0;
 8003d12:	4b1c      	ldr	r3, [pc, #112]	; (8003d84 <Emergency_switch_trigger+0x98>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		TrjStruc.Submode = 0;
 8003d1a:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <Emergency_switch_trigger+0x98>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

		// Send back ACK to User-interface
		if ((Munmunbot_State == STATE_Calculation) || (Munmunbot_State == STATE_PrepareDATA) ||
 8003d22:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <Emergency_switch_trigger+0x8c>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d00b      	beq.n	8003d42 <Emergency_switch_trigger+0x56>
 8003d2a:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <Emergency_switch_trigger+0x8c>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d007      	beq.n	8003d42 <Emergency_switch_trigger+0x56>
				(Munmunbot_State == STATE_Link_Moving) || (Munmunbot_State == STATE_End_Effector_Working))
 8003d32:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <Emergency_switch_trigger+0x8c>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
		if ((Munmunbot_State == STATE_Calculation) || (Munmunbot_State == STATE_PrepareDATA) ||
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d003      	beq.n	8003d42 <Emergency_switch_trigger+0x56>
				(Munmunbot_State == STATE_Link_Moving) || (Munmunbot_State == STATE_End_Effector_Working))
 8003d3a:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <Emergency_switch_trigger+0x8c>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b07      	cmp	r3, #7
 8003d40:	d102      	bne.n	8003d48 <Emergency_switch_trigger+0x5c>
		{
			ACK2Return(&UART2);
 8003d42:	4811      	ldr	r0, [pc, #68]	; (8003d88 <Emergency_switch_trigger+0x9c>)
 8003d44:	f7ff fa82 	bl	800324c <ACK2Return>
		}

		// Reset variable
		NumberOfStationToGo = 0;
 8003d48:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <Emergency_switch_trigger+0xa0>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	701a      	strb	r2, [r3, #0]
		NumberOfStationPTR = 0;
 8003d4e:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <Emergency_switch_trigger+0xa4>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
		Moving_Link_Task_Flag = 0;
 8003d54:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <Emergency_switch_trigger+0xa8>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	701a      	strb	r2, [r3, #0]

		// Stop the Motor
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003d5a:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <Emergency_switch_trigger+0xac>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	635a      	str	r2, [r3, #52]	; 0x34
		TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8003d62:	4b0e      	ldr	r3, [pc, #56]	; (8003d9c <Emergency_switch_trigger+0xb0>)
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	4a07      	ldr	r2, [pc, #28]	; (8003d84 <Emergency_switch_trigger+0x98>)
 8003d68:	66d3      	str	r3, [r2, #108]	; 0x6c

		PID_Reset();
 8003d6a:	f7ff fedf 	bl	8003b2c <PID_Reset>
	}
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40020400 	.word	0x40020400
 8003d78:	200000d9 	.word	0x200000d9
 8003d7c:	200001de 	.word	0x200001de
 8003d80:	200000da 	.word	0x200000da
 8003d84:	20000308 	.word	0x20000308
 8003d88:	200000b8 	.word	0x200000b8
 8003d8c:	200001e0 	.word	0x200001e0
 8003d90:	200001e1 	.word	0x200001e1
 8003d94:	200001e8 	.word	0x200001e8
 8003d98:	20000594 	.word	0x20000594
 8003d9c:	20000208 	.word	0x20000208

08003da0 <Controlling_the_LINK>:

void Controlling_the_LINK()
{
 8003da0:	b5b0      	push	{r4, r5, r7, lr}
 8003da2:	af00      	add	r7, sp, #0
	  // GEN Trajectory
	  TrajectoryGenerationProcess();
 8003da4:	f7fe fba8 	bl	80024f8 <TrajectoryGenerationProcess>
	  EncoderVelocityAndPosition_Update();
 8003da8:	f7fd fe4a 	bl	8001a40 <EncoderVelocityAndPosition_Update>
	  PIDController2in1();  ///use only position
 8003dac:	f7fe ff96 	bl	8002cdc <PIDController2in1>
//	  Plant_input = PositionPIDController.ControllerOutput;
	  Plant_input = VelocityPIDController.ControllerOutput;
 8003db0:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <Controlling_the_LINK+0xb8>)
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	4a29      	ldr	r2, [pc, #164]	; (8003e5c <Controlling_the_LINK+0xbc>)
 8003db6:	6013      	str	r3, [r2, #0]

	  if (Plant_input >= 0) /// Setting DIR
 8003db8:	4b28      	ldr	r3, [pc, #160]	; (8003e5c <Controlling_the_LINK+0xbc>)
 8003dba:	edd3 7a00 	vldr	s15, [r3]
 8003dbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc6:	db0c      	blt.n	8003de2 <Controlling_the_LINK+0x42>
	  {
		  DCMotorStruc.DIR = 1;
 8003dc8:	4b25      	ldr	r3, [pc, #148]	; (8003e60 <Controlling_the_LINK+0xc0>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input);
 8003dce:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <Controlling_the_LINK+0xbc>)
 8003dd0:	edd3 7a00 	vldr	s15, [r3]
 8003dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dd8:	ee17 2a90 	vmov	r2, s15
 8003ddc:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <Controlling_the_LINK+0xc0>)
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	e01b      	b.n	8003e1a <Controlling_the_LINK+0x7a>
	  }
	  else if (Plant_input < 0)
 8003de2:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <Controlling_the_LINK+0xbc>)
 8003de4:	edd3 7a00 	vldr	s15, [r3]
 8003de8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df0:	d513      	bpl.n	8003e1a <Controlling_the_LINK+0x7a>
	  {
		  DCMotorStruc.DIR = 0;
 8003df2:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <Controlling_the_LINK+0xc0>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input * -1.0);
 8003df8:	4b18      	ldr	r3, [pc, #96]	; (8003e5c <Controlling_the_LINK+0xbc>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fc fb4f 	bl	80004a0 <__aeabi_f2d>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4614      	mov	r4, r2
 8003e08:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	4629      	mov	r1, r5
 8003e10:	f7fc fe4e 	bl	8000ab0 <__aeabi_d2uiz>
 8003e14:	4603      	mov	r3, r0
 8003e16:	4a12      	ldr	r2, [pc, #72]	; (8003e60 <Controlling_the_LINK+0xc0>)
 8003e18:	6053      	str	r3, [r2, #4]
	  }

	  if (DCMotorStruc.PWMOut > 10000)   /// Saturation Output
 8003e1a:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <Controlling_the_LINK+0xc0>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d903      	bls.n	8003e2e <Controlling_the_LINK+0x8e>
	  {
		 DCMotorStruc.PWMOut = 10000;
 8003e26:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <Controlling_the_LINK+0xc0>)
 8003e28:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e2c:	605a      	str	r2, [r3, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 8003e2e:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <Controlling_the_LINK+0xc0>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	2180      	movs	r1, #128	; 0x80
 8003e36:	480b      	ldr	r0, [pc, #44]	; (8003e64 <Controlling_the_LINK+0xc4>)
 8003e38:	f001 fc44 	bl	80056c4 <HAL_GPIO_WritePin>

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut); ///Setting PWM Pin
 8003e3c:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <Controlling_the_LINK+0xc8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a07      	ldr	r2, [pc, #28]	; (8003e60 <Controlling_the_LINK+0xc0>)
 8003e42:	6852      	ldr	r2, [r2, #4]
 8003e44:	635a      	str	r2, [r3, #52]	; 0x34
	  TrjStruc.Loop_Timestamp = micros();
 8003e46:	f7fd ff09 	bl	8001c5c <micros>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4907      	ldr	r1, [pc, #28]	; (8003e6c <Controlling_the_LINK+0xcc>)
 8003e50:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8003e54:	bf00      	nop
 8003e56:	bdb0      	pop	{r4, r5, r7, pc}
 8003e58:	20000248 	.word	0x20000248
 8003e5c:	200001e4 	.word	0x200001e4
 8003e60:	200000d0 	.word	0x200000d0
 8003e64:	40020800 	.word	0x40020800
 8003e68:	20000594 	.word	0x20000594
 8003e6c:	20000308 	.word	0x20000308

08003e70 <HackTheLink>:
		TrjStruc.Loop_Timestamp = micros();
	}
}

void HackTheLink( float Position )
{
 8003e70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	ed87 0a01 	vstr	s0, [r7, #4]
	if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8003e7c:	f7fd feee 	bl	8001c5c <micros>
 8003e80:	4b57      	ldr	r3, [pc, #348]	; (8003fe0 <HackTheLink+0x170>)
 8003e82:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003e86:	1a84      	subs	r4, r0, r2
 8003e88:	eb61 0503 	sbc.w	r5, r1, r3
 8003e8c:	4b54      	ldr	r3, [pc, #336]	; (8003fe0 <HackTheLink+0x170>)
 8003e8e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003e92:	429d      	cmp	r5, r3
 8003e94:	bf08      	it	eq
 8003e96:	4294      	cmpeq	r4, r2
 8003e98:	f0c0 809c 	bcc.w	8003fd4 <HackTheLink+0x164>
	{
		TrjStruc.AngularDisplacementDesire = Position;
 8003e9c:	4a50      	ldr	r2, [pc, #320]	; (8003fe0 <HackTheLink+0x170>)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6213      	str	r3, [r2, #32]
		EncoderVelocityAndPosition_Update();
 8003ea2:	f7fd fdcd 	bl	8001a40 <EncoderVelocityAndPosition_Update>

		if ((PositionPIDController.OutputFeedback <= Position + AcceptableError) &&
 8003ea6:	4b4f      	ldr	r3, [pc, #316]	; (8003fe4 <HackTheLink+0x174>)
 8003ea8:	ed93 7a08 	vldr	s14, [r3, #32]
 8003eac:	4b4e      	ldr	r3, [pc, #312]	; (8003fe8 <HackTheLink+0x178>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	ee07 3a90 	vmov	s15, r3
 8003eb4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003eb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ebc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ec0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec8:	d811      	bhi.n	8003eee <HackTheLink+0x7e>
				(PositionPIDController.OutputFeedback >= Position - AcceptableError))
 8003eca:	4b46      	ldr	r3, [pc, #280]	; (8003fe4 <HackTheLink+0x174>)
 8003ecc:	ed93 7a08 	vldr	s14, [r3, #32]
 8003ed0:	4b45      	ldr	r3, [pc, #276]	; (8003fe8 <HackTheLink+0x178>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	ee07 3a90 	vmov	s15, r3
 8003ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003edc:	edd7 6a01 	vldr	s13, [r7, #4]
 8003ee0:	ee76 7ae7 	vsub.f32	s15, s13, s15
		if ((PositionPIDController.OutputFeedback <= Position + AcceptableError) &&
 8003ee4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eec:	da1e      	bge.n	8003f2c <HackTheLink+0xbc>
		{
//			Plant_input = 1500;
		}
		else if ( Position - PositionPIDController.OutputFeedback >= 0)
 8003eee:	4b3d      	ldr	r3, [pc, #244]	; (8003fe4 <HackTheLink+0x174>)
 8003ef0:	edd3 7a08 	vldr	s15, [r3, #32]
 8003ef4:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003efc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f04:	db03      	blt.n	8003f0e <HackTheLink+0x9e>
		{
			TrjStruc.AngularVelocityDesire = 0.5*(8192.0/60.0);
 8003f06:	4b36      	ldr	r3, [pc, #216]	; (8003fe0 <HackTheLink+0x170>)
 8003f08:	4a38      	ldr	r2, [pc, #224]	; (8003fec <HackTheLink+0x17c>)
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24
 8003f0c:	e00e      	b.n	8003f2c <HackTheLink+0xbc>
		}
		else if ( Position - PositionPIDController.OutputFeedback < 0)
 8003f0e:	4b35      	ldr	r3, [pc, #212]	; (8003fe4 <HackTheLink+0x174>)
 8003f10:	edd3 7a08 	vldr	s15, [r3, #32]
 8003f14:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f24:	d502      	bpl.n	8003f2c <HackTheLink+0xbc>
		{
			TrjStruc.AngularVelocityDesire = -0.5*(8192.0/60.0);
 8003f26:	4b2e      	ldr	r3, [pc, #184]	; (8003fe0 <HackTheLink+0x170>)
 8003f28:	4a31      	ldr	r2, [pc, #196]	; (8003ff0 <HackTheLink+0x180>)
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24
		}
		PureVeloPID();
 8003f2c:	f7fe ffde 	bl	8002eec <PureVeloPID>
		Plant_input = PureVelocityPIDController.ControllerOutput;
 8003f30:	4b30      	ldr	r3, [pc, #192]	; (8003ff4 <HackTheLink+0x184>)
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	4a30      	ldr	r2, [pc, #192]	; (8003ff8 <HackTheLink+0x188>)
 8003f36:	6013      	str	r3, [r2, #0]

		if (Plant_input >= 0) /// Setting DIR
 8003f38:	4b2f      	ldr	r3, [pc, #188]	; (8003ff8 <HackTheLink+0x188>)
 8003f3a:	edd3 7a00 	vldr	s15, [r3]
 8003f3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f46:	db0c      	blt.n	8003f62 <HackTheLink+0xf2>
		{
		  DCMotorStruc.DIR = 1;
 8003f48:	4b2c      	ldr	r3, [pc, #176]	; (8003ffc <HackTheLink+0x18c>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input);
 8003f4e:	4b2a      	ldr	r3, [pc, #168]	; (8003ff8 <HackTheLink+0x188>)
 8003f50:	edd3 7a00 	vldr	s15, [r3]
 8003f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f58:	ee17 2a90 	vmov	r2, s15
 8003f5c:	4b27      	ldr	r3, [pc, #156]	; (8003ffc <HackTheLink+0x18c>)
 8003f5e:	605a      	str	r2, [r3, #4]
 8003f60:	e01b      	b.n	8003f9a <HackTheLink+0x12a>
		}
		else if (Plant_input < 0)
 8003f62:	4b25      	ldr	r3, [pc, #148]	; (8003ff8 <HackTheLink+0x188>)
 8003f64:	edd3 7a00 	vldr	s15, [r3]
 8003f68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f70:	d513      	bpl.n	8003f9a <HackTheLink+0x12a>
		{
		  DCMotorStruc.DIR = 0;
 8003f72:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <HackTheLink+0x18c>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input * -1.0);
 8003f78:	4b1f      	ldr	r3, [pc, #124]	; (8003ff8 <HackTheLink+0x188>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc fa8f 	bl	80004a0 <__aeabi_f2d>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4690      	mov	r8, r2
 8003f88:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003f8c:	4640      	mov	r0, r8
 8003f8e:	4649      	mov	r1, r9
 8003f90:	f7fc fd8e 	bl	8000ab0 <__aeabi_d2uiz>
 8003f94:	4603      	mov	r3, r0
 8003f96:	4a19      	ldr	r2, [pc, #100]	; (8003ffc <HackTheLink+0x18c>)
 8003f98:	6053      	str	r3, [r2, #4]
		}

		if (DCMotorStruc.PWMOut > 10000)   /// Saturation Output
 8003f9a:	4b18      	ldr	r3, [pc, #96]	; (8003ffc <HackTheLink+0x18c>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d903      	bls.n	8003fae <HackTheLink+0x13e>
		{
		 DCMotorStruc.PWMOut = 10000;
 8003fa6:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <HackTheLink+0x18c>)
 8003fa8:	f242 7210 	movw	r2, #10000	; 0x2710
 8003fac:	605a      	str	r2, [r3, #4]
		}

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 8003fae:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <HackTheLink+0x18c>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2180      	movs	r1, #128	; 0x80
 8003fb6:	4812      	ldr	r0, [pc, #72]	; (8004000 <HackTheLink+0x190>)
 8003fb8:	f001 fb84 	bl	80056c4 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut); ///Setting PWM Pin
 8003fbc:	4b11      	ldr	r3, [pc, #68]	; (8004004 <HackTheLink+0x194>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a0e      	ldr	r2, [pc, #56]	; (8003ffc <HackTheLink+0x18c>)
 8003fc2:	6852      	ldr	r2, [r2, #4]
 8003fc4:	635a      	str	r2, [r3, #52]	; 0x34
		TrjStruc.Loop_Timestamp = micros();
 8003fc6:	f7fd fe49 	bl	8001c5c <micros>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4904      	ldr	r1, [pc, #16]	; (8003fe0 <HackTheLink+0x170>)
 8003fd0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	}
}
 8003fd4:	bf00      	nop
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000308 	.word	0x20000308
 8003fe4:	20000208 	.word	0x20000208
 8003fe8:	20000014 	.word	0x20000014
 8003fec:	42888889 	.word	0x42888889
 8003ff0:	c2888889 	.word	0xc2888889
 8003ff4:	20000288 	.word	0x20000288
 8003ff8:	200001e4 	.word	0x200001e4
 8003ffc:	200000d0 	.word	0x200000d0
 8004000:	40020800 	.word	0x40020800
 8004004:	20000594 	.word	0x20000594

08004008 <SETHOME_StateMachine_Function>:

void SETHOME_StateMachine_Function()
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
	switch (SethomeMode)
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <SETHOME_StateMachine_Function+0x74>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d013      	beq.n	800403c <SETHOME_StateMachine_Function+0x34>
 8004014:	2b02      	cmp	r3, #2
 8004016:	dc2e      	bgt.n	8004076 <SETHOME_StateMachine_Function+0x6e>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <SETHOME_StateMachine_Function+0x18>
 800401c:	2b01      	cmp	r3, #1
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2700);
			SethomeMode = SetHomeState_1;
			break;
		case SetHomeState_1:
			break;
 800401e:	e02a      	b.n	8004076 <SETHOME_StateMachine_Function+0x6e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8004020:	2200      	movs	r2, #0
 8004022:	2180      	movs	r1, #128	; 0x80
 8004024:	4816      	ldr	r0, [pc, #88]	; (8004080 <SETHOME_StateMachine_Function+0x78>)
 8004026:	f001 fb4d 	bl	80056c4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2700);
 800402a:	4b16      	ldr	r3, [pc, #88]	; (8004084 <SETHOME_StateMachine_Function+0x7c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f640 228c 	movw	r2, #2700	; 0xa8c
 8004032:	635a      	str	r2, [r3, #52]	; 0x34
			SethomeMode = SetHomeState_1;
 8004034:	4b11      	ldr	r3, [pc, #68]	; (800407c <SETHOME_StateMachine_Function+0x74>)
 8004036:	2201      	movs	r2, #1
 8004038:	701a      	strb	r2, [r3, #0]
			break;
 800403a:	e01c      	b.n	8004076 <SETHOME_StateMachine_Function+0x6e>
		case SetHomeState_2:
			Munmunbot_State = STATE_Idle;
 800403c:	4b12      	ldr	r3, [pc, #72]	; (8004088 <SETHOME_StateMachine_Function+0x80>)
 800403e:	2201      	movs	r2, #1
 8004040:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 8004042:	4b12      	ldr	r3, [pc, #72]	; (800408c <SETHOME_StateMachine_Function+0x84>)
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8004048:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <SETHOME_StateMachine_Function+0x7c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2200      	movs	r2, #0
 800404e:	635a      	str	r2, [r3, #52]	; 0x34
			TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
 8004050:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <SETHOME_StateMachine_Function+0x88>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405e:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <SETHOME_StateMachine_Function+0x8c>)
 8004060:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			Moving_Link_Task_Flag = 0;
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <SETHOME_StateMachine_Function+0x90>)
 8004066:	2200      	movs	r2, #0
 8004068:	701a      	strb	r2, [r3, #0]
			sethomeTrigger = 1;
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <SETHOME_StateMachine_Function+0x94>)
 800406c:	2201      	movs	r2, #1
 800406e:	701a      	strb	r2, [r3, #0]
			PID_Reset();
 8004070:	f7ff fd5c 	bl	8003b2c <PID_Reset>

			break;
 8004074:	bf00      	nop

     }

}
 8004076:	bf00      	nop
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	200000da 	.word	0x200000da
 8004080:	40020800 	.word	0x40020800
 8004084:	20000594 	.word	0x20000594
 8004088:	200000d9 	.word	0x200000d9
 800408c:	200001de 	.word	0x200001de
 8004090:	2000063c 	.word	0x2000063c
 8004094:	20000308 	.word	0x20000308
 8004098:	200001e8 	.word	0x200001e8
 800409c:	200001e9 	.word	0x200001e9

080040a0 <UpdateMunmunBotState>:

void UpdateMunmunBotState()
{
 80040a0:	b5b0      	push	{r4, r5, r7, lr}
 80040a2:	af00      	add	r7, sp, #0
	if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 80040a4:	f7fd fdda 	bl	8001c5c <micros>
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <UpdateMunmunBotState+0x38>)
 80040aa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80040ae:	1a84      	subs	r4, r0, r2
 80040b0:	eb61 0503 	sbc.w	r5, r1, r3
 80040b4:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <UpdateMunmunBotState+0x38>)
 80040b6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80040ba:	429d      	cmp	r5, r3
 80040bc:	bf08      	it	eq
 80040be:	4294      	cmpeq	r4, r2
 80040c0:	d308      	bcc.n	80040d4 <UpdateMunmunBotState+0x34>
	{
		EncoderVelocityAndPosition_Update();
 80040c2:	f7fd fcbd 	bl	8001a40 <EncoderVelocityAndPosition_Update>
		TrjStruc.Loop_Timestamp = micros();
 80040c6:	f7fd fdc9 	bl	8001c5c <micros>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4902      	ldr	r1, [pc, #8]	; (80040d8 <UpdateMunmunBotState+0x38>)
 80040d0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	}
}
 80040d4:	bf00      	nop
 80040d6:	bdb0      	pop	{r4, r5, r7, pc}
 80040d8:	20000308 	.word	0x20000308
 80040dc:	00000000 	.word	0x00000000

080040e0 <EndEffectorWorkingState>:

void EndEffectorWorkingState()
{
 80040e0:	b5b0      	push	{r4, r5, r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
	  if(GripperEnable == 1)
 80040e6:	4b62      	ldr	r3, [pc, #392]	; (8004270 <EndEffectorWorkingState+0x190>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	f040 80b0 	bne.w	8004250 <EndEffectorWorkingState+0x170>
	  {
		if (GripperState == 0)
 80040f0:	4b60      	ldr	r3, [pc, #384]	; (8004274 <EndEffectorWorkingState+0x194>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d112      	bne.n	800411e <EndEffectorWorkingState+0x3e>
		{
			{
				uint8_t temp[1] = {0x45};
 80040f8:	2345      	movs	r3, #69	; 0x45
 80040fa:	713b      	strb	r3, [r7, #4]
				HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
 80040fc:	1d3a      	adds	r2, r7, #4
 80040fe:	2301      	movs	r3, #1
 8004100:	2146      	movs	r1, #70	; 0x46
 8004102:	485d      	ldr	r0, [pc, #372]	; (8004278 <EndEffectorWorkingState+0x198>)
 8004104:	f001 fc54 	bl	80059b0 <HAL_I2C_Master_Transmit_IT>
			}
			GripperState = 1;
 8004108:	4b5a      	ldr	r3, [pc, #360]	; (8004274 <EndEffectorWorkingState+0x194>)
 800410a:	2201      	movs	r2, #1
 800410c:	701a      	strb	r2, [r3, #0]
			Timestamp_Gripper = micros();
 800410e:	f7fd fda5 	bl	8001c5c <micros>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4959      	ldr	r1, [pc, #356]	; (800427c <EndEffectorWorkingState+0x19c>)
 8004118:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  else if(GripperEnable == 0)
	  {
		 Munmunbot_State = STATE_PrepareDATA;
	  }
}
 800411c:	e09f      	b.n	800425e <EndEffectorWorkingState+0x17e>
		else if (GripperState != 0)
 800411e:	4b55      	ldr	r3, [pc, #340]	; (8004274 <EndEffectorWorkingState+0x194>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 809b 	beq.w	800425e <EndEffectorWorkingState+0x17e>
			if ((hi2c1.State == HAL_I2C_STATE_READY) && (GripperState == 1))
 8004128:	4b53      	ldr	r3, [pc, #332]	; (8004278 <EndEffectorWorkingState+0x198>)
 800412a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b20      	cmp	r3, #32
 8004132:	d10f      	bne.n	8004154 <EndEffectorWorkingState+0x74>
 8004134:	4b4f      	ldr	r3, [pc, #316]	; (8004274 <EndEffectorWorkingState+0x194>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d10b      	bne.n	8004154 <EndEffectorWorkingState+0x74>
					uint8_t temp[1] = {0x23};
 800413c:	2323      	movs	r3, #35	; 0x23
 800413e:	703b      	strb	r3, [r7, #0]
					HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
 8004140:	463a      	mov	r2, r7
 8004142:	2301      	movs	r3, #1
 8004144:	2146      	movs	r1, #70	; 0x46
 8004146:	484c      	ldr	r0, [pc, #304]	; (8004278 <EndEffectorWorkingState+0x198>)
 8004148:	f001 fc32 	bl	80059b0 <HAL_I2C_Master_Transmit_IT>
				GripperState = 2;
 800414c:	4b49      	ldr	r3, [pc, #292]	; (8004274 <EndEffectorWorkingState+0x194>)
 800414e:	2202      	movs	r2, #2
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	e012      	b.n	800417a <EndEffectorWorkingState+0x9a>
			else if ((hi2c1.State == HAL_I2C_STATE_READY) && ( GripperState == 2 ))
 8004154:	4b48      	ldr	r3, [pc, #288]	; (8004278 <EndEffectorWorkingState+0x198>)
 8004156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b20      	cmp	r3, #32
 800415e:	d10c      	bne.n	800417a <EndEffectorWorkingState+0x9a>
 8004160:	4b44      	ldr	r3, [pc, #272]	; (8004274 <EndEffectorWorkingState+0x194>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d108      	bne.n	800417a <EndEffectorWorkingState+0x9a>
					HAL_I2C_Master_Receive_IT(&hi2c1, ((0x23 << 1) | 0b1), GripperStatus, 1);
 8004168:	2301      	movs	r3, #1
 800416a:	4a45      	ldr	r2, [pc, #276]	; (8004280 <EndEffectorWorkingState+0x1a0>)
 800416c:	2147      	movs	r1, #71	; 0x47
 800416e:	4842      	ldr	r0, [pc, #264]	; (8004278 <EndEffectorWorkingState+0x198>)
 8004170:	f001 fcc4 	bl	8005afc <HAL_I2C_Master_Receive_IT>
				GripperState = 1;
 8004174:	4b3f      	ldr	r3, [pc, #252]	; (8004274 <EndEffectorWorkingState+0x194>)
 8004176:	2201      	movs	r2, #1
 8004178:	701a      	strb	r2, [r3, #0]
			if (GripperStatus[0] == 0x12 )
 800417a:	4b41      	ldr	r3, [pc, #260]	; (8004280 <EndEffectorWorkingState+0x1a0>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b12      	cmp	r3, #18
 8004180:	d110      	bne.n	80041a4 <EndEffectorWorkingState+0xc4>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8004182:	2201      	movs	r2, #1
 8004184:	2102      	movs	r1, #2
 8004186:	483f      	ldr	r0, [pc, #252]	; (8004284 <EndEffectorWorkingState+0x1a4>)
 8004188:	f001 fa9c 	bl	80056c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 800418c:	2201      	movs	r2, #1
 800418e:	2104      	movs	r1, #4
 8004190:	483c      	ldr	r0, [pc, #240]	; (8004284 <EndEffectorWorkingState+0x1a4>)
 8004192:	f001 fa97 	bl	80056c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8004196:	2200      	movs	r2, #0
 8004198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800419c:	483a      	ldr	r0, [pc, #232]	; (8004288 <EndEffectorWorkingState+0x1a8>)
 800419e:	f001 fa91 	bl	80056c4 <HAL_GPIO_WritePin>
 80041a2:	e03d      	b.n	8004220 <EndEffectorWorkingState+0x140>
			else if (GripperStatus[0] == 0x34)
 80041a4:	4b36      	ldr	r3, [pc, #216]	; (8004280 <EndEffectorWorkingState+0x1a0>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b34      	cmp	r3, #52	; 0x34
 80041aa:	d110      	bne.n	80041ce <EndEffectorWorkingState+0xee>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80041ac:	2201      	movs	r2, #1
 80041ae:	2102      	movs	r1, #2
 80041b0:	4834      	ldr	r0, [pc, #208]	; (8004284 <EndEffectorWorkingState+0x1a4>)
 80041b2:	f001 fa87 	bl	80056c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80041b6:	2200      	movs	r2, #0
 80041b8:	2104      	movs	r1, #4
 80041ba:	4832      	ldr	r0, [pc, #200]	; (8004284 <EndEffectorWorkingState+0x1a4>)
 80041bc:	f001 fa82 	bl	80056c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80041c0:	2200      	movs	r2, #0
 80041c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041c6:	4830      	ldr	r0, [pc, #192]	; (8004288 <EndEffectorWorkingState+0x1a8>)
 80041c8:	f001 fa7c 	bl	80056c4 <HAL_GPIO_WritePin>
 80041cc:	e028      	b.n	8004220 <EndEffectorWorkingState+0x140>
			else if (GripperStatus[0] == 0x56)
 80041ce:	4b2c      	ldr	r3, [pc, #176]	; (8004280 <EndEffectorWorkingState+0x1a0>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b56      	cmp	r3, #86	; 0x56
 80041d4:	d110      	bne.n	80041f8 <EndEffectorWorkingState+0x118>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80041d6:	2200      	movs	r2, #0
 80041d8:	2102      	movs	r1, #2
 80041da:	482a      	ldr	r0, [pc, #168]	; (8004284 <EndEffectorWorkingState+0x1a4>)
 80041dc:	f001 fa72 	bl	80056c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80041e0:	2200      	movs	r2, #0
 80041e2:	2104      	movs	r1, #4
 80041e4:	4827      	ldr	r0, [pc, #156]	; (8004284 <EndEffectorWorkingState+0x1a4>)
 80041e6:	f001 fa6d 	bl	80056c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80041ea:	2200      	movs	r2, #0
 80041ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041f0:	4825      	ldr	r0, [pc, #148]	; (8004288 <EndEffectorWorkingState+0x1a8>)
 80041f2:	f001 fa67 	bl	80056c4 <HAL_GPIO_WritePin>
 80041f6:	e013      	b.n	8004220 <EndEffectorWorkingState+0x140>
			else if (GripperStatus[0] == 0x78)
 80041f8:	4b21      	ldr	r3, [pc, #132]	; (8004280 <EndEffectorWorkingState+0x1a0>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b78      	cmp	r3, #120	; 0x78
 80041fe:	d10f      	bne.n	8004220 <EndEffectorWorkingState+0x140>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8004200:	2201      	movs	r2, #1
 8004202:	2102      	movs	r1, #2
 8004204:	481f      	ldr	r0, [pc, #124]	; (8004284 <EndEffectorWorkingState+0x1a4>)
 8004206:	f001 fa5d 	bl	80056c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 800420a:	2201      	movs	r2, #1
 800420c:	2104      	movs	r1, #4
 800420e:	481d      	ldr	r0, [pc, #116]	; (8004284 <EndEffectorWorkingState+0x1a4>)
 8004210:	f001 fa58 	bl	80056c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8004214:	2201      	movs	r2, #1
 8004216:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800421a:	481b      	ldr	r0, [pc, #108]	; (8004288 <EndEffectorWorkingState+0x1a8>)
 800421c:	f001 fa52 	bl	80056c4 <HAL_GPIO_WritePin>
			if (micros() - Timestamp_Gripper >= 5100000)
 8004220:	f7fd fd1c 	bl	8001c5c <micros>
 8004224:	4b15      	ldr	r3, [pc, #84]	; (800427c <EndEffectorWorkingState+0x19c>)
 8004226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422a:	1a84      	subs	r4, r0, r2
 800422c:	eb61 0503 	sbc.w	r5, r1, r3
 8004230:	a30d      	add	r3, pc, #52	; (adr r3, 8004268 <EndEffectorWorkingState+0x188>)
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	42ab      	cmp	r3, r5
 8004238:	bf08      	it	eq
 800423a:	42a2      	cmpeq	r2, r4
 800423c:	d20f      	bcs.n	800425e <EndEffectorWorkingState+0x17e>
				GripperState = 0;
 800423e:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <EndEffectorWorkingState+0x194>)
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
				Munmunbot_State = STATE_PrepareDATA;
 8004244:	4b11      	ldr	r3, [pc, #68]	; (800428c <EndEffectorWorkingState+0x1ac>)
 8004246:	2202      	movs	r2, #2
 8004248:	701a      	strb	r2, [r3, #0]
				PID_Reset();
 800424a:	f7ff fc6f 	bl	8003b2c <PID_Reset>
}
 800424e:	e006      	b.n	800425e <EndEffectorWorkingState+0x17e>
	  else if(GripperEnable == 0)
 8004250:	4b07      	ldr	r3, [pc, #28]	; (8004270 <EndEffectorWorkingState+0x190>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d102      	bne.n	800425e <EndEffectorWorkingState+0x17e>
		 Munmunbot_State = STATE_PrepareDATA;
 8004258:	4b0c      	ldr	r3, [pc, #48]	; (800428c <EndEffectorWorkingState+0x1ac>)
 800425a:	2202      	movs	r2, #2
 800425c:	701a      	strb	r2, [r3, #0]
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bdb0      	pop	{r4, r5, r7, pc}
 8004266:	bf00      	nop
 8004268:	004dd1df 	.word	0x004dd1df
 800426c:	00000000 	.word	0x00000000
 8004270:	200001ea 	.word	0x200001ea
 8004274:	200001eb 	.word	0x200001eb
 8004278:	20000540 	.word	0x20000540
 800427c:	200001f0 	.word	0x200001f0
 8004280:	200001ec 	.word	0x200001ec
 8004284:	40020400 	.word	0x40020400
 8004288:	40020000 	.word	0x40020000
 800428c:	200000d9 	.word	0x200000d9

08004290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004294:	b672      	cpsid	i
}
 8004296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004298:	e7fe      	b.n	8004298 <Error_Handler+0x8>
	...

0800429c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042a2:	2300      	movs	r3, #0
 80042a4:	607b      	str	r3, [r7, #4]
 80042a6:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <HAL_MspInit+0x4c>)
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	4a0f      	ldr	r2, [pc, #60]	; (80042e8 <HAL_MspInit+0x4c>)
 80042ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042b0:	6453      	str	r3, [r2, #68]	; 0x44
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <HAL_MspInit+0x4c>)
 80042b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ba:	607b      	str	r3, [r7, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	603b      	str	r3, [r7, #0]
 80042c2:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <HAL_MspInit+0x4c>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	4a08      	ldr	r2, [pc, #32]	; (80042e8 <HAL_MspInit+0x4c>)
 80042c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042cc:	6413      	str	r3, [r2, #64]	; 0x40
 80042ce:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <HAL_MspInit+0x4c>)
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80042da:	2007      	movs	r0, #7
 80042dc:	f000 fc04 	bl	8004ae8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042e0:	bf00      	nop
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40023800 	.word	0x40023800

080042ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08a      	sub	sp, #40	; 0x28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f4:	f107 0314 	add.w	r3, r7, #20
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	605a      	str	r2, [r3, #4]
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	60da      	str	r2, [r3, #12]
 8004302:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a21      	ldr	r2, [pc, #132]	; (8004390 <HAL_I2C_MspInit+0xa4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d13c      	bne.n	8004388 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	4b20      	ldr	r3, [pc, #128]	; (8004394 <HAL_I2C_MspInit+0xa8>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	4a1f      	ldr	r2, [pc, #124]	; (8004394 <HAL_I2C_MspInit+0xa8>)
 8004318:	f043 0302 	orr.w	r3, r3, #2
 800431c:	6313      	str	r3, [r2, #48]	; 0x30
 800431e:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <HAL_I2C_MspInit+0xa8>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800432a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800432e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004330:	2312      	movs	r3, #18
 8004332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004334:	2301      	movs	r3, #1
 8004336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004338:	2303      	movs	r3, #3
 800433a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800433c:	2304      	movs	r3, #4
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004340:	f107 0314 	add.w	r3, r7, #20
 8004344:	4619      	mov	r1, r3
 8004346:	4814      	ldr	r0, [pc, #80]	; (8004398 <HAL_I2C_MspInit+0xac>)
 8004348:	f001 f820 	bl	800538c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	4b10      	ldr	r3, [pc, #64]	; (8004394 <HAL_I2C_MspInit+0xa8>)
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	4a0f      	ldr	r2, [pc, #60]	; (8004394 <HAL_I2C_MspInit+0xa8>)
 8004356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800435a:	6413      	str	r3, [r2, #64]	; 0x40
 800435c:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <HAL_I2C_MspInit+0xa8>)
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004368:	2200      	movs	r2, #0
 800436a:	2100      	movs	r1, #0
 800436c:	201f      	movs	r0, #31
 800436e:	f000 fbc6 	bl	8004afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004372:	201f      	movs	r0, #31
 8004374:	f000 fbdf 	bl	8004b36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004378:	2200      	movs	r2, #0
 800437a:	2100      	movs	r1, #0
 800437c:	2020      	movs	r0, #32
 800437e:	f000 fbbe 	bl	8004afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004382:	2020      	movs	r0, #32
 8004384:	f000 fbd7 	bl	8004b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004388:	bf00      	nop
 800438a:	3728      	adds	r7, #40	; 0x28
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40005400 	.word	0x40005400
 8004394:	40023800 	.word	0x40023800
 8004398:	40020400 	.word	0x40020400

0800439c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08a      	sub	sp, #40	; 0x28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a4:	f107 0314 	add.w	r3, r7, #20
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	609a      	str	r2, [r3, #8]
 80043b0:	60da      	str	r2, [r3, #12]
 80043b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a19      	ldr	r2, [pc, #100]	; (8004420 <HAL_TIM_Encoder_MspInit+0x84>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d12c      	bne.n	8004418 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	4b18      	ldr	r3, [pc, #96]	; (8004424 <HAL_TIM_Encoder_MspInit+0x88>)
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	4a17      	ldr	r2, [pc, #92]	; (8004424 <HAL_TIM_Encoder_MspInit+0x88>)
 80043c8:	f043 0301 	orr.w	r3, r3, #1
 80043cc:	6453      	str	r3, [r2, #68]	; 0x44
 80043ce:	4b15      	ldr	r3, [pc, #84]	; (8004424 <HAL_TIM_Encoder_MspInit+0x88>)
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	4b11      	ldr	r3, [pc, #68]	; (8004424 <HAL_TIM_Encoder_MspInit+0x88>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	4a10      	ldr	r2, [pc, #64]	; (8004424 <HAL_TIM_Encoder_MspInit+0x88>)
 80043e4:	f043 0301 	orr.w	r3, r3, #1
 80043e8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ea:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <HAL_TIM_Encoder_MspInit+0x88>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Encoder_A_Pin|Motor_Encoder_B_Pin;
 80043f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fc:	2302      	movs	r3, #2
 80043fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004400:	2300      	movs	r3, #0
 8004402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004404:	2300      	movs	r3, #0
 8004406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004408:	2301      	movs	r3, #1
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800440c:	f107 0314 	add.w	r3, r7, #20
 8004410:	4619      	mov	r1, r3
 8004412:	4805      	ldr	r0, [pc, #20]	; (8004428 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004414:	f000 ffba 	bl	800538c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004418:	bf00      	nop
 800441a:	3728      	adds	r7, #40	; 0x28
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40010000 	.word	0x40010000
 8004424:	40023800 	.word	0x40023800
 8004428:	40020000 	.word	0x40020000

0800442c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443c:	d116      	bne.n	800446c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	4b16      	ldr	r3, [pc, #88]	; (800449c <HAL_TIM_Base_MspInit+0x70>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	4a15      	ldr	r2, [pc, #84]	; (800449c <HAL_TIM_Base_MspInit+0x70>)
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	6413      	str	r3, [r2, #64]	; 0x40
 800444e:	4b13      	ldr	r3, [pc, #76]	; (800449c <HAL_TIM_Base_MspInit+0x70>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800445a:	2200      	movs	r2, #0
 800445c:	2100      	movs	r1, #0
 800445e:	201c      	movs	r0, #28
 8004460:	f000 fb4d 	bl	8004afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004464:	201c      	movs	r0, #28
 8004466:	f000 fb66 	bl	8004b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800446a:	e012      	b.n	8004492 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a0b      	ldr	r2, [pc, #44]	; (80044a0 <HAL_TIM_Base_MspInit+0x74>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d10d      	bne.n	8004492 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004476:	2300      	movs	r3, #0
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	4b08      	ldr	r3, [pc, #32]	; (800449c <HAL_TIM_Base_MspInit+0x70>)
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	4a07      	ldr	r2, [pc, #28]	; (800449c <HAL_TIM_Base_MspInit+0x70>)
 8004480:	f043 0302 	orr.w	r3, r3, #2
 8004484:	6413      	str	r3, [r2, #64]	; 0x40
 8004486:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_TIM_Base_MspInit+0x70>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	68bb      	ldr	r3, [r7, #8]
}
 8004492:	bf00      	nop
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40023800 	.word	0x40023800
 80044a0:	40000400 	.word	0x40000400

080044a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ac:	f107 030c 	add.w	r3, r7, #12
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	605a      	str	r2, [r3, #4]
 80044b6:	609a      	str	r2, [r3, #8]
 80044b8:	60da      	str	r2, [r3, #12]
 80044ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a12      	ldr	r2, [pc, #72]	; (800450c <HAL_TIM_MspPostInit+0x68>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d11d      	bne.n	8004502 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c6:	2300      	movs	r3, #0
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	4b11      	ldr	r3, [pc, #68]	; (8004510 <HAL_TIM_MspPostInit+0x6c>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	4a10      	ldr	r2, [pc, #64]	; (8004510 <HAL_TIM_MspPostInit+0x6c>)
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	6313      	str	r3, [r2, #48]	; 0x30
 80044d6:	4b0e      	ldr	r3, [pc, #56]	; (8004510 <HAL_TIM_MspPostInit+0x6c>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_Generation_Pin;
 80044e2:	2340      	movs	r3, #64	; 0x40
 80044e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e6:	2302      	movs	r3, #2
 80044e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80044f2:	2302      	movs	r3, #2
 80044f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Generation_GPIO_Port, &GPIO_InitStruct);
 80044f6:	f107 030c 	add.w	r3, r7, #12
 80044fa:	4619      	mov	r1, r3
 80044fc:	4805      	ldr	r0, [pc, #20]	; (8004514 <HAL_TIM_MspPostInit+0x70>)
 80044fe:	f000 ff45 	bl	800538c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004502:	bf00      	nop
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40000400 	.word	0x40000400
 8004510:	40023800 	.word	0x40023800
 8004514:	40020000 	.word	0x40020000

08004518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08a      	sub	sp, #40	; 0x28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004520:	f107 0314 	add.w	r3, r7, #20
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	605a      	str	r2, [r3, #4]
 800452a:	609a      	str	r2, [r3, #8]
 800452c:	60da      	str	r2, [r3, #12]
 800452e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a4c      	ldr	r2, [pc, #304]	; (8004668 <HAL_UART_MspInit+0x150>)
 8004536:	4293      	cmp	r3, r2
 8004538:	f040 8091 	bne.w	800465e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	4b4a      	ldr	r3, [pc, #296]	; (800466c <HAL_UART_MspInit+0x154>)
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	4a49      	ldr	r2, [pc, #292]	; (800466c <HAL_UART_MspInit+0x154>)
 8004546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800454a:	6413      	str	r3, [r2, #64]	; 0x40
 800454c:	4b47      	ldr	r3, [pc, #284]	; (800466c <HAL_UART_MspInit+0x154>)
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	4b43      	ldr	r3, [pc, #268]	; (800466c <HAL_UART_MspInit+0x154>)
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	4a42      	ldr	r2, [pc, #264]	; (800466c <HAL_UART_MspInit+0x154>)
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	6313      	str	r3, [r2, #48]	; 0x30
 8004568:	4b40      	ldr	r3, [pc, #256]	; (800466c <HAL_UART_MspInit+0x154>)
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004574:	230c      	movs	r3, #12
 8004576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004578:	2302      	movs	r3, #2
 800457a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004580:	2303      	movs	r3, #3
 8004582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004584:	2307      	movs	r3, #7
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004588:	f107 0314 	add.w	r3, r7, #20
 800458c:	4619      	mov	r1, r3
 800458e:	4838      	ldr	r0, [pc, #224]	; (8004670 <HAL_UART_MspInit+0x158>)
 8004590:	f000 fefc 	bl	800538c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004594:	4b37      	ldr	r3, [pc, #220]	; (8004674 <HAL_UART_MspInit+0x15c>)
 8004596:	4a38      	ldr	r2, [pc, #224]	; (8004678 <HAL_UART_MspInit+0x160>)
 8004598:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800459a:	4b36      	ldr	r3, [pc, #216]	; (8004674 <HAL_UART_MspInit+0x15c>)
 800459c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045a2:	4b34      	ldr	r3, [pc, #208]	; (8004674 <HAL_UART_MspInit+0x15c>)
 80045a4:	2240      	movs	r2, #64	; 0x40
 80045a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045a8:	4b32      	ldr	r3, [pc, #200]	; (8004674 <HAL_UART_MspInit+0x15c>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80045ae:	4b31      	ldr	r3, [pc, #196]	; (8004674 <HAL_UART_MspInit+0x15c>)
 80045b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045b6:	4b2f      	ldr	r3, [pc, #188]	; (8004674 <HAL_UART_MspInit+0x15c>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045bc:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <HAL_UART_MspInit+0x15c>)
 80045be:	2200      	movs	r2, #0
 80045c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80045c2:	4b2c      	ldr	r3, [pc, #176]	; (8004674 <HAL_UART_MspInit+0x15c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80045c8:	4b2a      	ldr	r3, [pc, #168]	; (8004674 <HAL_UART_MspInit+0x15c>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045ce:	4b29      	ldr	r3, [pc, #164]	; (8004674 <HAL_UART_MspInit+0x15c>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80045d4:	4827      	ldr	r0, [pc, #156]	; (8004674 <HAL_UART_MspInit+0x15c>)
 80045d6:	f000 fac9 	bl	8004b6c <HAL_DMA_Init>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80045e0:	f7ff fe56 	bl	8004290 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a23      	ldr	r2, [pc, #140]	; (8004674 <HAL_UART_MspInit+0x15c>)
 80045e8:	635a      	str	r2, [r3, #52]	; 0x34
 80045ea:	4a22      	ldr	r2, [pc, #136]	; (8004674 <HAL_UART_MspInit+0x15c>)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80045f0:	4b22      	ldr	r3, [pc, #136]	; (800467c <HAL_UART_MspInit+0x164>)
 80045f2:	4a23      	ldr	r2, [pc, #140]	; (8004680 <HAL_UART_MspInit+0x168>)
 80045f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80045f6:	4b21      	ldr	r3, [pc, #132]	; (800467c <HAL_UART_MspInit+0x164>)
 80045f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045fe:	4b1f      	ldr	r3, [pc, #124]	; (800467c <HAL_UART_MspInit+0x164>)
 8004600:	2200      	movs	r2, #0
 8004602:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004604:	4b1d      	ldr	r3, [pc, #116]	; (800467c <HAL_UART_MspInit+0x164>)
 8004606:	2200      	movs	r2, #0
 8004608:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800460a:	4b1c      	ldr	r3, [pc, #112]	; (800467c <HAL_UART_MspInit+0x164>)
 800460c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004610:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004612:	4b1a      	ldr	r3, [pc, #104]	; (800467c <HAL_UART_MspInit+0x164>)
 8004614:	2200      	movs	r2, #0
 8004616:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004618:	4b18      	ldr	r3, [pc, #96]	; (800467c <HAL_UART_MspInit+0x164>)
 800461a:	2200      	movs	r2, #0
 800461c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800461e:	4b17      	ldr	r3, [pc, #92]	; (800467c <HAL_UART_MspInit+0x164>)
 8004620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004624:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004626:	4b15      	ldr	r3, [pc, #84]	; (800467c <HAL_UART_MspInit+0x164>)
 8004628:	2200      	movs	r2, #0
 800462a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800462c:	4b13      	ldr	r3, [pc, #76]	; (800467c <HAL_UART_MspInit+0x164>)
 800462e:	2200      	movs	r2, #0
 8004630:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004632:	4812      	ldr	r0, [pc, #72]	; (800467c <HAL_UART_MspInit+0x164>)
 8004634:	f000 fa9a 	bl	8004b6c <HAL_DMA_Init>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800463e:	f7ff fe27 	bl	8004290 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a0d      	ldr	r2, [pc, #52]	; (800467c <HAL_UART_MspInit+0x164>)
 8004646:	639a      	str	r2, [r3, #56]	; 0x38
 8004648:	4a0c      	ldr	r2, [pc, #48]	; (800467c <HAL_UART_MspInit+0x164>)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800464e:	2200      	movs	r2, #0
 8004650:	2100      	movs	r1, #0
 8004652:	2026      	movs	r0, #38	; 0x26
 8004654:	f000 fa53 	bl	8004afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004658:	2026      	movs	r0, #38	; 0x26
 800465a:	f000 fa6c 	bl	8004b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800465e:	bf00      	nop
 8004660:	3728      	adds	r7, #40	; 0x28
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40004400 	.word	0x40004400
 800466c:	40023800 	.word	0x40023800
 8004670:	40020000 	.word	0x40020000
 8004674:	200005dc 	.word	0x200005dc
 8004678:	400260a0 	.word	0x400260a0
 800467c:	200004e0 	.word	0x200004e0
 8004680:	40026088 	.word	0x40026088

08004684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004688:	e7fe      	b.n	8004688 <NMI_Handler+0x4>

0800468a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800468a:	b480      	push	{r7}
 800468c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800468e:	e7fe      	b.n	800468e <HardFault_Handler+0x4>

08004690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004694:	e7fe      	b.n	8004694 <MemManage_Handler+0x4>

08004696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004696:	b480      	push	{r7}
 8004698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800469a:	e7fe      	b.n	800469a <BusFault_Handler+0x4>

0800469c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046a0:	e7fe      	b.n	80046a0 <UsageFault_Handler+0x4>

080046a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046a2:	b480      	push	{r7}
 80046a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046a6:	bf00      	nop
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046b4:	bf00      	nop
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046be:	b480      	push	{r7}
 80046c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046c2:	bf00      	nop
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046d0:	f000 f91a 	bl	8004908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046d4:	bf00      	nop
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80046dc:	4802      	ldr	r0, [pc, #8]	; (80046e8 <DMA1_Stream5_IRQHandler+0x10>)
 80046de:	f000 fbdd 	bl	8004e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80046e2:	bf00      	nop
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	200004e0 	.word	0x200004e0

080046ec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80046f0:	4802      	ldr	r0, [pc, #8]	; (80046fc <DMA1_Stream6_IRQHandler+0x10>)
 80046f2:	f000 fbd3 	bl	8004e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80046f6:	bf00      	nop
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	200005dc 	.word	0x200005dc

08004700 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004704:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004708:	f000 fff6 	bl	80056f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800470c:	bf00      	nop
 800470e:	bd80      	pop	{r7, pc}

08004710 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004714:	4802      	ldr	r0, [pc, #8]	; (8004720 <TIM2_IRQHandler+0x10>)
 8004716:	f003 ff13 	bl	8008540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800471a:	bf00      	nop
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20000684 	.word	0x20000684

08004724 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004728:	4802      	ldr	r0, [pc, #8]	; (8004734 <I2C1_EV_IRQHandler+0x10>)
 800472a:	f001 fa95 	bl	8005c58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800472e:	bf00      	nop
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20000540 	.word	0x20000540

08004738 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800473c:	4802      	ldr	r0, [pc, #8]	; (8004748 <I2C1_ER_IRQHandler+0x10>)
 800473e:	f001 fbf8 	bl	8005f32 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004742:	bf00      	nop
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000540 	.word	0x20000540

0800474c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004750:	4802      	ldr	r0, [pc, #8]	; (800475c <USART2_IRQHandler+0x10>)
 8004752:	f004 fddf 	bl	8009314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004756:	bf00      	nop
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	200006cc 	.word	0x200006cc

08004760 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004764:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004768:	f000 ffc6 	bl	80056f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800476c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004770:	f000 ffc2 	bl	80056f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004774:	bf00      	nop
 8004776:	bd80      	pop	{r7, pc}

08004778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004780:	4a14      	ldr	r2, [pc, #80]	; (80047d4 <_sbrk+0x5c>)
 8004782:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <_sbrk+0x60>)
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800478c:	4b13      	ldr	r3, [pc, #76]	; (80047dc <_sbrk+0x64>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d102      	bne.n	800479a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004794:	4b11      	ldr	r3, [pc, #68]	; (80047dc <_sbrk+0x64>)
 8004796:	4a12      	ldr	r2, [pc, #72]	; (80047e0 <_sbrk+0x68>)
 8004798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800479a:	4b10      	ldr	r3, [pc, #64]	; (80047dc <_sbrk+0x64>)
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4413      	add	r3, r2
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d207      	bcs.n	80047b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047a8:	f005 fc10 	bl	8009fcc <__errno>
 80047ac:	4603      	mov	r3, r0
 80047ae:	220c      	movs	r2, #12
 80047b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047b2:	f04f 33ff 	mov.w	r3, #4294967295
 80047b6:	e009      	b.n	80047cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047b8:	4b08      	ldr	r3, [pc, #32]	; (80047dc <_sbrk+0x64>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047be:	4b07      	ldr	r3, [pc, #28]	; (80047dc <_sbrk+0x64>)
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4413      	add	r3, r2
 80047c6:	4a05      	ldr	r2, [pc, #20]	; (80047dc <_sbrk+0x64>)
 80047c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047ca:	68fb      	ldr	r3, [r7, #12]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	20020000 	.word	0x20020000
 80047d8:	00000400 	.word	0x00000400
 80047dc:	200004d4 	.word	0x200004d4
 80047e0:	20000728 	.word	0x20000728

080047e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047e8:	4b08      	ldr	r3, [pc, #32]	; (800480c <SystemInit+0x28>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ee:	4a07      	ldr	r2, [pc, #28]	; (800480c <SystemInit+0x28>)
 80047f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047f8:	4b04      	ldr	r3, [pc, #16]	; (800480c <SystemInit+0x28>)
 80047fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047fe:	609a      	str	r2, [r3, #8]
#endif
}
 8004800:	bf00      	nop
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	e000ed00 	.word	0xe000ed00

08004810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004848 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004814:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004816:	e003      	b.n	8004820 <LoopCopyDataInit>

08004818 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004818:	4b0c      	ldr	r3, [pc, #48]	; (800484c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800481a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800481c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800481e:	3104      	adds	r1, #4

08004820 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004820:	480b      	ldr	r0, [pc, #44]	; (8004850 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004822:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004824:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004826:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004828:	d3f6      	bcc.n	8004818 <CopyDataInit>
  ldr  r2, =_sbss
 800482a:	4a0b      	ldr	r2, [pc, #44]	; (8004858 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800482c:	e002      	b.n	8004834 <LoopFillZerobss>

0800482e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800482e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004830:	f842 3b04 	str.w	r3, [r2], #4

08004834 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004834:	4b09      	ldr	r3, [pc, #36]	; (800485c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004836:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004838:	d3f9      	bcc.n	800482e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800483a:	f7ff ffd3 	bl	80047e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800483e:	f005 fbcb 	bl	8009fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004842:	f7fc fc31 	bl	80010a8 <main>
  bx  lr    
 8004846:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004848:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800484c:	0800a38c 	.word	0x0800a38c
  ldr  r0, =_sdata
 8004850:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004854:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8004858:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800485c:	20000724 	.word	0x20000724

08004860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004860:	e7fe      	b.n	8004860 <ADC_IRQHandler>
	...

08004864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004868:	4b0e      	ldr	r3, [pc, #56]	; (80048a4 <HAL_Init+0x40>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a0d      	ldr	r2, [pc, #52]	; (80048a4 <HAL_Init+0x40>)
 800486e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004872:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <HAL_Init+0x40>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a0a      	ldr	r2, [pc, #40]	; (80048a4 <HAL_Init+0x40>)
 800487a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800487e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004880:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <HAL_Init+0x40>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a07      	ldr	r2, [pc, #28]	; (80048a4 <HAL_Init+0x40>)
 8004886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800488c:	2003      	movs	r0, #3
 800488e:	f000 f92b 	bl	8004ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004892:	2000      	movs	r0, #0
 8004894:	f000 f808 	bl	80048a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004898:	f7ff fd00 	bl	800429c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40023c00 	.word	0x40023c00

080048a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048b0:	4b12      	ldr	r3, [pc, #72]	; (80048fc <HAL_InitTick+0x54>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4b12      	ldr	r3, [pc, #72]	; (8004900 <HAL_InitTick+0x58>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	4619      	mov	r1, r3
 80048ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048be:	fbb3 f3f1 	udiv	r3, r3, r1
 80048c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f943 	bl	8004b52 <HAL_SYSTICK_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e00e      	b.n	80048f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b0f      	cmp	r3, #15
 80048da:	d80a      	bhi.n	80048f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048dc:	2200      	movs	r2, #0
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	f04f 30ff 	mov.w	r0, #4294967295
 80048e4:	f000 f90b 	bl	8004afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048e8:	4a06      	ldr	r2, [pc, #24]	; (8004904 <HAL_InitTick+0x5c>)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e000      	b.n	80048f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20000018 	.word	0x20000018
 8004900:	20000020 	.word	0x20000020
 8004904:	2000001c 	.word	0x2000001c

08004908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800490c:	4b06      	ldr	r3, [pc, #24]	; (8004928 <HAL_IncTick+0x20>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	4b06      	ldr	r3, [pc, #24]	; (800492c <HAL_IncTick+0x24>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4413      	add	r3, r2
 8004918:	4a04      	ldr	r2, [pc, #16]	; (800492c <HAL_IncTick+0x24>)
 800491a:	6013      	str	r3, [r2, #0]
}
 800491c:	bf00      	nop
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20000020 	.word	0x20000020
 800492c:	20000710 	.word	0x20000710

08004930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  return uwTick;
 8004934:	4b03      	ldr	r3, [pc, #12]	; (8004944 <HAL_GetTick+0x14>)
 8004936:	681b      	ldr	r3, [r3, #0]
}
 8004938:	4618      	mov	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000710 	.word	0x20000710

08004948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <__NVIC_SetPriorityGrouping+0x44>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004964:	4013      	ands	r3, r2
 8004966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800497a:	4a04      	ldr	r2, [pc, #16]	; (800498c <__NVIC_SetPriorityGrouping+0x44>)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	60d3      	str	r3, [r2, #12]
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	e000ed00 	.word	0xe000ed00

08004990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004994:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	0a1b      	lsrs	r3, r3, #8
 800499a:	f003 0307 	and.w	r3, r3, #7
}
 800499e:	4618      	mov	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	e000ed00 	.word	0xe000ed00

080049ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	db0b      	blt.n	80049d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	f003 021f 	and.w	r2, r3, #31
 80049c4:	4907      	ldr	r1, [pc, #28]	; (80049e4 <__NVIC_EnableIRQ+0x38>)
 80049c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	2001      	movs	r0, #1
 80049ce:	fa00 f202 	lsl.w	r2, r0, r2
 80049d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	e000e100 	.word	0xe000e100

080049e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	6039      	str	r1, [r7, #0]
 80049f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	db0a      	blt.n	8004a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	490c      	ldr	r1, [pc, #48]	; (8004a34 <__NVIC_SetPriority+0x4c>)
 8004a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a06:	0112      	lsls	r2, r2, #4
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a10:	e00a      	b.n	8004a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	4908      	ldr	r1, [pc, #32]	; (8004a38 <__NVIC_SetPriority+0x50>)
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	3b04      	subs	r3, #4
 8004a20:	0112      	lsls	r2, r2, #4
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	440b      	add	r3, r1
 8004a26:	761a      	strb	r2, [r3, #24]
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	e000e100 	.word	0xe000e100
 8004a38:	e000ed00 	.word	0xe000ed00

08004a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b089      	sub	sp, #36	; 0x24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f1c3 0307 	rsb	r3, r3, #7
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	bf28      	it	cs
 8004a5a:	2304      	movcs	r3, #4
 8004a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	3304      	adds	r3, #4
 8004a62:	2b06      	cmp	r3, #6
 8004a64:	d902      	bls.n	8004a6c <NVIC_EncodePriority+0x30>
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	3b03      	subs	r3, #3
 8004a6a:	e000      	b.n	8004a6e <NVIC_EncodePriority+0x32>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a70:	f04f 32ff 	mov.w	r2, #4294967295
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	43da      	mvns	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	401a      	ands	r2, r3
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a84:	f04f 31ff 	mov.w	r1, #4294967295
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8e:	43d9      	mvns	r1, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a94:	4313      	orrs	r3, r2
         );
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3724      	adds	r7, #36	; 0x24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ab4:	d301      	bcc.n	8004aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e00f      	b.n	8004ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aba:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <SysTick_Config+0x40>)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ac2:	210f      	movs	r1, #15
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac8:	f7ff ff8e 	bl	80049e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004acc:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <SysTick_Config+0x40>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ad2:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <SysTick_Config+0x40>)
 8004ad4:	2207      	movs	r2, #7
 8004ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	e000e010 	.word	0xe000e010

08004ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff ff29 	bl	8004948 <__NVIC_SetPriorityGrouping>
}
 8004af6:	bf00      	nop
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b086      	sub	sp, #24
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	4603      	mov	r3, r0
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b10:	f7ff ff3e 	bl	8004990 <__NVIC_GetPriorityGrouping>
 8004b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	6978      	ldr	r0, [r7, #20]
 8004b1c:	f7ff ff8e 	bl	8004a3c <NVIC_EncodePriority>
 8004b20:	4602      	mov	r2, r0
 8004b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b26:	4611      	mov	r1, r2
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff ff5d 	bl	80049e8 <__NVIC_SetPriority>
}
 8004b2e:	bf00      	nop
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff ff31 	bl	80049ac <__NVIC_EnableIRQ>
}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff ffa2 	bl	8004aa4 <SysTick_Config>
 8004b60:	4603      	mov	r3, r0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b78:	f7ff feda 	bl	8004930 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e099      	b.n	8004cbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ba8:	e00f      	b.n	8004bca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004baa:	f7ff fec1 	bl	8004930 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b05      	cmp	r3, #5
 8004bb6:	d908      	bls.n	8004bca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e078      	b.n	8004cbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e8      	bne.n	8004baa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4b38      	ldr	r3, [pc, #224]	; (8004cc4 <HAL_DMA_Init+0x158>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d107      	bne.n	8004c34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 0307 	bic.w	r3, r3, #7
 8004c4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d117      	bne.n	8004c8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00e      	beq.n	8004c8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fb0f 	bl	8005294 <DMA_CheckFifoParam>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d008      	beq.n	8004c8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2240      	movs	r2, #64	; 0x40
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e016      	b.n	8004cbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fac6 	bl	8005228 <DMA_CalcBaseAndBitshift>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca4:	223f      	movs	r2, #63	; 0x3f
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	f010803f 	.word	0xf010803f

08004cc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_DMA_Start_IT+0x26>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e040      	b.n	8004d70 <HAL_DMA_Start_IT+0xa8>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d12f      	bne.n	8004d62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2202      	movs	r2, #2
 8004d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 fa58 	bl	80051cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d20:	223f      	movs	r2, #63	; 0x3f
 8004d22:	409a      	lsls	r2, r3
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0216 	orr.w	r2, r2, #22
 8004d36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0208 	orr.w	r2, r2, #8
 8004d4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	e005      	b.n	8004d6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004d86:	f7ff fdd3 	bl	8004930 <HAL_GetTick>
 8004d8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d008      	beq.n	8004daa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2280      	movs	r2, #128	; 0x80
 8004d9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e052      	b.n	8004e50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0216 	bic.w	r2, r2, #22
 8004db8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695a      	ldr	r2, [r3, #20]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d103      	bne.n	8004dda <HAL_DMA_Abort+0x62>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d007      	beq.n	8004dea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0208 	bic.w	r2, r2, #8
 8004de8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0201 	bic.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dfa:	e013      	b.n	8004e24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dfc:	f7ff fd98 	bl	8004930 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b05      	cmp	r3, #5
 8004e08:	d90c      	bls.n	8004e24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e015      	b.n	8004e50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e4      	bne.n	8004dfc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e36:	223f      	movs	r2, #63	; 0x3f
 8004e38:	409a      	lsls	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d004      	beq.n	8004e76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2280      	movs	r2, #128	; 0x80
 8004e70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e00c      	b.n	8004e90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2205      	movs	r2, #5
 8004e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0201 	bic.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ea8:	4b92      	ldr	r3, [pc, #584]	; (80050f4 <HAL_DMA_IRQHandler+0x258>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a92      	ldr	r2, [pc, #584]	; (80050f8 <HAL_DMA_IRQHandler+0x25c>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	0a9b      	lsrs	r3, r3, #10
 8004eb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec6:	2208      	movs	r2, #8
 8004ec8:	409a      	lsls	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d01a      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d013      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0204 	bic.w	r2, r2, #4
 8004eee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	409a      	lsls	r2, r3
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f00:	f043 0201 	orr.w	r2, r3, #1
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	409a      	lsls	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4013      	ands	r3, r2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d012      	beq.n	8004f3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	409a      	lsls	r2, r3
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f36:	f043 0202 	orr.w	r2, r3, #2
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f42:	2204      	movs	r2, #4
 8004f44:	409a      	lsls	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d012      	beq.n	8004f74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00b      	beq.n	8004f74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f60:	2204      	movs	r2, #4
 8004f62:	409a      	lsls	r2, r3
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6c:	f043 0204 	orr.w	r2, r3, #4
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f78:	2210      	movs	r2, #16
 8004f7a:	409a      	lsls	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d043      	beq.n	800500c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d03c      	beq.n	800500c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f96:	2210      	movs	r2, #16
 8004f98:	409a      	lsls	r2, r3
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d018      	beq.n	8004fde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d108      	bne.n	8004fcc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d024      	beq.n	800500c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	4798      	blx	r3
 8004fca:	e01f      	b.n	800500c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01b      	beq.n	800500c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	4798      	blx	r3
 8004fdc:	e016      	b.n	800500c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d107      	bne.n	8004ffc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0208 	bic.w	r2, r2, #8
 8004ffa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005010:	2220      	movs	r2, #32
 8005012:	409a      	lsls	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4013      	ands	r3, r2
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 808e 	beq.w	800513a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 8086 	beq.w	800513a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005032:	2220      	movs	r2, #32
 8005034:	409a      	lsls	r2, r3
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b05      	cmp	r3, #5
 8005044:	d136      	bne.n	80050b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0216 	bic.w	r2, r2, #22
 8005054:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695a      	ldr	r2, [r3, #20]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005064:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	d103      	bne.n	8005076 <HAL_DMA_IRQHandler+0x1da>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0208 	bic.w	r2, r2, #8
 8005084:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508a:	223f      	movs	r2, #63	; 0x3f
 800508c:	409a      	lsls	r2, r3
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d07d      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	4798      	blx	r3
        }
        return;
 80050b2:	e078      	b.n	80051a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d01c      	beq.n	80050fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d108      	bne.n	80050e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d030      	beq.n	800513a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	4798      	blx	r3
 80050e0:	e02b      	b.n	800513a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d027      	beq.n	800513a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	4798      	blx	r3
 80050f2:	e022      	b.n	800513a <HAL_DMA_IRQHandler+0x29e>
 80050f4:	20000018 	.word	0x20000018
 80050f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10f      	bne.n	800512a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0210 	bic.w	r2, r2, #16
 8005118:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513e:	2b00      	cmp	r3, #0
 8005140:	d032      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d022      	beq.n	8005194 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2205      	movs	r2, #5
 8005152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0201 	bic.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	3301      	adds	r3, #1
 800516a:	60bb      	str	r3, [r7, #8]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	429a      	cmp	r2, r3
 8005170:	d307      	bcc.n	8005182 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1f2      	bne.n	8005166 <HAL_DMA_IRQHandler+0x2ca>
 8005180:	e000      	b.n	8005184 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005182:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	4798      	blx	r3
 80051a4:	e000      	b.n	80051a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80051a6:	bf00      	nop
    }
  }
}
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop

080051b0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051be:	b2db      	uxtb	r3, r3
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b40      	cmp	r3, #64	; 0x40
 80051f8:	d108      	bne.n	800520c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800520a:	e007      	b.n	800521c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	60da      	str	r2, [r3, #12]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	3b10      	subs	r3, #16
 8005238:	4a14      	ldr	r2, [pc, #80]	; (800528c <DMA_CalcBaseAndBitshift+0x64>)
 800523a:	fba2 2303 	umull	r2, r3, r2, r3
 800523e:	091b      	lsrs	r3, r3, #4
 8005240:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005242:	4a13      	ldr	r2, [pc, #76]	; (8005290 <DMA_CalcBaseAndBitshift+0x68>)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	461a      	mov	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b03      	cmp	r3, #3
 8005254:	d909      	bls.n	800526a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800525e:	f023 0303 	bic.w	r3, r3, #3
 8005262:	1d1a      	adds	r2, r3, #4
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	659a      	str	r2, [r3, #88]	; 0x58
 8005268:	e007      	b.n	800527a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005272:	f023 0303 	bic.w	r3, r3, #3
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	aaaaaaab 	.word	0xaaaaaaab
 8005290:	0800a374 	.word	0x0800a374

08005294 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d11f      	bne.n	80052ee <DMA_CheckFifoParam+0x5a>
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d856      	bhi.n	8005362 <DMA_CheckFifoParam+0xce>
 80052b4:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <DMA_CheckFifoParam+0x28>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	080052cd 	.word	0x080052cd
 80052c0:	080052df 	.word	0x080052df
 80052c4:	080052cd 	.word	0x080052cd
 80052c8:	08005363 	.word	0x08005363
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d046      	beq.n	8005366 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052dc:	e043      	b.n	8005366 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052e6:	d140      	bne.n	800536a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052ec:	e03d      	b.n	800536a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052f6:	d121      	bne.n	800533c <DMA_CheckFifoParam+0xa8>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d837      	bhi.n	800536e <DMA_CheckFifoParam+0xda>
 80052fe:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <DMA_CheckFifoParam+0x70>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	08005315 	.word	0x08005315
 8005308:	0800531b 	.word	0x0800531b
 800530c:	08005315 	.word	0x08005315
 8005310:	0800532d 	.word	0x0800532d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	73fb      	strb	r3, [r7, #15]
      break;
 8005318:	e030      	b.n	800537c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d025      	beq.n	8005372 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800532a:	e022      	b.n	8005372 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005330:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005334:	d11f      	bne.n	8005376 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800533a:	e01c      	b.n	8005376 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b02      	cmp	r3, #2
 8005340:	d903      	bls.n	800534a <DMA_CheckFifoParam+0xb6>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b03      	cmp	r3, #3
 8005346:	d003      	beq.n	8005350 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005348:	e018      	b.n	800537c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	73fb      	strb	r3, [r7, #15]
      break;
 800534e:	e015      	b.n	800537c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00e      	beq.n	800537a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	73fb      	strb	r3, [r7, #15]
      break;
 8005360:	e00b      	b.n	800537a <DMA_CheckFifoParam+0xe6>
      break;
 8005362:	bf00      	nop
 8005364:	e00a      	b.n	800537c <DMA_CheckFifoParam+0xe8>
      break;
 8005366:	bf00      	nop
 8005368:	e008      	b.n	800537c <DMA_CheckFifoParam+0xe8>
      break;
 800536a:	bf00      	nop
 800536c:	e006      	b.n	800537c <DMA_CheckFifoParam+0xe8>
      break;
 800536e:	bf00      	nop
 8005370:	e004      	b.n	800537c <DMA_CheckFifoParam+0xe8>
      break;
 8005372:	bf00      	nop
 8005374:	e002      	b.n	800537c <DMA_CheckFifoParam+0xe8>
      break;   
 8005376:	bf00      	nop
 8005378:	e000      	b.n	800537c <DMA_CheckFifoParam+0xe8>
      break;
 800537a:	bf00      	nop
    }
  } 
  
  return status; 
 800537c:	7bfb      	ldrb	r3, [r7, #15]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop

0800538c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800538c:	b480      	push	{r7}
 800538e:	b089      	sub	sp, #36	; 0x24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800539a:	2300      	movs	r3, #0
 800539c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800539e:	2300      	movs	r3, #0
 80053a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	e159      	b.n	800565c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053a8:	2201      	movs	r2, #1
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4013      	ands	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	f040 8148 	bne.w	8005656 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d005      	beq.n	80053de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d130      	bne.n	8005440 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	2203      	movs	r2, #3
 80053ea:	fa02 f303 	lsl.w	r3, r2, r3
 80053ee:	43db      	mvns	r3, r3
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	4013      	ands	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	4313      	orrs	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005414:	2201      	movs	r2, #1
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	fa02 f303 	lsl.w	r3, r2, r3
 800541c:	43db      	mvns	r3, r3
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	4013      	ands	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	091b      	lsrs	r3, r3, #4
 800542a:	f003 0201 	and.w	r2, r3, #1
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	fa02 f303 	lsl.w	r3, r2, r3
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	4313      	orrs	r3, r2
 8005438:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	2b03      	cmp	r3, #3
 800544a:	d017      	beq.n	800547c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	2203      	movs	r2, #3
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	43db      	mvns	r3, r3
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	4013      	ands	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	4313      	orrs	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f003 0303 	and.w	r3, r3, #3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d123      	bne.n	80054d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	08da      	lsrs	r2, r3, #3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3208      	adds	r2, #8
 8005490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005494:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	220f      	movs	r2, #15
 80054a0:	fa02 f303 	lsl.w	r3, r2, r3
 80054a4:	43db      	mvns	r3, r3
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	4013      	ands	r3, r2
 80054aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	fa02 f303 	lsl.w	r3, r2, r3
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	4313      	orrs	r3, r2
 80054c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	08da      	lsrs	r2, r3, #3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3208      	adds	r2, #8
 80054ca:	69b9      	ldr	r1, [r7, #24]
 80054cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	2203      	movs	r2, #3
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	43db      	mvns	r3, r3
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4013      	ands	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f003 0203 	and.w	r2, r3, #3
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 80a2 	beq.w	8005656 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	4b57      	ldr	r3, [pc, #348]	; (8005674 <HAL_GPIO_Init+0x2e8>)
 8005518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551a:	4a56      	ldr	r2, [pc, #344]	; (8005674 <HAL_GPIO_Init+0x2e8>)
 800551c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005520:	6453      	str	r3, [r2, #68]	; 0x44
 8005522:	4b54      	ldr	r3, [pc, #336]	; (8005674 <HAL_GPIO_Init+0x2e8>)
 8005524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800552e:	4a52      	ldr	r2, [pc, #328]	; (8005678 <HAL_GPIO_Init+0x2ec>)
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	089b      	lsrs	r3, r3, #2
 8005534:	3302      	adds	r3, #2
 8005536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800553a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	220f      	movs	r2, #15
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	43db      	mvns	r3, r3
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	4013      	ands	r3, r2
 8005550:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a49      	ldr	r2, [pc, #292]	; (800567c <HAL_GPIO_Init+0x2f0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d019      	beq.n	800558e <HAL_GPIO_Init+0x202>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a48      	ldr	r2, [pc, #288]	; (8005680 <HAL_GPIO_Init+0x2f4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d013      	beq.n	800558a <HAL_GPIO_Init+0x1fe>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a47      	ldr	r2, [pc, #284]	; (8005684 <HAL_GPIO_Init+0x2f8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00d      	beq.n	8005586 <HAL_GPIO_Init+0x1fa>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a46      	ldr	r2, [pc, #280]	; (8005688 <HAL_GPIO_Init+0x2fc>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d007      	beq.n	8005582 <HAL_GPIO_Init+0x1f6>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a45      	ldr	r2, [pc, #276]	; (800568c <HAL_GPIO_Init+0x300>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d101      	bne.n	800557e <HAL_GPIO_Init+0x1f2>
 800557a:	2304      	movs	r3, #4
 800557c:	e008      	b.n	8005590 <HAL_GPIO_Init+0x204>
 800557e:	2307      	movs	r3, #7
 8005580:	e006      	b.n	8005590 <HAL_GPIO_Init+0x204>
 8005582:	2303      	movs	r3, #3
 8005584:	e004      	b.n	8005590 <HAL_GPIO_Init+0x204>
 8005586:	2302      	movs	r3, #2
 8005588:	e002      	b.n	8005590 <HAL_GPIO_Init+0x204>
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <HAL_GPIO_Init+0x204>
 800558e:	2300      	movs	r3, #0
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	f002 0203 	and.w	r2, r2, #3
 8005596:	0092      	lsls	r2, r2, #2
 8005598:	4093      	lsls	r3, r2
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	4313      	orrs	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055a0:	4935      	ldr	r1, [pc, #212]	; (8005678 <HAL_GPIO_Init+0x2ec>)
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	089b      	lsrs	r3, r3, #2
 80055a6:	3302      	adds	r3, #2
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055ae:	4b38      	ldr	r3, [pc, #224]	; (8005690 <HAL_GPIO_Init+0x304>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	43db      	mvns	r3, r3
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	4013      	ands	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055d2:	4a2f      	ldr	r2, [pc, #188]	; (8005690 <HAL_GPIO_Init+0x304>)
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80055d8:	4b2d      	ldr	r3, [pc, #180]	; (8005690 <HAL_GPIO_Init+0x304>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	43db      	mvns	r3, r3
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	4013      	ands	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055fc:	4a24      	ldr	r2, [pc, #144]	; (8005690 <HAL_GPIO_Init+0x304>)
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005602:	4b23      	ldr	r3, [pc, #140]	; (8005690 <HAL_GPIO_Init+0x304>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	43db      	mvns	r3, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	4013      	ands	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005626:	4a1a      	ldr	r2, [pc, #104]	; (8005690 <HAL_GPIO_Init+0x304>)
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800562c:	4b18      	ldr	r3, [pc, #96]	; (8005690 <HAL_GPIO_Init+0x304>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	43db      	mvns	r3, r3
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	4013      	ands	r3, r2
 800563a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005650:	4a0f      	ldr	r2, [pc, #60]	; (8005690 <HAL_GPIO_Init+0x304>)
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	3301      	adds	r3, #1
 800565a:	61fb      	str	r3, [r7, #28]
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	2b0f      	cmp	r3, #15
 8005660:	f67f aea2 	bls.w	80053a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop
 8005668:	3724      	adds	r7, #36	; 0x24
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40023800 	.word	0x40023800
 8005678:	40013800 	.word	0x40013800
 800567c:	40020000 	.word	0x40020000
 8005680:	40020400 	.word	0x40020400
 8005684:	40020800 	.word	0x40020800
 8005688:	40020c00 	.word	0x40020c00
 800568c:	40021000 	.word	0x40021000
 8005690:	40013c00 	.word	0x40013c00

08005694 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691a      	ldr	r2, [r3, #16]
 80056a4:	887b      	ldrh	r3, [r7, #2]
 80056a6:	4013      	ands	r3, r2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80056ac:	2301      	movs	r3, #1
 80056ae:	73fb      	strb	r3, [r7, #15]
 80056b0:	e001      	b.n	80056b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056b2:	2300      	movs	r3, #0
 80056b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	460b      	mov	r3, r1
 80056ce:	807b      	strh	r3, [r7, #2]
 80056d0:	4613      	mov	r3, r2
 80056d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056d4:	787b      	ldrb	r3, [r7, #1]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056da:	887a      	ldrh	r2, [r7, #2]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80056e0:	e003      	b.n	80056ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80056e2:	887b      	ldrh	r3, [r7, #2]
 80056e4:	041a      	lsls	r2, r3, #16
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	619a      	str	r2, [r3, #24]
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	4603      	mov	r3, r0
 8005700:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005702:	4b08      	ldr	r3, [pc, #32]	; (8005724 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005704:	695a      	ldr	r2, [r3, #20]
 8005706:	88fb      	ldrh	r3, [r7, #6]
 8005708:	4013      	ands	r3, r2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d006      	beq.n	800571c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800570e:	4a05      	ldr	r2, [pc, #20]	; (8005724 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005714:	88fb      	ldrh	r3, [r7, #6]
 8005716:	4618      	mov	r0, r3
 8005718:	f7fc fa7e 	bl	8001c18 <HAL_GPIO_EXTI_Callback>
  }
}
 800571c:	bf00      	nop
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40013c00 	.word	0x40013c00

08005728 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e12b      	b.n	8005992 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d106      	bne.n	8005754 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fe fdcc 	bl	80042ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2224      	movs	r2, #36	; 0x24
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0201 	bic.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800577a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800578a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800578c:	f002 fb66 	bl	8007e5c <HAL_RCC_GetPCLK1Freq>
 8005790:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	4a81      	ldr	r2, [pc, #516]	; (800599c <HAL_I2C_Init+0x274>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d807      	bhi.n	80057ac <HAL_I2C_Init+0x84>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4a80      	ldr	r2, [pc, #512]	; (80059a0 <HAL_I2C_Init+0x278>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	bf94      	ite	ls
 80057a4:	2301      	movls	r3, #1
 80057a6:	2300      	movhi	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	e006      	b.n	80057ba <HAL_I2C_Init+0x92>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4a7d      	ldr	r2, [pc, #500]	; (80059a4 <HAL_I2C_Init+0x27c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	bf94      	ite	ls
 80057b4:	2301      	movls	r3, #1
 80057b6:	2300      	movhi	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e0e7      	b.n	8005992 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4a78      	ldr	r2, [pc, #480]	; (80059a8 <HAL_I2C_Init+0x280>)
 80057c6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ca:	0c9b      	lsrs	r3, r3, #18
 80057cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	4a6a      	ldr	r2, [pc, #424]	; (800599c <HAL_I2C_Init+0x274>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d802      	bhi.n	80057fc <HAL_I2C_Init+0xd4>
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	3301      	adds	r3, #1
 80057fa:	e009      	b.n	8005810 <HAL_I2C_Init+0xe8>
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005802:	fb02 f303 	mul.w	r3, r2, r3
 8005806:	4a69      	ldr	r2, [pc, #420]	; (80059ac <HAL_I2C_Init+0x284>)
 8005808:	fba2 2303 	umull	r2, r3, r2, r3
 800580c:	099b      	lsrs	r3, r3, #6
 800580e:	3301      	adds	r3, #1
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6812      	ldr	r2, [r2, #0]
 8005814:	430b      	orrs	r3, r1
 8005816:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005822:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	495c      	ldr	r1, [pc, #368]	; (800599c <HAL_I2C_Init+0x274>)
 800582c:	428b      	cmp	r3, r1
 800582e:	d819      	bhi.n	8005864 <HAL_I2C_Init+0x13c>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	1e59      	subs	r1, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	fbb1 f3f3 	udiv	r3, r1, r3
 800583e:	1c59      	adds	r1, r3, #1
 8005840:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005844:	400b      	ands	r3, r1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <HAL_I2C_Init+0x138>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1e59      	subs	r1, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	fbb1 f3f3 	udiv	r3, r1, r3
 8005858:	3301      	adds	r3, #1
 800585a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800585e:	e051      	b.n	8005904 <HAL_I2C_Init+0x1dc>
 8005860:	2304      	movs	r3, #4
 8005862:	e04f      	b.n	8005904 <HAL_I2C_Init+0x1dc>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d111      	bne.n	8005890 <HAL_I2C_Init+0x168>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	1e58      	subs	r0, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6859      	ldr	r1, [r3, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	440b      	add	r3, r1
 800587a:	fbb0 f3f3 	udiv	r3, r0, r3
 800587e:	3301      	adds	r3, #1
 8005880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005884:	2b00      	cmp	r3, #0
 8005886:	bf0c      	ite	eq
 8005888:	2301      	moveq	r3, #1
 800588a:	2300      	movne	r3, #0
 800588c:	b2db      	uxtb	r3, r3
 800588e:	e012      	b.n	80058b6 <HAL_I2C_Init+0x18e>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	1e58      	subs	r0, r3, #1
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6859      	ldr	r1, [r3, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	440b      	add	r3, r1
 800589e:	0099      	lsls	r1, r3, #2
 80058a0:	440b      	add	r3, r1
 80058a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80058a6:	3301      	adds	r3, #1
 80058a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	bf0c      	ite	eq
 80058b0:	2301      	moveq	r3, #1
 80058b2:	2300      	movne	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <HAL_I2C_Init+0x196>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e022      	b.n	8005904 <HAL_I2C_Init+0x1dc>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10e      	bne.n	80058e4 <HAL_I2C_Init+0x1bc>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	1e58      	subs	r0, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6859      	ldr	r1, [r3, #4]
 80058ce:	460b      	mov	r3, r1
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	440b      	add	r3, r1
 80058d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80058d8:	3301      	adds	r3, #1
 80058da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e2:	e00f      	b.n	8005904 <HAL_I2C_Init+0x1dc>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	1e58      	subs	r0, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6859      	ldr	r1, [r3, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	0099      	lsls	r1, r3, #2
 80058f4:	440b      	add	r3, r1
 80058f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80058fa:	3301      	adds	r3, #1
 80058fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005900:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	6809      	ldr	r1, [r1, #0]
 8005908:	4313      	orrs	r3, r2
 800590a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	69da      	ldr	r2, [r3, #28]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005932:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6911      	ldr	r1, [r2, #16]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	68d2      	ldr	r2, [r2, #12]
 800593e:	4311      	orrs	r1, r2
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6812      	ldr	r2, [r2, #0]
 8005944:	430b      	orrs	r3, r1
 8005946:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	695a      	ldr	r2, [r3, #20]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	000186a0 	.word	0x000186a0
 80059a0:	001e847f 	.word	0x001e847f
 80059a4:	003d08ff 	.word	0x003d08ff
 80059a8:	431bde83 	.word	0x431bde83
 80059ac:	10624dd3 	.word	0x10624dd3

080059b0 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	607a      	str	r2, [r7, #4]
 80059ba:	461a      	mov	r2, r3
 80059bc:	460b      	mov	r3, r1
 80059be:	817b      	strh	r3, [r7, #10]
 80059c0:	4613      	mov	r3, r2
 80059c2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	f040 8085 	bne.w	8005ae0 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80059d6:	4b46      	ldr	r3, [pc, #280]	; (8005af0 <HAL_I2C_Master_Transmit_IT+0x140>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	08db      	lsrs	r3, r3, #3
 80059dc:	4a45      	ldr	r2, [pc, #276]	; (8005af4 <HAL_I2C_Master_Transmit_IT+0x144>)
 80059de:	fba2 2303 	umull	r2, r3, r2, r3
 80059e2:	0a1a      	lsrs	r2, r3, #8
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	009a      	lsls	r2, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d116      	bne.n	8005a2a <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f043 0220 	orr.w	r2, r3, #32
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e05b      	b.n	8005ae2 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d0db      	beq.n	80059f0 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_I2C_Master_Transmit_IT+0x96>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e04d      	b.n	8005ae2 <HAL_I2C_Master_Transmit_IT+0x132>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d007      	beq.n	8005a6c <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0201 	orr.w	r2, r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2221      	movs	r2, #33	; 0x21
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2210      	movs	r2, #16
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	893a      	ldrh	r2, [r7, #8]
 8005a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4a13      	ldr	r2, [pc, #76]	; (8005af8 <HAL_I2C_Master_Transmit_IT+0x148>)
 8005aac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005aae:	897a      	ldrh	r2, [r7, #10]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ac2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005ada:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	e000      	b.n	8005ae2 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8005ae0:	2302      	movs	r3, #2
  }
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	20000018 	.word	0x20000018
 8005af4:	14f8b589 	.word	0x14f8b589
 8005af8:	ffff0000 	.word	0xffff0000

08005afc <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	607a      	str	r2, [r7, #4]
 8005b06:	461a      	mov	r2, r3
 8005b08:	460b      	mov	r3, r1
 8005b0a:	817b      	strh	r3, [r7, #10]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b20      	cmp	r3, #32
 8005b1e:	f040 808d 	bne.w	8005c3c <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b22:	4b4a      	ldr	r3, [pc, #296]	; (8005c4c <HAL_I2C_Master_Receive_IT+0x150>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	08db      	lsrs	r3, r3, #3
 8005b28:	4a49      	ldr	r2, [pc, #292]	; (8005c50 <HAL_I2C_Master_Receive_IT+0x154>)
 8005b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2e:	0a1a      	lsrs	r2, r3, #8
 8005b30:	4613      	mov	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	009a      	lsls	r2, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d116      	bne.n	8005b76 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	f043 0220 	orr.w	r2, r3, #32
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e063      	b.n	8005c3e <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d0db      	beq.n	8005b3c <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d101      	bne.n	8005b92 <HAL_I2C_Master_Receive_IT+0x96>
 8005b8e:	2302      	movs	r3, #2
 8005b90:	e055      	b.n	8005c3e <HAL_I2C_Master_Receive_IT+0x142>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d007      	beq.n	8005bb8 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0201 	orr.w	r2, r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2222      	movs	r2, #34	; 0x22
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2210      	movs	r2, #16
 8005bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	893a      	ldrh	r2, [r7, #8]
 8005be8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4a17      	ldr	r2, [pc, #92]	; (8005c54 <HAL_I2C_Master_Receive_IT+0x158>)
 8005bf8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005bfa:	897a      	ldrh	r2, [r7, #10]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c0e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c1e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005c36:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	e000      	b.n	8005c3e <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8005c3c:	2302      	movs	r3, #2
  }
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	20000018 	.word	0x20000018
 8005c50:	14f8b589 	.word	0x14f8b589
 8005c54:	ffff0000 	.word	0xffff0000

08005c58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b088      	sub	sp, #32
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c80:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	2b10      	cmp	r3, #16
 8005c86:	d003      	beq.n	8005c90 <HAL_I2C_EV_IRQHandler+0x38>
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
 8005c8a:	2b40      	cmp	r3, #64	; 0x40
 8005c8c:	f040 80bd 	bne.w	8005e0a <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10d      	bne.n	8005cc6 <HAL_I2C_EV_IRQHandler+0x6e>
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005cb0:	d003      	beq.n	8005cba <HAL_I2C_EV_IRQHandler+0x62>
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005cb8:	d101      	bne.n	8005cbe <HAL_I2C_EV_IRQHandler+0x66>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e000      	b.n	8005cc0 <HAL_I2C_EV_IRQHandler+0x68>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	f000 812e 	beq.w	8005f22 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00c      	beq.n	8005cea <HAL_I2C_EV_IRQHandler+0x92>
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	0a5b      	lsrs	r3, r3, #9
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d006      	beq.n	8005cea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f001 fc55 	bl	800758c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fd62 	bl	80067ac <I2C_Master_SB>
 8005ce8:	e08e      	b.n	8005e08 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	08db      	lsrs	r3, r3, #3
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d009      	beq.n	8005d0a <HAL_I2C_EV_IRQHandler+0xb2>
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	0a5b      	lsrs	r3, r3, #9
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fdd8 	bl	80068b8 <I2C_Master_ADD10>
 8005d08:	e07e      	b.n	8005e08 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	085b      	lsrs	r3, r3, #1
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d009      	beq.n	8005d2a <HAL_I2C_EV_IRQHandler+0xd2>
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	0a5b      	lsrs	r3, r3, #9
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fdf2 	bl	800690c <I2C_Master_ADDR>
 8005d28:	e06e      	b.n	8005e08 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	089b      	lsrs	r3, r3, #2
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d037      	beq.n	8005da6 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d44:	f000 80ef 	beq.w	8005f26 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	09db      	lsrs	r3, r3, #7
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00f      	beq.n	8005d74 <HAL_I2C_EV_IRQHandler+0x11c>
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	0a9b      	lsrs	r3, r3, #10
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d009      	beq.n	8005d74 <HAL_I2C_EV_IRQHandler+0x11c>
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	089b      	lsrs	r3, r3, #2
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d103      	bne.n	8005d74 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f9ef 	bl	8006150 <I2C_MasterTransmit_TXE>
 8005d72:	e049      	b.n	8005e08 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	089b      	lsrs	r3, r3, #2
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 80d2 	beq.w	8005f26 <HAL_I2C_EV_IRQHandler+0x2ce>
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	0a5b      	lsrs	r3, r3, #9
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 80cb 	beq.w	8005f26 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
 8005d92:	2b10      	cmp	r3, #16
 8005d94:	d103      	bne.n	8005d9e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fa76 	bl	8006288 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d9c:	e0c3      	b.n	8005f26 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fada 	bl	8006358 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005da4:	e0bf      	b.n	8005f26 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005db4:	f000 80b7 	beq.w	8005f26 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	099b      	lsrs	r3, r3, #6
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00f      	beq.n	8005de4 <HAL_I2C_EV_IRQHandler+0x18c>
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	0a9b      	lsrs	r3, r3, #10
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d009      	beq.n	8005de4 <HAL_I2C_EV_IRQHandler+0x18c>
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	089b      	lsrs	r3, r3, #2
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d103      	bne.n	8005de4 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fb4a 	bl	8006476 <I2C_MasterReceive_RXNE>
 8005de2:	e011      	b.n	8005e08 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	089b      	lsrs	r3, r3, #2
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 809a 	beq.w	8005f26 <HAL_I2C_EV_IRQHandler+0x2ce>
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	0a5b      	lsrs	r3, r3, #9
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 8093 	beq.w	8005f26 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fbe9 	bl	80065d8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e06:	e08e      	b.n	8005f26 <HAL_I2C_EV_IRQHandler+0x2ce>
 8005e08:	e08d      	b.n	8005f26 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d004      	beq.n	8005e1c <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	61fb      	str	r3, [r7, #28]
 8005e1a:	e007      	b.n	8005e2c <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	085b      	lsrs	r3, r3, #1
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d012      	beq.n	8005e5e <HAL_I2C_EV_IRQHandler+0x206>
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	0a5b      	lsrs	r3, r3, #9
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00c      	beq.n	8005e5e <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005e54:	69b9      	ldr	r1, [r7, #24]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 ffa7 	bl	8006daa <I2C_Slave_ADDR>
 8005e5c:	e066      	b.n	8005f2c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	091b      	lsrs	r3, r3, #4
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d009      	beq.n	8005e7e <HAL_I2C_EV_IRQHandler+0x226>
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	0a5b      	lsrs	r3, r3, #9
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 ffdc 	bl	8006e34 <I2C_Slave_STOPF>
 8005e7c:	e056      	b.n	8005f2c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e7e:	7bbb      	ldrb	r3, [r7, #14]
 8005e80:	2b21      	cmp	r3, #33	; 0x21
 8005e82:	d002      	beq.n	8005e8a <HAL_I2C_EV_IRQHandler+0x232>
 8005e84:	7bbb      	ldrb	r3, [r7, #14]
 8005e86:	2b29      	cmp	r3, #41	; 0x29
 8005e88:	d125      	bne.n	8005ed6 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	09db      	lsrs	r3, r3, #7
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00f      	beq.n	8005eb6 <HAL_I2C_EV_IRQHandler+0x25e>
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	0a9b      	lsrs	r3, r3, #10
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d009      	beq.n	8005eb6 <HAL_I2C_EV_IRQHandler+0x25e>
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	089b      	lsrs	r3, r3, #2
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 febd 	bl	8006c2e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005eb4:	e039      	b.n	8005f2a <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	089b      	lsrs	r3, r3, #2
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d033      	beq.n	8005f2a <HAL_I2C_EV_IRQHandler+0x2d2>
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	0a5b      	lsrs	r3, r3, #9
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d02d      	beq.n	8005f2a <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 feea 	bl	8006ca8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ed4:	e029      	b.n	8005f2a <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	099b      	lsrs	r3, r3, #6
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00f      	beq.n	8005f02 <HAL_I2C_EV_IRQHandler+0x2aa>
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	0a9b      	lsrs	r3, r3, #10
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <HAL_I2C_EV_IRQHandler+0x2aa>
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	089b      	lsrs	r3, r3, #2
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d103      	bne.n	8005f02 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fef5 	bl	8006cea <I2C_SlaveReceive_RXNE>
 8005f00:	e014      	b.n	8005f2c <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	089b      	lsrs	r3, r3, #2
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00e      	beq.n	8005f2c <HAL_I2C_EV_IRQHandler+0x2d4>
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	0a5b      	lsrs	r3, r3, #9
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d008      	beq.n	8005f2c <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 ff23 	bl	8006d66 <I2C_SlaveReceive_BTF>
 8005f20:	e004      	b.n	8005f2c <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8005f22:	bf00      	nop
 8005f24:	e002      	b.n	8005f2c <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f26:	bf00      	nop
 8005f28:	e000      	b.n	8005f2c <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f2a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005f2c:	3720      	adds	r7, #32
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b08a      	sub	sp, #40	; 0x28
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f54:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	0a1b      	lsrs	r3, r3, #8
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00e      	beq.n	8005f80 <HAL_I2C_ER_IRQHandler+0x4e>
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	0a1b      	lsrs	r3, r3, #8
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d008      	beq.n	8005f80 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	f043 0301 	orr.w	r3, r3, #1
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f7e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	0a5b      	lsrs	r3, r3, #9
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00e      	beq.n	8005faa <HAL_I2C_ER_IRQHandler+0x78>
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	0a1b      	lsrs	r3, r3, #8
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d008      	beq.n	8005faa <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	f043 0302 	orr.w	r3, r3, #2
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005fa8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	0a9b      	lsrs	r3, r3, #10
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d03f      	beq.n	8006036 <HAL_I2C_ER_IRQHandler+0x104>
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	0a1b      	lsrs	r3, r3, #8
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d039      	beq.n	8006036 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005fc2:	7efb      	ldrb	r3, [r7, #27]
 8005fc4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005fdc:	7ebb      	ldrb	r3, [r7, #26]
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	d112      	bne.n	8006008 <HAL_I2C_ER_IRQHandler+0xd6>
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10f      	bne.n	8006008 <HAL_I2C_ER_IRQHandler+0xd6>
 8005fe8:	7cfb      	ldrb	r3, [r7, #19]
 8005fea:	2b21      	cmp	r3, #33	; 0x21
 8005fec:	d008      	beq.n	8006000 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005fee:	7cfb      	ldrb	r3, [r7, #19]
 8005ff0:	2b29      	cmp	r3, #41	; 0x29
 8005ff2:	d005      	beq.n	8006000 <HAL_I2C_ER_IRQHandler+0xce>
 8005ff4:	7cfb      	ldrb	r3, [r7, #19]
 8005ff6:	2b28      	cmp	r3, #40	; 0x28
 8005ff8:	d106      	bne.n	8006008 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b21      	cmp	r3, #33	; 0x21
 8005ffe:	d103      	bne.n	8006008 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 f847 	bl	8007094 <I2C_Slave_AF>
 8006006:	e016      	b.n	8006036 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006010:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	f043 0304 	orr.w	r3, r3, #4
 8006018:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800601a:	7efb      	ldrb	r3, [r7, #27]
 800601c:	2b10      	cmp	r3, #16
 800601e:	d002      	beq.n	8006026 <HAL_I2C_ER_IRQHandler+0xf4>
 8006020:	7efb      	ldrb	r3, [r7, #27]
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d107      	bne.n	8006036 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006034:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	0adb      	lsrs	r3, r3, #11
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00e      	beq.n	8006060 <HAL_I2C_ER_IRQHandler+0x12e>
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	0a1b      	lsrs	r3, r3, #8
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d008      	beq.n	8006060 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	f043 0308 	orr.w	r3, r3, #8
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800605e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	2b00      	cmp	r3, #0
 8006064:	d008      	beq.n	8006078 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	431a      	orrs	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f001 f87e 	bl	8007174 <I2C_ITError>
  }
}
 8006078:	bf00      	nop
 800607a:	3728      	adds	r7, #40	; 0x28
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	70fb      	strb	r3, [r7, #3]
 80060dc:	4613      	mov	r3, r2
 80060de:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006166:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006172:	2b00      	cmp	r3, #0
 8006174:	d150      	bne.n	8006218 <I2C_MasterTransmit_TXE+0xc8>
 8006176:	7bfb      	ldrb	r3, [r7, #15]
 8006178:	2b21      	cmp	r3, #33	; 0x21
 800617a:	d14d      	bne.n	8006218 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b08      	cmp	r3, #8
 8006180:	d01d      	beq.n	80061be <I2C_MasterTransmit_TXE+0x6e>
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b20      	cmp	r3, #32
 8006186:	d01a      	beq.n	80061be <I2C_MasterTransmit_TXE+0x6e>
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800618e:	d016      	beq.n	80061be <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800619e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2211      	movs	r2, #17
 80061a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7ff ff62 	bl	8006080 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80061bc:	e060      	b.n	8006280 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061cc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061dc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b40      	cmp	r3, #64	; 0x40
 80061f6:	d107      	bne.n	8006208 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7ff ff7d 	bl	8006100 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006206:	e03b      	b.n	8006280 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff ff35 	bl	8006080 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006216:	e033      	b.n	8006280 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	2b21      	cmp	r3, #33	; 0x21
 800621c:	d005      	beq.n	800622a <I2C_MasterTransmit_TXE+0xda>
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	2b40      	cmp	r3, #64	; 0x40
 8006222:	d12d      	bne.n	8006280 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006224:	7bfb      	ldrb	r3, [r7, #15]
 8006226:	2b22      	cmp	r3, #34	; 0x22
 8006228:	d12a      	bne.n	8006280 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d108      	bne.n	8006246 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006242:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006244:	e01c      	b.n	8006280 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b40      	cmp	r3, #64	; 0x40
 8006250:	d103      	bne.n	800625a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f880 	bl	8006358 <I2C_MemoryTransmit_TXE_BTF>
}
 8006258:	e012      	b.n	8006280 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	781a      	ldrb	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006274:	b29b      	uxth	r3, r3
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800627e:	e7ff      	b.n	8006280 <I2C_MasterTransmit_TXE+0x130>
 8006280:	bf00      	nop
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006294:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b21      	cmp	r3, #33	; 0x21
 80062a0:	d156      	bne.n	8006350 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d012      	beq.n	80062d2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	781a      	ldrb	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	1c5a      	adds	r2, r3, #1
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	3b01      	subs	r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80062d0:	e03e      	b.n	8006350 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d01d      	beq.n	8006314 <I2C_MasterTransmit_BTF+0x8c>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d01a      	beq.n	8006314 <I2C_MasterTransmit_BTF+0x8c>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062e4:	d016      	beq.n	8006314 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062f4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2211      	movs	r2, #17
 80062fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff feb7 	bl	8006080 <HAL_I2C_MasterTxCpltCallback>
}
 8006312:	e01d      	b.n	8006350 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006322:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006332:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2220      	movs	r2, #32
 800633e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7ff fe98 	bl	8006080 <HAL_I2C_MasterTxCpltCallback>
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006366:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636c:	2b00      	cmp	r3, #0
 800636e:	d11d      	bne.n	80063ac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006374:	2b01      	cmp	r3, #1
 8006376:	d10b      	bne.n	8006390 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800637c:	b2da      	uxtb	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006388:	1c9a      	adds	r2, r3, #2
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800638e:	e06e      	b.n	800646e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006394:	b29b      	uxth	r3, r3
 8006396:	121b      	asrs	r3, r3, #8
 8006398:	b2da      	uxtb	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80063aa:	e060      	b.n	800646e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d10b      	bne.n	80063cc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80063ca:	e050      	b.n	800646e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d14c      	bne.n	800646e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	2b22      	cmp	r3, #34	; 0x22
 80063d8:	d108      	bne.n	80063ec <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063e8:	601a      	str	r2, [r3, #0]
}
 80063ea:	e040      	b.n	800646e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d015      	beq.n	8006422 <I2C_MemoryTransmit_TXE_BTF+0xca>
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	2b21      	cmp	r3, #33	; 0x21
 80063fa:	d112      	bne.n	8006422 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	781a      	ldrb	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006416:	b29b      	uxth	r3, r3
 8006418:	3b01      	subs	r3, #1
 800641a:	b29a      	uxth	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006420:	e025      	b.n	800646e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d120      	bne.n	800646e <I2C_MemoryTransmit_TXE_BTF+0x116>
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	2b21      	cmp	r3, #33	; 0x21
 8006430:	d11d      	bne.n	800646e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006440:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006450:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7ff fe49 	bl	8006100 <HAL_I2C_MemTxCpltCallback>
}
 800646e:	bf00      	nop
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b22      	cmp	r3, #34	; 0x22
 8006488:	f040 80a2 	bne.w	80065d0 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006490:	b29b      	uxth	r3, r3
 8006492:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2b03      	cmp	r3, #3
 8006498:	d921      	bls.n	80064de <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	691a      	ldr	r2, [r3, #16]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	f040 8082 	bne.w	80065d0 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064da:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80064dc:	e078      	b.n	80065d0 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d074      	beq.n	80065d0 <I2C_MasterReceive_RXNE+0x15a>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d002      	beq.n	80064f2 <I2C_MasterReceive_RXNE+0x7c>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d16e      	bne.n	80065d0 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f001 f818 	bl	8007528 <I2C_WaitOnSTOPRequestThroughIT>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d142      	bne.n	8006584 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800650c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800651c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	691a      	ldr	r2, [r3, #16]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653a:	b29b      	uxth	r3, r3
 800653c:	3b01      	subs	r3, #1
 800653e:	b29a      	uxth	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b40      	cmp	r3, #64	; 0x40
 8006556:	d10a      	bne.n	800656e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7ff fdd4 	bl	8006114 <HAL_I2C_MemRxCpltCallback>
}
 800656c:	e030      	b.n	80065d0 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2212      	movs	r2, #18
 800657a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7ff fd89 	bl	8006094 <HAL_I2C_MasterRxCpltCallback>
}
 8006582:	e025      	b.n	80065d0 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006592:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	691a      	ldr	r2, [r3, #16]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2220      	movs	r2, #32
 80065be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff fdac 	bl	8006128 <HAL_I2C_ErrorCallback>
}
 80065d0:	bf00      	nop
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	d11b      	bne.n	8006628 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065fe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691a      	ldr	r2, [r3, #16]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661c:	b29b      	uxth	r3, r3
 800661e:	3b01      	subs	r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006626:	e0bd      	b.n	80067a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b03      	cmp	r3, #3
 8006630:	d129      	bne.n	8006686 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006640:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b04      	cmp	r3, #4
 8006646:	d00a      	beq.n	800665e <I2C_MasterReceive_BTF+0x86>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b02      	cmp	r3, #2
 800664c:	d007      	beq.n	800665e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800665c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	691a      	ldr	r2, [r3, #16]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667a:	b29b      	uxth	r3, r3
 800667c:	3b01      	subs	r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006684:	e08e      	b.n	80067a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668a:	b29b      	uxth	r3, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d176      	bne.n	800677e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d002      	beq.n	800669c <I2C_MasterReceive_BTF+0xc4>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b10      	cmp	r3, #16
 800669a:	d108      	bne.n	80066ae <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066aa:	601a      	str	r2, [r3, #0]
 80066ac:	e019      	b.n	80066e2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d002      	beq.n	80066ba <I2C_MasterReceive_BTF+0xe2>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d108      	bne.n	80066cc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	e00a      	b.n	80066e2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b10      	cmp	r3, #16
 80066d0:	d007      	beq.n	80066e2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	691a      	ldr	r2, [r3, #16]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fe:	b29b      	uxth	r3, r3
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691a      	ldr	r2, [r3, #16]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006724:	b29b      	uxth	r3, r3
 8006726:	3b01      	subs	r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800673c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2220      	movs	r2, #32
 8006742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b40      	cmp	r3, #64	; 0x40
 8006750:	d10a      	bne.n	8006768 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff fcd7 	bl	8006114 <HAL_I2C_MemRxCpltCallback>
}
 8006766:	e01d      	b.n	80067a4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2212      	movs	r2, #18
 8006774:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff fc8c 	bl	8006094 <HAL_I2C_MasterRxCpltCallback>
}
 800677c:	e012      	b.n	80067a4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	691a      	ldr	r2, [r3, #16]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679a:	b29b      	uxth	r3, r3
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80067a4:	bf00      	nop
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b40      	cmp	r3, #64	; 0x40
 80067be:	d117      	bne.n	80067f0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d109      	bne.n	80067dc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	461a      	mov	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067d8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80067da:	e067      	b.n	80068ac <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	f043 0301 	orr.w	r3, r3, #1
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	611a      	str	r2, [r3, #16]
}
 80067ee:	e05d      	b.n	80068ac <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067f8:	d133      	bne.n	8006862 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b21      	cmp	r3, #33	; 0x21
 8006804:	d109      	bne.n	800681a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680a:	b2db      	uxtb	r3, r3
 800680c:	461a      	mov	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006816:	611a      	str	r2, [r3, #16]
 8006818:	e008      	b.n	800682c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681e:	b2db      	uxtb	r3, r3
 8006820:	f043 0301 	orr.w	r3, r3, #1
 8006824:	b2da      	uxtb	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006830:	2b00      	cmp	r3, #0
 8006832:	d004      	beq.n	800683e <I2C_Master_SB+0x92>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683a:	2b00      	cmp	r3, #0
 800683c:	d108      	bne.n	8006850 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006842:	2b00      	cmp	r3, #0
 8006844:	d032      	beq.n	80068ac <I2C_Master_SB+0x100>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d02d      	beq.n	80068ac <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800685e:	605a      	str	r2, [r3, #4]
}
 8006860:	e024      	b.n	80068ac <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10e      	bne.n	8006888 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686e:	b29b      	uxth	r3, r3
 8006870:	11db      	asrs	r3, r3, #7
 8006872:	b2db      	uxtb	r3, r3
 8006874:	f003 0306 	and.w	r3, r3, #6
 8006878:	b2db      	uxtb	r3, r3
 800687a:	f063 030f 	orn	r3, r3, #15
 800687e:	b2da      	uxtb	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	611a      	str	r2, [r3, #16]
}
 8006886:	e011      	b.n	80068ac <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800688c:	2b01      	cmp	r3, #1
 800688e:	d10d      	bne.n	80068ac <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006894:	b29b      	uxth	r3, r3
 8006896:	11db      	asrs	r3, r3, #7
 8006898:	b2db      	uxtb	r3, r3
 800689a:	f003 0306 	and.w	r3, r3, #6
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	f063 030e 	orn	r3, r3, #14
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	611a      	str	r2, [r3, #16]
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d004      	beq.n	80068de <I2C_Master_ADD10+0x26>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d108      	bne.n	80068f0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00c      	beq.n	8006900 <I2C_Master_ADD10+0x48>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d007      	beq.n	8006900 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068fe:	605a      	str	r2, [r3, #4]
  }
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800690c:	b480      	push	{r7}
 800690e:	b091      	sub	sp, #68	; 0x44
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800691a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006922:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006928:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b22      	cmp	r3, #34	; 0x22
 8006934:	f040 8169 	bne.w	8006c0a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10f      	bne.n	8006960 <I2C_Master_ADDR+0x54>
 8006940:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006944:	2b40      	cmp	r3, #64	; 0x40
 8006946:	d10b      	bne.n	8006960 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006948:	2300      	movs	r3, #0
 800694a:	633b      	str	r3, [r7, #48]	; 0x30
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	633b      	str	r3, [r7, #48]	; 0x30
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	633b      	str	r3, [r7, #48]	; 0x30
 800695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695e:	e160      	b.n	8006c22 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006964:	2b00      	cmp	r3, #0
 8006966:	d11d      	bne.n	80069a4 <I2C_Master_ADDR+0x98>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006970:	d118      	bne.n	80069a4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006972:	2300      	movs	r3, #0
 8006974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006986:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006996:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	651a      	str	r2, [r3, #80]	; 0x50
 80069a2:	e13e      	b.n	8006c22 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d113      	bne.n	80069d6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ae:	2300      	movs	r3, #0
 80069b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	e115      	b.n	8006c02 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069da:	b29b      	uxth	r3, r3
 80069dc:	2b01      	cmp	r3, #1
 80069de:	f040 808a 	bne.w	8006af6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80069e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069e8:	d137      	bne.n	8006a5a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069f8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a08:	d113      	bne.n	8006a32 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a18:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	627b      	str	r3, [r7, #36]	; 0x24
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	e0e7      	b.n	8006c02 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a32:	2300      	movs	r3, #0
 8006a34:	623b      	str	r3, [r7, #32]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	623b      	str	r3, [r7, #32]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	623b      	str	r3, [r7, #32]
 8006a46:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	e0d3      	b.n	8006c02 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d02e      	beq.n	8006abe <I2C_Master_ADDR+0x1b2>
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	2b20      	cmp	r3, #32
 8006a64:	d02b      	beq.n	8006abe <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a68:	2b12      	cmp	r3, #18
 8006a6a:	d102      	bne.n	8006a72 <I2C_Master_ADDR+0x166>
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d125      	bne.n	8006abe <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	d00e      	beq.n	8006a96 <I2C_Master_ADDR+0x18a>
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d00b      	beq.n	8006a96 <I2C_Master_ADDR+0x18a>
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	2b10      	cmp	r3, #16
 8006a82:	d008      	beq.n	8006a96 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	e007      	b.n	8006aa6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006aa4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	61fb      	str	r3, [r7, #28]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	61fb      	str	r3, [r7, #28]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	61fb      	str	r3, [r7, #28]
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	e0a1      	b.n	8006c02 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006acc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61bb      	str	r3, [r7, #24]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	e085      	b.n	8006c02 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d14d      	bne.n	8006b9c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d016      	beq.n	8006b34 <I2C_Master_ADDR+0x228>
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d013      	beq.n	8006b34 <I2C_Master_ADDR+0x228>
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0e:	2b10      	cmp	r3, #16
 8006b10:	d010      	beq.n	8006b34 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b20:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	e007      	b.n	8006b44 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b42:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b52:	d117      	bne.n	8006b84 <I2C_Master_ADDR+0x278>
 8006b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b5a:	d00b      	beq.n	8006b74 <I2C_Master_ADDR+0x268>
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d008      	beq.n	8006b74 <I2C_Master_ADDR+0x268>
 8006b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d005      	beq.n	8006b74 <I2C_Master_ADDR+0x268>
 8006b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6a:	2b10      	cmp	r3, #16
 8006b6c:	d002      	beq.n	8006b74 <I2C_Master_ADDR+0x268>
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	2b20      	cmp	r3, #32
 8006b72:	d107      	bne.n	8006b84 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b82:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b84:	2300      	movs	r3, #0
 8006b86:	617b      	str	r3, [r7, #20]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	e032      	b.n	8006c02 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006baa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bba:	d117      	bne.n	8006bec <I2C_Master_ADDR+0x2e0>
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bc2:	d00b      	beq.n	8006bdc <I2C_Master_ADDR+0x2d0>
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d008      	beq.n	8006bdc <I2C_Master_ADDR+0x2d0>
 8006bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d005      	beq.n	8006bdc <I2C_Master_ADDR+0x2d0>
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd2:	2b10      	cmp	r3, #16
 8006bd4:	d002      	beq.n	8006bdc <I2C_Master_ADDR+0x2d0>
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	d107      	bne.n	8006bec <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bec:	2300      	movs	r3, #0
 8006bee:	613b      	str	r3, [r7, #16]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	613b      	str	r3, [r7, #16]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	613b      	str	r3, [r7, #16]
 8006c00:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006c08:	e00b      	b.n	8006c22 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60fb      	str	r3, [r7, #12]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
}
 8006c20:	e7ff      	b.n	8006c22 <I2C_Master_ADDR+0x316>
 8006c22:	bf00      	nop
 8006c24:	3744      	adds	r7, #68	; 0x44
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c3c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d02b      	beq.n	8006ca0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	781a      	ldrb	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d114      	bne.n	8006ca0 <I2C_SlaveTransmit_TXE+0x72>
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
 8006c78:	2b29      	cmp	r3, #41	; 0x29
 8006c7a:	d111      	bne.n	8006ca0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c8a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2221      	movs	r2, #33	; 0x21
 8006c90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2228      	movs	r2, #40	; 0x28
 8006c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff fa04 	bl	80060a8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006ca0:	bf00      	nop
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d011      	beq.n	8006cde <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	781a      	ldrb	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006cde:	bf00      	nop
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d02c      	beq.n	8006d5e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	691a      	ldr	r2, [r3, #16]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	b2d2      	uxtb	r2, r2
 8006d10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d114      	bne.n	8006d5e <I2C_SlaveReceive_RXNE+0x74>
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	2b2a      	cmp	r3, #42	; 0x2a
 8006d38:	d111      	bne.n	8006d5e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d48:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2222      	movs	r2, #34	; 0x22
 8006d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2228      	movs	r2, #40	; 0x28
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff f9af 	bl	80060bc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006d5e:	bf00      	nop
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d012      	beq.n	8006d9e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	691a      	ldr	r2, [r3, #16]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d82:	b2d2      	uxtb	r2, r2
 8006d84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	3b01      	subs	r3, #1
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006d9e:	bf00      	nop
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006db4:	2300      	movs	r3, #0
 8006db6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006dc4:	2b28      	cmp	r3, #40	; 0x28
 8006dc6:	d127      	bne.n	8006e18 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	089b      	lsrs	r3, r3, #2
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006de4:	2301      	movs	r3, #1
 8006de6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	09db      	lsrs	r3, r3, #7
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d103      	bne.n	8006dfc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	81bb      	strh	r3, [r7, #12]
 8006dfa:	e002      	b.n	8006e02 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006e0a:	89ba      	ldrh	r2, [r7, #12]
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7ff f95d 	bl	80060d0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006e16:	e008      	b.n	8006e2a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f06f 0202 	mvn.w	r2, #2
 8006e20:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006e2a:	bf00      	nop
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
	...

08006e34 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e42:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e52:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006e54:	2300      	movs	r3, #0
 8006e56:	60bb      	str	r3, [r7, #8]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	60bb      	str	r3, [r7, #8]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 0201 	orr.w	r2, r2, #1
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e80:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e90:	d172      	bne.n	8006f78 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	2b22      	cmp	r3, #34	; 0x22
 8006e96:	d002      	beq.n	8006e9e <I2C_Slave_STOPF+0x6a>
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e9c:	d135      	bne.n	8006f0a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d005      	beq.n	8006ec2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	f043 0204 	orr.w	r2, r3, #4
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ed0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fe f96a 	bl	80051b0 <HAL_DMA_GetState>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d049      	beq.n	8006f76 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee6:	4a69      	ldr	r2, [pc, #420]	; (800708c <I2C_Slave_STOPF+0x258>)
 8006ee8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fd ffb2 	bl	8004e58 <HAL_DMA_Abort_IT>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d03d      	beq.n	8006f76 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f04:	4610      	mov	r0, r2
 8006f06:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f08:	e035      	b.n	8006f76 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d005      	beq.n	8006f2e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	f043 0204 	orr.w	r2, r3, #4
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f3c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fe f934 	bl	80051b0 <HAL_DMA_GetState>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d014      	beq.n	8006f78 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f52:	4a4e      	ldr	r2, [pc, #312]	; (800708c <I2C_Slave_STOPF+0x258>)
 8006f54:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fd ff7c 	bl	8004e58 <HAL_DMA_Abort_IT>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d008      	beq.n	8006f78 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f70:	4610      	mov	r0, r2
 8006f72:	4798      	blx	r3
 8006f74:	e000      	b.n	8006f78 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f76:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d03e      	beq.n	8007000 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	2b04      	cmp	r3, #4
 8006f8e:	d112      	bne.n	8006fb6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	691a      	ldr	r2, [r3, #16]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc0:	2b40      	cmp	r3, #64	; 0x40
 8006fc2:	d112      	bne.n	8006fea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691a      	ldr	r2, [r3, #16]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d005      	beq.n	8007000 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff8:	f043 0204 	orr.w	r2, r3, #4
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f8b3 	bl	8007174 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800700e:	e039      	b.n	8007084 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007010:	7bfb      	ldrb	r3, [r7, #15]
 8007012:	2b2a      	cmp	r3, #42	; 0x2a
 8007014:	d109      	bne.n	800702a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2228      	movs	r2, #40	; 0x28
 8007020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff f849 	bl	80060bc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b28      	cmp	r3, #40	; 0x28
 8007034:	d111      	bne.n	800705a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a15      	ldr	r2, [pc, #84]	; (8007090 <I2C_Slave_STOPF+0x25c>)
 800703a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2220      	movs	r2, #32
 8007046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7ff f84a 	bl	80060ec <HAL_I2C_ListenCpltCallback>
}
 8007058:	e014      	b.n	8007084 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705e:	2b22      	cmp	r3, #34	; 0x22
 8007060:	d002      	beq.n	8007068 <I2C_Slave_STOPF+0x234>
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	2b22      	cmp	r3, #34	; 0x22
 8007066:	d10d      	bne.n	8007084 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7ff f81c 	bl	80060bc <HAL_I2C_SlaveRxCpltCallback>
}
 8007084:	bf00      	nop
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	080073d9 	.word	0x080073d9
 8007090:	ffff0000 	.word	0xffff0000

08007094 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d002      	beq.n	80070b6 <I2C_Slave_AF+0x22>
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d129      	bne.n	800710a <I2C_Slave_AF+0x76>
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	2b28      	cmp	r3, #40	; 0x28
 80070ba:	d126      	bne.n	800710a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a2c      	ldr	r2, [pc, #176]	; (8007170 <I2C_Slave_AF+0xdc>)
 80070c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070d0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070da:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ea:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7fe fff2 	bl	80060ec <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007108:	e02e      	b.n	8007168 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800710a:	7bfb      	ldrb	r3, [r7, #15]
 800710c:	2b21      	cmp	r3, #33	; 0x21
 800710e:	d126      	bne.n	800715e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a17      	ldr	r2, [pc, #92]	; (8007170 <I2C_Slave_AF+0xdc>)
 8007114:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2221      	movs	r2, #33	; 0x21
 800711a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2220      	movs	r2, #32
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800713a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007144:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007154:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7fe ffa6 	bl	80060a8 <HAL_I2C_SlaveTxCpltCallback>
}
 800715c:	e004      	b.n	8007168 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007166:	615a      	str	r2, [r3, #20]
}
 8007168:	bf00      	nop
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	ffff0000 	.word	0xffff0000

08007174 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007182:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800718a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	2b10      	cmp	r3, #16
 8007190:	d002      	beq.n	8007198 <I2C_ITError+0x24>
 8007192:	7bbb      	ldrb	r3, [r7, #14]
 8007194:	2b40      	cmp	r3, #64	; 0x40
 8007196:	d10a      	bne.n	80071ae <I2C_ITError+0x3a>
 8007198:	7bfb      	ldrb	r3, [r7, #15]
 800719a:	2b22      	cmp	r3, #34	; 0x22
 800719c:	d107      	bne.n	80071ae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071ac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071b4:	2b28      	cmp	r3, #40	; 0x28
 80071b6:	d107      	bne.n	80071c8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2228      	movs	r2, #40	; 0x28
 80071c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80071c6:	e015      	b.n	80071f4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071d6:	d00a      	beq.n	80071ee <I2C_ITError+0x7a>
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	2b60      	cmp	r3, #96	; 0x60
 80071dc:	d007      	beq.n	80071ee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007202:	d162      	bne.n	80072ca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007212:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007218:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b01      	cmp	r3, #1
 8007220:	d020      	beq.n	8007264 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007226:	4a6a      	ldr	r2, [pc, #424]	; (80073d0 <I2C_ITError+0x25c>)
 8007228:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722e:	4618      	mov	r0, r3
 8007230:	f7fd fe12 	bl	8004e58 <HAL_DMA_Abort_IT>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	f000 8089 	beq.w	800734e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0201 	bic.w	r2, r2, #1
 800724a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2220      	movs	r2, #32
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800725e:	4610      	mov	r0, r2
 8007260:	4798      	blx	r3
 8007262:	e074      	b.n	800734e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	4a59      	ldr	r2, [pc, #356]	; (80073d0 <I2C_ITError+0x25c>)
 800726a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	4618      	mov	r0, r3
 8007272:	f7fd fdf1 	bl	8004e58 <HAL_DMA_Abort_IT>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d068      	beq.n	800734e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007286:	2b40      	cmp	r3, #64	; 0x40
 8007288:	d10b      	bne.n	80072a2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	b2d2      	uxtb	r2, r2
 8007296:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	1c5a      	adds	r2, r3, #1
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0201 	bic.w	r2, r2, #1
 80072b0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072c4:	4610      	mov	r0, r2
 80072c6:	4798      	blx	r3
 80072c8:	e041      	b.n	800734e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b60      	cmp	r3, #96	; 0x60
 80072d4:	d125      	bne.n	8007322 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2220      	movs	r2, #32
 80072da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ee:	2b40      	cmp	r3, #64	; 0x40
 80072f0:	d10b      	bne.n	800730a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	691a      	ldr	r2, [r3, #16]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	b2d2      	uxtb	r2, r2
 80072fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f022 0201 	bic.w	r2, r2, #1
 8007318:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7fe ff0e 	bl	800613c <HAL_I2C_AbortCpltCallback>
 8007320:	e015      	b.n	800734e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732c:	2b40      	cmp	r3, #64	; 0x40
 800732e:	d10b      	bne.n	8007348 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	691a      	ldr	r2, [r3, #16]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7fe feed 	bl	8006128 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10e      	bne.n	800737c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007364:	2b00      	cmp	r3, #0
 8007366:	d109      	bne.n	800737c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800736e:	2b00      	cmp	r3, #0
 8007370:	d104      	bne.n	800737c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007378:	2b00      	cmp	r3, #0
 800737a:	d007      	beq.n	800738c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800738a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007392:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b04      	cmp	r3, #4
 800739e:	d113      	bne.n	80073c8 <I2C_ITError+0x254>
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
 80073a2:	2b28      	cmp	r3, #40	; 0x28
 80073a4:	d110      	bne.n	80073c8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a0a      	ldr	r2, [pc, #40]	; (80073d4 <I2C_ITError+0x260>)
 80073aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7fe fe92 	bl	80060ec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80073c8:	bf00      	nop
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	080073d9 	.word	0x080073d9
 80073d4:	ffff0000 	.word	0xffff0000

080073d8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80073f2:	4b4b      	ldr	r3, [pc, #300]	; (8007520 <I2C_DMAAbort+0x148>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	08db      	lsrs	r3, r3, #3
 80073f8:	4a4a      	ldr	r2, [pc, #296]	; (8007524 <I2C_DMAAbort+0x14c>)
 80073fa:	fba2 2303 	umull	r2, r3, r2, r3
 80073fe:	0a1a      	lsrs	r2, r3, #8
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	00da      	lsls	r2, r3, #3
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d106      	bne.n	8007420 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	f043 0220 	orr.w	r2, r3, #32
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800741e:	e00a      	b.n	8007436 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	3b01      	subs	r3, #1
 8007424:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007434:	d0ea      	beq.n	800740c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743a:	2b00      	cmp	r3, #0
 800743c:	d003      	beq.n	8007446 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007442:	2200      	movs	r2, #0
 8007444:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007452:	2200      	movs	r2, #0
 8007454:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007464:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2200      	movs	r2, #0
 800746a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007478:	2200      	movs	r2, #0
 800747a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	2200      	movs	r2, #0
 800748a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 0201 	bic.w	r2, r2, #1
 800749a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b60      	cmp	r3, #96	; 0x60
 80074a6:	d10e      	bne.n	80074c6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	2200      	movs	r2, #0
 80074bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80074be:	6978      	ldr	r0, [r7, #20]
 80074c0:	f7fe fe3c 	bl	800613c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80074c4:	e027      	b.n	8007516 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80074c6:	7cfb      	ldrb	r3, [r7, #19]
 80074c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80074cc:	2b28      	cmp	r3, #40	; 0x28
 80074ce:	d117      	bne.n	8007500 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0201 	orr.w	r2, r2, #1
 80074de:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	2200      	movs	r2, #0
 80074f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2228      	movs	r2, #40	; 0x28
 80074fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80074fe:	e007      	b.n	8007510 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2220      	movs	r2, #32
 8007504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007510:	6978      	ldr	r0, [r7, #20]
 8007512:	f7fe fe09 	bl	8006128 <HAL_I2C_ErrorCallback>
}
 8007516:	bf00      	nop
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	20000018 	.word	0x20000018
 8007524:	14f8b589 	.word	0x14f8b589

08007528 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007534:	4b13      	ldr	r3, [pc, #76]	; (8007584 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	08db      	lsrs	r3, r3, #3
 800753a:	4a13      	ldr	r2, [pc, #76]	; (8007588 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800753c:	fba2 2303 	umull	r2, r3, r2, r3
 8007540:	0a1a      	lsrs	r2, r3, #8
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3b01      	subs	r3, #1
 800754e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d107      	bne.n	8007566 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	f043 0220 	orr.w	r2, r3, #32
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e008      	b.n	8007578 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007574:	d0e9      	beq.n	800754a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	20000018 	.word	0x20000018
 8007588:	14f8b589 	.word	0x14f8b589

0800758c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007598:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800759c:	d103      	bne.n	80075a6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80075a4:	e007      	b.n	80075b6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075aa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80075ae:	d102      	bne.n	80075b6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2208      	movs	r2, #8
 80075b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
	...

080075c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e264      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d075      	beq.n	80076ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075e2:	4ba3      	ldr	r3, [pc, #652]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f003 030c 	and.w	r3, r3, #12
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d00c      	beq.n	8007608 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075ee:	4ba0      	ldr	r3, [pc, #640]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075f6:	2b08      	cmp	r3, #8
 80075f8:	d112      	bne.n	8007620 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075fa:	4b9d      	ldr	r3, [pc, #628]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007606:	d10b      	bne.n	8007620 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007608:	4b99      	ldr	r3, [pc, #612]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d05b      	beq.n	80076cc <HAL_RCC_OscConfig+0x108>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d157      	bne.n	80076cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e23f      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007628:	d106      	bne.n	8007638 <HAL_RCC_OscConfig+0x74>
 800762a:	4b91      	ldr	r3, [pc, #580]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a90      	ldr	r2, [pc, #576]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	e01d      	b.n	8007674 <HAL_RCC_OscConfig+0xb0>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007640:	d10c      	bne.n	800765c <HAL_RCC_OscConfig+0x98>
 8007642:	4b8b      	ldr	r3, [pc, #556]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a8a      	ldr	r2, [pc, #552]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800764c:	6013      	str	r3, [r2, #0]
 800764e:	4b88      	ldr	r3, [pc, #544]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a87      	ldr	r2, [pc, #540]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	e00b      	b.n	8007674 <HAL_RCC_OscConfig+0xb0>
 800765c:	4b84      	ldr	r3, [pc, #528]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a83      	ldr	r2, [pc, #524]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	4b81      	ldr	r3, [pc, #516]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a80      	ldr	r2, [pc, #512]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 800766e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d013      	beq.n	80076a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800767c:	f7fd f958 	bl	8004930 <HAL_GetTick>
 8007680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007682:	e008      	b.n	8007696 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007684:	f7fd f954 	bl	8004930 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b64      	cmp	r3, #100	; 0x64
 8007690:	d901      	bls.n	8007696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e204      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007696:	4b76      	ldr	r3, [pc, #472]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d0f0      	beq.n	8007684 <HAL_RCC_OscConfig+0xc0>
 80076a2:	e014      	b.n	80076ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076a4:	f7fd f944 	bl	8004930 <HAL_GetTick>
 80076a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076aa:	e008      	b.n	80076be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076ac:	f7fd f940 	bl	8004930 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b64      	cmp	r3, #100	; 0x64
 80076b8:	d901      	bls.n	80076be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e1f0      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076be:	4b6c      	ldr	r3, [pc, #432]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1f0      	bne.n	80076ac <HAL_RCC_OscConfig+0xe8>
 80076ca:	e000      	b.n	80076ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d063      	beq.n	80077a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076da:	4b65      	ldr	r3, [pc, #404]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f003 030c 	and.w	r3, r3, #12
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00b      	beq.n	80076fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076e6:	4b62      	ldr	r3, [pc, #392]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076ee:	2b08      	cmp	r3, #8
 80076f0:	d11c      	bne.n	800772c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076f2:	4b5f      	ldr	r3, [pc, #380]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d116      	bne.n	800772c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076fe:	4b5c      	ldr	r3, [pc, #368]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d005      	beq.n	8007716 <HAL_RCC_OscConfig+0x152>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d001      	beq.n	8007716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e1c4      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007716:	4b56      	ldr	r3, [pc, #344]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	00db      	lsls	r3, r3, #3
 8007724:	4952      	ldr	r1, [pc, #328]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007726:	4313      	orrs	r3, r2
 8007728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800772a:	e03a      	b.n	80077a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d020      	beq.n	8007776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007734:	4b4f      	ldr	r3, [pc, #316]	; (8007874 <HAL_RCC_OscConfig+0x2b0>)
 8007736:	2201      	movs	r2, #1
 8007738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800773a:	f7fd f8f9 	bl	8004930 <HAL_GetTick>
 800773e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007740:	e008      	b.n	8007754 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007742:	f7fd f8f5 	bl	8004930 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d901      	bls.n	8007754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e1a5      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007754:	4b46      	ldr	r3, [pc, #280]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0f0      	beq.n	8007742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007760:	4b43      	ldr	r3, [pc, #268]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	00db      	lsls	r3, r3, #3
 800776e:	4940      	ldr	r1, [pc, #256]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007770:	4313      	orrs	r3, r2
 8007772:	600b      	str	r3, [r1, #0]
 8007774:	e015      	b.n	80077a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007776:	4b3f      	ldr	r3, [pc, #252]	; (8007874 <HAL_RCC_OscConfig+0x2b0>)
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800777c:	f7fd f8d8 	bl	8004930 <HAL_GetTick>
 8007780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007782:	e008      	b.n	8007796 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007784:	f7fd f8d4 	bl	8004930 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	2b02      	cmp	r3, #2
 8007790:	d901      	bls.n	8007796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e184      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007796:	4b36      	ldr	r3, [pc, #216]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1f0      	bne.n	8007784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0308 	and.w	r3, r3, #8
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d030      	beq.n	8007810 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d016      	beq.n	80077e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077b6:	4b30      	ldr	r3, [pc, #192]	; (8007878 <HAL_RCC_OscConfig+0x2b4>)
 80077b8:	2201      	movs	r2, #1
 80077ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077bc:	f7fd f8b8 	bl	8004930 <HAL_GetTick>
 80077c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077c2:	e008      	b.n	80077d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077c4:	f7fd f8b4 	bl	8004930 <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d901      	bls.n	80077d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e164      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077d6:	4b26      	ldr	r3, [pc, #152]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 80077d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d0f0      	beq.n	80077c4 <HAL_RCC_OscConfig+0x200>
 80077e2:	e015      	b.n	8007810 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077e4:	4b24      	ldr	r3, [pc, #144]	; (8007878 <HAL_RCC_OscConfig+0x2b4>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077ea:	f7fd f8a1 	bl	8004930 <HAL_GetTick>
 80077ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077f0:	e008      	b.n	8007804 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077f2:	f7fd f89d 	bl	8004930 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d901      	bls.n	8007804 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e14d      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007804:	4b1a      	ldr	r3, [pc, #104]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1f0      	bne.n	80077f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0304 	and.w	r3, r3, #4
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 80a0 	beq.w	800795e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800781e:	2300      	movs	r3, #0
 8007820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007822:	4b13      	ldr	r3, [pc, #76]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10f      	bne.n	800784e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800782e:	2300      	movs	r3, #0
 8007830:	60bb      	str	r3, [r7, #8]
 8007832:	4b0f      	ldr	r3, [pc, #60]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	4a0e      	ldr	r2, [pc, #56]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800783c:	6413      	str	r3, [r2, #64]	; 0x40
 800783e:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <HAL_RCC_OscConfig+0x2ac>)
 8007840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007846:	60bb      	str	r3, [r7, #8]
 8007848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800784a:	2301      	movs	r3, #1
 800784c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800784e:	4b0b      	ldr	r3, [pc, #44]	; (800787c <HAL_RCC_OscConfig+0x2b8>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007856:	2b00      	cmp	r3, #0
 8007858:	d121      	bne.n	800789e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800785a:	4b08      	ldr	r3, [pc, #32]	; (800787c <HAL_RCC_OscConfig+0x2b8>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a07      	ldr	r2, [pc, #28]	; (800787c <HAL_RCC_OscConfig+0x2b8>)
 8007860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007866:	f7fd f863 	bl	8004930 <HAL_GetTick>
 800786a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800786c:	e011      	b.n	8007892 <HAL_RCC_OscConfig+0x2ce>
 800786e:	bf00      	nop
 8007870:	40023800 	.word	0x40023800
 8007874:	42470000 	.word	0x42470000
 8007878:	42470e80 	.word	0x42470e80
 800787c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007880:	f7fd f856 	bl	8004930 <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	2b02      	cmp	r3, #2
 800788c:	d901      	bls.n	8007892 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e106      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007892:	4b85      	ldr	r3, [pc, #532]	; (8007aa8 <HAL_RCC_OscConfig+0x4e4>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800789a:	2b00      	cmp	r3, #0
 800789c:	d0f0      	beq.n	8007880 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d106      	bne.n	80078b4 <HAL_RCC_OscConfig+0x2f0>
 80078a6:	4b81      	ldr	r3, [pc, #516]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 80078a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078aa:	4a80      	ldr	r2, [pc, #512]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 80078ac:	f043 0301 	orr.w	r3, r3, #1
 80078b0:	6713      	str	r3, [r2, #112]	; 0x70
 80078b2:	e01c      	b.n	80078ee <HAL_RCC_OscConfig+0x32a>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	2b05      	cmp	r3, #5
 80078ba:	d10c      	bne.n	80078d6 <HAL_RCC_OscConfig+0x312>
 80078bc:	4b7b      	ldr	r3, [pc, #492]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 80078be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c0:	4a7a      	ldr	r2, [pc, #488]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 80078c2:	f043 0304 	orr.w	r3, r3, #4
 80078c6:	6713      	str	r3, [r2, #112]	; 0x70
 80078c8:	4b78      	ldr	r3, [pc, #480]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 80078ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078cc:	4a77      	ldr	r2, [pc, #476]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 80078ce:	f043 0301 	orr.w	r3, r3, #1
 80078d2:	6713      	str	r3, [r2, #112]	; 0x70
 80078d4:	e00b      	b.n	80078ee <HAL_RCC_OscConfig+0x32a>
 80078d6:	4b75      	ldr	r3, [pc, #468]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 80078d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078da:	4a74      	ldr	r2, [pc, #464]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 80078dc:	f023 0301 	bic.w	r3, r3, #1
 80078e0:	6713      	str	r3, [r2, #112]	; 0x70
 80078e2:	4b72      	ldr	r3, [pc, #456]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 80078e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e6:	4a71      	ldr	r2, [pc, #452]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 80078e8:	f023 0304 	bic.w	r3, r3, #4
 80078ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d015      	beq.n	8007922 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078f6:	f7fd f81b 	bl	8004930 <HAL_GetTick>
 80078fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078fc:	e00a      	b.n	8007914 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078fe:	f7fd f817 	bl	8004930 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	f241 3288 	movw	r2, #5000	; 0x1388
 800790c:	4293      	cmp	r3, r2
 800790e:	d901      	bls.n	8007914 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e0c5      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007914:	4b65      	ldr	r3, [pc, #404]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 8007916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007918:	f003 0302 	and.w	r3, r3, #2
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0ee      	beq.n	80078fe <HAL_RCC_OscConfig+0x33a>
 8007920:	e014      	b.n	800794c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007922:	f7fd f805 	bl	8004930 <HAL_GetTick>
 8007926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007928:	e00a      	b.n	8007940 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800792a:	f7fd f801 	bl	8004930 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	f241 3288 	movw	r2, #5000	; 0x1388
 8007938:	4293      	cmp	r3, r2
 800793a:	d901      	bls.n	8007940 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e0af      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007940:	4b5a      	ldr	r3, [pc, #360]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 8007942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1ee      	bne.n	800792a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800794c:	7dfb      	ldrb	r3, [r7, #23]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d105      	bne.n	800795e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007952:	4b56      	ldr	r3, [pc, #344]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	4a55      	ldr	r2, [pc, #340]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 8007958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800795c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 809b 	beq.w	8007a9e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007968:	4b50      	ldr	r3, [pc, #320]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f003 030c 	and.w	r3, r3, #12
 8007970:	2b08      	cmp	r3, #8
 8007972:	d05c      	beq.n	8007a2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	2b02      	cmp	r3, #2
 800797a:	d141      	bne.n	8007a00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800797c:	4b4c      	ldr	r3, [pc, #304]	; (8007ab0 <HAL_RCC_OscConfig+0x4ec>)
 800797e:	2200      	movs	r2, #0
 8007980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007982:	f7fc ffd5 	bl	8004930 <HAL_GetTick>
 8007986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007988:	e008      	b.n	800799c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800798a:	f7fc ffd1 	bl	8004930 <HAL_GetTick>
 800798e:	4602      	mov	r2, r0
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	2b02      	cmp	r3, #2
 8007996:	d901      	bls.n	800799c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	e081      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800799c:	4b43      	ldr	r3, [pc, #268]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1f0      	bne.n	800798a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	69da      	ldr	r2, [r3, #28]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	431a      	orrs	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b6:	019b      	lsls	r3, r3, #6
 80079b8:	431a      	orrs	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079be:	085b      	lsrs	r3, r3, #1
 80079c0:	3b01      	subs	r3, #1
 80079c2:	041b      	lsls	r3, r3, #16
 80079c4:	431a      	orrs	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ca:	061b      	lsls	r3, r3, #24
 80079cc:	4937      	ldr	r1, [pc, #220]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 80079ce:	4313      	orrs	r3, r2
 80079d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079d2:	4b37      	ldr	r3, [pc, #220]	; (8007ab0 <HAL_RCC_OscConfig+0x4ec>)
 80079d4:	2201      	movs	r2, #1
 80079d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079d8:	f7fc ffaa 	bl	8004930 <HAL_GetTick>
 80079dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079de:	e008      	b.n	80079f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079e0:	f7fc ffa6 	bl	8004930 <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e056      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079f2:	4b2e      	ldr	r3, [pc, #184]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d0f0      	beq.n	80079e0 <HAL_RCC_OscConfig+0x41c>
 80079fe:	e04e      	b.n	8007a9e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a00:	4b2b      	ldr	r3, [pc, #172]	; (8007ab0 <HAL_RCC_OscConfig+0x4ec>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a06:	f7fc ff93 	bl	8004930 <HAL_GetTick>
 8007a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a0c:	e008      	b.n	8007a20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a0e:	f7fc ff8f 	bl	8004930 <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d901      	bls.n	8007a20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e03f      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a20:	4b22      	ldr	r3, [pc, #136]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1f0      	bne.n	8007a0e <HAL_RCC_OscConfig+0x44a>
 8007a2c:	e037      	b.n	8007a9e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d101      	bne.n	8007a3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e032      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a3a:	4b1c      	ldr	r3, [pc, #112]	; (8007aac <HAL_RCC_OscConfig+0x4e8>)
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d028      	beq.n	8007a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d121      	bne.n	8007a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d11a      	bne.n	8007a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a70:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d111      	bne.n	8007a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a80:	085b      	lsrs	r3, r3, #1
 8007a82:	3b01      	subs	r3, #1
 8007a84:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d107      	bne.n	8007a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d001      	beq.n	8007a9e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e000      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	40007000 	.word	0x40007000
 8007aac:	40023800 	.word	0x40023800
 8007ab0:	42470060 	.word	0x42470060

08007ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e0cc      	b.n	8007c62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ac8:	4b68      	ldr	r3, [pc, #416]	; (8007c6c <HAL_RCC_ClockConfig+0x1b8>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0307 	and.w	r3, r3, #7
 8007ad0:	683a      	ldr	r2, [r7, #0]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d90c      	bls.n	8007af0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ad6:	4b65      	ldr	r3, [pc, #404]	; (8007c6c <HAL_RCC_ClockConfig+0x1b8>)
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	b2d2      	uxtb	r2, r2
 8007adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ade:	4b63      	ldr	r3, [pc, #396]	; (8007c6c <HAL_RCC_ClockConfig+0x1b8>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0307 	and.w	r3, r3, #7
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d001      	beq.n	8007af0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e0b8      	b.n	8007c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0302 	and.w	r3, r3, #2
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d020      	beq.n	8007b3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d005      	beq.n	8007b14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b08:	4b59      	ldr	r3, [pc, #356]	; (8007c70 <HAL_RCC_ClockConfig+0x1bc>)
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	4a58      	ldr	r2, [pc, #352]	; (8007c70 <HAL_RCC_ClockConfig+0x1bc>)
 8007b0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0308 	and.w	r3, r3, #8
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d005      	beq.n	8007b2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b20:	4b53      	ldr	r3, [pc, #332]	; (8007c70 <HAL_RCC_ClockConfig+0x1bc>)
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	4a52      	ldr	r2, [pc, #328]	; (8007c70 <HAL_RCC_ClockConfig+0x1bc>)
 8007b26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b2c:	4b50      	ldr	r3, [pc, #320]	; (8007c70 <HAL_RCC_ClockConfig+0x1bc>)
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	494d      	ldr	r1, [pc, #308]	; (8007c70 <HAL_RCC_ClockConfig+0x1bc>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d044      	beq.n	8007bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d107      	bne.n	8007b62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b52:	4b47      	ldr	r3, [pc, #284]	; (8007c70 <HAL_RCC_ClockConfig+0x1bc>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d119      	bne.n	8007b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e07f      	b.n	8007c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d003      	beq.n	8007b72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d107      	bne.n	8007b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b72:	4b3f      	ldr	r3, [pc, #252]	; (8007c70 <HAL_RCC_ClockConfig+0x1bc>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d109      	bne.n	8007b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e06f      	b.n	8007c62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b82:	4b3b      	ldr	r3, [pc, #236]	; (8007c70 <HAL_RCC_ClockConfig+0x1bc>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0302 	and.w	r3, r3, #2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e067      	b.n	8007c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b92:	4b37      	ldr	r3, [pc, #220]	; (8007c70 <HAL_RCC_ClockConfig+0x1bc>)
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f023 0203 	bic.w	r2, r3, #3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	4934      	ldr	r1, [pc, #208]	; (8007c70 <HAL_RCC_ClockConfig+0x1bc>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ba4:	f7fc fec4 	bl	8004930 <HAL_GetTick>
 8007ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007baa:	e00a      	b.n	8007bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bac:	f7fc fec0 	bl	8004930 <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d901      	bls.n	8007bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e04f      	b.n	8007c62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bc2:	4b2b      	ldr	r3, [pc, #172]	; (8007c70 <HAL_RCC_ClockConfig+0x1bc>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f003 020c 	and.w	r2, r3, #12
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d1eb      	bne.n	8007bac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007bd4:	4b25      	ldr	r3, [pc, #148]	; (8007c6c <HAL_RCC_ClockConfig+0x1b8>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0307 	and.w	r3, r3, #7
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d20c      	bcs.n	8007bfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007be2:	4b22      	ldr	r3, [pc, #136]	; (8007c6c <HAL_RCC_ClockConfig+0x1b8>)
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bea:	4b20      	ldr	r3, [pc, #128]	; (8007c6c <HAL_RCC_ClockConfig+0x1b8>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0307 	and.w	r3, r3, #7
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d001      	beq.n	8007bfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e032      	b.n	8007c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0304 	and.w	r3, r3, #4
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d008      	beq.n	8007c1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c08:	4b19      	ldr	r3, [pc, #100]	; (8007c70 <HAL_RCC_ClockConfig+0x1bc>)
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	4916      	ldr	r1, [pc, #88]	; (8007c70 <HAL_RCC_ClockConfig+0x1bc>)
 8007c16:	4313      	orrs	r3, r2
 8007c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 0308 	and.w	r3, r3, #8
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d009      	beq.n	8007c3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c26:	4b12      	ldr	r3, [pc, #72]	; (8007c70 <HAL_RCC_ClockConfig+0x1bc>)
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	490e      	ldr	r1, [pc, #56]	; (8007c70 <HAL_RCC_ClockConfig+0x1bc>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c3a:	f000 f821 	bl	8007c80 <HAL_RCC_GetSysClockFreq>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	4b0b      	ldr	r3, [pc, #44]	; (8007c70 <HAL_RCC_ClockConfig+0x1bc>)
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	091b      	lsrs	r3, r3, #4
 8007c46:	f003 030f 	and.w	r3, r3, #15
 8007c4a:	490a      	ldr	r1, [pc, #40]	; (8007c74 <HAL_RCC_ClockConfig+0x1c0>)
 8007c4c:	5ccb      	ldrb	r3, [r1, r3]
 8007c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c52:	4a09      	ldr	r2, [pc, #36]	; (8007c78 <HAL_RCC_ClockConfig+0x1c4>)
 8007c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c56:	4b09      	ldr	r3, [pc, #36]	; (8007c7c <HAL_RCC_ClockConfig+0x1c8>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fc fe24 	bl	80048a8 <HAL_InitTick>

  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	40023c00 	.word	0x40023c00
 8007c70:	40023800 	.word	0x40023800
 8007c74:	0800a35c 	.word	0x0800a35c
 8007c78:	20000018 	.word	0x20000018
 8007c7c:	2000001c 	.word	0x2000001c

08007c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007c84:	b084      	sub	sp, #16
 8007c86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	607b      	str	r3, [r7, #4]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	2300      	movs	r3, #0
 8007c92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007c94:	2300      	movs	r3, #0
 8007c96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c98:	4b67      	ldr	r3, [pc, #412]	; (8007e38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f003 030c 	and.w	r3, r3, #12
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d00d      	beq.n	8007cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	f200 80bd 	bhi.w	8007e24 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d002      	beq.n	8007cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d003      	beq.n	8007cba <HAL_RCC_GetSysClockFreq+0x3a>
 8007cb2:	e0b7      	b.n	8007e24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007cb4:	4b61      	ldr	r3, [pc, #388]	; (8007e3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007cb6:	60bb      	str	r3, [r7, #8]
       break;
 8007cb8:	e0b7      	b.n	8007e2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007cba:	4b61      	ldr	r3, [pc, #388]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007cbc:	60bb      	str	r3, [r7, #8]
      break;
 8007cbe:	e0b4      	b.n	8007e2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007cc0:	4b5d      	ldr	r3, [pc, #372]	; (8007e38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007cca:	4b5b      	ldr	r3, [pc, #364]	; (8007e38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d04d      	beq.n	8007d72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cd6:	4b58      	ldr	r3, [pc, #352]	; (8007e38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	099b      	lsrs	r3, r3, #6
 8007cdc:	461a      	mov	r2, r3
 8007cde:	f04f 0300 	mov.w	r3, #0
 8007ce2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007ce6:	f04f 0100 	mov.w	r1, #0
 8007cea:	ea02 0800 	and.w	r8, r2, r0
 8007cee:	ea03 0901 	and.w	r9, r3, r1
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	f04f 0200 	mov.w	r2, #0
 8007cfa:	f04f 0300 	mov.w	r3, #0
 8007cfe:	014b      	lsls	r3, r1, #5
 8007d00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d04:	0142      	lsls	r2, r0, #5
 8007d06:	4610      	mov	r0, r2
 8007d08:	4619      	mov	r1, r3
 8007d0a:	ebb0 0008 	subs.w	r0, r0, r8
 8007d0e:	eb61 0109 	sbc.w	r1, r1, r9
 8007d12:	f04f 0200 	mov.w	r2, #0
 8007d16:	f04f 0300 	mov.w	r3, #0
 8007d1a:	018b      	lsls	r3, r1, #6
 8007d1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007d20:	0182      	lsls	r2, r0, #6
 8007d22:	1a12      	subs	r2, r2, r0
 8007d24:	eb63 0301 	sbc.w	r3, r3, r1
 8007d28:	f04f 0000 	mov.w	r0, #0
 8007d2c:	f04f 0100 	mov.w	r1, #0
 8007d30:	00d9      	lsls	r1, r3, #3
 8007d32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d36:	00d0      	lsls	r0, r2, #3
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	eb12 0208 	adds.w	r2, r2, r8
 8007d40:	eb43 0309 	adc.w	r3, r3, r9
 8007d44:	f04f 0000 	mov.w	r0, #0
 8007d48:	f04f 0100 	mov.w	r1, #0
 8007d4c:	0259      	lsls	r1, r3, #9
 8007d4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007d52:	0250      	lsls	r0, r2, #9
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	f04f 0300 	mov.w	r3, #0
 8007d64:	f7f9 f822 	bl	8000dac <__aeabi_uldivmod>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	e04a      	b.n	8007e08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d72:	4b31      	ldr	r3, [pc, #196]	; (8007e38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	099b      	lsrs	r3, r3, #6
 8007d78:	461a      	mov	r2, r3
 8007d7a:	f04f 0300 	mov.w	r3, #0
 8007d7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d82:	f04f 0100 	mov.w	r1, #0
 8007d86:	ea02 0400 	and.w	r4, r2, r0
 8007d8a:	ea03 0501 	and.w	r5, r3, r1
 8007d8e:	4620      	mov	r0, r4
 8007d90:	4629      	mov	r1, r5
 8007d92:	f04f 0200 	mov.w	r2, #0
 8007d96:	f04f 0300 	mov.w	r3, #0
 8007d9a:	014b      	lsls	r3, r1, #5
 8007d9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007da0:	0142      	lsls	r2, r0, #5
 8007da2:	4610      	mov	r0, r2
 8007da4:	4619      	mov	r1, r3
 8007da6:	1b00      	subs	r0, r0, r4
 8007da8:	eb61 0105 	sbc.w	r1, r1, r5
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	f04f 0300 	mov.w	r3, #0
 8007db4:	018b      	lsls	r3, r1, #6
 8007db6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007dba:	0182      	lsls	r2, r0, #6
 8007dbc:	1a12      	subs	r2, r2, r0
 8007dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8007dc2:	f04f 0000 	mov.w	r0, #0
 8007dc6:	f04f 0100 	mov.w	r1, #0
 8007dca:	00d9      	lsls	r1, r3, #3
 8007dcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007dd0:	00d0      	lsls	r0, r2, #3
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	1912      	adds	r2, r2, r4
 8007dd8:	eb45 0303 	adc.w	r3, r5, r3
 8007ddc:	f04f 0000 	mov.w	r0, #0
 8007de0:	f04f 0100 	mov.w	r1, #0
 8007de4:	0299      	lsls	r1, r3, #10
 8007de6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007dea:	0290      	lsls	r0, r2, #10
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	4610      	mov	r0, r2
 8007df2:	4619      	mov	r1, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	461a      	mov	r2, r3
 8007df8:	f04f 0300 	mov.w	r3, #0
 8007dfc:	f7f8 ffd6 	bl	8000dac <__aeabi_uldivmod>
 8007e00:	4602      	mov	r2, r0
 8007e02:	460b      	mov	r3, r1
 8007e04:	4613      	mov	r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e08:	4b0b      	ldr	r3, [pc, #44]	; (8007e38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	0c1b      	lsrs	r3, r3, #16
 8007e0e:	f003 0303 	and.w	r3, r3, #3
 8007e12:	3301      	adds	r3, #1
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e20:	60bb      	str	r3, [r7, #8]
      break;
 8007e22:	e002      	b.n	8007e2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e24:	4b05      	ldr	r3, [pc, #20]	; (8007e3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007e26:	60bb      	str	r3, [r7, #8]
      break;
 8007e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e2a:	68bb      	ldr	r3, [r7, #8]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007e36:	bf00      	nop
 8007e38:	40023800 	.word	0x40023800
 8007e3c:	00f42400 	.word	0x00f42400
 8007e40:	007a1200 	.word	0x007a1200

08007e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e48:	4b03      	ldr	r3, [pc, #12]	; (8007e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	20000018 	.word	0x20000018

08007e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e60:	f7ff fff0 	bl	8007e44 <HAL_RCC_GetHCLKFreq>
 8007e64:	4602      	mov	r2, r0
 8007e66:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	0a9b      	lsrs	r3, r3, #10
 8007e6c:	f003 0307 	and.w	r3, r3, #7
 8007e70:	4903      	ldr	r1, [pc, #12]	; (8007e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e72:	5ccb      	ldrb	r3, [r1, r3]
 8007e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	40023800 	.word	0x40023800
 8007e80:	0800a36c 	.word	0x0800a36c

08007e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e88:	f7ff ffdc 	bl	8007e44 <HAL_RCC_GetHCLKFreq>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	0b5b      	lsrs	r3, r3, #13
 8007e94:	f003 0307 	and.w	r3, r3, #7
 8007e98:	4903      	ldr	r1, [pc, #12]	; (8007ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e9a:	5ccb      	ldrb	r3, [r1, r3]
 8007e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	40023800 	.word	0x40023800
 8007ea8:	0800a36c 	.word	0x0800a36c

08007eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e041      	b.n	8007f42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d106      	bne.n	8007ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7fc faaa 	bl	800442c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3304      	adds	r3, #4
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4610      	mov	r0, r2
 8007eec:	f000 fdda 	bl	8008aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
	...

08007f4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d001      	beq.n	8007f64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e03c      	b.n	8007fde <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a1e      	ldr	r2, [pc, #120]	; (8007fec <HAL_TIM_Base_Start+0xa0>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d018      	beq.n	8007fa8 <HAL_TIM_Base_Start+0x5c>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f7e:	d013      	beq.n	8007fa8 <HAL_TIM_Base_Start+0x5c>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a1a      	ldr	r2, [pc, #104]	; (8007ff0 <HAL_TIM_Base_Start+0xa4>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d00e      	beq.n	8007fa8 <HAL_TIM_Base_Start+0x5c>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a19      	ldr	r2, [pc, #100]	; (8007ff4 <HAL_TIM_Base_Start+0xa8>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d009      	beq.n	8007fa8 <HAL_TIM_Base_Start+0x5c>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a17      	ldr	r2, [pc, #92]	; (8007ff8 <HAL_TIM_Base_Start+0xac>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d004      	beq.n	8007fa8 <HAL_TIM_Base_Start+0x5c>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a16      	ldr	r2, [pc, #88]	; (8007ffc <HAL_TIM_Base_Start+0xb0>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d111      	bne.n	8007fcc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f003 0307 	and.w	r3, r3, #7
 8007fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2b06      	cmp	r3, #6
 8007fb8:	d010      	beq.n	8007fdc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f042 0201 	orr.w	r2, r2, #1
 8007fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fca:	e007      	b.n	8007fdc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f042 0201 	orr.w	r2, r2, #1
 8007fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	40010000 	.word	0x40010000
 8007ff0:	40000400 	.word	0x40000400
 8007ff4:	40000800 	.word	0x40000800
 8007ff8:	40000c00 	.word	0x40000c00
 8007ffc:	40014000 	.word	0x40014000

08008000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b01      	cmp	r3, #1
 8008012:	d001      	beq.n	8008018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e044      	b.n	80080a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2202      	movs	r2, #2
 800801c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68da      	ldr	r2, [r3, #12]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0201 	orr.w	r2, r2, #1
 800802e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a1e      	ldr	r2, [pc, #120]	; (80080b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d018      	beq.n	800806c <HAL_TIM_Base_Start_IT+0x6c>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008042:	d013      	beq.n	800806c <HAL_TIM_Base_Start_IT+0x6c>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a1a      	ldr	r2, [pc, #104]	; (80080b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d00e      	beq.n	800806c <HAL_TIM_Base_Start_IT+0x6c>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a19      	ldr	r2, [pc, #100]	; (80080b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d009      	beq.n	800806c <HAL_TIM_Base_Start_IT+0x6c>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a17      	ldr	r2, [pc, #92]	; (80080bc <HAL_TIM_Base_Start_IT+0xbc>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d004      	beq.n	800806c <HAL_TIM_Base_Start_IT+0x6c>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a16      	ldr	r2, [pc, #88]	; (80080c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d111      	bne.n	8008090 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f003 0307 	and.w	r3, r3, #7
 8008076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2b06      	cmp	r3, #6
 800807c:	d010      	beq.n	80080a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f042 0201 	orr.w	r2, r2, #1
 800808c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800808e:	e007      	b.n	80080a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f042 0201 	orr.w	r2, r2, #1
 800809e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	40010000 	.word	0x40010000
 80080b4:	40000400 	.word	0x40000400
 80080b8:	40000800 	.word	0x40000800
 80080bc:	40000c00 	.word	0x40000c00
 80080c0:	40014000 	.word	0x40014000

080080c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e041      	b.n	800815a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d106      	bne.n	80080f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f839 	bl	8008162 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3304      	adds	r3, #4
 8008100:	4619      	mov	r1, r3
 8008102:	4610      	mov	r0, r2
 8008104:	f000 fcce 	bl	8008aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008162:	b480      	push	{r7}
 8008164:	b083      	sub	sp, #12
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800816a:	bf00      	nop
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
	...

08008178 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d109      	bne.n	800819c <HAL_TIM_PWM_Start+0x24>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b01      	cmp	r3, #1
 8008192:	bf14      	ite	ne
 8008194:	2301      	movne	r3, #1
 8008196:	2300      	moveq	r3, #0
 8008198:	b2db      	uxtb	r3, r3
 800819a:	e022      	b.n	80081e2 <HAL_TIM_PWM_Start+0x6a>
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	2b04      	cmp	r3, #4
 80081a0:	d109      	bne.n	80081b6 <HAL_TIM_PWM_Start+0x3e>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	bf14      	ite	ne
 80081ae:	2301      	movne	r3, #1
 80081b0:	2300      	moveq	r3, #0
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	e015      	b.n	80081e2 <HAL_TIM_PWM_Start+0x6a>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	d109      	bne.n	80081d0 <HAL_TIM_PWM_Start+0x58>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	bf14      	ite	ne
 80081c8:	2301      	movne	r3, #1
 80081ca:	2300      	moveq	r3, #0
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	e008      	b.n	80081e2 <HAL_TIM_PWM_Start+0x6a>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b01      	cmp	r3, #1
 80081da:	bf14      	ite	ne
 80081dc:	2301      	movne	r3, #1
 80081de:	2300      	moveq	r3, #0
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e068      	b.n	80082bc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d104      	bne.n	80081fa <HAL_TIM_PWM_Start+0x82>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081f8:	e013      	b.n	8008222 <HAL_TIM_PWM_Start+0xaa>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	d104      	bne.n	800820a <HAL_TIM_PWM_Start+0x92>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2202      	movs	r2, #2
 8008204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008208:	e00b      	b.n	8008222 <HAL_TIM_PWM_Start+0xaa>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b08      	cmp	r3, #8
 800820e:	d104      	bne.n	800821a <HAL_TIM_PWM_Start+0xa2>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008218:	e003      	b.n	8008222 <HAL_TIM_PWM_Start+0xaa>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2202      	movs	r2, #2
 800821e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2201      	movs	r2, #1
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	4618      	mov	r0, r3
 800822c:	f000 fee0 	bl	8008ff0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a23      	ldr	r2, [pc, #140]	; (80082c4 <HAL_TIM_PWM_Start+0x14c>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d107      	bne.n	800824a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008248:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a1d      	ldr	r2, [pc, #116]	; (80082c4 <HAL_TIM_PWM_Start+0x14c>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d018      	beq.n	8008286 <HAL_TIM_PWM_Start+0x10e>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825c:	d013      	beq.n	8008286 <HAL_TIM_PWM_Start+0x10e>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a19      	ldr	r2, [pc, #100]	; (80082c8 <HAL_TIM_PWM_Start+0x150>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d00e      	beq.n	8008286 <HAL_TIM_PWM_Start+0x10e>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a17      	ldr	r2, [pc, #92]	; (80082cc <HAL_TIM_PWM_Start+0x154>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d009      	beq.n	8008286 <HAL_TIM_PWM_Start+0x10e>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a16      	ldr	r2, [pc, #88]	; (80082d0 <HAL_TIM_PWM_Start+0x158>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d004      	beq.n	8008286 <HAL_TIM_PWM_Start+0x10e>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a14      	ldr	r2, [pc, #80]	; (80082d4 <HAL_TIM_PWM_Start+0x15c>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d111      	bne.n	80082aa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f003 0307 	and.w	r3, r3, #7
 8008290:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2b06      	cmp	r3, #6
 8008296:	d010      	beq.n	80082ba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f042 0201 	orr.w	r2, r2, #1
 80082a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a8:	e007      	b.n	80082ba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f042 0201 	orr.w	r2, r2, #1
 80082b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	40010000 	.word	0x40010000
 80082c8:	40000400 	.word	0x40000400
 80082cc:	40000800 	.word	0x40000800
 80082d0:	40000c00 	.word	0x40000c00
 80082d4:	40014000 	.word	0x40014000

080082d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e097      	b.n	800841c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d106      	bne.n	8008306 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7fc f84b 	bl	800439c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2202      	movs	r2, #2
 800830a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6812      	ldr	r2, [r2, #0]
 8008318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800831c:	f023 0307 	bic.w	r3, r3, #7
 8008320:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	3304      	adds	r3, #4
 800832a:	4619      	mov	r1, r3
 800832c:	4610      	mov	r0, r2
 800832e:	f000 fbb9 	bl	8008aa4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	4313      	orrs	r3, r2
 8008352:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800835a:	f023 0303 	bic.w	r3, r3, #3
 800835e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	021b      	lsls	r3, r3, #8
 800836a:	4313      	orrs	r3, r2
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	4313      	orrs	r3, r2
 8008370:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008378:	f023 030c 	bic.w	r3, r3, #12
 800837c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008384:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008388:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	69db      	ldr	r3, [r3, #28]
 8008392:	021b      	lsls	r3, r3, #8
 8008394:	4313      	orrs	r3, r2
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	4313      	orrs	r3, r2
 800839a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	011a      	lsls	r2, r3, #4
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	031b      	lsls	r3, r3, #12
 80083a8:	4313      	orrs	r3, r2
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80083b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80083be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	011b      	lsls	r3, r3, #4
 80083ca:	4313      	orrs	r3, r2
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008434:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800843c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008444:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800844c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d110      	bne.n	8008476 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d102      	bne.n	8008460 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800845a:	7b7b      	ldrb	r3, [r7, #13]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d001      	beq.n	8008464 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e069      	b.n	8008538 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2202      	movs	r2, #2
 8008468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008474:	e031      	b.n	80084da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b04      	cmp	r3, #4
 800847a:	d110      	bne.n	800849e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d102      	bne.n	8008488 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008482:	7b3b      	ldrb	r3, [r7, #12]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d001      	beq.n	800848c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e055      	b.n	8008538 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2202      	movs	r2, #2
 8008498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800849c:	e01d      	b.n	80084da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800849e:	7bfb      	ldrb	r3, [r7, #15]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d108      	bne.n	80084b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d105      	bne.n	80084b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084aa:	7b7b      	ldrb	r3, [r7, #13]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d102      	bne.n	80084b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80084b0:	7b3b      	ldrb	r3, [r7, #12]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d001      	beq.n	80084ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e03e      	b.n	8008538 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2202      	movs	r2, #2
 80084be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2202      	movs	r2, #2
 80084c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2202      	movs	r2, #2
 80084ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2202      	movs	r2, #2
 80084d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d003      	beq.n	80084e8 <HAL_TIM_Encoder_Start+0xc4>
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	d008      	beq.n	80084f8 <HAL_TIM_Encoder_Start+0xd4>
 80084e6:	e00f      	b.n	8008508 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2201      	movs	r2, #1
 80084ee:	2100      	movs	r1, #0
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 fd7d 	bl	8008ff0 <TIM_CCxChannelCmd>
      break;
 80084f6:	e016      	b.n	8008526 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2201      	movs	r2, #1
 80084fe:	2104      	movs	r1, #4
 8008500:	4618      	mov	r0, r3
 8008502:	f000 fd75 	bl	8008ff0 <TIM_CCxChannelCmd>
      break;
 8008506:	e00e      	b.n	8008526 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2201      	movs	r2, #1
 800850e:	2100      	movs	r1, #0
 8008510:	4618      	mov	r0, r3
 8008512:	f000 fd6d 	bl	8008ff0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2201      	movs	r2, #1
 800851c:	2104      	movs	r1, #4
 800851e:	4618      	mov	r0, r3
 8008520:	f000 fd66 	bl	8008ff0 <TIM_CCxChannelCmd>
      break;
 8008524:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f042 0201 	orr.w	r2, r2, #1
 8008534:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	f003 0302 	and.w	r3, r3, #2
 8008552:	2b02      	cmp	r3, #2
 8008554:	d122      	bne.n	800859c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	f003 0302 	and.w	r3, r3, #2
 8008560:	2b02      	cmp	r3, #2
 8008562:	d11b      	bne.n	800859c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f06f 0202 	mvn.w	r2, #2
 800856c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	f003 0303 	and.w	r3, r3, #3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d003      	beq.n	800858a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fa70 	bl	8008a68 <HAL_TIM_IC_CaptureCallback>
 8008588:	e005      	b.n	8008596 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fa62 	bl	8008a54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fa73 	bl	8008a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	f003 0304 	and.w	r3, r3, #4
 80085a6:	2b04      	cmp	r3, #4
 80085a8:	d122      	bne.n	80085f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	f003 0304 	and.w	r3, r3, #4
 80085b4:	2b04      	cmp	r3, #4
 80085b6:	d11b      	bne.n	80085f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f06f 0204 	mvn.w	r2, #4
 80085c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2202      	movs	r2, #2
 80085c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d003      	beq.n	80085de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fa46 	bl	8008a68 <HAL_TIM_IC_CaptureCallback>
 80085dc:	e005      	b.n	80085ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa38 	bl	8008a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fa49 	bl	8008a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	f003 0308 	and.w	r3, r3, #8
 80085fa:	2b08      	cmp	r3, #8
 80085fc:	d122      	bne.n	8008644 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	f003 0308 	and.w	r3, r3, #8
 8008608:	2b08      	cmp	r3, #8
 800860a:	d11b      	bne.n	8008644 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f06f 0208 	mvn.w	r2, #8
 8008614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2204      	movs	r2, #4
 800861a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	f003 0303 	and.w	r3, r3, #3
 8008626:	2b00      	cmp	r3, #0
 8008628:	d003      	beq.n	8008632 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fa1c 	bl	8008a68 <HAL_TIM_IC_CaptureCallback>
 8008630:	e005      	b.n	800863e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fa0e 	bl	8008a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 fa1f 	bl	8008a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	f003 0310 	and.w	r3, r3, #16
 800864e:	2b10      	cmp	r3, #16
 8008650:	d122      	bne.n	8008698 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	f003 0310 	and.w	r3, r3, #16
 800865c:	2b10      	cmp	r3, #16
 800865e:	d11b      	bne.n	8008698 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f06f 0210 	mvn.w	r2, #16
 8008668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2208      	movs	r2, #8
 800866e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f9f2 	bl	8008a68 <HAL_TIM_IC_CaptureCallback>
 8008684:	e005      	b.n	8008692 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f9e4 	bl	8008a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f9f5 	bl	8008a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d10e      	bne.n	80086c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d107      	bne.n	80086c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f06f 0201 	mvn.w	r2, #1
 80086bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7f9 fa8e 	bl	8001be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ce:	2b80      	cmp	r3, #128	; 0x80
 80086d0:	d10e      	bne.n	80086f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086dc:	2b80      	cmp	r3, #128	; 0x80
 80086de:	d107      	bne.n	80086f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fd1e 	bl	800912c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fa:	2b40      	cmp	r3, #64	; 0x40
 80086fc:	d10e      	bne.n	800871c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008708:	2b40      	cmp	r3, #64	; 0x40
 800870a:	d107      	bne.n	800871c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f9ba 	bl	8008a90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	f003 0320 	and.w	r3, r3, #32
 8008726:	2b20      	cmp	r3, #32
 8008728:	d10e      	bne.n	8008748 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	f003 0320 	and.w	r3, r3, #32
 8008734:	2b20      	cmp	r3, #32
 8008736:	d107      	bne.n	8008748 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f06f 0220 	mvn.w	r2, #32
 8008740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fce8 	bl	8009118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008748:	bf00      	nop
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008762:	2b01      	cmp	r3, #1
 8008764:	d101      	bne.n	800876a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008766:	2302      	movs	r3, #2
 8008768:	e0ac      	b.n	80088c4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b0c      	cmp	r3, #12
 8008776:	f200 809f 	bhi.w	80088b8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800877a:	a201      	add	r2, pc, #4	; (adr r2, 8008780 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800877c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008780:	080087b5 	.word	0x080087b5
 8008784:	080088b9 	.word	0x080088b9
 8008788:	080088b9 	.word	0x080088b9
 800878c:	080088b9 	.word	0x080088b9
 8008790:	080087f5 	.word	0x080087f5
 8008794:	080088b9 	.word	0x080088b9
 8008798:	080088b9 	.word	0x080088b9
 800879c:	080088b9 	.word	0x080088b9
 80087a0:	08008837 	.word	0x08008837
 80087a4:	080088b9 	.word	0x080088b9
 80087a8:	080088b9 	.word	0x080088b9
 80087ac:	080088b9 	.word	0x080088b9
 80087b0:	08008877 	.word	0x08008877
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68b9      	ldr	r1, [r7, #8]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f000 f9f2 	bl	8008ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	699a      	ldr	r2, [r3, #24]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f042 0208 	orr.w	r2, r2, #8
 80087ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	699a      	ldr	r2, [r3, #24]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 0204 	bic.w	r2, r2, #4
 80087de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6999      	ldr	r1, [r3, #24]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	691a      	ldr	r2, [r3, #16]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	430a      	orrs	r2, r1
 80087f0:	619a      	str	r2, [r3, #24]
      break;
 80087f2:	e062      	b.n	80088ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68b9      	ldr	r1, [r7, #8]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 fa38 	bl	8008c70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	699a      	ldr	r2, [r3, #24]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800880e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	699a      	ldr	r2, [r3, #24]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800881e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	6999      	ldr	r1, [r3, #24]
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	021a      	lsls	r2, r3, #8
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	430a      	orrs	r2, r1
 8008832:	619a      	str	r2, [r3, #24]
      break;
 8008834:	e041      	b.n	80088ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68b9      	ldr	r1, [r7, #8]
 800883c:	4618      	mov	r0, r3
 800883e:	f000 fa83 	bl	8008d48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	69da      	ldr	r2, [r3, #28]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f042 0208 	orr.w	r2, r2, #8
 8008850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	69da      	ldr	r2, [r3, #28]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f022 0204 	bic.w	r2, r2, #4
 8008860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	69d9      	ldr	r1, [r3, #28]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	691a      	ldr	r2, [r3, #16]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	430a      	orrs	r2, r1
 8008872:	61da      	str	r2, [r3, #28]
      break;
 8008874:	e021      	b.n	80088ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68b9      	ldr	r1, [r7, #8]
 800887c:	4618      	mov	r0, r3
 800887e:	f000 facd 	bl	8008e1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	69da      	ldr	r2, [r3, #28]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	69da      	ldr	r2, [r3, #28]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	69d9      	ldr	r1, [r3, #28]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	021a      	lsls	r2, r3, #8
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	430a      	orrs	r2, r1
 80088b4:	61da      	str	r2, [r3, #28]
      break;
 80088b6:	e000      	b.n	80088ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80088b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d101      	bne.n	80088e4 <HAL_TIM_ConfigClockSource+0x18>
 80088e0:	2302      	movs	r3, #2
 80088e2:	e0b3      	b.n	8008a4c <HAL_TIM_ConfigClockSource+0x180>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2202      	movs	r2, #2
 80088f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008902:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800890a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800891c:	d03e      	beq.n	800899c <HAL_TIM_ConfigClockSource+0xd0>
 800891e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008922:	f200 8087 	bhi.w	8008a34 <HAL_TIM_ConfigClockSource+0x168>
 8008926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800892a:	f000 8085 	beq.w	8008a38 <HAL_TIM_ConfigClockSource+0x16c>
 800892e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008932:	d87f      	bhi.n	8008a34 <HAL_TIM_ConfigClockSource+0x168>
 8008934:	2b70      	cmp	r3, #112	; 0x70
 8008936:	d01a      	beq.n	800896e <HAL_TIM_ConfigClockSource+0xa2>
 8008938:	2b70      	cmp	r3, #112	; 0x70
 800893a:	d87b      	bhi.n	8008a34 <HAL_TIM_ConfigClockSource+0x168>
 800893c:	2b60      	cmp	r3, #96	; 0x60
 800893e:	d050      	beq.n	80089e2 <HAL_TIM_ConfigClockSource+0x116>
 8008940:	2b60      	cmp	r3, #96	; 0x60
 8008942:	d877      	bhi.n	8008a34 <HAL_TIM_ConfigClockSource+0x168>
 8008944:	2b50      	cmp	r3, #80	; 0x50
 8008946:	d03c      	beq.n	80089c2 <HAL_TIM_ConfigClockSource+0xf6>
 8008948:	2b50      	cmp	r3, #80	; 0x50
 800894a:	d873      	bhi.n	8008a34 <HAL_TIM_ConfigClockSource+0x168>
 800894c:	2b40      	cmp	r3, #64	; 0x40
 800894e:	d058      	beq.n	8008a02 <HAL_TIM_ConfigClockSource+0x136>
 8008950:	2b40      	cmp	r3, #64	; 0x40
 8008952:	d86f      	bhi.n	8008a34 <HAL_TIM_ConfigClockSource+0x168>
 8008954:	2b30      	cmp	r3, #48	; 0x30
 8008956:	d064      	beq.n	8008a22 <HAL_TIM_ConfigClockSource+0x156>
 8008958:	2b30      	cmp	r3, #48	; 0x30
 800895a:	d86b      	bhi.n	8008a34 <HAL_TIM_ConfigClockSource+0x168>
 800895c:	2b20      	cmp	r3, #32
 800895e:	d060      	beq.n	8008a22 <HAL_TIM_ConfigClockSource+0x156>
 8008960:	2b20      	cmp	r3, #32
 8008962:	d867      	bhi.n	8008a34 <HAL_TIM_ConfigClockSource+0x168>
 8008964:	2b00      	cmp	r3, #0
 8008966:	d05c      	beq.n	8008a22 <HAL_TIM_ConfigClockSource+0x156>
 8008968:	2b10      	cmp	r3, #16
 800896a:	d05a      	beq.n	8008a22 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800896c:	e062      	b.n	8008a34 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6818      	ldr	r0, [r3, #0]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	6899      	ldr	r1, [r3, #8]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	685a      	ldr	r2, [r3, #4]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	f000 fb17 	bl	8008fb0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008990:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	609a      	str	r2, [r3, #8]
      break;
 800899a:	e04e      	b.n	8008a3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6818      	ldr	r0, [r3, #0]
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	6899      	ldr	r1, [r3, #8]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	f000 fb00 	bl	8008fb0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689a      	ldr	r2, [r3, #8]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089be:	609a      	str	r2, [r3, #8]
      break;
 80089c0:	e03b      	b.n	8008a3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6818      	ldr	r0, [r3, #0]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	6859      	ldr	r1, [r3, #4]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	461a      	mov	r2, r3
 80089d0:	f000 fa74 	bl	8008ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2150      	movs	r1, #80	; 0x50
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 facd 	bl	8008f7a <TIM_ITRx_SetConfig>
      break;
 80089e0:	e02b      	b.n	8008a3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	6859      	ldr	r1, [r3, #4]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	461a      	mov	r2, r3
 80089f0:	f000 fa93 	bl	8008f1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2160      	movs	r1, #96	; 0x60
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 fabd 	bl	8008f7a <TIM_ITRx_SetConfig>
      break;
 8008a00:	e01b      	b.n	8008a3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6818      	ldr	r0, [r3, #0]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	6859      	ldr	r1, [r3, #4]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	f000 fa54 	bl	8008ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2140      	movs	r1, #64	; 0x40
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 faad 	bl	8008f7a <TIM_ITRx_SetConfig>
      break;
 8008a20:	e00b      	b.n	8008a3a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	f000 faa4 	bl	8008f7a <TIM_ITRx_SetConfig>
        break;
 8008a32:	e002      	b.n	8008a3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008a34:	bf00      	nop
 8008a36:	e000      	b.n	8008a3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008a38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a34      	ldr	r2, [pc, #208]	; (8008b88 <TIM_Base_SetConfig+0xe4>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d00f      	beq.n	8008adc <TIM_Base_SetConfig+0x38>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ac2:	d00b      	beq.n	8008adc <TIM_Base_SetConfig+0x38>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a31      	ldr	r2, [pc, #196]	; (8008b8c <TIM_Base_SetConfig+0xe8>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d007      	beq.n	8008adc <TIM_Base_SetConfig+0x38>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a30      	ldr	r2, [pc, #192]	; (8008b90 <TIM_Base_SetConfig+0xec>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d003      	beq.n	8008adc <TIM_Base_SetConfig+0x38>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a2f      	ldr	r2, [pc, #188]	; (8008b94 <TIM_Base_SetConfig+0xf0>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d108      	bne.n	8008aee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a25      	ldr	r2, [pc, #148]	; (8008b88 <TIM_Base_SetConfig+0xe4>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d01b      	beq.n	8008b2e <TIM_Base_SetConfig+0x8a>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008afc:	d017      	beq.n	8008b2e <TIM_Base_SetConfig+0x8a>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a22      	ldr	r2, [pc, #136]	; (8008b8c <TIM_Base_SetConfig+0xe8>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d013      	beq.n	8008b2e <TIM_Base_SetConfig+0x8a>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a21      	ldr	r2, [pc, #132]	; (8008b90 <TIM_Base_SetConfig+0xec>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d00f      	beq.n	8008b2e <TIM_Base_SetConfig+0x8a>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a20      	ldr	r2, [pc, #128]	; (8008b94 <TIM_Base_SetConfig+0xf0>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d00b      	beq.n	8008b2e <TIM_Base_SetConfig+0x8a>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a1f      	ldr	r2, [pc, #124]	; (8008b98 <TIM_Base_SetConfig+0xf4>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d007      	beq.n	8008b2e <TIM_Base_SetConfig+0x8a>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a1e      	ldr	r2, [pc, #120]	; (8008b9c <TIM_Base_SetConfig+0xf8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d003      	beq.n	8008b2e <TIM_Base_SetConfig+0x8a>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a1d      	ldr	r2, [pc, #116]	; (8008ba0 <TIM_Base_SetConfig+0xfc>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d108      	bne.n	8008b40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	689a      	ldr	r2, [r3, #8]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a08      	ldr	r2, [pc, #32]	; (8008b88 <TIM_Base_SetConfig+0xe4>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d103      	bne.n	8008b74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	691a      	ldr	r2, [r3, #16]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	615a      	str	r2, [r3, #20]
}
 8008b7a:	bf00      	nop
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	40010000 	.word	0x40010000
 8008b8c:	40000400 	.word	0x40000400
 8008b90:	40000800 	.word	0x40000800
 8008b94:	40000c00 	.word	0x40000c00
 8008b98:	40014000 	.word	0x40014000
 8008b9c:	40014400 	.word	0x40014400
 8008ba0:	40014800 	.word	0x40014800

08008ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b087      	sub	sp, #28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	f023 0201 	bic.w	r2, r3, #1
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f023 0303 	bic.w	r3, r3, #3
 8008bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f023 0302 	bic.w	r3, r3, #2
 8008bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a1c      	ldr	r2, [pc, #112]	; (8008c6c <TIM_OC1_SetConfig+0xc8>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d10c      	bne.n	8008c1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	f023 0308 	bic.w	r3, r3, #8
 8008c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f023 0304 	bic.w	r3, r3, #4
 8008c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a13      	ldr	r2, [pc, #76]	; (8008c6c <TIM_OC1_SetConfig+0xc8>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d111      	bne.n	8008c46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	695b      	ldr	r3, [r3, #20]
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	621a      	str	r2, [r3, #32]
}
 8008c60:	bf00      	nop
 8008c62:	371c      	adds	r7, #28
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	40010000 	.word	0x40010000

08008c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b087      	sub	sp, #28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	f023 0210 	bic.w	r2, r3, #16
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a1b      	ldr	r3, [r3, #32]
 8008c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	021b      	lsls	r3, r3, #8
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	f023 0320 	bic.w	r3, r3, #32
 8008cba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	011b      	lsls	r3, r3, #4
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a1e      	ldr	r2, [pc, #120]	; (8008d44 <TIM_OC2_SetConfig+0xd4>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d10d      	bne.n	8008cec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	011b      	lsls	r3, r3, #4
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a15      	ldr	r2, [pc, #84]	; (8008d44 <TIM_OC2_SetConfig+0xd4>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d113      	bne.n	8008d1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	621a      	str	r2, [r3, #32]
}
 8008d36:	bf00      	nop
 8008d38:	371c      	adds	r7, #28
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	40010000 	.word	0x40010000

08008d48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b087      	sub	sp, #28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a1b      	ldr	r3, [r3, #32]
 8008d56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 0303 	bic.w	r3, r3, #3
 8008d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	021b      	lsls	r3, r3, #8
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a1d      	ldr	r2, [pc, #116]	; (8008e18 <TIM_OC3_SetConfig+0xd0>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d10d      	bne.n	8008dc2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	021b      	lsls	r3, r3, #8
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a14      	ldr	r2, [pc, #80]	; (8008e18 <TIM_OC3_SetConfig+0xd0>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d113      	bne.n	8008df2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	011b      	lsls	r3, r3, #4
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	011b      	lsls	r3, r3, #4
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	621a      	str	r2, [r3, #32]
}
 8008e0c:	bf00      	nop
 8008e0e:	371c      	adds	r7, #28
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	40010000 	.word	0x40010000

08008e1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b087      	sub	sp, #28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a1b      	ldr	r3, [r3, #32]
 8008e2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a1b      	ldr	r3, [r3, #32]
 8008e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	021b      	lsls	r3, r3, #8
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	031b      	lsls	r3, r3, #12
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a10      	ldr	r2, [pc, #64]	; (8008eb8 <TIM_OC4_SetConfig+0x9c>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d109      	bne.n	8008e90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	695b      	ldr	r3, [r3, #20]
 8008e88:	019b      	lsls	r3, r3, #6
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	621a      	str	r2, [r3, #32]
}
 8008eaa:	bf00      	nop
 8008eac:	371c      	adds	r7, #28
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	40010000 	.word	0x40010000

08008ebc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b087      	sub	sp, #28
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6a1b      	ldr	r3, [r3, #32]
 8008ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6a1b      	ldr	r3, [r3, #32]
 8008ed2:	f023 0201 	bic.w	r2, r3, #1
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	011b      	lsls	r3, r3, #4
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f023 030a 	bic.w	r3, r3, #10
 8008ef8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	621a      	str	r2, [r3, #32]
}
 8008f0e:	bf00      	nop
 8008f10:	371c      	adds	r7, #28
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b087      	sub	sp, #28
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	60f8      	str	r0, [r7, #12]
 8008f22:	60b9      	str	r1, [r7, #8]
 8008f24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	f023 0210 	bic.w	r2, r3, #16
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	031b      	lsls	r3, r3, #12
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	011b      	lsls	r3, r3, #4
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	621a      	str	r2, [r3, #32]
}
 8008f6e:	bf00      	nop
 8008f70:	371c      	adds	r7, #28
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b085      	sub	sp, #20
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	f043 0307 	orr.w	r3, r3, #7
 8008f9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	609a      	str	r2, [r3, #8]
}
 8008fa4:	bf00      	nop
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
 8008fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	021a      	lsls	r2, r3, #8
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	431a      	orrs	r2, r3
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	609a      	str	r2, [r3, #8]
}
 8008fe4:	bf00      	nop
 8008fe6:	371c      	adds	r7, #28
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	f003 031f 	and.w	r3, r3, #31
 8009002:	2201      	movs	r2, #1
 8009004:	fa02 f303 	lsl.w	r3, r2, r3
 8009008:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6a1a      	ldr	r2, [r3, #32]
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	43db      	mvns	r3, r3
 8009012:	401a      	ands	r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6a1a      	ldr	r2, [r3, #32]
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	f003 031f 	and.w	r3, r3, #31
 8009022:	6879      	ldr	r1, [r7, #4]
 8009024:	fa01 f303 	lsl.w	r3, r1, r3
 8009028:	431a      	orrs	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	621a      	str	r2, [r3, #32]
}
 800902e:	bf00      	nop
 8009030:	371c      	adds	r7, #28
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
	...

0800903c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800904c:	2b01      	cmp	r3, #1
 800904e:	d101      	bne.n	8009054 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009050:	2302      	movs	r3, #2
 8009052:	e050      	b.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2202      	movs	r2, #2
 8009060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800907a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	4313      	orrs	r3, r2
 8009084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a1c      	ldr	r2, [pc, #112]	; (8009104 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d018      	beq.n	80090ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090a0:	d013      	beq.n	80090ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a18      	ldr	r2, [pc, #96]	; (8009108 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d00e      	beq.n	80090ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a16      	ldr	r2, [pc, #88]	; (800910c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d009      	beq.n	80090ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a15      	ldr	r2, [pc, #84]	; (8009110 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d004      	beq.n	80090ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a13      	ldr	r2, [pc, #76]	; (8009114 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d10c      	bne.n	80090e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	4313      	orrs	r3, r2
 80090da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3714      	adds	r7, #20
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	40010000 	.word	0x40010000
 8009108:	40000400 	.word	0x40000400
 800910c:	40000800 	.word	0x40000800
 8009110:	40000c00 	.word	0x40000c00
 8009114:	40014000 	.word	0x40014000

08009118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d101      	bne.n	8009152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e03f      	b.n	80091d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009158:	b2db      	uxtb	r3, r3
 800915a:	2b00      	cmp	r3, #0
 800915c:	d106      	bne.n	800916c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f7fb f9d6 	bl	8004518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2224      	movs	r2, #36	; 0x24
 8009170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68da      	ldr	r2, [r3, #12]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009182:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fd51 	bl	8009c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	691a      	ldr	r2, [r3, #16]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009198:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	695a      	ldr	r2, [r3, #20]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68da      	ldr	r2, [r3, #12]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2220      	movs	r2, #32
 80091c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2220      	movs	r2, #32
 80091cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	4613      	mov	r3, r2
 80091e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b20      	cmp	r3, #32
 80091f4:	d153      	bne.n	800929e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <HAL_UART_Transmit_DMA+0x26>
 80091fc:	88fb      	ldrh	r3, [r7, #6]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e04c      	b.n	80092a0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800920c:	2b01      	cmp	r3, #1
 800920e:	d101      	bne.n	8009214 <HAL_UART_Transmit_DMA+0x38>
 8009210:	2302      	movs	r3, #2
 8009212:	e045      	b.n	80092a0 <HAL_UART_Transmit_DMA+0xc4>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	88fa      	ldrh	r2, [r7, #6]
 8009226:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	88fa      	ldrh	r2, [r7, #6]
 800922c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2221      	movs	r2, #33	; 0x21
 8009238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009240:	4a19      	ldr	r2, [pc, #100]	; (80092a8 <HAL_UART_Transmit_DMA+0xcc>)
 8009242:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009248:	4a18      	ldr	r2, [pc, #96]	; (80092ac <HAL_UART_Transmit_DMA+0xd0>)
 800924a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009250:	4a17      	ldr	r2, [pc, #92]	; (80092b0 <HAL_UART_Transmit_DMA+0xd4>)
 8009252:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009258:	2200      	movs	r2, #0
 800925a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800925c:	f107 0308 	add.w	r3, r7, #8
 8009260:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	6819      	ldr	r1, [r3, #0]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	3304      	adds	r3, #4
 8009270:	461a      	mov	r2, r3
 8009272:	88fb      	ldrh	r3, [r7, #6]
 8009274:	f7fb fd28 	bl	8004cc8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009280:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	695a      	ldr	r2, [r3, #20]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009298:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800929a:	2300      	movs	r3, #0
 800929c:	e000      	b.n	80092a0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800929e:	2302      	movs	r3, #2
  }
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3718      	adds	r7, #24
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	080096e9 	.word	0x080096e9
 80092ac:	0800973b 	.word	0x0800973b
 80092b0:	08009823 	.word	0x08009823

080092b4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	4613      	mov	r3, r2
 80092c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2b20      	cmp	r3, #32
 80092cc:	d11d      	bne.n	800930a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <HAL_UART_Receive_DMA+0x26>
 80092d4:	88fb      	ldrh	r3, [r7, #6]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e016      	b.n	800930c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d101      	bne.n	80092ec <HAL_UART_Receive_DMA+0x38>
 80092e8:	2302      	movs	r3, #2
 80092ea:	e00f      	b.n	800930c <HAL_UART_Receive_DMA+0x58>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80092fa:	88fb      	ldrh	r3, [r7, #6]
 80092fc:	461a      	mov	r2, r3
 80092fe:	68b9      	ldr	r1, [r7, #8]
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 fad9 	bl	80098b8 <UART_Start_Receive_DMA>
 8009306:	4603      	mov	r3, r0
 8009308:	e000      	b.n	800930c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800930a:	2302      	movs	r3, #2
  }
}
 800930c:	4618      	mov	r0, r3
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b08a      	sub	sp, #40	; 0x28
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009334:	2300      	movs	r3, #0
 8009336:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009338:	2300      	movs	r3, #0
 800933a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	f003 030f 	and.w	r3, r3, #15
 8009342:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10d      	bne.n	8009366 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934c:	f003 0320 	and.w	r3, r3, #32
 8009350:	2b00      	cmp	r3, #0
 8009352:	d008      	beq.n	8009366 <HAL_UART_IRQHandler+0x52>
 8009354:	6a3b      	ldr	r3, [r7, #32]
 8009356:	f003 0320 	and.w	r3, r3, #32
 800935a:	2b00      	cmp	r3, #0
 800935c:	d003      	beq.n	8009366 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fbcd 	bl	8009afe <UART_Receive_IT>
      return;
 8009364:	e17c      	b.n	8009660 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 80b1 	beq.w	80094d0 <HAL_UART_IRQHandler+0x1bc>
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	f003 0301 	and.w	r3, r3, #1
 8009374:	2b00      	cmp	r3, #0
 8009376:	d105      	bne.n	8009384 <HAL_UART_IRQHandler+0x70>
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800937e:	2b00      	cmp	r3, #0
 8009380:	f000 80a6 	beq.w	80094d0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00a      	beq.n	80093a4 <HAL_UART_IRQHandler+0x90>
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009394:	2b00      	cmp	r3, #0
 8009396:	d005      	beq.n	80093a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939c:	f043 0201 	orr.w	r2, r3, #1
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	f003 0304 	and.w	r3, r3, #4
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00a      	beq.n	80093c4 <HAL_UART_IRQHandler+0xb0>
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d005      	beq.n	80093c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093bc:	f043 0202 	orr.w	r2, r3, #2
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	f003 0302 	and.w	r3, r3, #2
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00a      	beq.n	80093e4 <HAL_UART_IRQHandler+0xd0>
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d005      	beq.n	80093e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093dc:	f043 0204 	orr.w	r2, r3, #4
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	f003 0308 	and.w	r3, r3, #8
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00f      	beq.n	800940e <HAL_UART_IRQHandler+0xfa>
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	f003 0320 	and.w	r3, r3, #32
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d104      	bne.n	8009402 <HAL_UART_IRQHandler+0xee>
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d005      	beq.n	800940e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009406:	f043 0208 	orr.w	r2, r3, #8
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 811f 	beq.w	8009656 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	f003 0320 	and.w	r3, r3, #32
 800941e:	2b00      	cmp	r3, #0
 8009420:	d007      	beq.n	8009432 <HAL_UART_IRQHandler+0x11e>
 8009422:	6a3b      	ldr	r3, [r7, #32]
 8009424:	f003 0320 	and.w	r3, r3, #32
 8009428:	2b00      	cmp	r3, #0
 800942a:	d002      	beq.n	8009432 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fb66 	bl	8009afe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	695b      	ldr	r3, [r3, #20]
 8009438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800943c:	2b40      	cmp	r3, #64	; 0x40
 800943e:	bf0c      	ite	eq
 8009440:	2301      	moveq	r3, #1
 8009442:	2300      	movne	r3, #0
 8009444:	b2db      	uxtb	r3, r3
 8009446:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944c:	f003 0308 	and.w	r3, r3, #8
 8009450:	2b00      	cmp	r3, #0
 8009452:	d102      	bne.n	800945a <HAL_UART_IRQHandler+0x146>
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d031      	beq.n	80094be <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 faa6 	bl	80099ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946a:	2b40      	cmp	r3, #64	; 0x40
 800946c:	d123      	bne.n	80094b6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	695a      	ldr	r2, [r3, #20]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800947c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009482:	2b00      	cmp	r3, #0
 8009484:	d013      	beq.n	80094ae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948a:	4a77      	ldr	r2, [pc, #476]	; (8009668 <HAL_UART_IRQHandler+0x354>)
 800948c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009492:	4618      	mov	r0, r3
 8009494:	f7fb fce0 	bl	8004e58 <HAL_DMA_Abort_IT>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d016      	beq.n	80094cc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80094a8:	4610      	mov	r0, r2
 80094aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ac:	e00e      	b.n	80094cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f904 	bl	80096bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094b4:	e00a      	b.n	80094cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f900 	bl	80096bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094bc:	e006      	b.n	80094cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f8fc 	bl	80096bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80094ca:	e0c4      	b.n	8009656 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094cc:	bf00      	nop
    return;
 80094ce:	e0c2      	b.n	8009656 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	f040 80a2 	bne.w	800961e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80094da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094dc:	f003 0310 	and.w	r3, r3, #16
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f000 809c 	beq.w	800961e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	f003 0310 	and.w	r3, r3, #16
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f000 8096 	beq.w	800961e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094f2:	2300      	movs	r3, #0
 80094f4:	60fb      	str	r3, [r7, #12]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	60fb      	str	r3, [r7, #12]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	60fb      	str	r3, [r7, #12]
 8009506:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009512:	2b40      	cmp	r3, #64	; 0x40
 8009514:	d14f      	bne.n	80095b6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009520:	8a3b      	ldrh	r3, [r7, #16]
 8009522:	2b00      	cmp	r3, #0
 8009524:	f000 8099 	beq.w	800965a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800952c:	8a3a      	ldrh	r2, [r7, #16]
 800952e:	429a      	cmp	r2, r3
 8009530:	f080 8093 	bcs.w	800965a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	8a3a      	ldrh	r2, [r7, #16]
 8009538:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953e:	69db      	ldr	r3, [r3, #28]
 8009540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009544:	d02b      	beq.n	800959e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68da      	ldr	r2, [r3, #12]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009554:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	695a      	ldr	r2, [r3, #20]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f022 0201 	bic.w	r2, r2, #1
 8009564:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	695a      	ldr	r2, [r3, #20]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009574:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2220      	movs	r2, #32
 800957a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68da      	ldr	r2, [r3, #12]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f022 0210 	bic.w	r2, r2, #16
 8009592:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009598:	4618      	mov	r0, r3
 800959a:	f7fb fbed 	bl	8004d78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	4619      	mov	r1, r3
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f88e 	bl	80096d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80095b4:	e051      	b.n	800965a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095be:	b29b      	uxth	r3, r3
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d047      	beq.n	800965e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80095ce:	8a7b      	ldrh	r3, [r7, #18]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d044      	beq.n	800965e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68da      	ldr	r2, [r3, #12]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80095e2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	695a      	ldr	r2, [r3, #20]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f022 0201 	bic.w	r2, r2, #1
 80095f2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68da      	ldr	r2, [r3, #12]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f022 0210 	bic.w	r2, r2, #16
 8009610:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009612:	8a7b      	ldrh	r3, [r7, #18]
 8009614:	4619      	mov	r1, r3
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f85a 	bl	80096d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800961c:	e01f      	b.n	800965e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800961e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009624:	2b00      	cmp	r3, #0
 8009626:	d008      	beq.n	800963a <HAL_UART_IRQHandler+0x326>
 8009628:	6a3b      	ldr	r3, [r7, #32]
 800962a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 f9fb 	bl	8009a2e <UART_Transmit_IT>
    return;
 8009638:	e012      	b.n	8009660 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00d      	beq.n	8009660 <HAL_UART_IRQHandler+0x34c>
 8009644:	6a3b      	ldr	r3, [r7, #32]
 8009646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800964a:	2b00      	cmp	r3, #0
 800964c:	d008      	beq.n	8009660 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fa3d 	bl	8009ace <UART_EndTransmit_IT>
    return;
 8009654:	e004      	b.n	8009660 <HAL_UART_IRQHandler+0x34c>
    return;
 8009656:	bf00      	nop
 8009658:	e002      	b.n	8009660 <HAL_UART_IRQHandler+0x34c>
      return;
 800965a:	bf00      	nop
 800965c:	e000      	b.n	8009660 <HAL_UART_IRQHandler+0x34c>
      return;
 800965e:	bf00      	nop
  }
}
 8009660:	3728      	adds	r7, #40	; 0x28
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	08009a07 	.word	0x08009a07

0800966c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	460b      	mov	r3, r1
 80096da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009700:	2b00      	cmp	r3, #0
 8009702:	d113      	bne.n	800972c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	695a      	ldr	r2, [r3, #20]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009718:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68da      	ldr	r2, [r3, #12]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009728:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800972a:	e002      	b.n	8009732 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f7ff ff9d 	bl	800966c <HAL_UART_TxCpltCallback>
}
 8009732:	bf00      	nop
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009746:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f7ff ff99 	bl	8009680 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800974e:	bf00      	nop
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b084      	sub	sp, #16
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009762:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800976e:	2b00      	cmp	r3, #0
 8009770:	d12a      	bne.n	80097c8 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	68da      	ldr	r2, [r3, #12]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009786:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	695a      	ldr	r2, [r3, #20]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f022 0201 	bic.w	r2, r2, #1
 8009796:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	695a      	ldr	r2, [r3, #20]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097a6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2220      	movs	r2, #32
 80097ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d107      	bne.n	80097c8 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68da      	ldr	r2, [r3, #12]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f022 0210 	bic.w	r2, r2, #16
 80097c6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d106      	bne.n	80097de <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80097d4:	4619      	mov	r1, r3
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f7ff ff7a 	bl	80096d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80097dc:	e002      	b.n	80097e4 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f7ff ff58 	bl	8009694 <HAL_UART_RxCpltCallback>
}
 80097e4:	bf00      	nop
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d108      	bne.n	8009814 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009806:	085b      	lsrs	r3, r3, #1
 8009808:	b29b      	uxth	r3, r3
 800980a:	4619      	mov	r1, r3
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f7ff ff5f 	bl	80096d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009812:	e002      	b.n	800981a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f7ff ff47 	bl	80096a8 <HAL_UART_RxHalfCpltCallback>
}
 800981a:	bf00      	nop
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b084      	sub	sp, #16
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800982a:	2300      	movs	r3, #0
 800982c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009832:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800983e:	2b80      	cmp	r3, #128	; 0x80
 8009840:	bf0c      	ite	eq
 8009842:	2301      	moveq	r3, #1
 8009844:	2300      	movne	r3, #0
 8009846:	b2db      	uxtb	r3, r3
 8009848:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009850:	b2db      	uxtb	r3, r3
 8009852:	2b21      	cmp	r3, #33	; 0x21
 8009854:	d108      	bne.n	8009868 <UART_DMAError+0x46>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d005      	beq.n	8009868 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2200      	movs	r2, #0
 8009860:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009862:	68b8      	ldr	r0, [r7, #8]
 8009864:	f000 f88c 	bl	8009980 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	695b      	ldr	r3, [r3, #20]
 800986e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009872:	2b40      	cmp	r3, #64	; 0x40
 8009874:	bf0c      	ite	eq
 8009876:	2301      	moveq	r3, #1
 8009878:	2300      	movne	r3, #0
 800987a:	b2db      	uxtb	r3, r3
 800987c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b22      	cmp	r3, #34	; 0x22
 8009888:	d108      	bne.n	800989c <UART_DMAError+0x7a>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d005      	beq.n	800989c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	2200      	movs	r2, #0
 8009894:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009896:	68b8      	ldr	r0, [r7, #8]
 8009898:	f000 f888 	bl	80099ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a0:	f043 0210 	orr.w	r2, r3, #16
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098a8:	68b8      	ldr	r0, [r7, #8]
 80098aa:	f7ff ff07 	bl	80096bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098ae:	bf00      	nop
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
	...

080098b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	4613      	mov	r3, r2
 80098c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	88fa      	ldrh	r2, [r7, #6]
 80098d0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2200      	movs	r2, #0
 80098d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2222      	movs	r2, #34	; 0x22
 80098dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e4:	4a23      	ldr	r2, [pc, #140]	; (8009974 <UART_Start_Receive_DMA+0xbc>)
 80098e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ec:	4a22      	ldr	r2, [pc, #136]	; (8009978 <UART_Start_Receive_DMA+0xc0>)
 80098ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f4:	4a21      	ldr	r2, [pc, #132]	; (800997c <UART_Start_Receive_DMA+0xc4>)
 80098f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fc:	2200      	movs	r2, #0
 80098fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009900:	f107 0308 	add.w	r3, r7, #8
 8009904:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3304      	adds	r3, #4
 8009910:	4619      	mov	r1, r3
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	88fb      	ldrh	r3, [r7, #6]
 8009918:	f7fb f9d6 	bl	8004cc8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800991c:	2300      	movs	r3, #0
 800991e:	613b      	str	r3, [r7, #16]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	613b      	str	r3, [r7, #16]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	613b      	str	r3, [r7, #16]
 8009930:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68da      	ldr	r2, [r3, #12]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009948:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	695a      	ldr	r2, [r3, #20]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f042 0201 	orr.w	r2, r2, #1
 8009958:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	695a      	ldr	r2, [r3, #20]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009968:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3718      	adds	r7, #24
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	08009757 	.word	0x08009757
 8009978:	080097ed 	.word	0x080097ed
 800997c:	08009823 	.word	0x08009823

08009980 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68da      	ldr	r2, [r3, #12]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009996:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2220      	movs	r2, #32
 800999c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80099a0:	bf00      	nop
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68da      	ldr	r2, [r3, #12]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80099c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	695a      	ldr	r2, [r3, #20]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f022 0201 	bic.w	r2, r2, #1
 80099d2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d107      	bne.n	80099ec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68da      	ldr	r2, [r3, #12]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f022 0210 	bic.w	r2, r2, #16
 80099ea:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2220      	movs	r2, #32
 80099f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80099fa:	bf00      	nop
 80099fc:	370c      	adds	r7, #12
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr

08009a06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b084      	sub	sp, #16
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2200      	movs	r2, #0
 8009a18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f7ff fe4b 	bl	80096bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a26:	bf00      	nop
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b085      	sub	sp, #20
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b21      	cmp	r3, #33	; 0x21
 8009a40:	d13e      	bne.n	8009ac0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a4a:	d114      	bne.n	8009a76 <UART_Transmit_IT+0x48>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d110      	bne.n	8009a76 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a1b      	ldr	r3, [r3, #32]
 8009a58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	881b      	ldrh	r3, [r3, #0]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a1b      	ldr	r3, [r3, #32]
 8009a6e:	1c9a      	adds	r2, r3, #2
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	621a      	str	r2, [r3, #32]
 8009a74:	e008      	b.n	8009a88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	1c59      	adds	r1, r3, #1
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	6211      	str	r1, [r2, #32]
 8009a80:	781a      	ldrb	r2, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	4619      	mov	r1, r3
 8009a96:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10f      	bne.n	8009abc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68da      	ldr	r2, [r3, #12]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009aaa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68da      	ldr	r2, [r3, #12]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009aba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009abc:	2300      	movs	r3, #0
 8009abe:	e000      	b.n	8009ac2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009ac0:	2302      	movs	r3, #2
  }
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3714      	adds	r7, #20
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b082      	sub	sp, #8
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68da      	ldr	r2, [r3, #12]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ae4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2220      	movs	r2, #32
 8009aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7ff fdbc 	bl	800966c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b084      	sub	sp, #16
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b22      	cmp	r3, #34	; 0x22
 8009b10:	f040 8087 	bne.w	8009c22 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b1c:	d117      	bne.n	8009b4e <UART_Receive_IT+0x50>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d113      	bne.n	8009b4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b46:	1c9a      	adds	r2, r3, #2
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	629a      	str	r2, [r3, #40]	; 0x28
 8009b4c:	e026      	b.n	8009b9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b52:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009b54:	2300      	movs	r3, #0
 8009b56:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b60:	d007      	beq.n	8009b72 <UART_Receive_IT+0x74>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d10a      	bne.n	8009b80 <UART_Receive_IT+0x82>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d106      	bne.n	8009b80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	701a      	strb	r2, [r3, #0]
 8009b7e:	e008      	b.n	8009b92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b96:	1c5a      	adds	r2, r3, #1
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d136      	bne.n	8009c1e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	68da      	ldr	r2, [r3, #12]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f022 0220 	bic.w	r2, r2, #32
 8009bbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	68da      	ldr	r2, [r3, #12]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	695a      	ldr	r2, [r3, #20]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f022 0201 	bic.w	r2, r2, #1
 8009bde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2220      	movs	r2, #32
 8009be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d10e      	bne.n	8009c0e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68da      	ldr	r2, [r3, #12]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f022 0210 	bic.w	r2, r2, #16
 8009bfe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7ff fd62 	bl	80096d0 <HAL_UARTEx_RxEventCallback>
 8009c0c:	e002      	b.n	8009c14 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7ff fd40 	bl	8009694 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	e002      	b.n	8009c24 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	e000      	b.n	8009c24 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009c22:	2302      	movs	r3, #2
  }
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c30:	b09f      	sub	sp, #124	; 0x7c
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c42:	68d9      	ldr	r1, [r3, #12]
 8009c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	ea40 0301 	orr.w	r3, r0, r1
 8009c4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c50:	689a      	ldr	r2, [r3, #8]
 8009c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	431a      	orrs	r2, r3
 8009c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c5a:	695b      	ldr	r3, [r3, #20]
 8009c5c:	431a      	orrs	r2, r3
 8009c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c60:	69db      	ldr	r3, [r3, #28]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009c70:	f021 010c 	bic.w	r1, r1, #12
 8009c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c7a:	430b      	orrs	r3, r1
 8009c7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c8a:	6999      	ldr	r1, [r3, #24]
 8009c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	ea40 0301 	orr.w	r3, r0, r1
 8009c94:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	4bc5      	ldr	r3, [pc, #788]	; (8009fb0 <UART_SetConfig+0x384>)
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d004      	beq.n	8009caa <UART_SetConfig+0x7e>
 8009ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	4bc3      	ldr	r3, [pc, #780]	; (8009fb4 <UART_SetConfig+0x388>)
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d103      	bne.n	8009cb2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009caa:	f7fe f8eb 	bl	8007e84 <HAL_RCC_GetPCLK2Freq>
 8009cae:	6778      	str	r0, [r7, #116]	; 0x74
 8009cb0:	e002      	b.n	8009cb8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009cb2:	f7fe f8d3 	bl	8007e5c <HAL_RCC_GetPCLK1Freq>
 8009cb6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cba:	69db      	ldr	r3, [r3, #28]
 8009cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cc0:	f040 80b6 	bne.w	8009e30 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009cc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cc6:	461c      	mov	r4, r3
 8009cc8:	f04f 0500 	mov.w	r5, #0
 8009ccc:	4622      	mov	r2, r4
 8009cce:	462b      	mov	r3, r5
 8009cd0:	1891      	adds	r1, r2, r2
 8009cd2:	6439      	str	r1, [r7, #64]	; 0x40
 8009cd4:	415b      	adcs	r3, r3
 8009cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8009cd8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009cdc:	1912      	adds	r2, r2, r4
 8009cde:	eb45 0303 	adc.w	r3, r5, r3
 8009ce2:	f04f 0000 	mov.w	r0, #0
 8009ce6:	f04f 0100 	mov.w	r1, #0
 8009cea:	00d9      	lsls	r1, r3, #3
 8009cec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009cf0:	00d0      	lsls	r0, r2, #3
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	1911      	adds	r1, r2, r4
 8009cf8:	6639      	str	r1, [r7, #96]	; 0x60
 8009cfa:	416b      	adcs	r3, r5
 8009cfc:	667b      	str	r3, [r7, #100]	; 0x64
 8009cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	461a      	mov	r2, r3
 8009d04:	f04f 0300 	mov.w	r3, #0
 8009d08:	1891      	adds	r1, r2, r2
 8009d0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009d0c:	415b      	adcs	r3, r3
 8009d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d14:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009d18:	f7f7 f848 	bl	8000dac <__aeabi_uldivmod>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4ba5      	ldr	r3, [pc, #660]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009d22:	fba3 2302 	umull	r2, r3, r3, r2
 8009d26:	095b      	lsrs	r3, r3, #5
 8009d28:	011e      	lsls	r6, r3, #4
 8009d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d2c:	461c      	mov	r4, r3
 8009d2e:	f04f 0500 	mov.w	r5, #0
 8009d32:	4622      	mov	r2, r4
 8009d34:	462b      	mov	r3, r5
 8009d36:	1891      	adds	r1, r2, r2
 8009d38:	6339      	str	r1, [r7, #48]	; 0x30
 8009d3a:	415b      	adcs	r3, r3
 8009d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009d42:	1912      	adds	r2, r2, r4
 8009d44:	eb45 0303 	adc.w	r3, r5, r3
 8009d48:	f04f 0000 	mov.w	r0, #0
 8009d4c:	f04f 0100 	mov.w	r1, #0
 8009d50:	00d9      	lsls	r1, r3, #3
 8009d52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d56:	00d0      	lsls	r0, r2, #3
 8009d58:	4602      	mov	r2, r0
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	1911      	adds	r1, r2, r4
 8009d5e:	65b9      	str	r1, [r7, #88]	; 0x58
 8009d60:	416b      	adcs	r3, r5
 8009d62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	f04f 0300 	mov.w	r3, #0
 8009d6e:	1891      	adds	r1, r2, r2
 8009d70:	62b9      	str	r1, [r7, #40]	; 0x28
 8009d72:	415b      	adcs	r3, r3
 8009d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d7a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009d7e:	f7f7 f815 	bl	8000dac <__aeabi_uldivmod>
 8009d82:	4602      	mov	r2, r0
 8009d84:	460b      	mov	r3, r1
 8009d86:	4b8c      	ldr	r3, [pc, #560]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009d88:	fba3 1302 	umull	r1, r3, r3, r2
 8009d8c:	095b      	lsrs	r3, r3, #5
 8009d8e:	2164      	movs	r1, #100	; 0x64
 8009d90:	fb01 f303 	mul.w	r3, r1, r3
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	00db      	lsls	r3, r3, #3
 8009d98:	3332      	adds	r3, #50	; 0x32
 8009d9a:	4a87      	ldr	r2, [pc, #540]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009da0:	095b      	lsrs	r3, r3, #5
 8009da2:	005b      	lsls	r3, r3, #1
 8009da4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009da8:	441e      	add	r6, r3
 8009daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dac:	4618      	mov	r0, r3
 8009dae:	f04f 0100 	mov.w	r1, #0
 8009db2:	4602      	mov	r2, r0
 8009db4:	460b      	mov	r3, r1
 8009db6:	1894      	adds	r4, r2, r2
 8009db8:	623c      	str	r4, [r7, #32]
 8009dba:	415b      	adcs	r3, r3
 8009dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8009dbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009dc2:	1812      	adds	r2, r2, r0
 8009dc4:	eb41 0303 	adc.w	r3, r1, r3
 8009dc8:	f04f 0400 	mov.w	r4, #0
 8009dcc:	f04f 0500 	mov.w	r5, #0
 8009dd0:	00dd      	lsls	r5, r3, #3
 8009dd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009dd6:	00d4      	lsls	r4, r2, #3
 8009dd8:	4622      	mov	r2, r4
 8009dda:	462b      	mov	r3, r5
 8009ddc:	1814      	adds	r4, r2, r0
 8009dde:	653c      	str	r4, [r7, #80]	; 0x50
 8009de0:	414b      	adcs	r3, r1
 8009de2:	657b      	str	r3, [r7, #84]	; 0x54
 8009de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	461a      	mov	r2, r3
 8009dea:	f04f 0300 	mov.w	r3, #0
 8009dee:	1891      	adds	r1, r2, r2
 8009df0:	61b9      	str	r1, [r7, #24]
 8009df2:	415b      	adcs	r3, r3
 8009df4:	61fb      	str	r3, [r7, #28]
 8009df6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009dfa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009dfe:	f7f6 ffd5 	bl	8000dac <__aeabi_uldivmod>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4b6c      	ldr	r3, [pc, #432]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009e08:	fba3 1302 	umull	r1, r3, r3, r2
 8009e0c:	095b      	lsrs	r3, r3, #5
 8009e0e:	2164      	movs	r1, #100	; 0x64
 8009e10:	fb01 f303 	mul.w	r3, r1, r3
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	00db      	lsls	r3, r3, #3
 8009e18:	3332      	adds	r3, #50	; 0x32
 8009e1a:	4a67      	ldr	r2, [pc, #412]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e20:	095b      	lsrs	r3, r3, #5
 8009e22:	f003 0207 	and.w	r2, r3, #7
 8009e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4432      	add	r2, r6
 8009e2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e2e:	e0b9      	b.n	8009fa4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e32:	461c      	mov	r4, r3
 8009e34:	f04f 0500 	mov.w	r5, #0
 8009e38:	4622      	mov	r2, r4
 8009e3a:	462b      	mov	r3, r5
 8009e3c:	1891      	adds	r1, r2, r2
 8009e3e:	6139      	str	r1, [r7, #16]
 8009e40:	415b      	adcs	r3, r3
 8009e42:	617b      	str	r3, [r7, #20]
 8009e44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009e48:	1912      	adds	r2, r2, r4
 8009e4a:	eb45 0303 	adc.w	r3, r5, r3
 8009e4e:	f04f 0000 	mov.w	r0, #0
 8009e52:	f04f 0100 	mov.w	r1, #0
 8009e56:	00d9      	lsls	r1, r3, #3
 8009e58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009e5c:	00d0      	lsls	r0, r2, #3
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	eb12 0804 	adds.w	r8, r2, r4
 8009e66:	eb43 0905 	adc.w	r9, r3, r5
 8009e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f04f 0100 	mov.w	r1, #0
 8009e74:	f04f 0200 	mov.w	r2, #0
 8009e78:	f04f 0300 	mov.w	r3, #0
 8009e7c:	008b      	lsls	r3, r1, #2
 8009e7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009e82:	0082      	lsls	r2, r0, #2
 8009e84:	4640      	mov	r0, r8
 8009e86:	4649      	mov	r1, r9
 8009e88:	f7f6 ff90 	bl	8000dac <__aeabi_uldivmod>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	4b49      	ldr	r3, [pc, #292]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009e92:	fba3 2302 	umull	r2, r3, r3, r2
 8009e96:	095b      	lsrs	r3, r3, #5
 8009e98:	011e      	lsls	r6, r3, #4
 8009e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f04f 0100 	mov.w	r1, #0
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	1894      	adds	r4, r2, r2
 8009ea8:	60bc      	str	r4, [r7, #8]
 8009eaa:	415b      	adcs	r3, r3
 8009eac:	60fb      	str	r3, [r7, #12]
 8009eae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009eb2:	1812      	adds	r2, r2, r0
 8009eb4:	eb41 0303 	adc.w	r3, r1, r3
 8009eb8:	f04f 0400 	mov.w	r4, #0
 8009ebc:	f04f 0500 	mov.w	r5, #0
 8009ec0:	00dd      	lsls	r5, r3, #3
 8009ec2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009ec6:	00d4      	lsls	r4, r2, #3
 8009ec8:	4622      	mov	r2, r4
 8009eca:	462b      	mov	r3, r5
 8009ecc:	1814      	adds	r4, r2, r0
 8009ece:	64bc      	str	r4, [r7, #72]	; 0x48
 8009ed0:	414b      	adcs	r3, r1
 8009ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f04f 0100 	mov.w	r1, #0
 8009ede:	f04f 0200 	mov.w	r2, #0
 8009ee2:	f04f 0300 	mov.w	r3, #0
 8009ee6:	008b      	lsls	r3, r1, #2
 8009ee8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009eec:	0082      	lsls	r2, r0, #2
 8009eee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009ef2:	f7f6 ff5b 	bl	8000dac <__aeabi_uldivmod>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	460b      	mov	r3, r1
 8009efa:	4b2f      	ldr	r3, [pc, #188]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009efc:	fba3 1302 	umull	r1, r3, r3, r2
 8009f00:	095b      	lsrs	r3, r3, #5
 8009f02:	2164      	movs	r1, #100	; 0x64
 8009f04:	fb01 f303 	mul.w	r3, r1, r3
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	011b      	lsls	r3, r3, #4
 8009f0c:	3332      	adds	r3, #50	; 0x32
 8009f0e:	4a2a      	ldr	r2, [pc, #168]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009f10:	fba2 2303 	umull	r2, r3, r2, r3
 8009f14:	095b      	lsrs	r3, r3, #5
 8009f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f1a:	441e      	add	r6, r3
 8009f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f04f 0100 	mov.w	r1, #0
 8009f24:	4602      	mov	r2, r0
 8009f26:	460b      	mov	r3, r1
 8009f28:	1894      	adds	r4, r2, r2
 8009f2a:	603c      	str	r4, [r7, #0]
 8009f2c:	415b      	adcs	r3, r3
 8009f2e:	607b      	str	r3, [r7, #4]
 8009f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f34:	1812      	adds	r2, r2, r0
 8009f36:	eb41 0303 	adc.w	r3, r1, r3
 8009f3a:	f04f 0400 	mov.w	r4, #0
 8009f3e:	f04f 0500 	mov.w	r5, #0
 8009f42:	00dd      	lsls	r5, r3, #3
 8009f44:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009f48:	00d4      	lsls	r4, r2, #3
 8009f4a:	4622      	mov	r2, r4
 8009f4c:	462b      	mov	r3, r5
 8009f4e:	eb12 0a00 	adds.w	sl, r2, r0
 8009f52:	eb43 0b01 	adc.w	fp, r3, r1
 8009f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f04f 0100 	mov.w	r1, #0
 8009f60:	f04f 0200 	mov.w	r2, #0
 8009f64:	f04f 0300 	mov.w	r3, #0
 8009f68:	008b      	lsls	r3, r1, #2
 8009f6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f6e:	0082      	lsls	r2, r0, #2
 8009f70:	4650      	mov	r0, sl
 8009f72:	4659      	mov	r1, fp
 8009f74:	f7f6 ff1a 	bl	8000dac <__aeabi_uldivmod>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4b0e      	ldr	r3, [pc, #56]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009f7e:	fba3 1302 	umull	r1, r3, r3, r2
 8009f82:	095b      	lsrs	r3, r3, #5
 8009f84:	2164      	movs	r1, #100	; 0x64
 8009f86:	fb01 f303 	mul.w	r3, r1, r3
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	011b      	lsls	r3, r3, #4
 8009f8e:	3332      	adds	r3, #50	; 0x32
 8009f90:	4a09      	ldr	r2, [pc, #36]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009f92:	fba2 2303 	umull	r2, r3, r2, r3
 8009f96:	095b      	lsrs	r3, r3, #5
 8009f98:	f003 020f 	and.w	r2, r3, #15
 8009f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4432      	add	r2, r6
 8009fa2:	609a      	str	r2, [r3, #8]
}
 8009fa4:	bf00      	nop
 8009fa6:	377c      	adds	r7, #124	; 0x7c
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fae:	bf00      	nop
 8009fb0:	40011000 	.word	0x40011000
 8009fb4:	40011400 	.word	0x40011400
 8009fb8:	51eb851f 	.word	0x51eb851f

08009fbc <calloc>:
 8009fbc:	4b02      	ldr	r3, [pc, #8]	; (8009fc8 <calloc+0xc>)
 8009fbe:	460a      	mov	r2, r1
 8009fc0:	4601      	mov	r1, r0
 8009fc2:	6818      	ldr	r0, [r3, #0]
 8009fc4:	f000 b842 	b.w	800a04c <_calloc_r>
 8009fc8:	20000024 	.word	0x20000024

08009fcc <__errno>:
 8009fcc:	4b01      	ldr	r3, [pc, #4]	; (8009fd4 <__errno+0x8>)
 8009fce:	6818      	ldr	r0, [r3, #0]
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	20000024 	.word	0x20000024

08009fd8 <__libc_init_array>:
 8009fd8:	b570      	push	{r4, r5, r6, lr}
 8009fda:	4d0d      	ldr	r5, [pc, #52]	; (800a010 <__libc_init_array+0x38>)
 8009fdc:	4c0d      	ldr	r4, [pc, #52]	; (800a014 <__libc_init_array+0x3c>)
 8009fde:	1b64      	subs	r4, r4, r5
 8009fe0:	10a4      	asrs	r4, r4, #2
 8009fe2:	2600      	movs	r6, #0
 8009fe4:	42a6      	cmp	r6, r4
 8009fe6:	d109      	bne.n	8009ffc <__libc_init_array+0x24>
 8009fe8:	4d0b      	ldr	r5, [pc, #44]	; (800a018 <__libc_init_array+0x40>)
 8009fea:	4c0c      	ldr	r4, [pc, #48]	; (800a01c <__libc_init_array+0x44>)
 8009fec:	f000 f99e 	bl	800a32c <_init>
 8009ff0:	1b64      	subs	r4, r4, r5
 8009ff2:	10a4      	asrs	r4, r4, #2
 8009ff4:	2600      	movs	r6, #0
 8009ff6:	42a6      	cmp	r6, r4
 8009ff8:	d105      	bne.n	800a006 <__libc_init_array+0x2e>
 8009ffa:	bd70      	pop	{r4, r5, r6, pc}
 8009ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a000:	4798      	blx	r3
 800a002:	3601      	adds	r6, #1
 800a004:	e7ee      	b.n	8009fe4 <__libc_init_array+0xc>
 800a006:	f855 3b04 	ldr.w	r3, [r5], #4
 800a00a:	4798      	blx	r3
 800a00c:	3601      	adds	r6, #1
 800a00e:	e7f2      	b.n	8009ff6 <__libc_init_array+0x1e>
 800a010:	0800a384 	.word	0x0800a384
 800a014:	0800a384 	.word	0x0800a384
 800a018:	0800a384 	.word	0x0800a384
 800a01c:	0800a388 	.word	0x0800a388

0800a020 <memcpy>:
 800a020:	440a      	add	r2, r1
 800a022:	4291      	cmp	r1, r2
 800a024:	f100 33ff 	add.w	r3, r0, #4294967295
 800a028:	d100      	bne.n	800a02c <memcpy+0xc>
 800a02a:	4770      	bx	lr
 800a02c:	b510      	push	{r4, lr}
 800a02e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a032:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a036:	4291      	cmp	r1, r2
 800a038:	d1f9      	bne.n	800a02e <memcpy+0xe>
 800a03a:	bd10      	pop	{r4, pc}

0800a03c <memset>:
 800a03c:	4402      	add	r2, r0
 800a03e:	4603      	mov	r3, r0
 800a040:	4293      	cmp	r3, r2
 800a042:	d100      	bne.n	800a046 <memset+0xa>
 800a044:	4770      	bx	lr
 800a046:	f803 1b01 	strb.w	r1, [r3], #1
 800a04a:	e7f9      	b.n	800a040 <memset+0x4>

0800a04c <_calloc_r>:
 800a04c:	b513      	push	{r0, r1, r4, lr}
 800a04e:	434a      	muls	r2, r1
 800a050:	4611      	mov	r1, r2
 800a052:	9201      	str	r2, [sp, #4]
 800a054:	f000 f80a 	bl	800a06c <_malloc_r>
 800a058:	4604      	mov	r4, r0
 800a05a:	b118      	cbz	r0, 800a064 <_calloc_r+0x18>
 800a05c:	9a01      	ldr	r2, [sp, #4]
 800a05e:	2100      	movs	r1, #0
 800a060:	f7ff ffec 	bl	800a03c <memset>
 800a064:	4620      	mov	r0, r4
 800a066:	b002      	add	sp, #8
 800a068:	bd10      	pop	{r4, pc}
	...

0800a06c <_malloc_r>:
 800a06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06e:	1ccd      	adds	r5, r1, #3
 800a070:	f025 0503 	bic.w	r5, r5, #3
 800a074:	3508      	adds	r5, #8
 800a076:	2d0c      	cmp	r5, #12
 800a078:	bf38      	it	cc
 800a07a:	250c      	movcc	r5, #12
 800a07c:	2d00      	cmp	r5, #0
 800a07e:	4606      	mov	r6, r0
 800a080:	db01      	blt.n	800a086 <_malloc_r+0x1a>
 800a082:	42a9      	cmp	r1, r5
 800a084:	d903      	bls.n	800a08e <_malloc_r+0x22>
 800a086:	230c      	movs	r3, #12
 800a088:	6033      	str	r3, [r6, #0]
 800a08a:	2000      	movs	r0, #0
 800a08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a08e:	f000 f857 	bl	800a140 <__malloc_lock>
 800a092:	4921      	ldr	r1, [pc, #132]	; (800a118 <_malloc_r+0xac>)
 800a094:	680a      	ldr	r2, [r1, #0]
 800a096:	4614      	mov	r4, r2
 800a098:	b99c      	cbnz	r4, 800a0c2 <_malloc_r+0x56>
 800a09a:	4f20      	ldr	r7, [pc, #128]	; (800a11c <_malloc_r+0xb0>)
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	b923      	cbnz	r3, 800a0aa <_malloc_r+0x3e>
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	f000 f83c 	bl	800a120 <_sbrk_r>
 800a0a8:	6038      	str	r0, [r7, #0]
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	f000 f837 	bl	800a120 <_sbrk_r>
 800a0b2:	1c43      	adds	r3, r0, #1
 800a0b4:	d123      	bne.n	800a0fe <_malloc_r+0x92>
 800a0b6:	230c      	movs	r3, #12
 800a0b8:	6033      	str	r3, [r6, #0]
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f000 f846 	bl	800a14c <__malloc_unlock>
 800a0c0:	e7e3      	b.n	800a08a <_malloc_r+0x1e>
 800a0c2:	6823      	ldr	r3, [r4, #0]
 800a0c4:	1b5b      	subs	r3, r3, r5
 800a0c6:	d417      	bmi.n	800a0f8 <_malloc_r+0x8c>
 800a0c8:	2b0b      	cmp	r3, #11
 800a0ca:	d903      	bls.n	800a0d4 <_malloc_r+0x68>
 800a0cc:	6023      	str	r3, [r4, #0]
 800a0ce:	441c      	add	r4, r3
 800a0d0:	6025      	str	r5, [r4, #0]
 800a0d2:	e004      	b.n	800a0de <_malloc_r+0x72>
 800a0d4:	6863      	ldr	r3, [r4, #4]
 800a0d6:	42a2      	cmp	r2, r4
 800a0d8:	bf0c      	ite	eq
 800a0da:	600b      	streq	r3, [r1, #0]
 800a0dc:	6053      	strne	r3, [r2, #4]
 800a0de:	4630      	mov	r0, r6
 800a0e0:	f000 f834 	bl	800a14c <__malloc_unlock>
 800a0e4:	f104 000b 	add.w	r0, r4, #11
 800a0e8:	1d23      	adds	r3, r4, #4
 800a0ea:	f020 0007 	bic.w	r0, r0, #7
 800a0ee:	1ac2      	subs	r2, r0, r3
 800a0f0:	d0cc      	beq.n	800a08c <_malloc_r+0x20>
 800a0f2:	1a1b      	subs	r3, r3, r0
 800a0f4:	50a3      	str	r3, [r4, r2]
 800a0f6:	e7c9      	b.n	800a08c <_malloc_r+0x20>
 800a0f8:	4622      	mov	r2, r4
 800a0fa:	6864      	ldr	r4, [r4, #4]
 800a0fc:	e7cc      	b.n	800a098 <_malloc_r+0x2c>
 800a0fe:	1cc4      	adds	r4, r0, #3
 800a100:	f024 0403 	bic.w	r4, r4, #3
 800a104:	42a0      	cmp	r0, r4
 800a106:	d0e3      	beq.n	800a0d0 <_malloc_r+0x64>
 800a108:	1a21      	subs	r1, r4, r0
 800a10a:	4630      	mov	r0, r6
 800a10c:	f000 f808 	bl	800a120 <_sbrk_r>
 800a110:	3001      	adds	r0, #1
 800a112:	d1dd      	bne.n	800a0d0 <_malloc_r+0x64>
 800a114:	e7cf      	b.n	800a0b6 <_malloc_r+0x4a>
 800a116:	bf00      	nop
 800a118:	200004d8 	.word	0x200004d8
 800a11c:	200004dc 	.word	0x200004dc

0800a120 <_sbrk_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	4d06      	ldr	r5, [pc, #24]	; (800a13c <_sbrk_r+0x1c>)
 800a124:	2300      	movs	r3, #0
 800a126:	4604      	mov	r4, r0
 800a128:	4608      	mov	r0, r1
 800a12a:	602b      	str	r3, [r5, #0]
 800a12c:	f7fa fb24 	bl	8004778 <_sbrk>
 800a130:	1c43      	adds	r3, r0, #1
 800a132:	d102      	bne.n	800a13a <_sbrk_r+0x1a>
 800a134:	682b      	ldr	r3, [r5, #0]
 800a136:	b103      	cbz	r3, 800a13a <_sbrk_r+0x1a>
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	bd38      	pop	{r3, r4, r5, pc}
 800a13c:	20000714 	.word	0x20000714

0800a140 <__malloc_lock>:
 800a140:	4801      	ldr	r0, [pc, #4]	; (800a148 <__malloc_lock+0x8>)
 800a142:	f000 b809 	b.w	800a158 <__retarget_lock_acquire_recursive>
 800a146:	bf00      	nop
 800a148:	2000071c 	.word	0x2000071c

0800a14c <__malloc_unlock>:
 800a14c:	4801      	ldr	r0, [pc, #4]	; (800a154 <__malloc_unlock+0x8>)
 800a14e:	f000 b804 	b.w	800a15a <__retarget_lock_release_recursive>
 800a152:	bf00      	nop
 800a154:	2000071c 	.word	0x2000071c

0800a158 <__retarget_lock_acquire_recursive>:
 800a158:	4770      	bx	lr

0800a15a <__retarget_lock_release_recursive>:
 800a15a:	4770      	bx	lr

0800a15c <sqrt>:
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	ed2d 8b02 	vpush	{d8}
 800a162:	ec55 4b10 	vmov	r4, r5, d0
 800a166:	f000 f82d 	bl	800a1c4 <__ieee754_sqrt>
 800a16a:	4b15      	ldr	r3, [pc, #84]	; (800a1c0 <sqrt+0x64>)
 800a16c:	eeb0 8a40 	vmov.f32	s16, s0
 800a170:	eef0 8a60 	vmov.f32	s17, s1
 800a174:	f993 3000 	ldrsb.w	r3, [r3]
 800a178:	3301      	adds	r3, #1
 800a17a:	d019      	beq.n	800a1b0 <sqrt+0x54>
 800a17c:	4622      	mov	r2, r4
 800a17e:	462b      	mov	r3, r5
 800a180:	4620      	mov	r0, r4
 800a182:	4629      	mov	r1, r5
 800a184:	f7f6 fc7e 	bl	8000a84 <__aeabi_dcmpun>
 800a188:	b990      	cbnz	r0, 800a1b0 <sqrt+0x54>
 800a18a:	2200      	movs	r2, #0
 800a18c:	2300      	movs	r3, #0
 800a18e:	4620      	mov	r0, r4
 800a190:	4629      	mov	r1, r5
 800a192:	f7f6 fc4f 	bl	8000a34 <__aeabi_dcmplt>
 800a196:	b158      	cbz	r0, 800a1b0 <sqrt+0x54>
 800a198:	f7ff ff18 	bl	8009fcc <__errno>
 800a19c:	2321      	movs	r3, #33	; 0x21
 800a19e:	6003      	str	r3, [r0, #0]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	4610      	mov	r0, r2
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	f7f6 fafc 	bl	80007a4 <__aeabi_ddiv>
 800a1ac:	ec41 0b18 	vmov	d8, r0, r1
 800a1b0:	eeb0 0a48 	vmov.f32	s0, s16
 800a1b4:	eef0 0a68 	vmov.f32	s1, s17
 800a1b8:	ecbd 8b02 	vpop	{d8}
 800a1bc:	bd38      	pop	{r3, r4, r5, pc}
 800a1be:	bf00      	nop
 800a1c0:	20000088 	.word	0x20000088

0800a1c4 <__ieee754_sqrt>:
 800a1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c8:	ec55 4b10 	vmov	r4, r5, d0
 800a1cc:	4e56      	ldr	r6, [pc, #344]	; (800a328 <__ieee754_sqrt+0x164>)
 800a1ce:	43ae      	bics	r6, r5
 800a1d0:	ee10 0a10 	vmov	r0, s0
 800a1d4:	ee10 3a10 	vmov	r3, s0
 800a1d8:	4629      	mov	r1, r5
 800a1da:	462a      	mov	r2, r5
 800a1dc:	d110      	bne.n	800a200 <__ieee754_sqrt+0x3c>
 800a1de:	ee10 2a10 	vmov	r2, s0
 800a1e2:	462b      	mov	r3, r5
 800a1e4:	f7f6 f9b4 	bl	8000550 <__aeabi_dmul>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	4629      	mov	r1, r5
 800a1f0:	f7f5 fff8 	bl	80001e4 <__adddf3>
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	460d      	mov	r5, r1
 800a1f8:	ec45 4b10 	vmov	d0, r4, r5
 800a1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a200:	2d00      	cmp	r5, #0
 800a202:	dc10      	bgt.n	800a226 <__ieee754_sqrt+0x62>
 800a204:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a208:	4330      	orrs	r0, r6
 800a20a:	d0f5      	beq.n	800a1f8 <__ieee754_sqrt+0x34>
 800a20c:	b15d      	cbz	r5, 800a226 <__ieee754_sqrt+0x62>
 800a20e:	ee10 2a10 	vmov	r2, s0
 800a212:	462b      	mov	r3, r5
 800a214:	ee10 0a10 	vmov	r0, s0
 800a218:	f7f5 ffe2 	bl	80001e0 <__aeabi_dsub>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	f7f6 fac0 	bl	80007a4 <__aeabi_ddiv>
 800a224:	e7e6      	b.n	800a1f4 <__ieee754_sqrt+0x30>
 800a226:	1509      	asrs	r1, r1, #20
 800a228:	d076      	beq.n	800a318 <__ieee754_sqrt+0x154>
 800a22a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a22e:	07ce      	lsls	r6, r1, #31
 800a230:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a234:	bf5e      	ittt	pl
 800a236:	0fda      	lsrpl	r2, r3, #31
 800a238:	005b      	lslpl	r3, r3, #1
 800a23a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a23e:	0fda      	lsrs	r2, r3, #31
 800a240:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a244:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a248:	2000      	movs	r0, #0
 800a24a:	106d      	asrs	r5, r5, #1
 800a24c:	005b      	lsls	r3, r3, #1
 800a24e:	f04f 0e16 	mov.w	lr, #22
 800a252:	4684      	mov	ip, r0
 800a254:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a258:	eb0c 0401 	add.w	r4, ip, r1
 800a25c:	4294      	cmp	r4, r2
 800a25e:	bfde      	ittt	le
 800a260:	1b12      	suble	r2, r2, r4
 800a262:	eb04 0c01 	addle.w	ip, r4, r1
 800a266:	1840      	addle	r0, r0, r1
 800a268:	0052      	lsls	r2, r2, #1
 800a26a:	f1be 0e01 	subs.w	lr, lr, #1
 800a26e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a272:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a276:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a27a:	d1ed      	bne.n	800a258 <__ieee754_sqrt+0x94>
 800a27c:	4671      	mov	r1, lr
 800a27e:	2720      	movs	r7, #32
 800a280:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a284:	4562      	cmp	r2, ip
 800a286:	eb04 060e 	add.w	r6, r4, lr
 800a28a:	dc02      	bgt.n	800a292 <__ieee754_sqrt+0xce>
 800a28c:	d113      	bne.n	800a2b6 <__ieee754_sqrt+0xf2>
 800a28e:	429e      	cmp	r6, r3
 800a290:	d811      	bhi.n	800a2b6 <__ieee754_sqrt+0xf2>
 800a292:	2e00      	cmp	r6, #0
 800a294:	eb06 0e04 	add.w	lr, r6, r4
 800a298:	da43      	bge.n	800a322 <__ieee754_sqrt+0x15e>
 800a29a:	f1be 0f00 	cmp.w	lr, #0
 800a29e:	db40      	blt.n	800a322 <__ieee754_sqrt+0x15e>
 800a2a0:	f10c 0801 	add.w	r8, ip, #1
 800a2a4:	eba2 020c 	sub.w	r2, r2, ip
 800a2a8:	429e      	cmp	r6, r3
 800a2aa:	bf88      	it	hi
 800a2ac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a2b0:	1b9b      	subs	r3, r3, r6
 800a2b2:	4421      	add	r1, r4
 800a2b4:	46c4      	mov	ip, r8
 800a2b6:	0052      	lsls	r2, r2, #1
 800a2b8:	3f01      	subs	r7, #1
 800a2ba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a2be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a2c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a2c6:	d1dd      	bne.n	800a284 <__ieee754_sqrt+0xc0>
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	d006      	beq.n	800a2da <__ieee754_sqrt+0x116>
 800a2cc:	1c4c      	adds	r4, r1, #1
 800a2ce:	bf13      	iteet	ne
 800a2d0:	3101      	addne	r1, #1
 800a2d2:	3001      	addeq	r0, #1
 800a2d4:	4639      	moveq	r1, r7
 800a2d6:	f021 0101 	bicne.w	r1, r1, #1
 800a2da:	1043      	asrs	r3, r0, #1
 800a2dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a2e0:	0849      	lsrs	r1, r1, #1
 800a2e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a2e6:	07c2      	lsls	r2, r0, #31
 800a2e8:	bf48      	it	mi
 800a2ea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a2ee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a2f2:	460c      	mov	r4, r1
 800a2f4:	463d      	mov	r5, r7
 800a2f6:	e77f      	b.n	800a1f8 <__ieee754_sqrt+0x34>
 800a2f8:	0ada      	lsrs	r2, r3, #11
 800a2fa:	3815      	subs	r0, #21
 800a2fc:	055b      	lsls	r3, r3, #21
 800a2fe:	2a00      	cmp	r2, #0
 800a300:	d0fa      	beq.n	800a2f8 <__ieee754_sqrt+0x134>
 800a302:	02d7      	lsls	r7, r2, #11
 800a304:	d50a      	bpl.n	800a31c <__ieee754_sqrt+0x158>
 800a306:	f1c1 0420 	rsb	r4, r1, #32
 800a30a:	fa23 f404 	lsr.w	r4, r3, r4
 800a30e:	1e4d      	subs	r5, r1, #1
 800a310:	408b      	lsls	r3, r1
 800a312:	4322      	orrs	r2, r4
 800a314:	1b41      	subs	r1, r0, r5
 800a316:	e788      	b.n	800a22a <__ieee754_sqrt+0x66>
 800a318:	4608      	mov	r0, r1
 800a31a:	e7f0      	b.n	800a2fe <__ieee754_sqrt+0x13a>
 800a31c:	0052      	lsls	r2, r2, #1
 800a31e:	3101      	adds	r1, #1
 800a320:	e7ef      	b.n	800a302 <__ieee754_sqrt+0x13e>
 800a322:	46e0      	mov	r8, ip
 800a324:	e7be      	b.n	800a2a4 <__ieee754_sqrt+0xe0>
 800a326:	bf00      	nop
 800a328:	7ff00000 	.word	0x7ff00000

0800a32c <_init>:
 800a32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32e:	bf00      	nop
 800a330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a332:	bc08      	pop	{r3}
 800a334:	469e      	mov	lr, r3
 800a336:	4770      	bx	lr

0800a338 <_fini>:
 800a338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33a:	bf00      	nop
 800a33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33e:	bc08      	pop	{r3}
 800a340:	469e      	mov	lr, r3
 800a342:	4770      	bx	lr
